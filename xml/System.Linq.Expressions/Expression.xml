<Type Name="Expression" FullName="System.Linq.Expressions.Expression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bfa7ae83c61b273e7c1b0bbd7bfaff643a4eeb76" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39913523" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Expression extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.Expression" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Expression" />
  <TypeSignature Language="C++ CLI" Value="public ref class Expression abstract" />
  <TypeSignature Language="F#" Value="type Expression = class" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="8671b-101">Udostępnia klasę bazową, z którego są uzyskiwane klas, które reprezentują węzły drzewa wyrażeń.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8671b-101">Provides the base class from which the classes that represent expression tree nodes are derived.</span>
      </span>
      <span data-ttu-id="8671b-102">Zawiera ona także <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic) metodami factory, aby utworzyć różne typy węzłów.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8671b-102">It also contains <see langword="static" /> (<see langword="Shared" /> in Visual Basic) factory methods to create the various node types.</span>
      </span>
      <span data-ttu-id="8671b-103">Jest to <see langword="abstract" /> klasy.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8671b-103">This is an <see langword="abstract" /> class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8671b-104">Poniższy przykład kodu pokazuje sposób tworzenia wyrażenia bloku.</span><span class="sxs-lookup"><span data-stu-id="8671b-104">The following code example shows how to create a block expression.</span></span> <span data-ttu-id="8671b-105">Wyrażenie bloku składa się z dwóch <xref:System.Linq.Expressions.MethodCallExpression> obiektów i jeden <xref:System.Linq.Expressions.ConstantExpression> obiektu.</span><span class="sxs-lookup"><span data-stu-id="8671b-105">The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-106">Tworzy nowe wystąpienie klasy <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-106">Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Expression ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Expression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8671b-107">Tworzy nowe wystąpienie klasy <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-107">Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Expression (System.Linq.Expressions.ExpressionType nodeType, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.Linq.Expressions.ExpressionType nodeType, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Expression(System::Linq::Expressions::ExpressionType nodeType, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Linq.Expressions.Expression : System.Linq.Expressions.ExpressionType * Type -&gt; System.Linq.Expressions.Expression" Usage="new System.Linq.Expressions.Expression (nodeType, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("use a different constructor that does not take ExpressionType. Then override NodeType and Type properties to provide the values that would be specified to this constructor.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="nodeType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="nodeType">
          <span data-ttu-id="8671b-108">
            <see cref="T:System.Linq.Expressions.ExpressionType" /> By ustawić je jako typ węzła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-108">The <see cref="T:System.Linq.Expressions.ExpressionType" /> to set as the node type.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-109">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> To <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-109">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of this <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-110">Inicjuje nowe wystąpienie klasy <see cref="T:System.Linq.Expressions.Expression" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-110">Initializes a new instance of the <see cref="T:System.Linq.Expressions.Expression" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-111">Ten konstruktor jest wywoływana z konstruktorów w klasach pochodnych.</span><span class="sxs-lookup"><span data-stu-id="8671b-111">This constructor is called from constructors in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberSignature Language="F#" Value="abstract member Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression&#xA;override this.Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="expression.Accept visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">
          <span data-ttu-id="8671b-112">Obiekt odwiedzający można znaleźć w tym węźle za pomocą.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-112">The visitor to visit this node with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-113">Wysyła do konkretnej można znaleźć metody dla tego typu węzła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-113">Dispatches to the specific visit method for this node type.</span>
          </span>
          <span data-ttu-id="8671b-114">Na przykład <see cref="T:System.Linq.Expressions.MethodCallExpression" /> wywołania <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-114">For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-115">Wynik odwiedzający tego węzła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-115">The result of visiting this node.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-116">Ta domyślna implementacja dla <xref:System.Linq.Expressions.ExpressionType.Extension> wywołania węzłów <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span><span class="sxs-lookup"><span data-stu-id="8671b-116">This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span> <span data-ttu-id="8671b-117">Przesłonić tę metodę do wywołania do bardziej szczegółowych metody w klasie pochodnej gości z <xref:System.Linq.Expressions.ExpressionVisitor> klasy.</span><span class="sxs-lookup"><span data-stu-id="8671b-117">Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class.</span></span> <span data-ttu-id="8671b-118">Obsługuje on jednak powinny nadal nieznany odwiedzających, wywołując <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span><span class="sxs-lookup"><span data-stu-id="8671b-118">However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-119">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację dodawania arytmetyczne, który nie ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-119">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Add(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Add(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Add : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Add (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-120">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-120">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-121">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-121">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-122">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację dodawania arytmetyczne, który nie ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-122">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-123">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-123">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-124">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-124">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-125"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-125">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-126">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-126">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-127">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-127">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-128"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-128">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-129">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-129">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-130">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-130">Implementing Method</span></span>  
 <span data-ttu-id="8671b-131">Następujące reguły określają wybranej metody wykonawcze dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-131">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-132">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora dodawania <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-132">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-133">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-133">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-134">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-134">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-135">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-135">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-136">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-136">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-137">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-137">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-138">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-138">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-139">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-139">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-140">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-140">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-141">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-141">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-142">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-142">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-143">Typ węzła jest typ wyniku operator dodawania wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-143">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="8671b-144">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-144">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-145">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku operator dodawania wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-145">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-146">Poniższy przykład kodu pokazuje sposób tworzenia wyrażenia, który dodaje dwie liczby całkowite.</span><span class="sxs-lookup"><span data-stu-id="8671b-146">The following code example shows how to create an expression that adds two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#1)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-147">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-147">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-148">Operator dodawania nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-148">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Add(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Add(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Add : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Add (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-149">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-149">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-150">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-150">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-151">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-151">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-152">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację dodawania arytmetyczne, który nie ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-152">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span>
          </span>
          <span data-ttu-id="8671b-153">Implementowanie metoda może być określona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-153">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-154">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-154">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-155">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-155">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-156"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-156">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-157">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-157">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-158">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-158">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-159"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-159">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-160">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-160">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-161">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-161">Implementing Method</span></span>  
 <span data-ttu-id="8671b-162">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-162">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-163">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest implementującej metody dla węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-163">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="8671b-164">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora dodawania <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-164">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-165">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-165">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-166">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-166">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-167">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-167">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-168">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-168">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-169">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-169">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-170">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-170">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-171">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-171">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-172">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-172">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-173">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-173">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-174">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-174">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-175">Typ węzła jest typ wyniku operator dodawania wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-175">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="8671b-176">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-176">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-177">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku operator dodawania wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-177">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-178">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-178">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-179">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-179">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-180">
            <paramref name="method" /> jest <see langword="null" /> i operator dodawania nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-180">
              <paramref name="method" /> is <see langword="null" /> and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-181">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania dodatku, który nie ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-181">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AddAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-182">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-182">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-183">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-183">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-184">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania dodatku, który nie ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-184">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-185">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-185">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8671b-186">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie, które dodaje wartość do zmiennej całkowitej, a następnie przypisuje wynik operacji do zmiennej.</span><span class="sxs-lookup"><span data-stu-id="8671b-186">The following code example shows how to create an expression that adds a value to an integer variable and then assigns the result of the operation to the variable.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#18)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AddAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-187">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-187">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-188">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-188">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-189">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-189">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-190">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania dodatku, który nie ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-190">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-191">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-191">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member AddAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-192">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-192">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-193">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-193">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-194">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-194">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="8671b-195">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-195">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-196">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania dodatku, który nie ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-196">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-197">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-197">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-198">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania dodawania, który ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-198">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AddAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssignChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-199">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-199">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-200">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-200">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-201">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania dodawania, który ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-201">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-202">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-202">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AddAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssignChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-203">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-203">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-204">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-204">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-205">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-205">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-206">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania dodawania, który ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-206">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-207">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-207">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member AddAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddAssignChecked (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-208">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-208">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-209">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-209">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-210">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-210">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="8671b-211">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-211">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-212">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania dodawania, który ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-212">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-213">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-213">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-214">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację dodawania arytmetyczne, która ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-214">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AddChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-215">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-215">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-216">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-216">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-217">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację dodawania arytmetyczne, która ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-217">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-218">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-218">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-219">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-219">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-220"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-220">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-221">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-221">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-222">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-222">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-223"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-223">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-224">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-224">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-225">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-225">Implementing Method</span></span>  
 <span data-ttu-id="8671b-226">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-226">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-227">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora dodawania <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-227">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-228">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-228">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-229">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-229">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-230">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-230">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-231">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-231">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-232">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-232">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-233">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-233">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-234">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-234">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-235">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-235">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-236">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-236">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-237">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-237">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-238">Typ węzła jest typ wyniku operator dodawania wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-238">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="8671b-239">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-239">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-240">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku operator dodawania wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-240">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-241">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-241">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-242">Operator dodawania nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-242">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AddChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AddChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-243">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-243">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-244">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-244">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-245">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-245">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-246">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację dodawania arytmetyczne, która ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-246">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span>
          </span>
          <span data-ttu-id="8671b-247">Implementowanie metoda może być określona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-247">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-248">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-248">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-249">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-249">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-250"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-250">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-251">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-251">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-252">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-252">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-253"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-253">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-254">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-254">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-255">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-255">Implementing Method</span></span>  
 <span data-ttu-id="8671b-256">Implementującej metody dla tej operacji jest wybierany w oparciu o następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="8671b-256">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="8671b-257">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest implementującej metody dla węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-257">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="8671b-258">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora dodawania <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-258">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-259">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-259">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-260">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-260">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-261">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-261">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-262">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-262">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-263">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-263">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-264">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-264">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-265">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-265">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-266">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-266">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-267">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-267">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-268">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-268">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-269">Typ węzła jest typ wyniku operator dodawania wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-269">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="8671b-270">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-270">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-271">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku operator dodawania wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-271">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-272">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-272">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-273">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-273">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-274">
            <paramref name="method" /> jest <see langword="null" /> i operator dodawania nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-274">
              <paramref name="method" /> is <see langword="null" /> and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="And">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-275">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący bitowej <see langword="AND" /> operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-275">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression And(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function And (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ And(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member And : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.And (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-276">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-276">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-277">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-277">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-278">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący bitowej <see langword="AND" /> operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-278">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-279">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.And" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-279">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-280">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-280">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-281"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-281">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-282">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-282">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-283">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-283">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-284"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-284">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-285">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-285">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-286">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-286">Implementing Method</span></span>  
 <span data-ttu-id="8671b-287">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-287">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-288">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora testu koniunkcji `AND` operatora <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-288">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-289">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ typów całkowitych lub wartości logicznej, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-289">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-290">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-290">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-291">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-291">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-292">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-292">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-293">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-293">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-294">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-294">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-295">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-295">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-296">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-296">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-297">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-297">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-298">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-298">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-299">Typ węzła jest typ wyniku jest wstępnie zdefiniowane bitowe `AND` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-299">The type of the node is the result type of the predefined bitwise `AND` operator.</span></span>  
  
-   <span data-ttu-id="8671b-300">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-300">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-301">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku jest wstępnie zdefiniowane bitowe `AND` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-301">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-302">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie, które reprezentuje operację logiczne AND na dwóch wartości logiczne.</span><span class="sxs-lookup"><span data-stu-id="8671b-302">The following code example shows how to create an expression that represents a logical AND operation on two Boolean values.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#2)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-303">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-303">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-304">Operatora testu koniunkcji <see langword="AND" /> operator nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-304">The bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression And(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function And (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ And(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member And : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.And (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-305">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-305">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-306">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-306">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-307">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-307">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-308">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący bitowej <see langword="AND" /> operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-308">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span>
          </span>
          <span data-ttu-id="8671b-309">Implementowanie metoda może być określona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-309">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-310">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.And" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-310">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-311">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-311">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-312"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-312">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-313">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-313">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-314">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-314">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-315"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-315">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-316">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-316">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-317">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-317">Implementing Method</span></span>  
 <span data-ttu-id="8671b-318">Implementującej metody dla tej operacji jest wybierany w oparciu o następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="8671b-318">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="8671b-319">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest implementującej metody dla węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-319">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="8671b-320">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora testu koniunkcji `AND` operatora <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-320">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-321">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ typów całkowitych lub wartości logicznej, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-321">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-322">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-322">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-323">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-323">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-324">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-324">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-325">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-325">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-326">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-326">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-327">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-327">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-328">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-328">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-329">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-329">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-330">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-330">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-331">Typ węzła jest typ wyniku jest wstępnie zdefiniowane bitowe `AND` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-331">The type of the node is the result type of the predefined bitwise `AND` operator.</span></span>  
  
-   <span data-ttu-id="8671b-332">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-332">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-333">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku jest wstępnie zdefiniowane bitowe `AND` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-333">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-334">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-334">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-335">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-335">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-336">
            <paramref name="method" /> jest <see langword="null" /> i operatora testu koniunkcji <see langword="AND" /> operator nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-336">
              <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AndAlso">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-337">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący warunkowe <see langword="AND" /> operacji, która ocenia drugi argument operacji tylko wtedy, gdy pierwszy operand ma wartość <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-337">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="true" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAlso(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAlso (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAlso(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AndAlso : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAlso (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-338">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-338">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-339">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-339">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-340">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący warunkowe <see langword="AND" /> operacji, która ocenia drugi argument operacji tylko wtedy, gdy pierwszy operand ma wartość <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-340">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="true" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-341">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-341">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-342">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-342">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-343"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-343">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-344">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-344">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-345">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-345">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-346"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-346">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-347">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-347">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-348">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-348">Implementing Method</span></span>  
 <span data-ttu-id="8671b-349">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-349">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-350">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora testu koniunkcji `AND` operatora <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-350">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8671b-351">Warunkowe `AND` nie może zostać Przeciążony operator w języku C# lub Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8671b-351">The conditional `AND` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="8671b-352">Jednak warunkową `AND` operator jest obliczane przy użyciu operatora testu koniunkcji `AND` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-352">However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator.</span></span> <span data-ttu-id="8671b-353">W związku z tym, zdefiniowane przez użytkownika przeciążenia operatora testu koniunkcji `AND` operator może być implementującej metody dla tego typu węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-353">Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="8671b-354">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ typów logicznych, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-354">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-355">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-355">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-356">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-356">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-357">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-357">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-358">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-358">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-359">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-359">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-360">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-360">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-361">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-361">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-362">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-362">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-363">`left`. Typ i `right`. Typ są tego samego typu Boolean.</span><span class="sxs-lookup"><span data-stu-id="8671b-363">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="8671b-364">Jeśli `left`. Typ i `right`. Typ nie dopuszczają, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-364">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-365">Typ węzła jest typ wyniku wstępnie zdefiniowanych warunkowe `AND` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-365">The type of the node is the result type of the predefined conditional `AND` operator.</span></span>  
  
-   <span data-ttu-id="8671b-366">Jeśli `left`. Typ i `right`. Typ dopuszczający wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-366">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-367">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku wstępnie zdefiniowanych warunkowe `AND` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-367">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-368">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie, który wykonuje logicznych i operacji na jego dwóch argumentów operacji tylko wtedy, gdy pierwszy operand ma wartość `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-368">The following code example shows how to create an expression that performs a logical AND operation on its two operands only if the first operand evaluates to `true`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#19)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-369">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-369">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-370">Operatora testu koniunkcji <see langword="AND" /> operator nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-370">The bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="8671b-371">- lub - <paramref name="left" />. Typ i <paramref name="right" />. Typ nie są tego samego typu Boolean.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-371">-or-  <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAlso(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAlso (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAlso(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AndAlso : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAlso (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-372">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-372">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-373">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-373">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-374">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-374">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-375">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący warunkowe <see langword="AND" /> operacji, która ocenia drugi argument operacji tylko wtedy, gdy jest to pierwszy argument nie zostanie rozwiązany na wartość true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-375">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand is resolved to true.</span>
          </span>
          <span data-ttu-id="8671b-376">Implementowanie metoda może być określona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-376">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-377">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-377">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-378">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-378">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-379"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-379">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-380">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-380">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-381">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-381">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-382"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-382">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-383">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-383">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-384">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-384">Implementing Method</span></span>  
 <span data-ttu-id="8671b-385">Implementującej metody dla tej operacji jest wybierany w oparciu o następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="8671b-385">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="8671b-386">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest implementującej metody dla węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-386">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="8671b-387">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora testu koniunkcji `AND` operatora <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-387">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8671b-388">Warunkowe `AND` nie może zostać Przeciążony operator w języku C# lub Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8671b-388">The conditional `AND` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="8671b-389">Jednak warunkową `AND` operator jest obliczane przy użyciu operatora testu koniunkcji `AND` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-389">However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator.</span></span> <span data-ttu-id="8671b-390">W związku z tym, zdefiniowane przez użytkownika przeciążenia operatora testu koniunkcji `AND` operator może być implementującej metody dla tego typu węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-390">Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="8671b-391">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ typów logicznych, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-391">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-392">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-392">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-393">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-393">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-394">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-394">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-395">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-395">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-396">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-396">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-397">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-397">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-398">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-398">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-399">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-399">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-400">`left`. Typ i `right`. Typ są tego samego typu Boolean.</span><span class="sxs-lookup"><span data-stu-id="8671b-400">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="8671b-401">Jeśli `left`. Typ i `right`. Typ nie dopuszczają, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-401">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-402">Typ węzła jest typ wyniku wstępnie zdefiniowanych warunkowe `AND` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-402">The type of the node is the result type of the predefined conditional `AND` operator.</span></span>  
  
-   <span data-ttu-id="8671b-403">Jeśli `left`. Typ i `right`. Typ dopuszczający wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-403">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-404">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku wstępnie zdefiniowanych warunkowe `AND` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-404">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-405">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-405">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-406">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-406">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-407">
            <paramref name="method" /> jest <see langword="null" /> i operatora testu koniunkcji <see langword="AND" /> operator nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-407">
              <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="8671b-408">- lub - <paramref name="method" /> jest <see langword="null" /> i <paramref name="left" />. Typ i <paramref name="right" />. Typ nie są tego samego typu Boolean.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-408">-or-  <paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AndAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-409">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący bitowe operacji przypisania i.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-409">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member AndAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-410">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-410">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-411">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-411">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-412">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący bitowe operacji przypisania i.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-412">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-413">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-413">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member AndAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-414">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-414">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-415">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-415">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-416">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-416">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-417">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący bitowe operacji przypisania i.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-417">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-418">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-418">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member AndAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.AndAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-419">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-419">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-420">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-420">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-421">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-421">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="8671b-422">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-422">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-423">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący bitowe operacji przypisania i.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-423">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-424">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-424">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrayAccess">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-425">Tworzy <see cref="T:System.Linq.Expressions.IndexExpression" /> dostępu do tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-425">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access an array.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrayAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression ArrayAccess(class System.Linq.Expressions.Expression array, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayAccess (array As Expression, indexes As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ ArrayAccess(System::Linq::Expressions::Expression ^ array, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayAccess : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.ArrayAccess (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="8671b-426">Wyrażenie, które reprezentuje tablicę wielowymiarową.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-426">An expression that represents the multidimensional array.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="8671b-427">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierające wyrażenia używane do indeksu tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-427">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing expressions used to index the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-428">Tworzy <see cref="T:System.Linq.Expressions.IndexExpression" /> na dostęp do tablicy wielowymiarowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-428">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access a multidimensional array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-429">Utworzony <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-429">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-430">Wyrażenie, które reprezentuje tablicę, można uzyskać za pomocą <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> metodę, lub za pomocą <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> lub <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span><span class="sxs-lookup"><span data-stu-id="8671b-430">The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-431">Poniższy przykład kodu pokazuje, jak zmienić wartości elementu w tablicy wielowymiarowej za pomocą `ArrayAccess` metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-431">The following code example shows how to change the value of an element in a multidimensional array by using the `ArrayAccess` method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#21)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, params System.Linq.Expressions.Expression[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression ArrayAccess(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayAccess (array As Expression, ParamArray indexes As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ ArrayAccess(System::Linq::Expressions::Expression ^ array, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayAccess : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.ArrayAccess (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="8671b-432">Wyrażenie reprezentujące tablicy do indeksu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-432">An expression representing the array to index.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="8671b-433">Tablica, która zawiera wyrażenia używane do indeksu tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-433">An array that contains expressions used to index the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-434">Tworzy <see cref="T:System.Linq.Expressions.IndexExpression" /> dostępu do tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-434">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-435">Utworzony <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-435">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-436">Wyrażenie, które reprezentuje tablicę, można uzyskać za pomocą <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> metodę, lub za pomocą <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> lub <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span><span class="sxs-lookup"><span data-stu-id="8671b-436">The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span></span>  
  
 <span data-ttu-id="8671b-437">Dla tablic wielowymiarowych, użyj <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-437">For multidimensional arrays, use the <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-438">Poniższy przykład kodu pokazuje, jak zmienić wartości elementu tablicy za pomocą `ArrayAccess` metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-438">The following code example shows how to change a value of an array element by using the `ArrayAccess` method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#20)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrayIndex">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-439">Tworzy <see cref="T:System.Linq.Expressions.Expression" /> reprezentujący zastosowania operatora indeksu tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-439">Creates an <see cref="T:System.Linq.Expressions.Expression" /> that represents applying an array index operator.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, indexes As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayIndex : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.ArrayIndex (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="8671b-440">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-440">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="8671b-441">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.Expression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-441">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-442">Tworzy <see cref="T:System.Linq.Expressions.MethodCallExpression" /> reprezentujący zastosowanie operatora indeksu tablicy do tablicy o randze więcej niż jeden port.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-442">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to an array of rank more than one.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-443">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-443">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-444">Każdy element obiektu `indexes` musi mieć <xref:System.Linq.Expressions.Expression.Type%2A> równa <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="8671b-444">Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>.</span></span> <span data-ttu-id="8671b-445"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość `array` musi reprezentować typem tablicy, której pozycję jest zgodna z liczbą elementów w `indexes`.</span><span class="sxs-lookup"><span data-stu-id="8671b-445">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.</span></span>  
  
 <span data-ttu-id="8671b-446">Jeśli ranga `array`. Typ ma wartość 1, ta metoda zwraca <xref:System.Linq.Expressions.BinaryExpression>.</span><span class="sxs-lookup"><span data-stu-id="8671b-446">If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>.</span></span> <span data-ttu-id="8671b-447"><xref:System.Linq.Expressions.BinaryExpression.Left%2A> Właściwość jest ustawiona na `array` i <xref:System.Linq.Expressions.BinaryExpression.Right%2A> właściwość jest ustawiona na pojedynczy element `indexes`.</span><span class="sxs-lookup"><span data-stu-id="8671b-447">The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`.</span></span> <span data-ttu-id="8671b-448"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość <xref:System.Linq.Expressions.BinaryExpression> reprezentuje typ elementu `array`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-448">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.</span></span>  
  
 <span data-ttu-id="8671b-449">Jeśli ranga `array`. Typ jest więcej niż jeden, Metoda ta zwraca <xref:System.Linq.Expressions.MethodCallExpression>.</span><span class="sxs-lookup"><span data-stu-id="8671b-449">If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>.</span></span> <span data-ttu-id="8671b-450"><xref:System.Linq.Expressions.MethodCallExpression.Method%2A> Właściwość jest ustawiona na <xref:System.Reflection.MethodInfo> , który opisuje metody publiczne wystąpienia `Get` na typ reprezentowany przez <xref:System.Linq.Expressions.Expression.Type%2A> właściwość `array`.</span><span class="sxs-lookup"><span data-stu-id="8671b-450">The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-451">Poniższy przykład pokazuje sposób użycia <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> metodę w celu utworzenia <xref:System.Linq.Expressions.MethodCallExpression> reprezentująca indeksowanie w dwuwymiarowej tablicy.</span><span class="sxs-lookup"><span data-stu-id="8671b-451">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]
 [!code-vb[System.Linq.Expressions.Expression#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-452">
            <paramref name="array" /> lub <paramref name="indexes" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-452">
              <paramref name="array" /> or <paramref name="indexes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-453">
            <paramref name="array" />. Typ nie reprezentuje typ tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-453">
              <paramref name="array" />.Type does not represent an array type.</span>
          </span>
          <span data-ttu-id="8671b-454">- lub - ranga <paramref name="array" />. Typ jest niezgodny z liczbą elementów w <paramref name="indexes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-454">-or-  The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.</span>
          </span>
          <span data-ttu-id="8671b-455">- lub - <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwości jednego lub więcej elementów <paramref name="indexes" /> nie reprezentuje <see cref="T:System.Int32" /> typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-455">-or-  The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, index As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, System::Linq::Expressions::Expression ^ index);" />
      <MemberSignature Language="F#" Value="static member ArrayIndex : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ArrayIndex (array, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="index" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="8671b-456">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-456">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="8671b-457">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-457">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-458">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący zastosowania operatora indeksu tablicy do tablicy o rzędzie, jeden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-458">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents applying an array index operator to an array of rank one.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-459">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-459">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-460">`index` musi reprezentować indeksu typu <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="8671b-460">`index` must represent an index of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="8671b-461"><xref:System.Linq.Expressions.BinaryExpression.Method%2A> Właściwość wynikowy <xref:System.Linq.Expressions.BinaryExpression> jest `null`, a oba <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> są ustawione na `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-461">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null`, and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span> <span data-ttu-id="8671b-462"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest równa typ elementu `array`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-462">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the element type of `array`.Type.</span></span> <span data-ttu-id="8671b-463"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-463">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-464">
            <paramref name="array" /> lub <paramref name="index" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-464">
              <paramref name="array" /> or <paramref name="index" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-465">
            <paramref name="array" />. Typ nie reprezentuje typ tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-465">
              <paramref name="array" />.Type does not represent an array type.</span>
          </span>
          <span data-ttu-id="8671b-466">- lub - <paramref name="array" />. Typ reprezentuje typ tablicy, w której pozycję nie jest 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-466">-or-  <paramref name="array" />.Type represents an array type whose rank is not 1.</span>
          </span>
          <span data-ttu-id="8671b-467">- lub - <paramref name="index" />. Typ nie reprezentuje <see cref="T:System.Int32" /> typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-467">-or-  <paramref name="index" />.Type does not represent the <see cref="T:System.Int32" /> type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, params System.Linq.Expressions.Expression[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, ParamArray indexes As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberSignature Language="F#" Value="static member ArrayIndex : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.ArrayIndex (array, indexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="8671b-468">Tablica <see cref="T:System.Linq.Expressions.Expression" /> wystąpień - indeksów dla operacji indeksowania tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-468">An array of <see cref="T:System.Linq.Expressions.Expression" /> instances - indexes for the array index operation.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="8671b-469">Tablica <see cref="T:System.Linq.Expressions.Expression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-469">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-470">Tworzy <see cref="T:System.Linq.Expressions.MethodCallExpression" /> reprezentujący zastosowania operatora indeksu tablicy do tablicy wielowymiarowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-470">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to a multidimensional array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-471">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-471">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-472">Każdy element obiektu `indexes` musi mieć <xref:System.Linq.Expressions.Expression.Type%2A> równa <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="8671b-472">Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>.</span></span> <span data-ttu-id="8671b-473"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość `array` musi reprezentować typem tablicy, której pozycję jest zgodna z liczbą elementów w `indexes`.</span><span class="sxs-lookup"><span data-stu-id="8671b-473">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.</span></span>  
  
 <span data-ttu-id="8671b-474">Jeśli ranga `array`. Typ ma wartość 1, ta metoda zwraca <xref:System.Linq.Expressions.BinaryExpression>.</span><span class="sxs-lookup"><span data-stu-id="8671b-474">If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>.</span></span> <span data-ttu-id="8671b-475"><xref:System.Linq.Expressions.BinaryExpression.Left%2A> Właściwość jest ustawiona na `array` i <xref:System.Linq.Expressions.BinaryExpression.Right%2A> właściwość jest ustawiona na pojedynczy element `indexes`.</span><span class="sxs-lookup"><span data-stu-id="8671b-475">The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`.</span></span> <span data-ttu-id="8671b-476"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość <xref:System.Linq.Expressions.BinaryExpression> reprezentuje typ elementu `array`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-476">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.</span></span>  
  
 <span data-ttu-id="8671b-477">Jeśli ranga `array`. Typ jest więcej niż jeden, Metoda ta zwraca <xref:System.Linq.Expressions.MethodCallExpression>.</span><span class="sxs-lookup"><span data-stu-id="8671b-477">If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>.</span></span> <span data-ttu-id="8671b-478"><xref:System.Linq.Expressions.MethodCallExpression.Method%2A> Właściwość jest ustawiona na <xref:System.Reflection.MethodInfo> , który opisuje metody publiczne wystąpienia `Get` na typ reprezentowany przez <xref:System.Linq.Expressions.Expression.Type%2A> właściwość `array`.</span><span class="sxs-lookup"><span data-stu-id="8671b-478">The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-479">Poniższy przykład pokazuje sposób użycia <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> metodę w celu utworzenia <xref:System.Linq.Expressions.MethodCallExpression> reprezentująca indeksowanie w dwuwymiarowej tablicy.</span><span class="sxs-lookup"><span data-stu-id="8671b-479">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]
 [!code-vb[System.Linq.Expressions.Expression#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-480">
            <paramref name="array" /> lub <paramref name="indexes" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-480">
              <paramref name="array" /> or <paramref name="indexes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-481">
            <paramref name="array" />. Typ nie reprezentuje typ tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-481">
              <paramref name="array" />.Type does not represent an array type.</span>
          </span>
          <span data-ttu-id="8671b-482">- lub - ranga <paramref name="array" />. Typ jest niezgodny z liczbą elementów w <paramref name="indexes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-482">-or-  The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.</span>
          </span>
          <span data-ttu-id="8671b-483">- lub - <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwości jednego lub więcej elementów <paramref name="indexes" /> nie reprezentuje <see cref="T:System.Int32" /> typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-483">-or-  The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayLength">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ArrayLength (System.Linq.Expressions.Expression array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ArrayLength(class System.Linq.Expressions.Expression array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayLength (array As Expression) As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ArrayLength(System::Linq::Expressions::Expression ^ array);" />
      <MemberSignature Language="F#" Value="static member ArrayLength : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.ArrayLength array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="8671b-484">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-484">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-485">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący wyrażenie do uzyskania długości tablicy jednowymiarowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-485">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression for obtaining the length of a one-dimensional array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-486">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> równa właściwości <paramref name="array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-486">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to <paramref name="array" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-487"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość `array` musi reprezentować typu tablicowego.</span><span class="sxs-lookup"><span data-stu-id="8671b-487">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type.</span></span>  
  
 <span data-ttu-id="8671b-488"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.UnaryExpression> jest równa <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="8671b-488">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is equal to <xref:System.Int32>.</span></span> <span data-ttu-id="8671b-489"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Właściwość `null`, a oba <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> są ustawione na `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-489">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`, and both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-490">
            <paramref name="array" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-490">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-491">
            <paramref name="array" />. Typ nie reprezentuje typ tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-491">
              <paramref name="array" />.Type does not represent an array type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Assign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Assign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Assign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Assign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Assign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Assign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Assign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-492">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-492">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-493">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-493">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-494">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operatora przypisania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-494">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-495">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-495">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-496">`Assign` Wyrażenie kopiuje wartości dla typów wartości, a następnie kopiuje odwołań dla typów odwołań.</span><span class="sxs-lookup"><span data-stu-id="8671b-496">The `Assign` expression copies a value for value types, and it copies a reference for reference types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-497">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie, które reprezentuje operację przypisania.</span><span class="sxs-lookup"><span data-stu-id="8671b-497">The following code example shows how to create an expression that represents an assignment operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#12)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Bind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-498">Tworzy <see cref="T:System.Linq.Expressions.MemberAssignment" /> reprezentujący inicjowania elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-498">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MemberInfo member, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberAssignment Bind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberAssignment ^ Bind(System::Reflection::MemberInfo ^ member, System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Bind : System.Reflection.MemberInfo * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MemberAssignment" Usage="System.Linq.Expressions.Expression.Bind (member, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="8671b-499">A <see cref="T:System.Reflection.MemberInfo" /> można ustawić <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-499">A <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="expression">
          <span data-ttu-id="8671b-500">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-500">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-501">Tworzy <see cref="T:System.Linq.Expressions.MemberAssignment" /> reprezentujący inicjowanie ona polem ani właściwością.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-501">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-502">A <see cref="T:System.Linq.Expressions.MemberAssignment" /> zawierający <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> równa <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> i <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> i <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-502">A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-503"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość `expression` musi być możliwe przypisanie typu reprezentowanego przez <xref:System.Reflection.FieldInfo.FieldType%2A> lub <xref:System.Reflection.PropertyInfo.PropertyType%2A> właściwość `member`.</span><span class="sxs-lookup"><span data-stu-id="8671b-503">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.FieldInfo.FieldType%2A> or <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of `member`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-504">
            <paramref name="member" /> lub <paramref name="expression" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-504">
              <paramref name="member" /> or <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-505">
            <paramref name="member" /> nie reprezentuje pole lub właściwość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-505">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="8671b-506">- lub - właściwość reprezentowana przez <paramref name="member" /> nie ma <see langword="set" /> metody dostępu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-506">-or-  The property represented by <paramref name="member" /> does not have a <see langword="set" /> accessor.</span>
          </span>
          <span data-ttu-id="8671b-507">- lub - <paramref name="expression" />. Typ nie jest możliwy do przypisania do typu pola lub właściwości, <paramref name="member" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-507">-or-  <paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberAssignment Bind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberAssignment ^ Bind(System::Reflection::MethodInfo ^ propertyAccessor, System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Bind : System.Reflection.MethodInfo * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MemberAssignment" Usage="System.Linq.Expressions.Expression.Bind (propertyAccessor, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="8671b-508">A <see cref="T:System.Reflection.MethodInfo" /> reprezentujący metody dostępu właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-508">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="expression">
          <span data-ttu-id="8671b-509">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-509">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-510">Tworzy <see cref="T:System.Linq.Expressions.MemberAssignment" /> reprezentujący inicjowania elementu członkowskiego za pomocą metody dostępu właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-510">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member by using a property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-511">A <see cref="T:System.Linq.Expressions.MemberAssignment" /> zawierający <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> równa właściwości <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> właściwością <see cref="T:System.Reflection.PropertyInfo" /> reprezentująca właściwości używane w <paramref name="propertyAccessor" />i <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> właściwością <paramref name="expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-511">A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property set to <paramref name="expression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-512"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość `expression` musi być możliwe przypisanie typu reprezentowanego przez <xref:System.Reflection.PropertyInfo.PropertyType%2A> właściwości właściwości używane w `propertyAccessor`.</span><span class="sxs-lookup"><span data-stu-id="8671b-512">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the property accessed in `propertyAccessor`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-513">
            <paramref name="propertyAccessor" /> lub <paramref name="expression" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-513">
              <paramref name="propertyAccessor" /> or <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-514">
            <paramref name="propertyAccessor" /> reprezentuje metody dostępu właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-514">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="8671b-515">- lub - właściwość uzyskują <paramref name="propertyAccessor" /> nie ma <see langword="set" /> metody dostępu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-515">-or-  The property accessed by <paramref name="propertyAccessor" /> does not have a <see langword="set" /> accessor.</span>
          </span>
          <span data-ttu-id="8671b-516">- lub - <paramref name="expression" />. Typ nie jest możliwy do przypisania do typu pola lub właściwości, <paramref name="member" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-516">-or-  <paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Block">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-517">Tworzy <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-517">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (expressions As IEnumerable(Of Expression)) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block expressions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expressions">
          <span data-ttu-id="8671b-518">Wyrażenia w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-518">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-519">Tworzy <see cref="T:System.Linq.Expressions.BlockExpression" /> , zawierający danego wyrażenia, a nie ma zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-519">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-520">Utworzony <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-520">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-521">Po wykonaniu bloku wyrażenie zwraca wartość ostatniego wyrażenia w bloku.</span><span class="sxs-lookup"><span data-stu-id="8671b-521">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (ParamArray expressions As Expression()) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block expressions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expressions">
          <span data-ttu-id="8671b-522">Wyrażenia w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-522">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-523">Tworzy <see cref="T:System.Linq.Expressions.BlockExpression" /> , zawierający danego wyrażenia, a nie ma zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-523">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-524">Utworzony <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-524">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-525">Po wykonaniu bloku wyrażenie zwraca wartość ostatniego wyrażenia w bloku.</span><span class="sxs-lookup"><span data-stu-id="8671b-525">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-526">Poniższy przykład kodu pokazuje sposób tworzenia wyrażenia bloku.</span><span class="sxs-lookup"><span data-stu-id="8671b-526">The following code example shows how to create a block expression.</span></span> <span data-ttu-id="8671b-527">Wyrażenie bloku składa się z dwóch <xref:System.Linq.Expressions.MethodCallExpression> obiektów i jeden <xref:System.Linq.Expressions.ConstantExpression> obiektu.</span><span class="sxs-lookup"><span data-stu-id="8671b-527">The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (variables As IEnumerable(Of ParameterExpression), expressions As IEnumerable(Of Expression)) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : seq&lt;System.Linq.Expressions.ParameterExpression&gt; * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">
          <span data-ttu-id="8671b-528">Zmienne w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-528">The variables in the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="8671b-529">Wyrażenia w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-529">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-530">Tworzy <see cref="T:System.Linq.Expressions.BlockExpression" /> zawierający dany zmiennych i wyrażeń.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-530">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-531">Utworzony <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-531">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-532">Po wykonaniu bloku wyrażenie zwraca wartość ostatniego wyrażenia w bloku.</span><span class="sxs-lookup"><span data-stu-id="8671b-532">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-533">Poniższy przykład kodu pokazuje sposób przekazywania parametru do wyrażenia bloku i przetwarza tego parametru, w bloku.</span><span class="sxs-lookup"><span data-stu-id="8671b-533">The following code example shows how to pass a parameter to a block expression and process this parameter within a block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#14)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (variables As IEnumerable(Of ParameterExpression), ParamArray expressions As Expression()) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : seq&lt;System.Linq.Expressions.ParameterExpression&gt; * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables">
          <span data-ttu-id="8671b-534">Zmienne w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-534">The variables in the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="8671b-535">Wyrażenia w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-535">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-536">Tworzy <see cref="T:System.Linq.Expressions.BlockExpression" /> zawierający dany zmiennych i wyrażeń.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-536">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-537">Utworzony <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-537">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-538">Po wykonaniu bloku wyrażenie zwraca wartość ostatniego wyrażenia w bloku.</span><span class="sxs-lookup"><span data-stu-id="8671b-538">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="8671b-539">Pierwsze wyrażenie w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-539">The first expression in the block.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="8671b-540">Drugie wyrażenie w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-540">The second expression in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-541">Tworzy <see cref="T:System.Linq.Expressions.BlockExpression" /> , zawierający dwóch wyrażeń, a nie ma zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-541">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains two expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-542">Utworzony <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-542">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-543">Po wykonaniu bloku wyrażenie zwraca wartość ostatniego wyrażenia w bloku.</span><span class="sxs-lookup"><span data-stu-id="8671b-543">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-544">Typ wyniku bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-544">The result type of the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="8671b-545">Wyrażenia w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-545">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-546">Tworzy <see cref="T:System.Linq.Expressions.BlockExpression" /> , zawierający danego wyrażenia, nie ma zmiennych, a ma typ konkretnego wyniku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-546">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-547">Utworzony <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-547">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-548">Typ wyniku bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-548">The result type of the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="8671b-549">Wyrażenia w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-549">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-550">Tworzy <see cref="T:System.Linq.Expressions.BlockExpression" /> , zawierający danego wyrażenia, nie ma zmiennych, a ma typ konkretnego wyniku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-550">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-551">Utworzony <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-551">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="8671b-552">Pierwsze wyrażenie w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-552">The first expression in the block.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="8671b-553">Drugie wyrażenie w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-553">The second expression in the block.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="8671b-554">Trzeci wyrażenia w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-554">The third expression in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-555">Tworzy <see cref="T:System.Linq.Expressions.BlockExpression" /> , zawierający trzy wyrażenia, a nie ma zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-555">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains three expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-556">Utworzony <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-556">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-557">Po wykonaniu bloku wyrażenie zwraca wartość ostatniego wyrażenia w bloku.</span><span class="sxs-lookup"><span data-stu-id="8671b-557">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * seq&lt;System.Linq.Expressions.ParameterExpression&gt; * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-558">Typ wyniku bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-558">The result type of the block.</span>
          </span>
        </param>
        <param name="variables">
          <span data-ttu-id="8671b-559">Zmienne w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-559">The variables in the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="8671b-560">Wyrażenia w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-560">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-561">Tworzy <see cref="T:System.Linq.Expressions.BlockExpression" /> zawierający dany zmiennych i wyrażeń.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-561">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-562">Utworzony <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-562">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberSignature Language="F#" Value="static member Block : Type * seq&lt;System.Linq.Expressions.ParameterExpression&gt; * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (type, variables, expressions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-563">Typ wyniku bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-563">The result type of the block.</span>
          </span>
        </param>
        <param name="variables">
          <span data-ttu-id="8671b-564">Zmienne w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-564">The variables in the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="8671b-565">Wyrażenia w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-565">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-566">Tworzy <see cref="T:System.Linq.Expressions.BlockExpression" /> zawierający dany zmiennych i wyrażeń.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-566">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-567">Utworzony <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-567">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="8671b-568">Pierwsze wyrażenie w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-568">The first expression in the block.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="8671b-569">Drugie wyrażenie w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-569">The second expression in the block.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="8671b-570">Trzeci wyrażenia w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-570">The third expression in the block.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="8671b-571">Czwarty wyrażenia w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-571">The fourth expression in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-572">Tworzy <see cref="T:System.Linq.Expressions.BlockExpression" /> , zawierający cztery wyrażeń, a nie ma zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-572">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains four expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-573">Utworzony <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-573">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-574">Po wykonaniu bloku wyrażenie zwraca wartość ostatniego wyrażenia w bloku.</span><span class="sxs-lookup"><span data-stu-id="8671b-574">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3, class System.Linq.Expressions.Expression arg4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3, System::Linq::Expressions::Expression ^ arg4);" />
      <MemberSignature Language="F#" Value="static member Block : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BlockExpression" Usage="System.Linq.Expressions.Expression.Block (arg0, arg1, arg2, arg3, arg4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg4" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="8671b-575">Pierwsze wyrażenie w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-575">The first expression in the block.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="8671b-576">Drugie wyrażenie w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-576">The second expression in the block.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="8671b-577">Trzeci wyrażenia w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-577">The third expression in the block.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="8671b-578">Czwarty wyrażenia w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-578">The fourth expression in the block.</span>
          </span>
        </param>
        <param name="arg4">
          <span data-ttu-id="8671b-579">Wyrażenie piątej w bloku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-579">The fifth expression in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-580">Tworzy <see cref="T:System.Linq.Expressions.BlockExpression" /> , zawierający pięć wyrażeń, a nie ma zmiennych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-580">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains five expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-581">Utworzony <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-581">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-582">Po wykonaniu bloku wyrażenie zwraca wartość ostatniego wyrażenia w bloku.</span><span class="sxs-lookup"><span data-stu-id="8671b-582">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Break">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-583">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący instrukcji break.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-583">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Break (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="8671b-584">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> , <see cref="T:System.Linq.Expressions.GotoExpression" /> Spowoduje przejście do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-584">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-585">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący instrukcji break.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-585">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-586">A <see cref="T:System.Linq.Expressions.GotoExpression" /> z <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> równy podział <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> właściwością <paramref name="target" />i wartość null, które zostaną przekazane do etykietą docelową po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-586">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8671b-587">Poniższy przykład przedstawia sposób tworzenia wyrażenia zawierającego <xref:System.Linq.Expressions.LoopExpression> obiektu, który używa <xref:System.Linq.Expressions.Expression.Break%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-587">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LoopExpression> object that uses the <xref:System.Linq.Expressions.Expression.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Break (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="8671b-588">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> , <see cref="T:System.Linq.Expressions.GotoExpression" /> Spowoduje przejście do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-588">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="8671b-589">Wartość, które zostaną przekazane do skojarzonego etykiety po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-589">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-590">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący instrukcji break.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-590">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span>
          </span>
          <span data-ttu-id="8671b-591">Można określić wartość przekazana do etykiety na skok.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-591">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-592">A <see cref="T:System.Linq.Expressions.GotoExpression" /> z <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> równy podział <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> właściwością <paramref name="target" />, i <paramref name="value" /> mają być przekazane do etykietą docelową po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-592">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="8671b-593">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> , <see cref="T:System.Linq.Expressions.GotoExpression" /> Spowoduje przejście do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-593">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-594">
            <see cref="T:System.Type" /> Można ustawić <see cref="P:System.Linq.Expressions.Expression.Type" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-594">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-595">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący instrukcji break z określonym typem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-595">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-596">A <see cref="T:System.Linq.Expressions.GotoExpression" /> z <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> równy podział <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> właściwością <paramref name="target" />i <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwością <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-596">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Break : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Break (target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="8671b-597">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> , <see cref="T:System.Linq.Expressions.GotoExpression" /> Spowoduje przejście do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-597">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="8671b-598">Wartość, które zostaną przekazane do skojarzonego etykiety po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-598">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-599">
            <see cref="T:System.Type" /> Można ustawić <see cref="P:System.Linq.Expressions.Expression.Type" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-599">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-600">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący instrukcji break z określonym typem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-600">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type.</span>
          </span>
          <span data-ttu-id="8671b-601">Można określić wartość przekazana do etykiety na skok.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-601">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-602">A <see cref="T:System.Linq.Expressions.GotoExpression" /> z <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> równy podział <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> właściwością <paramref name="target" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwością <paramref name="type" />, i <paramref name="value" /> mają być przekazane do etykietą docelową po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-602">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Call">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-603">Tworzy <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-603">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="8671b-604">
            <see cref="T:System.Linq.Expressions.Expression" /> Wystąpienia dla wywołania metody wystąpienia, który określa (przekazać <see langword="null" /> dla <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic) metoda).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-604">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-605">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-605">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-606">Tworzy <see cref="T:System.Linq.Expressions.MethodCallExpression" /> reprezentujący wywołanie do metody, która nie przyjmuje żadnych argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-606">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes no arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-607">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-607">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-608">Do reprezentowania wywołanie `static` (`Shared` w języku Visual Basic) metoda, Przekaż `null` dla `instance` parametru, jeśli chcesz wywołać tę metodę.</span><span class="sxs-lookup"><span data-stu-id="8671b-608">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method.</span></span>  
  
 <span data-ttu-id="8671b-609">Jeśli `method` reprezentuje metodę wystąpienia <xref:System.Linq.Expressions.Expression.Type%2A> właściwość `instance` musi być możliwy do przypisania do metody reprezentowanej przez typ deklarujący `method`.</span><span class="sxs-lookup"><span data-stu-id="8671b-609">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="8671b-610"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> Właściwość wynikowy <xref:System.Linq.Expressions.MethodCallExpression> jest pusty.</span><span class="sxs-lookup"><span data-stu-id="8671b-610">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty.</span></span> <span data-ttu-id="8671b-611"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest równa zwracany typ metody reprezentowanej przez `method`.</span><span class="sxs-lookup"><span data-stu-id="8671b-611">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the return type of the method represented by `method`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-612">Poniższy przykład kodu pokazuje sposób tworzenia wyrażenia, które wywołuje metodę bez argumentów.</span><span class="sxs-lookup"><span data-stu-id="8671b-612">The following code example shows how to create an expression that calls a method without arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#15)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-613">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-613">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-614">- lub - <paramref name="instance" /> jest <see langword="null" /> i <paramref name="method" /> reprezentuje metodę wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-614">-or-  <paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-615">
            <paramref name="instance" />. Typ nie jest możliwy do przypisania do metody reprezentowanej przez typ deklarujący <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-615">
              <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arguments As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="8671b-616">
            <see cref="T:System.Reflection.MethodInfo" /> Reprezentujący metodę docelową.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-616">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-617">Kolekcja <see cref="T:System.Linq.Expressions.Expression" /> reprezentujący argumenty wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-617">A collection of <see cref="T:System.Linq.Expressions.Expression" /> that represents the call arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-618">Tworzy <see cref="T:System.Linq.Expressions.MethodCallExpression" /> reprezentujący wywołanie do metody statyczne (Shared w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-618">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-619">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-619">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="8671b-620">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-620">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="8671b-621">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentująca pierwszy argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-621">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-622">Tworzy <see cref="T:System.Linq.Expressions.MethodCallExpression" /> reprezentujący wywołanie <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic) metoda, która przyjmuje jeden argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-622">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method that takes one argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-623">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-623">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8671b-624">Poniższy przykład przedstawia sposób tworzenia wyrażenia, który wywołuje `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje jeden argument.</span><span class="sxs-lookup"><span data-stu-id="8671b-624">The following example demonstrates how to create an expression that calls a `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#16)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-625">
            <paramref name="method" /> ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-625">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="8671b-626">A <see cref="T:System.Reflection.MethodInfo" /> reprezentujący <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic) metodę, aby ustawić <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-626">A <see cref="T:System.Reflection.MethodInfo" /> that represents a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-627">Tablica <see cref="T:System.Linq.Expressions.Expression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-627">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-628">Tworzy <see cref="T:System.Linq.Expressions.MethodCallExpression" /> reprezentujący wywołanie <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic) metoda, która przyjmuje argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-628">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method that has arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-629">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-629">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-630">Jeśli `arguments` nie `null`, musi mieć taką samą liczbę elementów jako liczba parametrów dla metody reprezentowanej przez `method`.</span><span class="sxs-lookup"><span data-stu-id="8671b-630">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="8671b-631">Każdy element w `arguments` nie może być `null` i musi być możliwy do przypisania do odpowiedniego parametru `method`, prawdopodobnie po *cytowanie*.</span><span class="sxs-lookup"><span data-stu-id="8671b-631">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8671b-632">Element będzie można podać tylko wtedy, gdy z odpowiadającym mu parametrem metody typu <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="8671b-632">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="8671b-633">Cytowanie oznacza, że element jest opakowana w <xref:System.Linq.Expressions.ExpressionType.Quote> węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-633">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="8671b-634">Węzeł wynikowy jest <xref:System.Linq.Expressions.UnaryExpression> którego <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> właściwości jest elementem `arguments`.</span><span class="sxs-lookup"><span data-stu-id="8671b-634">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="8671b-635"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> Właściwość wynikowy <xref:System.Linq.Expressions.MethodCallExpression> jest pusta Jeżeli `arguments` jest `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-635">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="8671b-636">W przeciwnym razie zawiera te same elementy co `arguments`, z których część może być ujmowane w cudzysłów.</span><span class="sxs-lookup"><span data-stu-id="8671b-636">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="8671b-637"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.MethodCallExpression> jest taki sam, jak zwracany typ metody reprezentowanej przez `method`.</span><span class="sxs-lookup"><span data-stu-id="8671b-637">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span> <span data-ttu-id="8671b-638"><xref:System.Linq.Expressions.MethodCallExpression.Object%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-638">The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-639">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-639">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-640">Liczba elementów w <paramref name="arguments" /> nie równa się liczba parametrów dla metody reprezentowanej przez <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-640">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="8671b-641">- lub - jedno lub więcej elementów <paramref name="arguments" /> nie jest możliwy do przypisania do odpowiedniego parametru do metody reprezentowanej przez <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-641">-or-  One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arguments As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="8671b-642">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> równa właściwości (przekazać <see langword="null" /> dla <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic) metoda).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-642">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-643">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-643">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-644">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.Expression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-644">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-645">Tworzy <see cref="T:System.Linq.Expressions.MethodCallExpression" /> reprezentujący wywołanie do metody, która przyjmuje argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-645">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-646">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, i <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-646">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-647">Do reprezentowania wywołanie `static` (`Shared` w języku Visual Basic) metoda, Przekaż `null` dla `instance` parametru, jeśli chcesz wywołać tę metodę, lub zadzwoń <xref:System.Linq.Expressions.Expression.Call%2A> zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="8671b-647">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.</span></span>  
  
 <span data-ttu-id="8671b-648">Jeśli `method` reprezentuje metodę wystąpienia <xref:System.Linq.Expressions.Expression.Type%2A> właściwość `instance` musi być możliwy do przypisania do metody reprezentowanej przez typ deklarujący `method`.</span><span class="sxs-lookup"><span data-stu-id="8671b-648">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="8671b-649">Jeśli `arguments` nie `null`, musi mieć taką samą liczbę elementów jako liczba parametrów dla metody reprezentowanej przez `method`.</span><span class="sxs-lookup"><span data-stu-id="8671b-649">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="8671b-650">Każdy element w `arguments` nie może być `null` i musi być możliwy do przypisania do odpowiedniego parametru `method`, prawdopodobnie po *cytowanie*.</span><span class="sxs-lookup"><span data-stu-id="8671b-650">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8671b-651">Element będzie można podać tylko wtedy, gdy z odpowiadającym mu parametrem metody typu <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="8671b-651">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="8671b-652">Cytowanie oznacza, że element jest opakowana w <xref:System.Linq.Expressions.ExpressionType.Quote> węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-652">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="8671b-653">Węzeł wynikowy jest <xref:System.Linq.Expressions.UnaryExpression> którego <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> właściwości jest elementem `arguments`.</span><span class="sxs-lookup"><span data-stu-id="8671b-653">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="8671b-654"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> Właściwość wynikowy <xref:System.Linq.Expressions.MethodCallExpression> jest pusta Jeżeli `arguments` jest `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-654">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="8671b-655">W przeciwnym razie zawiera te same elementy co `arguments`, z których część może być ujmowane w cudzysłów.</span><span class="sxs-lookup"><span data-stu-id="8671b-655">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="8671b-656"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.MethodCallExpression> jest taki sam, jak zwracany typ metody reprezentowanej przez `method`.</span><span class="sxs-lookup"><span data-stu-id="8671b-656">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-657">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-657">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-658">- lub - <paramref name="instance" /> jest <see langword="null" /> i <paramref name="method" /> reprezentuje metodę wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-658">-or-  <paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-659">
            <paramref name="instance" />. Typ nie jest możliwy do przypisania do metody reprezentowanej przez typ deklarujący <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-659">
              <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="8671b-660">- lub - liczba elementów w <paramref name="arguments" /> nie równa się liczba parametrów dla metody reprezentowanej przez <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-660">-or-  The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="8671b-661">- lub - jedno lub więcej elementów <paramref name="arguments" /> nie jest możliwy do przypisania do odpowiedniego parametru do metody reprezentowanej przez <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-661">-or-  One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="8671b-662">
            <see cref="T:System.Linq.Expressions.Expression" /> Wystąpienia dla wywołania metody wystąpienia, który określa (przekazać <see langword="null" /> dla <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic) metoda).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-662">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-663">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-663">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-664">Tablica <see cref="T:System.Linq.Expressions.Expression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-664">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-665">Tworzy <see cref="T:System.Linq.Expressions.MethodCallExpression" /> reprezentujący wywołanie do metody, która przyjmuje argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-665">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-666">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, i <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-666">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-667">Do reprezentowania wywołanie `static` (`Shared` w języku Visual Basic) metoda, Przekaż `null` dla `instance` parametru, jeśli chcesz wywołać tę metodę, lub zadzwoń <xref:System.Linq.Expressions.Expression.Call%2A> zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="8671b-667">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.</span></span>  
  
 <span data-ttu-id="8671b-668">Jeśli `method` reprezentuje metodę wystąpienia <xref:System.Linq.Expressions.Expression.Type%2A> właściwość `instance` musi być możliwy do przypisania do metody reprezentowanej przez typ deklarujący `method`.</span><span class="sxs-lookup"><span data-stu-id="8671b-668">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="8671b-669">Jeśli `arguments` nie `null`, musi mieć taką samą liczbę elementów jako liczba parametrów dla metody reprezentowanej przez `method`.</span><span class="sxs-lookup"><span data-stu-id="8671b-669">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="8671b-670">Każdy element w `arguments` nie może być `null` i musi być możliwy do przypisania do odpowiedniego parametru `method`, prawdopodobnie po *cytowanie*.</span><span class="sxs-lookup"><span data-stu-id="8671b-670">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8671b-671">Element będzie można podać tylko wtedy, gdy z odpowiadającym mu parametrem metody typu <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="8671b-671">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="8671b-672">Cytowanie oznacza, że element jest opakowana w <xref:System.Linq.Expressions.ExpressionType.Quote> węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-672">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="8671b-673">Węzeł wynikowy jest <xref:System.Linq.Expressions.UnaryExpression> którego <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> właściwości jest elementem `arguments`.</span><span class="sxs-lookup"><span data-stu-id="8671b-673">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="8671b-674"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> Właściwość wynikowy <xref:System.Linq.Expressions.MethodCallExpression> jest pusta Jeżeli `arguments` jest `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-674">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="8671b-675">W przeciwnym razie zawiera te same elementy co `arguments`, z których część może być ujmowane w cudzysłów.</span><span class="sxs-lookup"><span data-stu-id="8671b-675">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="8671b-676"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.MethodCallExpression> jest taki sam, jak zwracany typ metody reprezentowanej przez `method`.</span><span class="sxs-lookup"><span data-stu-id="8671b-676">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-677">
            <paramref name="method" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-677">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-678">- lub - <paramref name="instance" /> jest <see langword="null" /> i <paramref name="method" /> reprezentuje metodę wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-678">-or-  <paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span>
          </span>
          <span data-ttu-id="8671b-679">- lub - <paramref name="arguments" /> nie <see langword="null" /> i co najmniej jeden z jego elementów jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-679">-or-  <paramref name="arguments" /> is not <see langword="null" /> and one or more of its elements is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-680">
            <paramref name="instance" />. Typ nie jest możliwy do przypisania do metody reprezentowanej przez typ deklarujący <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-680">
              <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="8671b-681">- lub - liczba elementów w <paramref name="arguments" /> nie równa się liczba parametrów dla metody reprezentowanej przez <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-681">-or-  The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="8671b-682">- lub - jedno lub więcej elementów <paramref name="arguments" /> nie jest możliwy do przypisania do odpowiedniego parametru do metody reprezentowanej przez <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-682">-or-  One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="8671b-683">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-683">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="8671b-684">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentująca pierwszy argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-684">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="8671b-685">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący drugi argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-685">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-686">Tworzy <see cref="T:System.Linq.Expressions.MethodCallExpression" /> reprezentujący wywołanie metody statycznej, która przyjmuje dwa argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-686">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes two arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-687">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-687">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-688">
            <paramref name="method" /> ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-688">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="8671b-689">
            <see cref="T:System.Linq.Expressions.Expression" /> , Który określa wystąpienie dla wywołania wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-689">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call.</span>
          </span>
          <span data-ttu-id="8671b-690">(przekazać wartości null do metody statycznej (Shared w języku Visual Basic)).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-690">(pass null for a static (Shared in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-691">
            <see cref="T:System.Reflection.MethodInfo" /> Reprezentujący metodę docelową.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-691">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="8671b-692">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentująca pierwszy argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-692">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="8671b-693">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący drugi argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-693">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-694">Tworzy <see cref="T:System.Linq.Expressions.MethodCallExpression" /> reprezentujący wywołanie do metody, która przyjmuje dwa argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-694">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes two arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-695">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-695">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8671b-696">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie, które wywołuje metodę wystąpienia, która ma dwa argumenty.</span><span class="sxs-lookup"><span data-stu-id="8671b-696">The following code example shows how to create an expression that calls an instance method that has two arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#17)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, string methodName, Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, string methodName, class System.Type[] typeArguments, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, methodName As String, typeArguments As Type(), ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::String ^ methodName, cli::array &lt;Type ^&gt; ^ typeArguments, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * string * Type[] * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, methodName, typeArguments, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Type[]" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="8671b-697">
            <see cref="T:System.Linq.Expressions.Expression" /> Którego <see cref="P:System.Linq.Expressions.Expression.Type" /> wartość właściwości ma zostać wyszukany określonej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-697">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> property value will be searched for a specific method.</span>
          </span>
        </param>
        <param name="methodName">
          <span data-ttu-id="8671b-698">Nazwa metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-698">The name of the method.</span>
          </span>
        </param>
        <param name="typeArguments">
          <span data-ttu-id="8671b-699">Tablica <see cref="T:System.Type" /> obiekty, które określają parametry typu metody ogólnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-699">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method.</span>
          </span>
          <span data-ttu-id="8671b-700">Ten argument musi mieć wartość null, gdy methodName wskazuje metodę inną niż ogólna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-700">This argument should be null when methodName specifies a non-generic method.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-701">Tablica <see cref="T:System.Linq.Expressions.Expression" /> obiektów, które reprezentuje argumenty do metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-701">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represents the arguments to the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-702">Tworzy <see cref="T:System.Linq.Expressions.MethodCallExpression" /> reprezentujący wywołanie do metody za pomocą wywołania metody odpowiedniej fabryki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-702">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-703">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> równa właściwości <paramref name="instance" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa <see cref="T:System.Reflection.MethodInfo" /> reprezentujący metodę określone wystąpienie i <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> równa określonych argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-703">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to <paramref name="instance" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified instance method, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> set to the specified arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-704"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.MethodCallExpression> jest taki sam zwracany typ metody wskazywane przez `methodName`.</span><span class="sxs-lookup"><span data-stu-id="8671b-704">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-705">
            <paramref name="instance" /> lub <paramref name="methodName" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-705">
              <paramref name="instance" /> or <paramref name="methodName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-706">Brak metody o nazwie <paramref name="methodName" />, którego parametry typu są zgodne <paramref name="typeArguments" />, i której parametr typy dopasowanie <paramref name="arguments" /> znajduje się w <paramref name="instance" />. Typ lub jego typów podstawowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-706">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.</span>
          </span>
          <span data-ttu-id="8671b-707">- lub - więcej niż jedną metodę, której nazwa to <paramref name="methodName" />, których parametry typu są zgodne <paramref name="typeArguments" />, i której parametr typy dopasowanie <paramref name="arguments" /> znajduje się w <paramref name="instance" />. Typ lub jego typów podstawowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-707">-or-  More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="8671b-708">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-708">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="8671b-709">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentująca pierwszy argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-709">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="8671b-710">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący drugi argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-710">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="8671b-711">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący trzeci argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-711">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-712">Tworzy <see cref="T:System.Linq.Expressions.MethodCallExpression" /> reprezentujący wywołanie metody statycznej, która przyjmuje trzy argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-712">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes three arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-713">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-713">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-714">
            <paramref name="method" /> ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-714">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (Type type, string methodName, Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Type type, string methodName, class System.Type[] typeArguments, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(Type ^ type, System::String ^ methodName, cli::array &lt;Type ^&gt; ^ typeArguments, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Call : Type * string * Type[] * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (type, methodName, typeArguments, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Type[]" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-715">
            <see cref="T:System.Type" /> , Który określa typ, który zawiera określony <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic) metoda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-715">The <see cref="T:System.Type" /> that specifies the type that contains the specified <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method.</span>
          </span>
        </param>
        <param name="methodName">
          <span data-ttu-id="8671b-716">Nazwa metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-716">The name of the method.</span>
          </span>
        </param>
        <param name="typeArguments">
          <span data-ttu-id="8671b-717">Tablica <see cref="T:System.Type" /> obiekty, które określają parametry typu metody ogólnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-717">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method.</span>
          </span>
          <span data-ttu-id="8671b-718">Ten argument musi mieć wartość null, gdy methodName wskazuje metodę inną niż ogólna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-718">This argument should be null when methodName specifies a non-generic method.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-719">Tablica <see cref="T:System.Linq.Expressions.Expression" /> obiekty reprezentujące argumenty do metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-719">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments to the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-720">Tworzy <see cref="T:System.Linq.Expressions.MethodCallExpression" /> reprezentujący wywołanie <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic) metoda, przez wywołanie metody odpowiedniej fabryki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-720">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-721">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> właściwością <see cref="T:System.Reflection.MethodInfo" /> reprezentująca określony <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic) metoda i <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> Właściwość jest ustawiona na określonych argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-721">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method, and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> property set to the specified arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-722"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.MethodCallExpression> jest taki sam zwracany typ metody wskazywane przez `methodName`.</span><span class="sxs-lookup"><span data-stu-id="8671b-722">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`.</span></span> <span data-ttu-id="8671b-723"><xref:System.Linq.Expressions.MethodCallExpression.Object%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-723">The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-724">
            <paramref name="type" /> lub <paramref name="methodName" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-724">
              <paramref name="type" /> or <paramref name="methodName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-725">Żadnej metody o nazwie <paramref name="methodName" />, której parametry typu dopasowania <paramref name="typeArguments" />, i której parametr typy dopasowanie <paramref name="arguments" /> znajduje się w <paramref name="type" /> lub jego typów podstawowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-725">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.</span>
          </span>
          <span data-ttu-id="8671b-726">- lub - więcej niż jedną metodę, której nazwa to <paramref name="methodName" />, których parametry typu są zgodne <paramref name="typeArguments" />, i której parametr typy dopasowanie <paramref name="arguments" /> znajduje się w <paramref name="type" /> lub jego typów podstawowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-726">-or-  More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Call : System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (instance, method, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="8671b-727">
            <see cref="T:System.Linq.Expressions.Expression" /> , Który określa wystąpienie dla wywołania wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-727">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call.</span>
          </span>
          <span data-ttu-id="8671b-728">(przekazać wartości null do metody statycznej (Shared w języku Visual Basic)).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-728">(pass null for a static (Shared in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-729">
            <see cref="T:System.Reflection.MethodInfo" /> Reprezentujący metodę docelową.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-729">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="8671b-730">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentująca pierwszy argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-730">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="8671b-731">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący drugi argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-731">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="8671b-732">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący trzeci argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-732">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-733">Tworzy <see cref="T:System.Linq.Expressions.MethodCallExpression" /> reprezentujący wywołanie metody, która przyjmuje trzy argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-733">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes three arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-734">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-734">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="8671b-735">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-735">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="8671b-736">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentująca pierwszy argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-736">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="8671b-737">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący drugi argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-737">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="8671b-738">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący trzeci argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-738">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="8671b-739">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący czwarty argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-739">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-740">Tworzy <see cref="T:System.Linq.Expressions.MethodCallExpression" /> reprezentujący wywołanie metody statycznej, która przyjmuje cztery argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-740">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes four arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-741">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-741">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-742">
            <paramref name="method" /> ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-742">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3, class System.Linq.Expressions.Expression arg4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3, System::Linq::Expressions::Expression ^ arg4);" />
      <MemberSignature Language="F#" Value="static member Call : System.Reflection.MethodInfo * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.MethodCallExpression" Usage="System.Linq.Expressions.Expression.Call (method, arg0, arg1, arg2, arg3, arg4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg4" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="8671b-743">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-743">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="8671b-744">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentująca pierwszy argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-744">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="8671b-745">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący drugi argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-745">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="8671b-746">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący trzeci argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-746">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="8671b-747">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący czwarty argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-747">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</span>
          </span>
        </param>
        <param name="arg4">
          <span data-ttu-id="8671b-748">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący piątego argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-748">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fifth argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-749">Tworzy <see cref="T:System.Linq.Expressions.MethodCallExpression" /> reprezentujący wywołanie metody statycznej, która przyjmuje argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-749">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes five arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-750">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> i <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-750">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-751">
            <paramref name="method" /> ma wartość null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-751">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanReduce">
      <MemberSignature Language="C#" Value="public virtual bool CanReduce { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReduce" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.CanReduce" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanReduce As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReduce { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReduce : bool" Usage="System.Linq.Expressions.Expression.CanReduce" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-752">Wskazuje, że węzeł można zmniejszyć do węzła prostsze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-752">Indicates that the node can be reduced to a simpler node.</span>
          </span>
          <span data-ttu-id="8671b-753">Jeśli zostanie zwrócona wartość true, można wywołać Reduce() powodować mniejsze formularza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-753">If this returns true, Reduce() can be called to produce the reduced form.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8671b-754">Wartość true, jeśli węzeł może zostać zmniejszona, w przeciwnym razie wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-754">True if the node can be reduced, otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Catch">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-755">Tworzy <see cref="T:System.Linq.Expressions.CatchBlock" /> reprezentujący instrukcję catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-755">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Catch (variable As ParameterExpression, body As Expression) As CatchBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body);" />
      <MemberSignature Language="F#" Value="static member Catch : System.Linq.Expressions.ParameterExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (variable, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="variable">
          <span data-ttu-id="8671b-756">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> reprezentujący odwołania do <see cref="T:System.Exception" /> obiektu przechwycony przez ten program obsługi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-756">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="8671b-757">Treść instrukcji catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-757">The body of the catch statement.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-758">Tworzy <see cref="T:System.Linq.Expressions.CatchBlock" /> reprezentujący instrukcję catch w odniesieniu do przechwyconego <see cref="T:System.Exception" /> obiekt do użycia w treści procedury obsługi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-758">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with a reference to the caught <see cref="T:System.Exception" /> object for use in the handler body.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-759">Utworzony <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-759">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Type type, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(Type ^ type, System::Linq::Expressions::Expression ^ body);" />
      <MemberSignature Language="F#" Value="static member Catch : Type * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (type, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-760">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> z <see cref="T:System.Exception" /> to <see cref="T:System.Linq.Expressions.CatchBlock" /> będzie obsługiwać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-760">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="8671b-761">Treść instrukcji catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-761">The body of the catch statement.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-762">Tworzy <see cref="T:System.Linq.Expressions.CatchBlock" /> reprezentujący instrukcję catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-762">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-763">Utworzony <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-763">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-764"><xref:System.Linq.Expressions.Expression.Type%2A> z <xref:System.Exception> wychwycony może być określony, ale brak odwołania do <xref:System.Exception> obiekt będzie dostępny do użytku w <xref:System.Linq.Expressions.CatchBlock>.</span><span class="sxs-lookup"><span data-stu-id="8671b-764">The <xref:System.Linq.Expressions.Expression.Type%2A> of <xref:System.Exception> to be caught can be specified but no reference to the <xref:System.Exception> object will be available for use in the <xref:System.Linq.Expressions.CatchBlock>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Catch (variable As ParameterExpression, body As Expression, filter As Expression) As CatchBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberSignature Language="F#" Value="static member Catch : System.Linq.Expressions.ParameterExpression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (variable, body, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="variable">
          <span data-ttu-id="8671b-765">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> reprezentujący odwołania do <see cref="T:System.Exception" /> obiektu przechwycony przez ten program obsługi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-765">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="8671b-766">Treść instrukcji catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-766">The body of the catch statement.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="8671b-767">Treść <see cref="T:System.Exception" /> filtru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-767">The body of the <see cref="T:System.Exception" /> filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-768">Tworzy <see cref="T:System.Linq.Expressions.CatchBlock" /> reprezentujący instrukcję catch <see cref="T:System.Exception" /> filtr i odwołania do przechwyconego <see cref="T:System.Exception" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-768">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter and a reference to the caught <see cref="T:System.Exception" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-769">Utworzony <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-769">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Type type, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(Type ^ type, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberSignature Language="F#" Value="static member Catch : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.Catch (type, body, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-770">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> z <see cref="T:System.Exception" /> to <see cref="T:System.Linq.Expressions.CatchBlock" /> będzie obsługiwać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-770">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="8671b-771">Treść instrukcji catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-771">The body of the catch statement.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="8671b-772">Treść <see cref="T:System.Exception" /> filtru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-772">The body of the <see cref="T:System.Exception" /> filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-773">Tworzy <see cref="T:System.Linq.Expressions.CatchBlock" /> reprezentujący instrukcję catch <see cref="T:System.Exception" /> filtru, ale brak odwołania do przechwyconego <see cref="T:System.Exception" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-773">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter but no reference to the caught <see cref="T:System.Exception" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-774">Utworzony <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-774">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearDebugInfo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DebugInfoExpression ClearDebugInfo (System.Linq.Expressions.SymbolDocumentInfo document);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DebugInfoExpression ClearDebugInfo(class System.Linq.Expressions.SymbolDocumentInfo document) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClearDebugInfo (document As SymbolDocumentInfo) As DebugInfoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DebugInfoExpression ^ ClearDebugInfo(System::Linq::Expressions::SymbolDocumentInfo ^ document);" />
      <MemberSignature Language="F#" Value="static member ClearDebugInfo : System.Linq.Expressions.SymbolDocumentInfo -&gt; System.Linq.Expressions.DebugInfoExpression" Usage="System.Linq.Expressions.Expression.ClearDebugInfo document" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DebugInfoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Linq.Expressions.SymbolDocumentInfo" />
      </Parameters>
      <Docs>
        <param name="document">
          <span data-ttu-id="8671b-775">
            <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> Reprezentujący plik źródłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-775">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-776">Tworzy <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> czyszczenia punktu sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-776">Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearing a sequence point.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-777">Wystąpienie <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> dla proces czyszczenia punktu sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-777">An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearning a sequence point.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Coalesce">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-778">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację łączącego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-778">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Coalesce(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Coalesce (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Coalesce(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Coalesce : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Coalesce (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-779">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-779">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-780">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-780">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-781">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację łączącego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-781">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-782">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-782">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-783"><xref:System.Linq.Expressions.BinaryExpression.Method%2A> Właściwość wynikowy <xref:System.Linq.Expressions.BinaryExpression> jest `null` i wartościami <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> są ustawione na `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-783">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span> <span data-ttu-id="8671b-784"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest równa typ wyniku operacji łączącego.</span><span class="sxs-lookup"><span data-stu-id="8671b-784">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the result type of the coalescing operation.</span></span> <span data-ttu-id="8671b-785"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-785">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
#### <a name="result-type"></a><span data-ttu-id="8671b-786">Typ wyniku</span><span class="sxs-lookup"><span data-stu-id="8671b-786">Result Type</span></span>  
 <span data-ttu-id="8671b-787">Następujące reguły określają typ wyniku:</span><span class="sxs-lookup"><span data-stu-id="8671b-787">The following rules determine the result type:</span></span>  
  
-   <span data-ttu-id="8671b-788">Jeśli `left`. Typ reprezentuje typ dopuszczający wartość null i `right`. Typ jest niejawnie konwertowany na odpowiedni typ niedopuszczający, typ wyniku jest odpowiednikiem dopuszcza `left`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-788">If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.</span></span>  
  
-   <span data-ttu-id="8671b-789">W przeciwnym razie, jeśli `right`. Typ jest niejawnie konwertowany na `left`. Typ, typ wyniku jest `left`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-789">Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.</span></span>  
  
-   <span data-ttu-id="8671b-790">W przeciwnym razie, jeśli dopuszcza wielokrotność `left`. Typ jest niejawnie konwertowany na `right`. Typ, typ wyniku jest `right`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-790">Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-791">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-791">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-792">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> Właściwość <paramref name="left" /> nie reprezentuje typem referencyjnym lub typem wartościowym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-792">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-793">
            <paramref name="left" />. Typ i <paramref name="right" />. Typ nie są konwertowane na siebie nawzajem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-793">
              <paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Coalesce(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Coalesce (left As Expression, right As Expression, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Coalesce(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member Coalesce : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Coalesce (left, right, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-794">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-794">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-795">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-795">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="8671b-796">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-796">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-797">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację łączącego, biorąc pod uwagę funkcji konwersji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-797">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation, given a conversion function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-798">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-798">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-799"><xref:System.Linq.Expressions.BinaryExpression.Method%2A> Właściwość wynikowy <xref:System.Linq.Expressions.BinaryExpression> jest `null` i wartościami <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> są ustawione na `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-799">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span>  
  
 <span data-ttu-id="8671b-800"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.BinaryExpression> jest taki sam, jak typ wyniku operacji łączącego.</span><span class="sxs-lookup"><span data-stu-id="8671b-800">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is equal to the result type of the coalescing operation.</span></span>  
  
 <span data-ttu-id="8671b-801">Następujące reguły określają typ wyniku:</span><span class="sxs-lookup"><span data-stu-id="8671b-801">The following rules determine the result type:</span></span>  
  
-   <span data-ttu-id="8671b-802">Jeśli `left`. Typ reprezentuje typ dopuszczający wartość null i `right`. Typ jest niejawnie konwertowany na odpowiedni typ niedopuszczający, typ wyniku jest odpowiednikiem dopuszcza `left`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-802">If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.</span></span>  
  
-   <span data-ttu-id="8671b-803">W przeciwnym razie, jeśli `right`. Typ jest niejawnie konwertowany na `left`. Typ, typ wyniku jest `left`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-803">Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.</span></span>  
  
-   <span data-ttu-id="8671b-804">W przeciwnym razie, jeśli dopuszcza wielokrotność `left`. Typ jest niejawnie konwertowany na `right`. Typ, typ wyniku jest `right`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-804">Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-805">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-805">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-806">
            <paramref name="left" />. Typ i <paramref name="right" />. Typ nie są konwertowane na siebie nawzajem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-806">
              <paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.</span>
          </span>
          <span data-ttu-id="8671b-807">- lub - <paramref name="conversion" /> nie <see langword="null" /> i <paramref name="conversion" />. Typ jest typem delegowanym, który nie ma dokładnie jednego argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-807">-or-  <paramref name="conversion" /> is not <see langword="null" /> and <paramref name="conversion" />.Type is a delegate type that does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-808">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> Właściwość <paramref name="left" /> nie reprezentuje typem referencyjnym lub typem wartościowym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-808">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.</span>
          </span>
          <span data-ttu-id="8671b-809">- lub - <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwość <paramref name="left" /> reprezentuje typ, który nie jest możliwy do przypisania do typu parametru typu delegata <paramref name="conversion" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-809">-or-  The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> represents a type that is not assignable to the parameter type of the delegate type <paramref name="conversion" />.Type.</span>
          </span>
          <span data-ttu-id="8671b-810">- lub - <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwość <paramref name="right" /> nie równa się typ zwracany typ delegata <paramref name="conversion" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-810">-or-  The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="right" /> is not equal to the return type of the delegate type <paramref name="conversion" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Condition">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-811">Tworzy <see cref="T:System.Linq.Expressions.ConditionalExpression" /> reprezentujący instrukcji warunkowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-811">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression Condition(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Condition (test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ Condition(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse);" />
      <MemberSignature Language="F#" Value="static member Condition : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.Condition (test, ifTrue, ifFalse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test">
          <span data-ttu-id="8671b-812">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-812">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span>
          </span>
        </param>
        <param name="ifTrue">
          <span data-ttu-id="8671b-813">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-813">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span>
          </span>
        </param>
        <param name="ifFalse">
          <span data-ttu-id="8671b-814">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-814">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-815">Tworzy <see cref="T:System.Linq.Expressions.ConditionalExpression" /> reprezentujący instrukcji warunkowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-815">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-816">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> i <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, i <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-816">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-817"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.ConditionalExpression> jest równa <xref:System.Linq.Expressions.Expression.Type%2A> właściwość `ifTrue`.</span><span class="sxs-lookup"><span data-stu-id="8671b-817">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConditionalExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `ifTrue`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-818">Poniższy przykład kodu pokazuje sposób tworzenia wyrażenia, który reprezentuje instrukcji warunkowej.</span><span class="sxs-lookup"><span data-stu-id="8671b-818">The following code example shows how to create an expression that represents a conditional statement.</span></span> <span data-ttu-id="8671b-819">Jeśli pierwszy argument daje w wyniku `true`, drugi argument funkcji jest wykonane; w przeciwnym razie, trzeci argument jest wykonywany.</span><span class="sxs-lookup"><span data-stu-id="8671b-819">If the first argument evaluates to `true`, the second argument is executed; otherwise, the third argument is executed.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#3)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-820">
            <paramref name="test" /> lub <paramref name="ifTrue" /> lub <paramref name="ifFalse" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-820">
              <paramref name="test" /> or <paramref name="ifTrue" /> or <paramref name="ifFalse" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-821">
            <paramref name="test" />. Typ nie jest <see cref="T:System.Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-821">
              <paramref name="test" />.Type is not <see cref="T:System.Boolean" />.</span>
          </span>
          <span data-ttu-id="8671b-822">- lub - <paramref name="ifTrue" />. Typ nie jest równa <paramref name="ifFalse" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-822">-or-  <paramref name="ifTrue" />.Type is not equal to <paramref name="ifFalse" />.Type.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <altmember cref="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression Condition(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ Condition(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Condition : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.Condition (test, ifTrue, ifFalse, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="test">
          <span data-ttu-id="8671b-823">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-823">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span>
          </span>
        </param>
        <param name="ifTrue">
          <span data-ttu-id="8671b-824">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-824">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span>
          </span>
        </param>
        <param name="ifFalse">
          <span data-ttu-id="8671b-825">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-825">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-826">A <see cref="P:System.Linq.Expressions.Expression.Type" /> można ustawić <see cref="P:System.Linq.Expressions.Expression.Type" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-826">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-827">Tworzy <see cref="T:System.Linq.Expressions.ConditionalExpression" /> reprezentujący instrukcji warunkowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-827">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-828">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> i <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, i <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-828">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-829">Ta metoda umożliwia jawne, ujednolicając naukę typ wyniku wyrażenia warunkowego, w przypadkach, gdzie typy `ifTrue` i `ifFalse` wyrażenia nie są takie same.</span><span class="sxs-lookup"><span data-stu-id="8671b-829">This method allows explicitly unifying the result type of the conditional expression in cases where the types of `ifTrue` and `ifFalse` expressions are not equal.</span></span> <span data-ttu-id="8671b-830">Oba rodzaje `ifTrue` i `ifFalse` musi być niejawnie odwołania można przypisać do typu wyniku.</span><span class="sxs-lookup"><span data-stu-id="8671b-830">Types of both `ifTrue` and `ifFalse` must be implicitly reference assignable to the result type.</span></span> <span data-ttu-id="8671b-831">`type` Może być <xref:System.Void>.</span><span class="sxs-lookup"><span data-stu-id="8671b-831">The `type` is allowed to be <xref:System.Void>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Constant">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-832">Tworzy <see cref="T:System.Linq.Expressions.ConstantExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-832">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression Constant (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression Constant(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Constant(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Constant (value As Object) As ConstantExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConstantExpression ^ Constant(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member Constant : obj -&gt; System.Linq.Expressions.ConstantExpression" Usage="System.Linq.Expressions.Expression.Constant value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="8671b-833">
            <see cref="T:System.Object" /> Można ustawić <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-833">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-834">Tworzy <see cref="T:System.Linq.Expressions.ConstantExpression" /> zawierający <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-834">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-835">A <see cref="T:System.Linq.Expressions.ConstantExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> i <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-835">A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-836"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.ConstantExpression> jest taki sam, jak typ `value`.</span><span class="sxs-lookup"><span data-stu-id="8671b-836">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConstantExpression> is equal to the type of `value`.</span></span> <span data-ttu-id="8671b-837">Jeśli `value` jest `null`, <xref:System.Linq.Expressions.Expression.Type%2A> jest równa <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="8671b-837">If `value` is `null`, <xref:System.Linq.Expressions.Expression.Type%2A> is equal to <xref:System.Object>.</span></span>  
  
 <span data-ttu-id="8671b-838">Do reprezentowania `null`, można również użyć <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> metoda, za pomocą którego możesz jawnie określić typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-838">To represent `null`, you can also use the <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> method, with which you can explicitly specify the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-839">W poniższym przykładzie kodu pokazano, jak utworzyć wyrażenie, które reprezentuje wartość stałą.</span><span class="sxs-lookup"><span data-stu-id="8671b-839">The following code example shows how to create an expression that represents a constant value.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#4)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression Constant (object value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression Constant(object value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConstantExpression ^ Constant(System::Object ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Constant : obj * Type -&gt; System.Linq.Expressions.ConstantExpression" Usage="System.Linq.Expressions.Expression.Constant (value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="8671b-840">
            <see cref="T:System.Object" /> Można ustawić <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-840">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-841">A <see cref="T:System.Type" /> można ustawić <see cref="P:System.Linq.Expressions.Expression.Type" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-841">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-842">Tworzy <see cref="T:System.Linq.Expressions.ConstantExpression" /> zawierający <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> i <see cref="P:System.Linq.Expressions.Expression.Type" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-842">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-843">A <see cref="T:System.Linq.Expressions.ConstantExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> i <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> i <see cref="P:System.Linq.Expressions.Expression.Type" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-843">A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-844">Ta metoda może być przydatna do reprezentowania wartości typów dopuszczających wartości null.</span><span class="sxs-lookup"><span data-stu-id="8671b-844">This method can be useful for representing values of nullable types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-845">Poniższy przykład kodu pokazuje sposób tworzenia wyrażenia, który reprezentuje stałą typu dopuszczającego wartość null i ustawić jej wartość na `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-845">The following code example shows how to create an expression that represents a constant of the nullable type and set its value to `null`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#22)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-846">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-846">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-847">
            <paramref name="value" /> nie jest <see langword="null" /> i <paramref name="type" /> nie jest możliwy do przypisania z typu dynamicznego <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-847">
              <paramref name="value" /> is not <see langword="null" /> and <paramref name="type" /> is not assignable from the dynamic type of <paramref name="value" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Continue">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-848">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący instrukcji continue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-848">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Continue(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Continue (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Continue(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Continue : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Continue target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="8671b-849">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> , <see cref="T:System.Linq.Expressions.GotoExpression" /> Spowoduje przejście do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-849">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-850">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący instrukcji continue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-850">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-851">A <see cref="T:System.Linq.Expressions.GotoExpression" /> z <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> równa Kontynuuj <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> właściwością <paramref name="target" />i wartość null, które zostaną przekazane do etykietą docelową po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-851">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8671b-852">Poniższy przykład przedstawia sposób tworzenia wyrażenia pętli, która używa <xref:System.Linq.Expressions.Expression.Continue%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-852">The following example demonstrates how to create a loop expression that uses the <xref:System.Linq.Expressions.Expression.Continue%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#46)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Continue(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Continue(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Continue : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Continue (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="8671b-853">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> , <see cref="T:System.Linq.Expressions.GotoExpression" /> Spowoduje przejście do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-853">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-854">
            <see cref="T:System.Type" /> Można ustawić <see cref="P:System.Linq.Expressions.Expression.Type" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-854">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-855">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący instrukcji continue z określonym typem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-855">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement with the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-856">A <see cref="T:System.Linq.Expressions.GotoExpression" /> z <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> równa Kontynuuj <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> właściwością <paramref name="target" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwością <paramref name="type" />i wartość null, które zostaną przekazane do etykietą docelową po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-856">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Convert">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-857">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący operację konwersji typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-857">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a type conversion operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Convert(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Convert(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Convert (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-858">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-858">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-859">A <see cref="T:System.Type" /> można ustawić <see cref="P:System.Linq.Expressions.Expression.Type" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-859">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-860">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący operację konwersji typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-860">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a type conversion operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-861">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> i <see cref="P:System.Linq.Expressions.Expression.Type" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-861">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-862"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Właściwość wynikowy <xref:System.Linq.Expressions.UnaryExpression> ustawiono implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-862">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="8671b-863"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> Właściwość `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-863">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="8671b-864">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-864">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="8671b-865">W przeciwnym razie jest `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-865">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-866">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-866">Implementing Method</span></span>  
 <span data-ttu-id="8671b-867">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-867">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-868">Jeśli `expression`. Typ lub `type` jest typ zdefiniowany przez użytkownika, który definiuje operator jawnych lub niejawnych konwersji <xref:System.Reflection.MethodInfo> , który reprezentuje operator jest implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-868">If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-869">W przeciwnym razie:</span><span class="sxs-lookup"><span data-stu-id="8671b-869">Otherwise:</span></span>  
  
    -   <span data-ttu-id="8671b-870">Jeśli oba `expression`. Typ i `type` reprezentują typy liczbowa lub Boolean lub Typy wyliczeniowe dopuszczającego wartość null lub wartość null, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-870">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="8671b-871">Jeśli `expression`. Typ lub `type` jest typem odwołania i jawne pakowanie, rozpakowywanie lub istnieje konwersja odwołania z `expression`. Wpisz, aby `type`, implementacja metody jest `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-871">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="8671b-872">Podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-872">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-873">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-873">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-874">Jeśli `expression`. Typ jest można przypisać do typu argumentu metody wykonawcze i typ zwracany metody wykonawcze to można przypisać do `type`, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-874">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="8671b-875">Jeśli jeden lub oba z `expression`. Typ lub `type` jest typem wartościowym i odpowiednie typy wartości nie przyjmujące wartości są równe typ argumentu oraz zwracany typ metody wykonawcze odpowiednio zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-875">If one or both of `expression`.Type or `type` is a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="8671b-876">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-876">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-877">Jeśli oba `expression`. Typ i `type` czy innych niż null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-877">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="8671b-878">W przeciwnym razie zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-878">Otherwise the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-879">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie, które reprezentuje operację konwersji typu.</span><span class="sxs-lookup"><span data-stu-id="8671b-879">The following code example shows how to create an expression that represents a type convertion operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#23)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-880">
            <paramref name="expression" /> lub <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-880">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-881">Żaden operator konwersji jest zdefiniowane między <paramref name="expression" />. Typ i <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-881">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Convert(class System.Linq.Expressions.Expression expression, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Convert(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Convert : System.Linq.Expressions.Expression * Type * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Convert (expression, type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-882">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-882">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-883">A <see cref="T:System.Type" /> można ustawić <see cref="P:System.Linq.Expressions.Expression.Type" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-883">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-884">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-884">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-885">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący operację konwersji, dla którego określono implementującej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-885">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation for which the implementing method is specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-886">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, i <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-886">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-887"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Właściwość wynikowy <xref:System.Linq.Expressions.UnaryExpression> ustawiono implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-887">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="8671b-888"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> Właściwość `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-888">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="8671b-889">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-889">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="8671b-890">W przeciwnym razie jest `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-890">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-891">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-891">Implementing Method</span></span>  
 <span data-ttu-id="8671b-892">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-892">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-893">Jeśli metoda nie jest `null`, jest to metoda implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-893">If method is not `null`, it is the implementing method.</span></span> <span data-ttu-id="8671b-894">Inny niż void, musi reprezentować `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje jeden argument.</span><span class="sxs-lookup"><span data-stu-id="8671b-894">It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
-   <span data-ttu-id="8671b-895">W przeciwnym razie, jeśli `expression`. Typ lub `type` jest typ zdefiniowany przez użytkownika, który definiuje operator jawnych lub niejawnych konwersji <xref:System.Reflection.MethodInfo> , który reprezentuje operator jest implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-895">Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-896">W przeciwnym razie:</span><span class="sxs-lookup"><span data-stu-id="8671b-896">Otherwise:</span></span>  
  
    -   <span data-ttu-id="8671b-897">Jeśli oba `expression`. Typ i `type` reprezentują typy liczbowa lub Boolean lub Typy wyliczeniowe dopuszczającego wartość null lub wartość null, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-897">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="8671b-898">Jeśli `expression`. Typ lub `type` jest typem odwołania i jawne pakowanie, rozpakowywanie lub istnieje konwersja odwołania z `expression`. Wpisz, aby `type`, implementacja metody jest `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-898">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="8671b-899">Podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-899">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-900">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-900">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-901">Jeśli `expression`. Typ jest można przypisać do typu argumentu metody wykonawcze i typ zwracany metody wykonawcze to można przypisać do `type`, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-901">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="8671b-902">Jeśli jeden lub oba z `expression`. Typ lub `type` będące typem wartościowym i odpowiednie typy wartości nie przyjmujące wartości są równe typ argumentu oraz zwracany typ metody wykonawcze odpowiednio, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-902">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="8671b-903">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-903">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-904">Jeśli oba `expression`. Typ i `type` czy innych niż null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-904">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="8671b-905">W przeciwnym razie zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-905">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-906">
            <paramref name="expression" /> lub <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-906">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-907">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie ma dokładnie jednego argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-907">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-908">Żaden operator konwersji jest zdefiniowane między <paramref name="expression" />. Typ i <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-908">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span>
          </span>
          <span data-ttu-id="8671b-909">- lub - <paramref name="expression" />. Typ nie jest możliwy do przypisania do typu argumentu metody reprezentowanej przez <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-909">-or-  <paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="8671b-910">- lub - zwracany typ metody reprezentowanej przez <paramref name="method" /> nie można przypisać do <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-910">-or-  The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.</span>
          </span>
          <span data-ttu-id="8671b-911">- lub - <paramref name="expression" />. Typ lub <paramref name="type" /> jest typem wartościowym i odpowiedni typ wartości nie przyjmujące wartości nie jest równa typu argument lub zwracany typ, odpowiednio, metody, reprezentowane przez <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-911">-or-  <paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="8671b-912">Więcej niż jednej metody, który odpowiada <paramref name="method" /> znaleziono opisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-912">More than one method that matches the <paramref name="method" /> description was found.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-913">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący operację konwersji, która zgłosiła wyjątek, jeśli typ docelowy jest przepełniony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-913">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ConvertChecked(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ConvertChecked(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member ConvertChecked : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.ConvertChecked (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-914">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-914">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-915">A <see cref="T:System.Type" /> można ustawić <see cref="P:System.Linq.Expressions.Expression.Type" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-915">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-916">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący operację konwersji, która zgłosiła wyjątek, jeśli typ docelowy jest przepełniony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-916">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-917">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> i <see cref="P:System.Linq.Expressions.Expression.Type" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-917">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-918"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Właściwość wynikowy <xref:System.Linq.Expressions.UnaryExpression> ustawiono implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-918">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="8671b-919"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> Właściwość `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-919">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="8671b-920">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-920">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="8671b-921">W przeciwnym razie jest `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-921">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-922">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-922">Implementing Method</span></span>  
 <span data-ttu-id="8671b-923">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-923">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-924">Jeśli `expression`. Typ lub `type` jest typ zdefiniowany przez użytkownika, który definiuje operator jawnych lub niejawnych konwersji <xref:System.Reflection.MethodInfo> , który reprezentuje operator jest implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-924">If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-925">W przeciwnym razie:</span><span class="sxs-lookup"><span data-stu-id="8671b-925">Otherwise:</span></span>  
  
    -   <span data-ttu-id="8671b-926">Jeśli oba `expression`. Typ i `type` reprezentują typy liczbowa lub Boolean lub Typy wyliczeniowe dopuszczającego wartość null lub wartość null, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-926">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="8671b-927">Jeśli `expression`. Typ lub `type` jest typem odwołania i jawne pakowanie, rozpakowywanie lub istnieje konwersja odwołania z `expression`. Wpisz, aby `type`, implementacja metody jest `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-927">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="8671b-928">Podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-928">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-929">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-929">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-930">Jeśli `expression`. Typ jest można przypisać do typu argumentu metody wykonawcze i typ zwracany metody wykonawcze to można przypisać do `type`, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-930">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="8671b-931">Jeśli jeden lub oba z `expression`. Typ lub `type` będące typem wartościowym i odpowiednie typy wartości nie przyjmujące wartości są równe typ argumentu oraz zwracany typ metody wykonawcze odpowiednio, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-931">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="8671b-932">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-932">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-933">Jeśli oba `expression`. Typ i `type` czy innych niż null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-933">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="8671b-934">W przeciwnym razie zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-934">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-935">
            <paramref name="expression" /> lub <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-935">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-936">Żaden operator konwersji jest zdefiniowane między <paramref name="expression" />. Typ i <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-936">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ConvertChecked(class System.Linq.Expressions.Expression expression, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ConvertChecked(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ConvertChecked : System.Linq.Expressions.Expression * Type * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.ConvertChecked (expression, type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-937">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-937">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-938">A <see cref="T:System.Type" /> można ustawić <see cref="P:System.Linq.Expressions.Expression.Type" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-938">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-939">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-939">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-940">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący operację konwersji, która zgłosiła wyjątek, jeśli typ docelowy jest przepełniony i dla którego określono implementującej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-940">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-941">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, i <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-941">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-942"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Właściwość wynikowy <xref:System.Linq.Expressions.UnaryExpression> ustawiono implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-942">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="8671b-943"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> Właściwość `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-943">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="8671b-944">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-944">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="8671b-945">W przeciwnym razie jest `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-945">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-946">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-946">Implementing Method</span></span>  
 <span data-ttu-id="8671b-947">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-947">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-948">Jeśli metoda nie jest `null`, jest to metoda implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-948">If method is not `null`, it is the implementing method.</span></span> <span data-ttu-id="8671b-949">Inny niż void, musi reprezentować `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje jeden argument.</span><span class="sxs-lookup"><span data-stu-id="8671b-949">It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
-   <span data-ttu-id="8671b-950">W przeciwnym razie, jeśli `expression`. Typ lub `type` jest typ zdefiniowany przez użytkownika, który definiuje operator jawnych lub niejawnych konwersji <xref:System.Reflection.MethodInfo> , który reprezentuje operator jest implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-950">Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-951">W przeciwnym razie:</span><span class="sxs-lookup"><span data-stu-id="8671b-951">Otherwise:</span></span>  
  
    -   <span data-ttu-id="8671b-952">Jeśli oba `expression`. Typ i `type` reprezentują typy liczbowa lub Boolean lub Typy wyliczeniowe dopuszczającego wartość null lub wartość null, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-952">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="8671b-953">Jeśli `expression`. Typ lub `type` jest typem odwołania i jawne pakowanie, rozpakowywanie lub istnieje konwersja odwołania z `expression`. Wpisz, aby `type`, implementacja metody jest `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-953">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="8671b-954">Podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-954">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-955">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-955">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-956">Jeśli `expression`. Typ jest można przypisać do typu argumentu metody wykonawcze i typ zwracany metody wykonawcze to można przypisać do `type`, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-956">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="8671b-957">Jeśli jeden lub oba z `expression`. Typ lub `type` będące typem wartościowym i odpowiednie typy wartości nie przyjmujące wartości są równe typ argumentu oraz zwracany typ metody wykonawcze odpowiednio, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-957">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="8671b-958">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-958">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-959">Jeśli oba `expression`. Typ i `type` czy innych niż null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-959">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="8671b-960">W przeciwnym razie zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-960">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-961">
            <paramref name="expression" /> lub <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-961">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-962">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie ma dokładnie jednego argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-962">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-963">Żaden operator konwersji jest zdefiniowane między <paramref name="expression" />. Typ i <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-963">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span>
          </span>
          <span data-ttu-id="8671b-964">- lub - <paramref name="expression" />. Typ nie jest możliwy do przypisania do typu argumentu metody reprezentowanej przez <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-964">-or-  <paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="8671b-965">- lub - zwracany typ metody reprezentowanej przez <paramref name="method" /> nie można przypisać do <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-965">-or-  The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.</span>
          </span>
          <span data-ttu-id="8671b-966">- lub - <paramref name="expression" />. Typ lub <paramref name="type" /> jest typem wartościowym i odpowiedni typ wartości nie przyjmujące wartości nie jest równa typu argument lub zwracany typ, odpowiednio, metody, reprezentowane przez <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-966">-or-  <paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="8671b-967">Więcej niż jednej metody, który odpowiada <paramref name="method" /> znaleziono opisu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-967">More than one method that matches the <paramref name="method" /> description was found.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DebugInfo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DebugInfoExpression DebugInfo (System.Linq.Expressions.SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DebugInfoExpression DebugInfo(class System.Linq.Expressions.SymbolDocumentInfo document, int32 startLine, int32 startColumn, int32 endLine, int32 endColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DebugInfo (document As SymbolDocumentInfo, startLine As Integer, startColumn As Integer, endLine As Integer, endColumn As Integer) As DebugInfoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DebugInfoExpression ^ DebugInfo(System::Linq::Expressions::SymbolDocumentInfo ^ document, int startLine, int startColumn, int endLine, int endColumn);" />
      <MemberSignature Language="F#" Value="static member DebugInfo : System.Linq.Expressions.SymbolDocumentInfo * int * int * int * int -&gt; System.Linq.Expressions.DebugInfoExpression" Usage="System.Linq.Expressions.Expression.DebugInfo (document, startLine, startColumn, endLine, endColumn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DebugInfoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Linq.Expressions.SymbolDocumentInfo" />
        <Parameter Name="startLine" Type="System.Int32" />
        <Parameter Name="startColumn" Type="System.Int32" />
        <Parameter Name="endLine" Type="System.Int32" />
        <Parameter Name="endColumn" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="document">
          <span data-ttu-id="8671b-968">
            <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> Reprezentujący plik źródłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-968">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</span>
          </span>
        </param>
        <param name="startLine">
          <span data-ttu-id="8671b-969">Wiersz start <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-969">The start line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
          <span data-ttu-id="8671b-970">Musi być większa niż 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-970">Must be greater than 0.</span>
          </span>
        </param>
        <param name="startColumn">
          <span data-ttu-id="8671b-971">Kolumna start <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-971">The start column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
          <span data-ttu-id="8671b-972">Musi być większa niż 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-972">Must be greater than 0.</span>
          </span>
        </param>
        <param name="endLine">
          <span data-ttu-id="8671b-973">Wiersz końcowy <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-973">The end line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
          <span data-ttu-id="8671b-974">Musi być większy lub równy niż linia rozpoczęcia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-974">Must be greater or equal than the start line.</span>
          </span>
        </param>
        <param name="endColumn">
          <span data-ttu-id="8671b-975">Kolumna zakończenia <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-975">The end column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
          <span data-ttu-id="8671b-976">Jeśli wiersz końcowy jest taki sam jak początek wiersza, musi być większy lub równy niż kolumna rozpoczęcia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-976">If the end line is the same as the start line, it must be greater or equal than the start column.</span>
          </span>
          <span data-ttu-id="8671b-977">W każdym przypadku musi być większa niż 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-977">In any case, must be greater than 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-978">Tworzy <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> z określonym zakresem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-978">Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> with the specified span.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-979">Wystąpienie <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-979">An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Decrement">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-980">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący zmniejszanie wyrażenia o 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-980">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Decrement(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Decrement(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Decrement : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Decrement expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-981">
            <see cref="T:System.Linq.Expressions.Expression" /> Zmniejszyć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-981">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-982">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący zmniejszanie wyrażenia o 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-982">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-983">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący wraz z przydzielaniem wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-983">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-984">To wyrażenie będzie działać i nie zmienia wartość przekazany obiekt.</span><span class="sxs-lookup"><span data-stu-id="8671b-984">This expression is functional and does not change the value of the object passed to it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-985">Poniższy przykład kodu pokazuje sposób tworzenia wyrażenia tego substracts 1 z danej wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-985">The following code example shows how to create an expression that substracts 1 from a given value.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#5)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Decrement(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Decrement(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Decrement : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Decrement (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-986">
            <see cref="T:System.Linq.Expressions.Expression" /> Zmniejszyć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-986">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-987">A <see cref="T:System.Reflection.MethodInfo" /> reprezentujący implementującej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-987">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-988">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący zmniejszanie wyrażenia o 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-988">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-989">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący wraz z przydzielaniem wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-989">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-990">To wyrażenie będzie działać i nie zmienia wartość przekazany obiekt.</span><span class="sxs-lookup"><span data-stu-id="8671b-990">This expression is functional and does not change the value of the object passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DefaultExpression Default (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DefaultExpression Default(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Default(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DefaultExpression ^ Default(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Default : Type -&gt; System.Linq.Expressions.DefaultExpression" Usage="System.Linq.Expressions.Expression.Default type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DefaultExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-991">A <see cref="T:System.Type" /> można ustawić <see cref="P:System.Linq.Expressions.Expression.Type" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-991">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-992">Tworzy <see cref="T:System.Linq.Expressions.DefaultExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwość o określonym typie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-992">Creates a <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-993">A <see cref="T:System.Linq.Expressions.DefaultExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> i <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwość o określonym typie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-993">A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8671b-994">Poniższy przykład kodu pokazuje sposób tworzenia wyrażenia, który reprezentuje vaule domyślny dla danego typu.</span><span class="sxs-lookup"><span data-stu-id="8671b-994">The following code example shows how to create an expression that represents a default vaule for a given type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#6)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Divide">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-995">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację arytmetycznego dzielenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-995">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Divide(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Divide(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Divide (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-996">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-996">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-997">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-997">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-998">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację arytmetycznego dzielenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-998">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-999">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-999">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1000">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-1000">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-1001"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1001">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-1002">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1002">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-1003">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1003">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-1004"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1004">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-1005">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1005">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-1006">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-1006">Implementing Method</span></span>  
 <span data-ttu-id="8671b-1007">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-1007">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-1008">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator dzielenia <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1008">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1009">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1009">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-1010">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-1010">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-1011">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1011">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1012">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1012">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-1013">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1013">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1014">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-1014">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-1015">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1015">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-1016">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-1016">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-1017">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1017">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1018">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1018">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-1019">Typ węzła jest operator dzielenia wstępnie zdefiniowany typ wyniku.</span><span class="sxs-lookup"><span data-stu-id="8671b-1019">The type of the node is the result type of the predefined division operator.</span></span>  
  
-   <span data-ttu-id="8671b-1020">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1020">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-1021">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku operator dzielenia wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-1021">The type of the node is the nullable type that corresponds to the result type of the predefined division operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-1022">Poniższy przykład kodu pokazuje sposób tworzenia wyrażenia, która dzieli dzieli swój pierwszy argument przez drugi argument.</span><span class="sxs-lookup"><span data-stu-id="8671b-1022">The following code example shows how to create an expression that divides divides its first argument by its second argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#7)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1023">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1023">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-1024">Nie zdefiniowano operator dzielenia dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1024">The division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Divide(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Divide(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Divide (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1025">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1025">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1026">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1026">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-1027">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1027">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1028">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację arytmetycznego dzielenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1028">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span>
          </span>
          <span data-ttu-id="8671b-1029">Implementowanie metoda może być określona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1029">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1030">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1030">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1031">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-1031">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-1032"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1032">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-1033">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1033">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-1034">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1034">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-1035"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1035">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-1036">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1036">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-1037">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-1037">Implementing Method</span></span>  
 <span data-ttu-id="8671b-1038">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-1038">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-1039">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest implementującej metody dla węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1039">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="8671b-1040">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator dzielenia <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1040">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1041">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1041">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-1042">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-1042">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-1043">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1043">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1044">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1044">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-1045">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1045">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1046">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-1046">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-1047">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1047">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-1048">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-1048">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-1049">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1049">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1050">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1050">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-1051">Typ węzła jest operator dzielenia wstępnie zdefiniowany typ wyniku.</span><span class="sxs-lookup"><span data-stu-id="8671b-1051">The type of the node is the result type of the predefined division operator.</span></span>  
  
-   <span data-ttu-id="8671b-1052">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1052">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-1053">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku operator dzielenia wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-1053">The type of the node is the nullable type that corresponds to the result type of the predefined division operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1054">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1054">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1055">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1055">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-1056">
            <paramref name="method" /> jest <see langword="null" /> i nie zdefiniowano operator dzielenia dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1056">
              <paramref name="method" /> is <see langword="null" /> and the division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DivideAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1057">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisanie dzielenia, które ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1057">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member DivideAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.DivideAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1058">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1058">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1059">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1059">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1060">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisanie dzielenia, które ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1060">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1061">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1061">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member DivideAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.DivideAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1062">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1062">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1063">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1063">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-1064">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1064">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1065">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisanie dzielenia, które ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1065">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1066">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1066">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member DivideAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.DivideAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1067">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1067">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1068">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1068">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-1069">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1069">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="8671b-1070">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1070">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1071">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisanie dzielenia, które ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1071">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1072">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1072">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dynamic">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1073">Tworzy <see cref="T:System.Linq.Expressions.DynamicExpression" /> reprezentujący operację dynamiczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1073">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arguments As IEnumerable(Of Expression)) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="8671b-1074">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1074">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="8671b-1075">Typ wyniku wyrażenia dynamicznego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1075">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-1076">Argumenty operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1076">The arguments to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1077">Tworzy <see cref="T:System.Linq.Expressions.DynamicExpression" /> reprezentujący operację dynamiczną przez podany <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1077">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1078">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> i ma <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> i <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> równa określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1078">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1079"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> Właściwości wyniku zostanie wywnioskowany z typami argumentów i określony typ zwracany.</span><span class="sxs-lookup"><span data-stu-id="8671b-1079">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="8671b-1080">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1080">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="8671b-1081">Typ wyniku wyrażenia dynamicznego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1081">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="8671b-1082">Pierwszy argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1082">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1083">Tworzy <see cref="T:System.Linq.Expressions.DynamicExpression" /> reprezentujący operację dynamiczną przez podany <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1083">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1084">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> i ma <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> i <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> równa określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1084">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1085"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> Właściwości wyniku zostanie wywnioskowany z typami argumentów i określony typ zwracany.</span><span class="sxs-lookup"><span data-stu-id="8671b-1085">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, ParamArray arguments As Expression()) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="8671b-1086">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1086">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="8671b-1087">Typ wyniku wyrażenia dynamicznego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1087">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-1088">Argumenty operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1088">The arguments to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1089">Tworzy <see cref="T:System.Linq.Expressions.DynamicExpression" /> reprezentujący operację dynamiczną przez podany <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1089">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1090">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> i ma <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> i <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> równa określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1090">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1091"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> Właściwości wyniku zostanie wywnioskowany z typami argumentów i określony typ zwracany.</span><span class="sxs-lookup"><span data-stu-id="8671b-1091">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="8671b-1092">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1092">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="8671b-1093">Typ wyniku wyrażenia dynamicznego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1093">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="8671b-1094">Pierwszy argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1094">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="8671b-1095">Drugi argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1095">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1096">Tworzy <see cref="T:System.Linq.Expressions.DynamicExpression" /> reprezentujący operację dynamiczną przez podany <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1096">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1097">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> i ma <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> i <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> równa określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1097">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1098"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> Właściwości wyniku zostanie wywnioskowany z typami argumentów i określony typ zwracany.</span><span class="sxs-lookup"><span data-stu-id="8671b-1098">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression, arg2 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="8671b-1099">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1099">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="8671b-1100">Typ wyniku wyrażenia dynamicznego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1100">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="8671b-1101">Pierwszy argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1101">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="8671b-1102">Drugi argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1102">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="8671b-1103">Trzeci argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1103">The third argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1104">Tworzy <see cref="T:System.Linq.Expressions.DynamicExpression" /> reprezentujący operację dynamiczną przez podany <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1104">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1105">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> i ma <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> i <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> równa określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1105">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1106"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> Właściwości wyniku zostanie wywnioskowany z typami argumentów i określony typ zwracany.</span><span class="sxs-lookup"><span data-stu-id="8671b-1106">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Dynamic : System.Runtime.CompilerServices.CallSiteBinder * Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.Dynamic (binder, returnType, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="8671b-1107">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1107">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="8671b-1108">Typ wyniku wyrażenia dynamicznego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1108">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="8671b-1109">Pierwszy argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1109">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="8671b-1110">Drugi argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1110">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="8671b-1111">Trzeci argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1111">The third argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="8671b-1112">Czwarty argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1112">The fourth argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1113">Tworzy <see cref="T:System.Linq.Expressions.DynamicExpression" /> reprezentujący operację dynamiczną przez podany <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1113">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1114">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> i ma <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> i <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> równa określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1114">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1115"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> Właściwości wyniku zostanie wywnioskowany z typami argumentów i określony typ zwracany.</span><span class="sxs-lookup"><span data-stu-id="8671b-1115">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ElementInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1116">Tworzy <see cref="T:System.Linq.Expressions.ElementInit" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1116">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ElementInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ElementInit ElementInit(class System.Reflection.MethodInfo addMethod, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElementInit (addMethod As MethodInfo, arguments As IEnumerable(Of Expression)) As ElementInit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ElementInit ^ ElementInit(System::Reflection::MethodInfo ^ addMethod, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member ElementInit : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.ElementInit" Usage="System.Linq.Expressions.Expression.ElementInit (addMethod, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="addMethod">
          <span data-ttu-id="8671b-1117">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1117">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-1118">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.Expression" /> obiektów, aby ustawić <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1118">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1119">Tworzy <see cref="T:System.Linq.Expressions.ElementInit" />, danego <see cref="T:System.Collections.Generic.IEnumerable`1" /> jako drugi argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1119">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an <see cref="T:System.Collections.Generic.IEnumerable`1" /> as the second argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1120">
            <see cref="T:System.Linq.Expressions.ElementInit" /> Zawierający <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> i <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1120">An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1121">`addMethod` Parametru musi reprezentować metodę instancji o nazwie "Add" (jest uwzględniana wielkość liter).</span><span class="sxs-lookup"><span data-stu-id="8671b-1121">The `addMethod` parameter must represent an instance method named "Add" (case insensitive).</span></span> <span data-ttu-id="8671b-1122">Metoda add musi mieć taką samą liczbę parametrów jak liczba elementów w `arguments`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1122">The add method must have the same number of parameters as the number of elements in `arguments`.</span></span> <span data-ttu-id="8671b-1123"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwości każdego elementu w `arguments` musi być można przypisać do typu odpowiedniego parametru metody add prawdopodobnie po *cytowanie*.</span><span class="sxs-lookup"><span data-stu-id="8671b-1123">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8671b-1124">Element będzie można podać tylko wtedy, gdy z odpowiadającym mu parametrem metody typu <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1124">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="8671b-1125">Cytowanie oznacza, że element jest opakowana w <xref:System.Linq.Expressions.ExpressionType.Quote> węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1125">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="8671b-1126">Węzeł wynikowy jest <xref:System.Linq.Expressions.UnaryExpression> którego <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> właściwości jest elementem `arguments`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1126">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-1127">Poniższy przykład pokazuje sposób użycia <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> metodę w celu utworzenia <xref:System.Linq.Expressions.ElementInit> reprezentujący wywołanie <xref:System.Collections.Generic.Dictionary%602.Add%2A> metodę, aby zainicjować element kolekcji słownika.</span><span class="sxs-lookup"><span data-stu-id="8671b-1127">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]
 [!code-vb[System.Linq.Expressions.Expression#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1128">
            <paramref name="addMethod" /> lub <paramref name="arguments" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1128">
              <paramref name="addMethod" /> or <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1129">Metoda, <paramref name="addMethod" /> reprezentuje nie nosi nazwę "Add" (jest uwzględniana wielkość liter).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1129">The method that <paramref name="addMethod" /> represents is not named "Add" (case insensitive).</span>
          </span>
          <span data-ttu-id="8671b-1130">- lub - metody, która <paramref name="addMethod" /> reprezentuje nie jest metodą wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1130">-or-  The method that <paramref name="addMethod" /> represents is not an instance method.</span>
          </span>
          <span data-ttu-id="8671b-1131">- lub - <paramref name="arguments" /> nie zawiera taką samą liczbę elementów jako liczba parametrów dla metody, <paramref name="addMethod" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1131">-or-  <paramref name="arguments" /> does not contain the same number of elements as the number of parameters for the method that <paramref name="addMethod" /> represents.</span>
          </span>
          <span data-ttu-id="8671b-1132">- lub - <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwości jednego lub więcej elementów <paramref name="arguments" /> nie można przypisać do typu odpowiedniego parametru metody, która <paramref name="addMethod" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1132">-or-  The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ElementInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ElementInit ElementInit(class System.Reflection.MethodInfo addMethod, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElementInit (addMethod As MethodInfo, ParamArray arguments As Expression()) As ElementInit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ElementInit ^ ElementInit(System::Reflection::MethodInfo ^ addMethod, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member ElementInit : System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.ElementInit" Usage="System.Linq.Expressions.Expression.ElementInit (addMethod, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="addMethod">
          <span data-ttu-id="8671b-1133">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1133">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-1134">Tablica <see cref="T:System.Linq.Expressions.Expression" /> obiektów, aby ustawić <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1134">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1135">Tworzy <see cref="T:System.Linq.Expressions.ElementInit" />, biorąc pod uwagę tablicę wartości, jako drugi argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1135">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an array of values as the second argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1136">
            <see cref="T:System.Linq.Expressions.ElementInit" /> Zawierający <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> i <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1136">An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1137">`addMethod` Parametru musi reprezentować metodę instancji o nazwie "Add" (jest uwzględniana wielkość liter).</span><span class="sxs-lookup"><span data-stu-id="8671b-1137">The `addMethod` parameter must represent an instance method named "Add" (case insensitive).</span></span> <span data-ttu-id="8671b-1138">Metoda add musi mieć taką samą liczbę parametrów jak liczba elementów w `arguments`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1138">The add method must have the same number of parameters as the number of elements in `arguments`.</span></span> <span data-ttu-id="8671b-1139"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwości każdego elementu w `arguments` musi być można przypisać do typu odpowiedniego parametru metody add prawdopodobnie po *cytowanie*.</span><span class="sxs-lookup"><span data-stu-id="8671b-1139">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8671b-1140">Element będzie można podać tylko wtedy, gdy z odpowiadającym mu parametrem metody typu <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1140">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="8671b-1141">Cytowanie oznacza, że element jest opakowana w <xref:System.Linq.Expressions.ExpressionType.Quote> węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1141">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="8671b-1142">Węzeł wynikowy jest <xref:System.Linq.Expressions.UnaryExpression> którego <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> właściwości jest elementem `arguments`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1142">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-1143">Poniższy przykład pokazuje sposób użycia <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> metodę w celu utworzenia <xref:System.Linq.Expressions.ElementInit> reprezentujący wywołanie <xref:System.Collections.Generic.Dictionary%602.Add%2A> metodę, aby zainicjować element kolekcji słownika.</span><span class="sxs-lookup"><span data-stu-id="8671b-1143">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]
 [!code-vb[System.Linq.Expressions.Expression#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1144">
            <paramref name="addMethod" /> lub <paramref name="arguments" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1144">
              <paramref name="addMethod" /> or <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1145">Metody, która reprezentuje addMethod jest nazwane "Add" (jest uwzględniana wielkość liter).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1145">The method that addMethod represents is not named "Add" (case insensitive).</span>
          </span>
          <span data-ttu-id="8671b-1146">- lub - metoda że reprezentuje addMethod nie jest metodą wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1146">-or-  The method that addMethod represents is not an instance method.</span>
          </span>
          <span data-ttu-id="8671b-1147">- lub - argumenty nie zawierać taką samą liczbę elementów jako liczba parametrów dla metody tego addMethod reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1147">-or-  arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.</span>
          </span>
          <span data-ttu-id="8671b-1148">- lub - <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwości jednego lub więcej elementów <paramref name="arguments" /> nie można przypisać do typu odpowiedniego parametru metody, która <paramref name="addMethod" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1148">-or-  The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DefaultExpression Empty ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DefaultExpression Empty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Empty () As DefaultExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DefaultExpression ^ Empty();" />
      <MemberSignature Language="F#" Value="static member Empty : unit -&gt; System.Linq.Expressions.DefaultExpression" Usage="System.Linq.Expressions.Expression.Empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DefaultExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1149">Tworzy puste wyrażenie, które ma <see cref="T:System.Void" /> typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1149">Creates an empty expression that has <see cref="T:System.Void" /> type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1150">A <see cref="T:System.Linq.Expressions.DefaultExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> i <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwością <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1150">A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <see cref="T:System.Void" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1151">Puste wyrażenie może służyć w sytuacji, gdy Oczekiwano wyrażenia, ale żadna akcja jest pożądane.</span><span class="sxs-lookup"><span data-stu-id="8671b-1151">An empty expression can be used where an expression is expected but no action is desired.</span></span> <span data-ttu-id="8671b-1152">Na przykład służy puste wyrażenie jako ostatniego wyrażenia w wyrażeniu bloku.</span><span class="sxs-lookup"><span data-stu-id="8671b-1152">For example, you can use an empty expression as the last expression in a block expression.</span></span> <span data-ttu-id="8671b-1153">W tym przypadku wyrażenie bloku zwracana wartość jest typu void.</span><span class="sxs-lookup"><span data-stu-id="8671b-1153">In this case, the block expression's return value is void.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-1154">Poniższy przykład kodu pokazuje sposób tworzenia wyrażenia empty i dodać go do wyrażenia bloku.</span><span class="sxs-lookup"><span data-stu-id="8671b-1154">The following code example shows how to create an empty expression and add it to a block expression.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#31)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equal">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1155">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący porównanie równości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1155">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Equal(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equal (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Equal(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Equal : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Equal (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1156">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1156">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1157">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1157">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1158">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący porównanie równości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1158">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1159">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1159">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1160">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-1160">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-1161"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1161">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-1162">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> właściwość `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1162">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="8671b-1163">W przeciwnym razie jest `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1163">Otherwise, it is `false`.</span></span> <span data-ttu-id="8671b-1164"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> Właściwość jest zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1164">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="8671b-1165">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1165">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-1166">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-1166">Implementing Method</span></span>  
 <span data-ttu-id="8671b-1167">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-1167">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-1168">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora równości <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1168">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1169">W przeciwnym razie jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1169">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-1170">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-1170">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-1171">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1171">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1172">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1172">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-1173">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1173">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1174">Jeśli są spełnione następujące dwa warunki, węzeł zostało zniesione i typ węzła jest <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="8671b-1174">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="8671b-1175">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1175">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-1176">Zwracany typ metody wykonawcze jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1176">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="8671b-1177">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1177">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1178">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1178">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-1179">Typ węzła jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1179">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="8671b-1180">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1180">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-1181">Typ węzła jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1181">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-1182">W poniższym przykładzie kodu pokazano, jak utworzyć wyrażenie, które sprawdza, czy wartości dwóch argumentów są takie same.</span><span class="sxs-lookup"><span data-stu-id="8671b-1182">The following code example shows how to create an expression that checks whether the values of its two arguments are equal.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#8)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1183">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1183">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-1184">Nie zdefiniowano operator równości dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1184">The equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Equal(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equal (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Equal(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Equal : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Equal (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1185">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1185">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1186">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1186">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="8671b-1187">
            <see langword="true" /> Aby ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> do <see langword="true" />; <see langword="false" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> do <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1187">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-1188">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1188">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1189">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący porównanie równości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1189">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span>
          </span>
          <span data-ttu-id="8671b-1190">Implementowanie metoda może być określona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1190">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1191">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1191">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1192">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-1192">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-1193"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1193">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-1194">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> właściwość `true` i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości jest równa `liftToNull`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1194">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="8671b-1195">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1195">Otherwise, they are both `false`.</span></span> <span data-ttu-id="8671b-1196">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1196">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-1197">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-1197">Implementing Method</span></span>  
 <span data-ttu-id="8671b-1198">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-1198">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-1199">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest metoda implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1199">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1200">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora równości <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1200">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1201">W przeciwnym razie jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1201">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-1202">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-1202">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-1203">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1203">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1204">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1204">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-1205">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1205">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1206">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione; Ponadto typ węzła ma wartość null <xref:System.Boolean> Jeśli `liftToNull` jest `true` lub <xref:System.Boolean> Jeśli `liftToNull` jest `false`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1206">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="8671b-1207">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1207">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-1208">Zwracany typ metody wykonawcze jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1208">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="8671b-1209">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1209">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1210">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1210">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-1211">Typ węzła jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1211">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="8671b-1212">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1212">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-1213">Typ węzła ma wartość null <xref:System.Boolean> Jeśli `liftToNull` jest `true` lub <xref:System.Boolean> Jeśli `liftToNull` jest `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1213">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1214">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1214">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1215">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1215">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-1216">
            <paramref name="method" /> jest <see langword="null" /> i nie zdefiniowano operator równości dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1216">
              <paramref name="method" /> is <see langword="null" /> and the equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExclusiveOr">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1217">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący bitowej <see langword="XOR" /> operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1217">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOr(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOr (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOr(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOr : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOr (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1218">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1218">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1219">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1219">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1220">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący bitowej <see langword="XOR" /> operacji przy użyciu <c>op_exclusiveor —</c> dla typów zdefiniowanych przez użytkownika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1220">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1221">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1221">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1222">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-1222">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-1223"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1223">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-1224">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1224">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-1225">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1225">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-1226"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1226">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-1227">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1227">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-1228">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-1228">Implementing Method</span></span>  
 <span data-ttu-id="8671b-1229">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-1229">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-1230">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia `XOR` operatora <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1230">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1231">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ typów całkowitych lub wartości logicznej, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1231">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-1232">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-1232">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-1233">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1233">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1234">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1234">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-1235">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1235">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1236">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-1236">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-1237">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1237">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-1238">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-1238">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-1239">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1239">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1240">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1240">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-1241">Typ węzła jest typ wyniku jest wstępnie zdefiniowane `XOR` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-1241">The type of the node is the result type of the predefined `XOR` operator.</span></span>  
  
-   <span data-ttu-id="8671b-1242">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1242">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-1243">Typ węzła jest typ dopuszczający wartość null, który odpowiada typ wyniku jest wstępnie zdefiniowane `XOR` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-1243">The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-1244">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie, które reprezentuje operację logiczną XOR.</span><span class="sxs-lookup"><span data-stu-id="8671b-1244">The following code example shows how to create an expression that represents the logical XOR operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#9)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1245">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1245">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-1246">
            <see langword="XOR" /> Operator nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1246">The <see langword="XOR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOr(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOr (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOr(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOr : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOr (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1247">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1247">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1248">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1248">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-1249">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1249">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1250">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący bitowej <see langword="XOR" /> operacji przy użyciu <c>op_exclusiveor —</c> dla typów zdefiniowanych przez użytkownika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1250">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
          <span data-ttu-id="8671b-1251">Implementowanie metoda może być określona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1251">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1252">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1252">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1253">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-1253">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-1254"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1254">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-1255">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1255">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-1256">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1256">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-1257"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1257">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-1258">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1258">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-1259">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-1259">Implementing Method</span></span>  
 <span data-ttu-id="8671b-1260">Następujące reguły określają wybrane implementacja metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-1260">The following rules determine the chosen implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-1261">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest metoda implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1261">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1262">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia `XOR` operatora <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1262">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1263">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ typów całkowitych lub wartości logicznej, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1263">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-1264">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-1264">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-1265">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1265">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1266">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1266">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-1267">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1267">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1268">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-1268">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-1269">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1269">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-1270">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-1270">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-1271">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1271">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1272">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1272">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-1273">Typ węzła jest typ wyniku jest wstępnie zdefiniowane `XOR` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-1273">The type of the node is the result type of the predefined `XOR` operator.</span></span>  
  
-   <span data-ttu-id="8671b-1274">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1274">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-1275">Typ węzła jest typ dopuszczający wartość null, który odpowiada typ wyniku jest wstępnie zdefiniowane `XOR` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-1275">The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1276">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1276">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1277">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1277">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-1278">
            <paramref name="method" /> jest <see langword="null" /> i <see langword="XOR" /> operator nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1278">
              <paramref name="method" /> is <see langword="null" /> and the <see langword="XOR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExclusiveOrAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1279">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania bitowe XOR.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1279">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOrAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1280">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1280">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1281">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1281">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1282">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania bitowe XOR przy użyciu <c>op_exclusiveor —</c> dla typów zdefiniowanych przez użytkownika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1282">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1283">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1283">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOrAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1284">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1284">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1285">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1285">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-1286">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1286">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1287">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania bitowe XOR przy użyciu <c>op_exclusiveor —</c> dla typów zdefiniowanych przez użytkownika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1287">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1288">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1288">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member ExclusiveOrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ExclusiveOrAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1289">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1289">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1290">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1290">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-1291">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1291">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="8671b-1292">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1292">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1293">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania bitowe XOR przy użyciu <c>op_exclusiveor —</c> dla typów zdefiniowanych przez użytkownika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1293">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1294">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1294">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Field">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1295">Tworzy <see cref="T:System.Linq.Expressions.MemberExpression" /> reprezentująca dostęp do pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1295">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, System.Reflection.FieldInfo field);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, class System.Reflection.FieldInfo field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, System::Reflection::FieldInfo ^ field);" />
      <MemberSignature Language="F#" Value="static member Field : System.Linq.Expressions.Expression * System.Reflection.FieldInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Field (expression, field)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="field" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-1296">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1296">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span>
          </span>
          <span data-ttu-id="8671b-1297">Aby uzyskać <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), <c>wyrażenie</c> musi być <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1297">For <see langword="static" /> (<see langword="Shared" /> in Visual Basic), <c>expression</c> must be <see langword="null" />.</span>
          </span>
        </param>
        <param name="field">
          <span data-ttu-id="8671b-1298">
            <see cref="T:System.Reflection.FieldInfo" /> Można ustawić <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1298">The <see cref="T:System.Reflection.FieldInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1299">Tworzy <see cref="T:System.Linq.Expressions.MemberExpression" /> reprezentująca dostęp do pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1299">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1300">A <see cref="T:System.Linq.Expressions.MemberExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> i <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> i <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1300">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1301"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.MemberExpression> jest równa <xref:System.Reflection.FieldInfo.FieldType%2A> właściwość `field`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1301">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of `field`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1302">
            <paramref name="field" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1302">
              <paramref name="field" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-1303">- lub - pola, reprezentowane przez <paramref name="field" /> nie <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic) i <paramref name="expression" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1303">-or-  The field represented by <paramref name="field" /> is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1304">
            <paramref name="expression" />. Typ nie jest możliwy do przypisania do pola, reprezentowane przez typ deklarujący <paramref name="field" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1304">
              <paramref name="expression" />.Type is not assignable to the declaring type of the field represented by <paramref name="field" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, System::String ^ fieldName);" />
      <MemberSignature Language="F#" Value="static member Field : System.Linq.Expressions.Expression * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Field (expression, fieldName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-1305">
            <see cref="T:System.Linq.Expressions.Expression" /> Którego <see cref="P:System.Linq.Expressions.Expression.Type" /> zawiera pole o nazwie <c>fieldName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1305">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a field named <c>fieldName</c>.</span>
          </span>
          <span data-ttu-id="8671b-1306">Może to być wartość null w przypadku pola statyczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1306">This can be null for static fields.</span>
          </span>
        </param>
        <param name="fieldName">
          <span data-ttu-id="8671b-1307">Nazwa pola można uzyskać dostęp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1307">The name of a field to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1308">Tworzy <see cref="T:System.Linq.Expressions.MemberExpression" /> reprezentująca dostęp do pola, biorąc pod uwagę nazwę pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1308">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field given the name of the field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1309">A <see cref="T:System.Linq.Expressions.MemberExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> właściwością <paramref name="expression" />i <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> właściwością <see cref="T:System.Reflection.FieldInfo" /> reprezentująca pole wskazywane przez <paramref name="fieldName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1309">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.FieldInfo" /> that represents the field denoted by <paramref name="fieldName" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1310"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.MemberExpression> jest równa <xref:System.Reflection.FieldInfo.FieldType%2A> właściwość <xref:System.Reflection.FieldInfo> reprezentująca pole wskazywane przez `fieldName`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1310">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of the <xref:System.Reflection.FieldInfo> that represents the field denoted by `fieldName`.</span></span>  
  
 <span data-ttu-id="8671b-1311">Metoda ta wyszukuje `expression`. Typ i jego typów podstawowych dla pola, które ma nazwę `fieldName`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1311">This method searches `expression`.Type and its base types for a field that has the name `fieldName`.</span></span> <span data-ttu-id="8671b-1312">Pola publiczne mają pierwszeństwo nad niepublicznych pól.</span><span class="sxs-lookup"><span data-stu-id="8671b-1312">Public fields are given preference over non-public fields.</span></span> <span data-ttu-id="8671b-1313">Jeśli zostanie znalezione pasujące pola, ta metoda przekazuje `expression` i <xref:System.Reflection.FieldInfo> reprezentująca to pole do <xref:System.Linq.Expressions.Expression.Field%2A>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1313">If a matching field is found, this method passes `expression` and the <xref:System.Reflection.FieldInfo> that represents that field to <xref:System.Linq.Expressions.Expression.Field%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-1314">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie, które reprezentuje, uzyskiwanie dostępu do pola.</span><span class="sxs-lookup"><span data-stu-id="8671b-1314">The following code example shows how to create an expression that represents accessing a field.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#37)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1315">
            <paramref name="expression" /> lub <paramref name="fieldName" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1315">
              <paramref name="expression" /> or <paramref name="fieldName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1316">Żadne pole o nazwie <paramref name="fieldName" /> jest zdefiniowany w <paramref name="expression" />. Typ lub jego typów podstawowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1316">No field named <paramref name="fieldName" /> is defined in <paramref name="expression" />.Type or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, Type type, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, class System.Type type, string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::String ^ fieldName);" />
      <MemberSignature Language="F#" Value="static member Field : System.Linq.Expressions.Expression * Type * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Field (expression, type, fieldName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-1317">Obiekt zawierający pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1317">The containing object of the field.</span>
          </span>
          <span data-ttu-id="8671b-1318">Może to być wartość null w przypadku pola statyczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1318">This can be null for static fields.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-1319">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> Zawierający pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1319">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the field.</span>
          </span>
        </param>
        <param name="fieldName">
          <span data-ttu-id="8671b-1320">Pole ma być uzyskiwany dostęp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1320">The field to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1321">Tworzy <see cref="T:System.Linq.Expressions.MemberExpression" /> reprezentująca dostęp do pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1321">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1322">Utworzony <see cref="T:System.Linq.Expressions.MemberExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1322">The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActionType">
      <MemberSignature Language="C#" Value="public static Type GetActionType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetActionType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetActionType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetActionType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberSignature Language="F#" Value="static member GetActionType : Type[] -&gt; Type" Usage="System.Linq.Expressions.Expression.GetActionType typeArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="8671b-1323">Tablica do sixteen <see cref="T:System.Type" /> obiektów, które określają argumentów typu dla <see langword="System.Action" /> typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1323">An array of up to sixteen <see cref="T:System.Type" /> objects that specify the type arguments for the <see langword="System.Action" /> delegate type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1324">Tworzy <see cref="T:System.Type" /> obiekt, który reprezentuje ogólnego <c>elementu System.Action</c> przekazać typ, który zawiera argumenty określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1324">Creates a <see cref="T:System.Type" /> object that represents a generic <c>System.Action</c> delegate type that has specific type arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1325">Typ <c>elementu System.Action</c> delegata, która przyjmuje argumenty określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1325">The type of a <c>System.Action</c> delegate that has the specified type arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1326">Na przykład jeśli elementy `typeArgs` reprezentują typy `T1…Tn`, wynikowy <xref:System.Type> obiekt reprezentuje typ skonstruowanego delegata `System.Action<T1,…,Tn>` w języku C# lub `System.Action(Of T1,…,Tn)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8671b-1326">As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Action<T1,…,Tn>` in C# or `System.Action(Of T1,…,Tn)` in Visual Basic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1327">
            <paramref name="typeArgs" /> zawiera więcej niż szesnastu elementy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1327">
              <paramref name="typeArgs" /> contains more than sixteen elements.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1328">
            <paramref name="typeArgs" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1328">
              <paramref name="typeArgs" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDelegateType">
      <MemberSignature Language="C#" Value="public static Type GetDelegateType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetDelegateType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDelegateType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetDelegateType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberSignature Language="F#" Value="static member GetDelegateType : Type[] -&gt; Type" Usage="System.Linq.Expressions.Expression.GetDelegateType typeArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="8671b-1329">Argumenty typu delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1329">The type arguments of the delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1330">Pobiera <see cref="P:System.Linq.Expressions.Expression.Type" /> obiekt, który reprezentuje ogólnego <c>System.Func</c> lub <c>elementu System.Action</c> przekazać typ, który zawiera argumenty określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1330">Gets a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic <c>System.Func</c> or <c>System.Action</c> delegate type that has specific type arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1331">Typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1331">The delegate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1332">Ostatni argument typu określa zwracany typ delegata.</span><span class="sxs-lookup"><span data-stu-id="8671b-1332">The last type argument determines the return type of the delegate.</span></span> <span data-ttu-id="8671b-1333">Nie Func lub akcji jest wystarczająco duży, wygeneruje typu niestandardowego delegata.</span><span class="sxs-lookup"><span data-stu-id="8671b-1333">If no Func or Action is large enough, it will generate a custom delegate type.</span></span>  
  
 <span data-ttu-id="8671b-1334">Podobnie jak w przypadku Func, ostatni argument jest typem zwracanym.</span><span class="sxs-lookup"><span data-stu-id="8671b-1334">As with Func, the last argument is the return type.</span></span> <span data-ttu-id="8671b-1335">Go może być równa do elementu System.Void wywołują akcje.</span><span class="sxs-lookup"><span data-stu-id="8671b-1335">It can be set to System.Void to produce an Action.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFuncType">
      <MemberSignature Language="C#" Value="public static Type GetFuncType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetFuncType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFuncType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetFuncType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberSignature Language="F#" Value="static member GetFuncType : Type[] -&gt; Type" Usage="System.Linq.Expressions.Expression.GetFuncType typeArgs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="8671b-1336">Tablica jednego do siedemnastu <see cref="T:System.Type" /> obiektów, które określają argumentów typu dla <see langword="System.Func" /> typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1336">An array of one to seventeen <see cref="T:System.Type" /> objects that specify the type arguments for the <see langword="System.Func" /> delegate type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1337">Tworzy <see cref="P:System.Linq.Expressions.Expression.Type" /> obiekt, który reprezentuje ogólnego <c>System.Func</c> przekazać typ, który zawiera argumenty określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1337">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic <c>System.Func</c> delegate type that has specific type arguments.</span>
          </span>
          <span data-ttu-id="8671b-1338">Ostatni argument typu określa zwracany typ delegata utworzony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1338">The last type argument specifies the return type of the created delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1339">Typ <c>System.Func</c> delegata, która przyjmuje argumenty określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1339">The type of a <c>System.Func</c> delegate that has the specified type arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1340">`typeArgs` musi zawierać co najmniej jednego i co najwyżej siedemnastu elementy.</span><span class="sxs-lookup"><span data-stu-id="8671b-1340">`typeArgs` must contain at least one and at most seventeen elements.</span></span>  
  
 <span data-ttu-id="8671b-1341">Na przykład jeśli elementy `typeArgs` reprezentują typy `T1…Tn`, wynikowy <xref:System.Type> obiekt reprezentuje typ skonstruowanego delegata `System.Func<T1,…,Tn>` w języku C# lub `System.Func(Of T1,…,Tn)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8671b-1341">As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Func<T1,…,Tn>` in C# or `System.Func(Of T1,…,Tn)` in Visual Basic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1342">
            <paramref name="typeArgs" /> zawiera mniej niż jeden lub więcej niż siedemnastu elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1342">
              <paramref name="typeArgs" /> contains fewer than one or more than seventeen elements.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1343">
            <paramref name="typeArgs" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1343">
              <paramref name="typeArgs" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Goto">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1344">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący instrukcję "Przejdź do".</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1344">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Goto (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="8671b-1345">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> , <see cref="T:System.Linq.Expressions.GotoExpression" /> Spowoduje przejście do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1345">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1346">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący instrukcję "Przejdź do".</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1346">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1347">A <see cref="T:System.Linq.Expressions.GotoExpression" /> z <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> równa Goto, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> właściwość o określonej wartości i wartości null do przekazania do etykietą docelową po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1347">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8671b-1348">Poniższy przykład przedstawia sposób tworzenia wyrażenia zawierającego <xref:System.Linq.Expressions.GotoExpression> obiektu.</span><span class="sxs-lookup"><span data-stu-id="8671b-1348">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.GotoExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#45)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#45)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Goto (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="8671b-1349">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> , <see cref="T:System.Linq.Expressions.GotoExpression" /> Spowoduje przejście do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1349">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="8671b-1350">Wartość, które zostaną przekazane do skojarzonego etykiety po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1350">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1351">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący instrukcję "Przejdź do".</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1351">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span>
          </span>
          <span data-ttu-id="8671b-1352">Można określić wartość przekazana do etykiety na skok.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1352">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1353">A <see cref="T:System.Linq.Expressions.GotoExpression" /> z <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> równa Goto, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> właściwością <paramref name="target" />, i <paramref name="value" /> mają być przekazane do etykietą docelową po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1353">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="8671b-1354">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> , <see cref="T:System.Linq.Expressions.GotoExpression" /> Spowoduje przejście do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1354">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-1355">
            <see cref="T:System.Type" /> Można ustawić <see cref="P:System.Linq.Expressions.Expression.Type" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1355">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1356">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący instrukcję "Przejdź do" z określonym typem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1356">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1357">A <see cref="T:System.Linq.Expressions.GotoExpression" /> z <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> równa Goto, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> właściwość o określonej wartości, <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwością <paramref name="type" />i wartość null, które zostaną przekazane do etykietą docelową po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1357">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Goto : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Goto (target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="8671b-1358">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> , <see cref="T:System.Linq.Expressions.GotoExpression" /> Spowoduje przejście do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1358">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="8671b-1359">Wartość, które zostaną przekazane do skojarzonego etykiety po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1359">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-1360">
            <see cref="T:System.Type" /> Można ustawić <see cref="P:System.Linq.Expressions.Expression.Type" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1360">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1361">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący instrukcję "Przejdź do" z określonym typem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1361">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type.</span>
          </span>
          <span data-ttu-id="8671b-1362">Można określić wartość przekazana do etykiety na skok.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1362">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1363">A <see cref="T:System.Linq.Expressions.GotoExpression" /> z <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> równa Goto, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> właściwością <paramref name="target" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwością <paramref name="type" />, i <paramref name="value" /> mają być przekazane do etykietą docelową po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1363">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GreaterThan">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1364">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący "większe niż" porównanie numeryczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1364">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member GreaterThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1365">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1365">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1366">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1366">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1367">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący "większe niż" porównanie numeryczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1367">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1368">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1368">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1369">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-1369">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-1370"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1370">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-1371">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> właściwość `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1371">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="8671b-1372">W przeciwnym razie jest `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1372">Otherwise, it is `false`.</span></span> <span data-ttu-id="8671b-1373"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> Właściwość jest zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1373">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="8671b-1374"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1374">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-1375">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1375">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-1376">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-1376">Implementing Method</span></span>  
 <span data-ttu-id="8671b-1377">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-1377">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-1378">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora "większe niż" <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1378">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1379">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1379">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-1380">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-1380">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-1381">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1381">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1382">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1382">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-1383">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1383">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1384">Jeśli są spełnione następujące dwa warunki, węzeł zostało zniesione i typ węzła jest <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="8671b-1384">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="8671b-1385">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1385">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-1386">Zwracany typ metody wykonawcze jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1386">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="8671b-1387">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1387">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1388">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1388">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-1389">Typ węzła jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1389">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="8671b-1390">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1390">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-1391">Typ węzła jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1391">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-1392">Poniższy przykład kodu pokazuje sposób tworzenia wyrażenia, który porównuje dwóch liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="8671b-1392">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#10)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1393">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1393">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-1394">Operator "większe niż" nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1394">The "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member GreaterThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThan (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1395">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1395">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1396">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1396">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="8671b-1397">
            <see langword="true" /> Aby ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> do <see langword="true" />; <see langword="false" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> do <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1397">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-1398">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1398">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1399">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący "większe niż" porównanie numeryczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1399">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span>
          </span>
          <span data-ttu-id="8671b-1400">Implementowanie metoda może być określona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1400">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1401">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1401">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1402">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-1402">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-1403"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1403">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-1404">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> właściwość `true` i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości jest równa `liftToNull`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1404">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="8671b-1405">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1405">Otherwise, they are both `false`.</span></span> <span data-ttu-id="8671b-1406"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1406">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-1407">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1407">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-1408">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-1408">Implementing Method</span></span>  
 <span data-ttu-id="8671b-1409">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-1409">The following rules determine the implementing method for the operation :</span></span>  
  
-   <span data-ttu-id="8671b-1410">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest metoda implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1410">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1411">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora "większe niż" <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1411">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1412">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1412">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-1413">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-1413">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-1414">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1414">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1415">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1415">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-1416">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1416">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1417">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione; Ponadto typ węzła ma wartość null <xref:System.Boolean> Jeśli `liftToNull` jest `true` lub <xref:System.Boolean> Jeśli `liftToNull` jest `false`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1417">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="8671b-1418">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1418">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-1419">Zwracany typ metody wykonawcze jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1419">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="8671b-1420">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1420">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1421">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1421">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-1422">Typ węzła jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1422">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="8671b-1423">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1423">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-1424">Typ węzła ma wartość null <xref:System.Boolean> Jeśli `liftToNull` jest `true` lub <xref:System.Boolean> Jeśli `liftToNull` jest `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1424">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1425">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1425">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1426">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1426">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-1427">
            <paramref name="method" /> jest <see langword="null" /> i operator "większe niż" nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1427">
              <paramref name="method" /> is <see langword="null" /> and the "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GreaterThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1428">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący "większe lub równe" porównanie numeryczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1428">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1429">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1429">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1430">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1430">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1431">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący "większe lub równe" porównanie numeryczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1431">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1432">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1432">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1433">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-1433">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-1434"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1434">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-1435">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> właściwość `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1435">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="8671b-1436">W przeciwnym razie jest `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1436">Otherwise, it is `false`.</span></span> <span data-ttu-id="8671b-1437"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> Właściwość jest zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1437">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="8671b-1438"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1438">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-1439">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1439">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-1440">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-1440">Implementing Method</span></span>  
 <span data-ttu-id="8671b-1441">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-1441">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-1442">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora "większe lub równe" <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1442">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1443">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1443">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-1444">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-1444">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-1445">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1445">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1446">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1446">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-1447">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1447">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1448">Jeśli są spełnione następujące dwa warunki, węzeł zostało zniesione i typ węzła jest <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="8671b-1448">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="8671b-1449">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1449">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-1450">Zwracany typ metody wykonawcze jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1450">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="8671b-1451">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1451">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1452">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1452">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-1453">Typ węzła jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1453">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="8671b-1454">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1454">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-1455">Typ węzła jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1455">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-1456">Poniższy przykład kodu pokazuje sposób tworzenia wyrażenia, który porównuje dwóch liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="8671b-1456">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#11)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1457">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1457">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-1458">Operator "większe lub równe" nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1458">The "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member GreaterThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.GreaterThanOrEqual (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1459">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1459">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1460">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1460">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="8671b-1461">
            <see langword="true" /> Aby ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> do <see langword="true" />; <see langword="false" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> do <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1461">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-1462">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1462">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1463">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący "większe lub równe" porównanie numeryczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1463">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1464">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1464">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1465">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-1465">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-1466"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1466">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-1467">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> właściwość `true` i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości jest równa `liftToNull`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1467">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="8671b-1468">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1468">Otherwise, they are both `false`.</span></span> <span data-ttu-id="8671b-1469"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1469">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-1470">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1470">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-1471">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-1471">Implementing Method</span></span>  
 <span data-ttu-id="8671b-1472">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-1472">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-1473">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest metoda implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1473">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1474">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora "większe lub równe" <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1474">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1475">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1475">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-1476">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-1476">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-1477">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1477">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1478">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1478">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-1479">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1479">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1480">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione; Ponadto typ węzła ma wartość null <xref:System.Boolean> Jeśli `liftToNull` jest `true` lub <xref:System.Boolean> Jeśli `liftToNull` jest `false`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1480">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="8671b-1481">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1481">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-1482">Zwracany typ metody wykonawcze jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1482">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="8671b-1483">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1483">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1484">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1484">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-1485">Typ węzła jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1485">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="8671b-1486">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1486">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-1487">Typ węzła ma wartość null <xref:System.Boolean> Jeśli `liftToNull` jest `true` lub <xref:System.Boolean> Jeśli `liftToNull` jest `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1487">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1488">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1488">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1489">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1489">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-1490">
            <paramref name="method" /> jest <see langword="null" /> i operator "większe lub równe" nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1490">
              <paramref name="method" /> is <see langword="null" /> and the "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IfThen">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression IfThen (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression IfThen(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfThen (test As Expression, ifTrue As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ IfThen(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue);" />
      <MemberSignature Language="F#" Value="static member IfThen : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.IfThen (test, ifTrue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test">
          <span data-ttu-id="8671b-1491">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1491">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span>
          </span>
        </param>
        <param name="ifTrue">
          <span data-ttu-id="8671b-1492">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1492">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1493">Tworzy <see cref="T:System.Linq.Expressions.ConditionalExpression" /> reprezentujący bloku warunkowego za pomocą <see langword="if" /> instrukcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1493">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with an <see langword="if" /> statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1494">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> i <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, właściwości ustawione do określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1494">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, properties set to the specified values.</span>
          </span>
          <span data-ttu-id="8671b-1495">
            <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> Właściwość jest ustawiona na wyrażenie domyślne i rodzaju powstałe <see cref="T:System.Linq.Expressions.ConditionalExpression" /> zwracanego przez tę metodę jest <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1495">The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property is set to default expression and the type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8671b-1496">Poniższy przykład kodu pokazuje sposób tworzenia wyrażenia, który reprezentuje bloku warunkowego.</span><span class="sxs-lookup"><span data-stu-id="8671b-1496">The following code example shows how to create an expression that represents a conditional block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#32)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IfThenElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression IfThenElse (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression IfThenElse(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfThenElse (test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ IfThenElse(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse);" />
      <MemberSignature Language="F#" Value="static member IfThenElse : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.ConditionalExpression" Usage="System.Linq.Expressions.Expression.IfThenElse (test, ifTrue, ifFalse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test">
          <span data-ttu-id="8671b-1497">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1497">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span>
          </span>
        </param>
        <param name="ifTrue">
          <span data-ttu-id="8671b-1498">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1498">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span>
          </span>
        </param>
        <param name="ifFalse">
          <span data-ttu-id="8671b-1499">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1499">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1500">Tworzy <see cref="T:System.Linq.Expressions.ConditionalExpression" /> reprezentujący bloku warunkowego za pomocą <see langword="if" /> i <see langword="else" /> instrukcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1500">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with <see langword="if" /> and <see langword="else" /> statements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1501">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> i <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, i <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1501">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span>
          </span>
          <span data-ttu-id="8671b-1502">Typ wyniku <see cref="T:System.Linq.Expressions.ConditionalExpression" /> zwracanego przez tę metodę jest <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1502">The type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8671b-1503">Poniższy przykład kodu pokazuje sposób tworzenia wyrażenia, który reprezentuje bloku warunkowego.</span><span class="sxs-lookup"><span data-stu-id="8671b-1503">The following code example shows how to create an expression that represents a conditional block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#33)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Increment">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1504">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący zwiększenie wartości wyrażenia o 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1504">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression value by 1.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Increment(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Increment(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Increment : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Increment expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-1505">
            <see cref="T:System.Linq.Expressions.Expression" /> Do następującej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1505">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1506">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący zwiększenie wartości wyrażenia o 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1506">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression value by 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1507">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący zwiększona wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1507">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1508">To wyrażenie będzie działać i nie zmienia wartości obiektu, który jest przekazywany do niego.</span><span class="sxs-lookup"><span data-stu-id="8671b-1508">This expression is functional and does not change the value of the object that is passed to it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-1509">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie, które reprezentuje operację przyrostu.</span><span class="sxs-lookup"><span data-stu-id="8671b-1509">The following code example shows how to create an expression that represents an increment operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#24)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Increment(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Increment(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Increment : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Increment (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-1510">
            <see cref="T:System.Linq.Expressions.Expression" /> Do następującej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1510">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-1511">A <see cref="T:System.Reflection.MethodInfo" /> reprezentujący implementującej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1511">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1512">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący, zwiększając wartość wyrażenia o 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1512">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression by 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1513">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący zwiększona wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1513">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1514">To wyrażenie będzie działać i nie zmienia wartości obiektu, który jest przekazywany do niego.</span><span class="sxs-lookup"><span data-stu-id="8671b-1514">This expression is functional and does not change the value of the object that is passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1515">Tworzy <see cref="T:System.Linq.Expressions.InvocationExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1515">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.InvocationExpression Invoke(class System.Linq.Expressions.Expression expression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::InvocationExpression ^ Invoke(System::Linq::Expressions::Expression ^ expression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.InvocationExpression" Usage="System.Linq.Expressions.Expression.Invoke (expression, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.InvocationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-1516">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący delegat lub wyrażenie lambda do zastosowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1516">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-1517">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.Expression" /> obiekty reprezentujące argumenty, które delegat lub wyrażenie lambda jest stosowany do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1517">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1518">Tworzy <see cref="T:System.Linq.Expressions.InvocationExpression" /> delegat lub wyrażenie lambda która odnosi się do listy wyrażenia argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1518">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1519">
            <see cref="T:System.Linq.Expressions.InvocationExpression" /> Dotyczący określonej delegat lub wyrażenie lambda do podanych argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1519">An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1520"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.InvocationExpression> reprezentuje zwracany typ delegata, który jest reprezentowany przez `expression`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-1520">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.</span></span>  
  
 <span data-ttu-id="8671b-1521"><xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> Właściwość wynikowy <xref:System.Linq.Expressions.InvocationExpression> jest pusta Jeżeli `arguments` jest `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1521">The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="8671b-1522">W przeciwnym razie zawiera te same elementy co `arguments` , z wyjątkiem niektórych z tych <xref:System.Linq.Expressions.Expression> obiekty mogą być *cytowane*.</span><span class="sxs-lookup"><span data-stu-id="8671b-1522">Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8671b-1523">Element będzie można podać tylko wtedy, gdy odpowiedni parametr delegata reprezentowany przez `expression` typu <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1523">An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="8671b-1524">Cytowanie oznacza, że element jest opakowana w <xref:System.Linq.Expressions.ExpressionType.Quote> węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1524">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="8671b-1525">Węzeł wynikowy jest <xref:System.Linq.Expressions.UnaryExpression> którego <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> właściwości jest elementem `arguments`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1525">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-1526">Poniższy przykład pokazuje sposób użycia <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> metodę w celu utworzenia <xref:System.Linq.Expressions.InvocationExpression> reprezentujący wywołanie wyrażenia lambda z określonymi argumentami.</span><span class="sxs-lookup"><span data-stu-id="8671b-1526">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]
 [!code-vb[System.Linq.Expressions.Expression#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1527">
            <paramref name="expression" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1527">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1528">
            <paramref name="expression" />. Typ nie reprezentuje typ obiektu delegowanego lub <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1528">
              <paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          </span>
          <span data-ttu-id="8671b-1529">- lub - <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwość elementu <paramref name="arguments" /> nie można przypisać do typu odpowiedniego parametru delegata, reprezentowane przez <paramref name="expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1529">-or-  The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-1530">
            <paramref name="arguments" /> zawiera taką samą liczbę elementów jak lista parametrów dla delegata, reprezentowane przez <paramref name="expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1530">
              <paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.InvocationExpression Invoke(class System.Linq.Expressions.Expression expression, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::InvocationExpression ^ Invoke(System::Linq::Expressions::Expression ^ expression, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.InvocationExpression" Usage="System.Linq.Expressions.Expression.Invoke (expression, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.InvocationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-1531">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący delegat lub wyrażenie lambda mają być stosowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1531">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-1532">Tablica <see cref="T:System.Linq.Expressions.Expression" /> obiekty reprezentujące argumenty, które delegat lub wyrażenie lambda jest stosowany do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1532">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1533">Tworzy <see cref="T:System.Linq.Expressions.InvocationExpression" /> delegat lub wyrażenie lambda która odnosi się do listy wyrażenia argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1533">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1534">
            <see cref="T:System.Linq.Expressions.InvocationExpression" /> Dotyczący określonej delegat lub wyrażenie lambda do podanych argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1534">An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1535"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.InvocationExpression> reprezentuje zwracany typ delegata, który jest reprezentowany przez `expression`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-1535">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.</span></span>  
  
 <span data-ttu-id="8671b-1536"><xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> Właściwość wynikowy <xref:System.Linq.Expressions.InvocationExpression> jest pusta Jeżeli `arguments` jest `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1536">The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="8671b-1537">W przeciwnym razie zawiera te same elementy co `arguments` , z wyjątkiem niektórych z tych <xref:System.Linq.Expressions.Expression> obiekty mogą być *cytowane*.</span><span class="sxs-lookup"><span data-stu-id="8671b-1537">Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8671b-1538">Element będzie można podać tylko wtedy, gdy odpowiedni parametr delegata reprezentowany przez `expression` typu <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1538">An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="8671b-1539">Cytowanie oznacza, że element jest opakowana w <xref:System.Linq.Expressions.ExpressionType.Quote> węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1539">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="8671b-1540">Węzeł wynikowy jest <xref:System.Linq.Expressions.UnaryExpression> którego <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> właściwości jest elementem `arguments`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1540">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-1541">Poniższy przykład pokazuje sposób użycia <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> metodę w celu utworzenia <xref:System.Linq.Expressions.InvocationExpression> reprezentujący wywołanie wyrażenia lambda z określonymi argumentami.</span><span class="sxs-lookup"><span data-stu-id="8671b-1541">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]
 [!code-vb[System.Linq.Expressions.Expression#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1542">
            <paramref name="expression" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1542">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1543">
            <paramref name="expression" />. Typ nie reprezentuje typ obiektu delegowanego lub <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1543">
              <paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          </span>
          <span data-ttu-id="8671b-1544">- lub - <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwość elementu <paramref name="arguments" /> nie można przypisać do typu odpowiedniego parametru delegata, reprezentowane przez <paramref name="expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1544">-or-  The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-1545">
            <paramref name="arguments" /> zawiera taką samą liczbę elementów jak lista parametrów dla delegata, reprezentowane przez <paramref name="expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1545">
              <paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsFalse">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1546">Zwraca, czy wyrażenie zwróci wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1546">Returns whether the expression evaluates to false.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsFalse(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsFalse(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member IsFalse : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsFalse expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-1547">
            <see cref="T:System.Linq.Expressions.Expression" /> Do oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1547">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1548">Zwraca, czy wyrażenie zwróci wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1548">Returns whether the expression evaluates to false.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1549">Wystąpienie <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1549">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsFalse(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsFalse(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member IsFalse : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsFalse (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-1550">
            <see cref="T:System.Linq.Expressions.Expression" /> Do oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1550">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-1551">A <see cref="T:System.Reflection.MethodInfo" /> reprezentujący implementującej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1551">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1552">Zwraca, czy wyrażenie zwróci wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1552">Returns whether the expression evaluates to false.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1553">Wystąpienie <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1553">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsTrue">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1554">Zwraca, czy wyrażenie ma wartość true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1554">Returns whether the expression evaluates to true.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsTrue(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsTrue(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member IsTrue : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsTrue expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-1555">
            <see cref="T:System.Linq.Expressions.Expression" /> Do oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1555">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1556">Zwraca, czy wyrażenie ma wartość true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1556">Returns whether the expression evaluates to true.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1557">Wystąpienie <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1557">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsTrue(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsTrue(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member IsTrue : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.IsTrue (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-1558">
            <see cref="T:System.Linq.Expressions.Expression" /> Do oceny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1558">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-1559">A <see cref="T:System.Reflection.MethodInfo" /> reprezentujący implementującej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1559">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1560">Zwraca, czy wyrażenie ma wartość true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1560">Returns whether the expression evaluates to true.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1561">Wystąpienie <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1561">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Label">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1562">Tworzy <see cref="T:System.Linq.Expressions.LabelTarget" /> reprezentujący etykietę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1562">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label () As LabelTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label();" />
      <MemberSignature Language="F#" Value="static member Label : unit -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1563">Tworzy <see cref="T:System.Linq.Expressions.LabelTarget" /> reprezentujący etykietę o typie void i bez nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1563">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and no name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1564">Nowy <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1564">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8671b-1565">Poniższy przykład przedstawia sposób tworzenia wyrażenia zawierającego <xref:System.Linq.Expressions.LabelTarget> obiektu.</span><span class="sxs-lookup"><span data-stu-id="8671b-1565">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LabelTarget> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelExpression Label(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (target As LabelTarget) As LabelExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelExpression ^ Label(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Label : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.LabelExpression" Usage="System.Linq.Expressions.Expression.Label target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="8671b-1566">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> Których <see cref="T:System.Linq.Expressions.LabelExpression" /> zostaną skojarzone z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1566">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1567">Tworzy <see cref="T:System.Linq.Expressions.LabelExpression" /> reprezentujący etykiety bez wartości domyślnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1567">Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label without a default value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1568">Element <see cref="T:System.Linq.Expressions.LabelExpression" /> bez wartości domyślnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1568">A <see cref="T:System.Linq.Expressions.LabelExpression" /> without a default value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (name As String) As LabelTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Label : string -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="8671b-1569">Nazwa etykiety.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1569">The name of the label.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1570">Tworzy <see cref="T:System.Linq.Expressions.LabelTarget" /> reprezentujący etykietę o typie void i podanej nazwie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1570">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and the given name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1571">Nowy <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1571">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Label : Type -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-1572">Typ wartości, który jest przekazywany, gdy przeskakiwanie do etykiety.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1572">The type of value that is passed when jumping to the label.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1573">Tworzy <see cref="T:System.Linq.Expressions.LabelTarget" /> reprezentujący etykiety z danym typem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1573">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1574">Nowy <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1574">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8671b-1575">Poniższy przykład pokazuje sposób użycia <xref:System.Linq.Expressions.LabelTarget> w wyrażeniu pętli.</span><span class="sxs-lookup"><span data-stu-id="8671b-1575">The following example demonstrates how to use a <xref:System.Linq.Expressions.LabelTarget> object in a loop expression.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelExpression Label(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (target As LabelTarget, defaultValue As Expression) As LabelExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelExpression ^ Label(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ defaultValue);" />
      <MemberSignature Language="F#" Value="static member Label : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.LabelExpression" Usage="System.Linq.Expressions.Expression.Label (target, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="defaultValue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="8671b-1576">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> Których <see cref="T:System.Linq.Expressions.LabelExpression" /> zostaną skojarzone z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1576">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</span>
          </span>
        </param>
        <param name="defaultValue">
          <span data-ttu-id="8671b-1577">Wartość tego <see cref="T:System.Linq.Expressions.LabelExpression" /> po osiągnięciu etykiety za pomocą regularnego kontroli przepływu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1577">The value of this <see cref="T:System.Linq.Expressions.LabelExpression" /> when the label is reached through regular control flow.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1578">Tworzy <see cref="T:System.Linq.Expressions.LabelExpression" /> reprezentujący etykietę z daną wartość domyślną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1578">Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label with the given default value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1579">A <see cref="T:System.Linq.Expressions.LabelExpression" /> z daną wartość domyślną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1579">A <see cref="T:System.Linq.Expressions.LabelExpression" /> with the given default value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Label : Type * string -&gt; System.Linq.Expressions.LabelTarget" Usage="System.Linq.Expressions.Expression.Label (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-1580">Typ wartości, który jest przekazywany, gdy przeskakiwanie do etykiety.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1580">The type of value that is passed when jumping to the label.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="8671b-1581">Nazwa etykiety.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1581">The name of the label.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1582">Tworzy <see cref="T:System.Linq.Expressions.LabelTarget" /> reprezentujący etykiety z danym typem i nazwą.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1582">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type and name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1583">Nowy <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1583">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Lambda">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1584">Tworzy drzewo wyrażenia, który reprezentuje wyrażenie lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1584">Creates an expression tree that represents a lambda expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="8671b-1585">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1585">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8671b-1586">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1586">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1587">Tworzy Wyrażenielambda, tworząc pierwszy typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1587">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1588">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> zawierający <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> właściwość równa Lambda i <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1588">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="8671b-1589">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1589">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8671b-1590">Tablica <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1590">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1591">Tworzy <see cref="T:System.Linq.Expressions.LambdaExpression" /> przy pierwszym konstruowanie typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1591">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1592">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1592">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1593">`parameters` Parametru nie może mieć więcej niż szesnastu elementów.</span><span class="sxs-lookup"><span data-stu-id="8671b-1593">The `parameters` parameter must not have more than sixteen elements.</span></span>  
  
 <span data-ttu-id="8671b-1594">Elementy `parameters` odwołania musi być równa w wyrażeniach parametrów w `body`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1594">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="8671b-1595">Ta metoda konstrukcje typu odpowiedniego delegata z jednego z `System.Func` delegatów ogólnych.</span><span class="sxs-lookup"><span data-stu-id="8671b-1595">This method constructs an appropriate delegate type from one of the `System.Func` generic delegates.</span></span> <span data-ttu-id="8671b-1596">Następnie przekazuje typ delegata do jednego z <xref:System.Linq.Expressions.ExpressionType.Lambda> metodami factory, aby utworzyć <xref:System.Linq.Expressions.LambdaExpression>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1596">It then passes the delegate type to one of the <xref:System.Linq.Expressions.ExpressionType.Lambda> factory methods to create a <xref:System.Linq.Expressions.LambdaExpression>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1597">
            <paramref name="body" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1597">
              <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-1598">- lub - jeden lub więcej elementów <paramref name="parameters" /> są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1598">-or-  One or more elements of <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1599">
            <paramref name="parameters" /> zawiera więcej niż szesnastu elementy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1599">
              <paramref name="parameters" /> contains more than sixteen elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="8671b-1600">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1600">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="8671b-1601">A <see cref="T:System.Boolean" /> oznacza, że jeśli optymalizację wywołania tail będą stosowane podczas kompilowania wyrażenia utworzone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1601">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8671b-1602">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1602">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1603">Tworzy Wyrażenielambda, tworząc pierwszy typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1603">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1604">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> zawierający <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> właściwość równa Lambda i <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1604">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="8671b-1605">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1605">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="8671b-1606">A <see cref="T:System.Boolean" /> oznacza, że jeśli optymalizację wywołania tail będą stosowane podczas kompilowania wyrażenia utworzone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1606">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8671b-1607">Tablica zawierająca <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1607">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1608">Tworzy Wyrażenielambda, tworząc pierwszy typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1608">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1609">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> zawierający <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> właściwość równa Lambda i <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1609">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="8671b-1610">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1610">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="8671b-1611">Nazwa wyrażenia lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1611">The name for the lambda.</span>
          </span>
          <span data-ttu-id="8671b-1612">Używany do emitowania informacje debugowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1612">Used for emitting debug information.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8671b-1613">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1613">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1614">Tworzy Wyrażenielambda, tworząc pierwszy typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1614">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1615">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> zawierający <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> właściwość równa Lambda i <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1615">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="8671b-1616">A <see cref="T:System.Type" /> reprezentujący podpis delegata dla wyrażenia lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1616">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="8671b-1617">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1617">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8671b-1618">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1618">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1619">Tworzy <see cref="T:System.Linq.Expressions.LambdaExpression" /> przy pierwszym konstruowanie typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1619">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</span>
          </span>
          <span data-ttu-id="8671b-1620">Można używać, gdy typ delegata nie jest znany w czasie kompilacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1620">It can be used when the delegate type is not known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1621">Obiekt, który reprezentuje wyrażenie lambda, która ma <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1621">An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1622">Typ obiektu, który jest zwracany z tej funkcji to <xref:System.Linq.Expressions.Expression%601>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1622">The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>.</span></span> <span data-ttu-id="8671b-1623"><xref:System.Linq.Expressions.LambdaExpression> Typ jest używany do reprezentowania zwróconego obiektu, ponieważ konkretnego typu wyrażenia lambda nie jest znany w czasie kompilacji.</span><span class="sxs-lookup"><span data-stu-id="8671b-1623">The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.</span></span>  
  
 <span data-ttu-id="8671b-1624">Liczba parametrów dla typu delegata, reprezentowane przez`delegateType` musi być równa długości argumentu `parameters`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1624">The number of parameters for the delegate type represented by`delegateType` must equal the length of `parameters`.</span></span>  
  
 <span data-ttu-id="8671b-1625">Elementy `parameters` odwołania musi być równa w wyrażeniach parametrów w `body`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1625">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="8671b-1626"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy obiekt jest równa `delegateType`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1626">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`.</span></span> <span data-ttu-id="8671b-1627">Jeśli `parameters` jest `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> właściwość wynikowy obiekt jest pustą kolekcją.</span><span class="sxs-lookup"><span data-stu-id="8671b-1627">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-1628">Poniższy przykład przedstawia sposób tworzenia wyrażenia, który reprezentuje wyrażenie lambda, która dodaje 1 przekazany argument.</span><span class="sxs-lookup"><span data-stu-id="8671b-1628">The following example demonstrates how to create an expression that represents a lambda expression that adds 1 to the passed argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#42)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1629">
            <paramref name="delegateType" /> lub <paramref name="body" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1629">
              <paramref name="delegateType" /> or <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-1630">- lub - jeden lub więcej elementów w <paramref name="parameters" /> są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1630">-or-  One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1631">
            <paramref name="delegateType" /> reprezentuje typ obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1631">
              <paramref name="delegateType" /> does not represent a delegate type.</span>
          </span>
          <span data-ttu-id="8671b-1632">- lub - <paramref name="body" />. Typ reprezentuje typ, który nie jest możliwy do przypisania do zwracanego typu na typ delegata, reprezentowane przez <paramref name="delegateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1632">-or-  <paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
          <span data-ttu-id="8671b-1633">- lub - <paramref name="parameters" /> nie zawiera taką samą liczbę elementów jak lista parametrów dla typu delegata, reprezentowane przez <paramref name="delegateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1633">-or-  <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
          <span data-ttu-id="8671b-1634">- lub - <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwość elementu <paramref name="parameters" /> nie jest możliwy do przypisania z typu odpowiedniego typu parametru na typ delegata, reprezentowane przez <paramref name="delegateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1634">-or-  The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="8671b-1635">A <see cref="T:System.Type" /> reprezentujący podpis delegata dla wyrażenia lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1635">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="8671b-1636">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1636">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8671b-1637">Tablica <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1637">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1638">Tworzy <see cref="T:System.Linq.Expressions.LambdaExpression" /> przy pierwszym konstruowanie typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1638">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</span>
          </span>
          <span data-ttu-id="8671b-1639">Można używać, gdy typ delegata nie jest znany w czasie kompilacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1639">It can be used when the delegate type is not known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1640">Obiekt, który reprezentuje wyrażenie lambda, która ma <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1640">An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1641">Typ obiektu, który jest zwracany z tej funkcji to <xref:System.Linq.Expressions.Expression%601>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1641">The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>.</span></span> <span data-ttu-id="8671b-1642"><xref:System.Linq.Expressions.LambdaExpression> Typ jest używany do reprezentowania zwróconego obiektu, ponieważ konkretnego typu wyrażenia lambda nie jest znany w czasie kompilacji.</span><span class="sxs-lookup"><span data-stu-id="8671b-1642">The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.</span></span>  
  
 <span data-ttu-id="8671b-1643">Liczba parametrów dla typu delegata, reprezentowane przez `delegateType` musi być równa długości argumentu `parameters`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1643">The number of parameters for the delegate type represented by `delegateType` must equal the length of `parameters`.</span></span>  
  
 <span data-ttu-id="8671b-1644">Elementy `parameters` odwołania musi być równa w wyrażeniach parametrów w `body`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1644">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="8671b-1645"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy obiekt jest równa `delegateType`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1645">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`.</span></span> <span data-ttu-id="8671b-1646">Jeśli `parameters` jest `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> właściwość wynikowy obiekt jest pustą kolekcją.</span><span class="sxs-lookup"><span data-stu-id="8671b-1646">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1647">
            <paramref name="delegateType" /> lub <paramref name="body" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1647">
              <paramref name="delegateType" /> or <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-1648">- lub - jeden lub więcej elementów w <paramref name="parameters" /> są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1648">-or-  One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1649">
            <paramref name="delegateType" /> reprezentuje typ obiektu delegowanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1649">
              <paramref name="delegateType" /> does not represent a delegate type.</span>
          </span>
          <span data-ttu-id="8671b-1650">- lub - <paramref name="body" />. Typ reprezentuje typ, który nie jest możliwy do przypisania do zwracanego typu na typ delegata, reprezentowane przez <paramref name="delegateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1650">-or-  <paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
          <span data-ttu-id="8671b-1651">- lub - <paramref name="parameters" /> nie zawiera taką samą liczbę elementów jak lista parametrów dla typu delegata, reprezentowane przez <paramref name="delegateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1651">-or-  <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
          <span data-ttu-id="8671b-1652">- lub - <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwość elementu <paramref name="parameters" /> nie jest możliwy do przypisania z typu odpowiedniego typu parametru na typ delegata, reprezentowane przez <paramref name="delegateType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1652">-or-  The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (body, name, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="8671b-1653">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1653">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="8671b-1654">Nazwa wyrażenia lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1654">The name for the lambda.</span>
          </span>
          <span data-ttu-id="8671b-1655">Używany do emitowania informacje debugowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1655">Used for emitting debug information.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="8671b-1656">A <see cref="T:System.Boolean" /> oznacza, że jeśli optymalizację wywołania tail będą stosowane podczas kompilowania wyrażenia utworzone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1656">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8671b-1657">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1657">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1658">Tworzy Wyrażenielambda, tworząc pierwszy typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1658">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1659">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> zawierający <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> właściwość równa Lambda i <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1659">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="8671b-1660">A <see cref="P:System.Linq.Expressions.Expression.Type" /> reprezentujący podpis delegata dla wyrażenia lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1660">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="8671b-1661">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1661">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="8671b-1662">A <see cref="T:System.Boolean" /> oznacza, że jeśli optymalizację wywołania tail będą stosowane podczas kompilowania wyrażenia utworzone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1662">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8671b-1663">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1663">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1664">Tworzy Wyrażenielambda, tworząc pierwszy typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1664">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1665">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> zawierający <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> właściwość równa Lambda i <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1665">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * bool * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="8671b-1666">A <see cref="P:System.Linq.Expressions.Expression.Type" /> reprezentujący podpis delegata dla wyrażenia lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1666">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="8671b-1667">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1667">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="8671b-1668">A <see cref="T:System.Boolean" /> oznacza, że jeśli optymalizację wywołania tail będą stosowane podczas kompilowania wyrażenia utworzone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1668">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8671b-1669">Tablica zawierająca <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1669">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1670">Tworzy Wyrażenielambda, tworząc pierwszy typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1670">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1671">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> zawierający <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> właściwość równa Lambda i <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1671">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * string * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="8671b-1672">A <see cref="P:System.Linq.Expressions.Expression.Type" /> reprezentujący podpis delegata dla wyrażenia lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1672">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="8671b-1673">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1673">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="8671b-1674">Nazwa wyrażenia lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1674">The name for the lambda.</span>
          </span>
          <span data-ttu-id="8671b-1675">Używany do emitowania informacje debugowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1675">Used for emitting debug information.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8671b-1676">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1676">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1677">Tworzy Wyrażenielambda, tworząc pierwszy typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1677">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1678">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> zawierający <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> właściwość równa Lambda i <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1678">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : Type * System.Linq.Expressions.Expression * string * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.Expression.Lambda (delegateType, body, name, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="8671b-1679">A <see cref="P:System.Linq.Expressions.Expression.Type" /> reprezentujący podpis delegata dla wyrażenia lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1679">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="8671b-1680">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1680">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="8671b-1681">Nazwa wyrażenia lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1681">The name for the lambda.</span>
          </span>
          <span data-ttu-id="8671b-1682">Używany do emitowania informacje debugowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1682">Used for emitting debug information.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="8671b-1683">A <see cref="T:System.Boolean" /> oznacza, że jeśli optymalizację wywołania tail będą stosowane podczas kompilowania wyrażenia utworzone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1683">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8671b-1684">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1684">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1685">Tworzy Wyrażenielambda, tworząc pierwszy typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1685">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1686">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> zawierający <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> właściwość równa Lambda i <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1686">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="8671b-1687">Typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1687">A delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="8671b-1688">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1688">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8671b-1689">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1689">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1690">Tworzy <see cref="T:System.Linq.Expressions.Expression`1" /> której typ delegata jest znany w czasie kompilacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1690">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1691">
            <see cref="T:System.Linq.Expressions.Expression`1" /> Zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1691">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1692">Liczba parametrów dla typu delegata `TDelegate` musi być równa liczbie elementów w `parameters`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1692">The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.</span></span>  
  
 <span data-ttu-id="8671b-1693">Elementy `parameters` odwołania musi być równa w wyrażeniach parametrów w `body`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1693">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="8671b-1694"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy obiekt reprezentuje typ `TDelegate`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1694">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`.</span></span> <span data-ttu-id="8671b-1695">Jeśli `parameters` jest `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> właściwość wynikowy obiekt jest pustą kolekcją.</span><span class="sxs-lookup"><span data-stu-id="8671b-1695">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1696">
            <paramref name="body" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1696">
              <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-1697">- lub - jeden lub więcej elementów w <paramref name="parameters" /> są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1697">-or-  One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1698">
            <paramref name="TDelegate" /> nie jest typem delegowanym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1698">
              <paramref name="TDelegate" /> is not a delegate type.</span>
          </span>
          <span data-ttu-id="8671b-1699">- lub - <paramref name="body" />. Typ reprezentuje typ, który nie jest możliwy do przypisania do zwracanego typu <paramref name="TDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1699">-or-  <paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.</span>
          </span>
          <span data-ttu-id="8671b-1700">- lub - <paramref name="parameters" /> nie zawiera taką samą liczbę elementów jak lista parametrów dla <paramref name="TDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1700">-or-  <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.</span>
          </span>
          <span data-ttu-id="8671b-1701">- lub - <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwość elementu <paramref name="parameters" /> nie jest możliwy do przypisania z typu odpowiedni typ parametru <paramref name="TDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1701">-or-  The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="8671b-1702">Typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1702">A delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="8671b-1703">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1703">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8671b-1704">Tablica <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1704">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1705">Tworzy <see cref="T:System.Linq.Expressions.Expression`1" /> której typ delegata jest znany w czasie kompilacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1705">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1706">
            <see cref="T:System.Linq.Expressions.Expression`1" /> Zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1706">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1707">Liczba parametrów dla typu delegata `TDelegate` musi być równa liczbie elementów w `parameters`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1707">The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.</span></span>  
  
 <span data-ttu-id="8671b-1708">Elementy `parameters` odwołania musi być równa w wyrażeniach parametrów w`body`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1708">The elements of `parameters` must be reference equal to the parameter expressions in`body`.</span></span>  
  
 <span data-ttu-id="8671b-1709"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy obiekt reprezentuje typ `TDelegate`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1709">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`.</span></span> <span data-ttu-id="8671b-1710">Jeśli `parameters` jest `null`, <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> właściwość wynikowy obiekt jest pustą kolekcją.</span><span class="sxs-lookup"><span data-stu-id="8671b-1710">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1711">
            <paramref name="body" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1711">
              <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-1712">- lub - jeden lub więcej elementów w <paramref name="parameters" /> są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1712">-or-  One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1713">
            <paramref name="TDelegate" /> nie jest typem delegowanym.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1713">
              <paramref name="TDelegate" /> is not a delegate type.</span>
          </span>
          <span data-ttu-id="8671b-1714">- lub - <paramref name="body" />. Typ reprezentuje typ, który nie jest możliwy do przypisania do zwracanego typu <paramref name="TDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1714">-or-  <paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.</span>
          </span>
          <span data-ttu-id="8671b-1715">- lub - <paramref name="parameters" /> nie zawiera taką samą liczbę elementów jak lista parametrów dla <paramref name="TDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1715">-or-  <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.</span>
          </span>
          <span data-ttu-id="8671b-1716">- lub - <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwość elementu <paramref name="parameters" /> nie jest możliwy do przypisania z typu odpowiedni typ parametru <paramref name="TDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1716">-or-  The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="8671b-1717">Typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1717">The delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="8671b-1718">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1718">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="8671b-1719">A <see cref="T:System.Boolean" /> oznacza, że jeśli optymalizację wywołania tail będą stosowane podczas kompilowania wyrażenia utworzone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1719">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8671b-1720">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1720">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1721">Tworzy <see cref="T:System.Linq.Expressions.Expression`1" /> której typ delegata jest znany w czasie kompilacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1721">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1722">
            <see cref="T:System.Linq.Expressions.Expression`1" /> Zawierający <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1722">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * bool * System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="8671b-1723">Typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1723">The delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="8671b-1724">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1724">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="8671b-1725">A <see cref="T:System.Boolean" /> oznacza, że jeśli optymalizację wywołania tail będą stosowane podczas kompilowania wyrażenia utworzone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1725">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8671b-1726">Tablica zawierająca <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1726">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1727">Tworzy <see cref="T:System.Linq.Expressions.Expression`1" /> której typ delegata jest znany w czasie kompilacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1727">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1728">
            <see cref="T:System.Linq.Expressions.Expression`1" /> Zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1728">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="8671b-1729">Typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1729">The delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="8671b-1730">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1730">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="8671b-1731">Nazwa wyrażenia lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1731">The name of the lambda.</span>
          </span>
          <span data-ttu-id="8671b-1732">Używany do generowania informacji o debugowaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1732">Used for generating debugging information.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8671b-1733">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1733">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1734">Tworzy <see cref="T:System.Linq.Expressions.Expression`1" /> której typ delegata jest znany w czasie kompilacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1734">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1735">
            <see cref="T:System.Linq.Expressions.Expression`1" /> Zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1735">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="static member Lambda : System.Linq.Expressions.Expression * string * bool * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="System.Linq.Expressions.Expression.Lambda (body, name, tailCall, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="8671b-1736">Typ delegata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1736">The delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="8671b-1737">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1737">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="8671b-1738">Nazwa wyrażenia lambda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1738">The name of the lambda.</span>
          </span>
          <span data-ttu-id="8671b-1739">Używany do generowania informacji debugowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1739">Used for generating debugging info.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="8671b-1740">A <see cref="T:System.Boolean" /> oznacza, że jeśli optymalizację wywołania tail będą stosowane podczas kompilowania wyrażenia utworzone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1740">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="8671b-1741">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1741">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1742">Tworzy <see cref="T:System.Linq.Expressions.Expression`1" /> której typ delegata jest znany w czasie kompilacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1742">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1743">
            <see cref="T:System.Linq.Expressions.Expression`1" /> Zawierający <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> i <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1743">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LeftShift">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1744">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację bitowego przesunięcia w lewo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1744">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShift (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LeftShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShift (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1745">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1745">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1746">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1746">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1747">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację bitowego przesunięcia w lewo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1747">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1748">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1748">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1749">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-1749">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-1750"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1750">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-1751">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1751">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-1752">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1752">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-1753"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1753">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-1754">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1754">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-1755">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-1755">Implementing Method</span></span>  
 <span data-ttu-id="8671b-1756">Następujące reguły określają wybranej metody wykonawcze dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-1756">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-1757">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator przesunięcia w lewo <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1757">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1758">W przeciwnym razie, jeśli `left`. Typ jest typem całkowitym (jeden z <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, lub odpowiednie typy dopuszczające wartości null) i `right`. Typ jest <xref:System.Int32>, implementacja metody jest `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1758">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-1759">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-1759">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-1760">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1760">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1761">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1761">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-1762">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1762">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1763">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-1763">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-1764">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1764">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-1765">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-1765">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-1766">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1766">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1767">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1767">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-1768">Typ węzła jest typ wyniku wstępnie zdefiniowanego operatora przesunięcia w lewo.</span><span class="sxs-lookup"><span data-stu-id="8671b-1768">The type of the node is the result type of the predefined left-shift operator.</span></span>  
  
-   <span data-ttu-id="8671b-1769">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1769">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-1770">Typ węzła jest typ dopuszczający wartość null, który odpowiada typ wyniku wstępnie zdefiniowanego operatora przesunięcia w lewo.</span><span class="sxs-lookup"><span data-stu-id="8671b-1770">The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1771">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1771">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-1772">Operator przesunięcia w lewo nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1772">The left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShift (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LeftShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShift (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1773">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1773">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1774">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1774">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-1775">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1775">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1776">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację bitowego przesunięcia w lewo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1776">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1777">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1777">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1778">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-1778">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-1779"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1779">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-1780">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1780">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-1781">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1781">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-1782"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1782">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-1783">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1783">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-1784">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-1784">Implementing Method</span></span>  
 <span data-ttu-id="8671b-1785">Następujące reguły określają wybranej metody wykonawcze dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-1785">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-1786">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest implementującej metody dla węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1786">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="8671b-1787">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator przesunięcia w lewo <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1787">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1788">W przeciwnym razie, jeśli `left`. Typ jest typem całkowitym (jeden z <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, lub odpowiednie typy dopuszczające wartości null) i `right`. Typ jest <xref:System.Int32>, implementacja metody jest `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1788">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-1789">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-1789">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-1790">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1790">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1791">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1791">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-1792">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1792">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1793">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-1793">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-1794">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1794">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-1795">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-1795">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-1796">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1796">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1797">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1797">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-1798">Typ węzła jest typ wyniku wstępnie zdefiniowanego operatora przesunięcia w lewo.</span><span class="sxs-lookup"><span data-stu-id="8671b-1798">The type of the node is the result type of the predefined left-shift operator.</span></span>  
  
-   <span data-ttu-id="8671b-1799">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1799">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-1800">Typ węzła jest typ dopuszczający wartość null, który odpowiada typ wyniku wstępnie zdefiniowanego operatora przesunięcia w lewo.</span><span class="sxs-lookup"><span data-stu-id="8671b-1800">The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1801">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1801">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1802">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1802">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-1803">
            <paramref name="method" /> jest <see langword="null" /> i operator przesunięcia w lewo nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1803">
              <paramref name="method" /> is <see langword="null" /> and the left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LeftShiftAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1804">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację logiczną przypisania przesunięcia w lewo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1804">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LeftShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShiftAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1805">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1805">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1806">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1806">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1807">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację logiczną przypisania przesunięcia w lewo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1807">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1808">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1808">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LeftShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShiftAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1809">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1809">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1810">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1810">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-1811">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1811">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1812">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację logiczną przypisania przesunięcia w lewo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1812">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1813">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1813">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member LeftShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LeftShiftAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1814">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1814">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1815">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1815">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-1816">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1816">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="8671b-1817">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1817">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1818">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację logiczną przypisania przesunięcia w lewo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1818">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1819">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1819">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LessThan">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1820">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący "poniżej" porównanie numeryczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1820">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LessThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThan (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1821">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1821">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1822">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1822">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1823">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący "poniżej" porównanie numeryczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1823">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1824">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1824">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1825">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-1825">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-1826"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1826">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-1827">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> właściwość `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1827">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="8671b-1828">W przeciwnym razie jest `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1828">Otherwise, it is `false`.</span></span> <span data-ttu-id="8671b-1829"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> Właściwość jest zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1829">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="8671b-1830"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1830">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-1831">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1831">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-1832">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-1832">Implementing Method</span></span>  
 <span data-ttu-id="8671b-1833">Implementującej metody dla tej operacji jest wybierany w oparciu o następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="8671b-1833">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="8671b-1834">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator "mniejsze niż" <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1834">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1835">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1835">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-1836">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-1836">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-1837">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1837">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1838">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1838">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-1839">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1839">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1840">Jeśli są spełnione następujące dwa warunki, węzeł zostało zniesione i typ węzła jest <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="8671b-1840">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="8671b-1841">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1841">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-1842">Zwracany typ metody wykonawcze jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1842">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="8671b-1843">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1843">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1844">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1844">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-1845">Typ węzła jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1845">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="8671b-1846">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1846">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-1847">Typ węzła jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1847">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-1848">Poniższy przykład kodu pokazuje sposób tworzenia wyrażenia, który porównuje dwóch liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="8671b-1848">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#25)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1849">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1849">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-1850">Operator "mniejsze niż" nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1850">The "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LessThan : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThan (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1851">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1851">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1852">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1852">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="8671b-1853">
            <see langword="true" /> Aby ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> do <see langword="true" />; <see langword="false" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> do <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1853">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-1854">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1854">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1855">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący "poniżej" porównanie numeryczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1855">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1856">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1856">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1857">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-1857">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-1858"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1858">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-1859">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> właściwość `true` i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości jest równa `liftToNull`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1859">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="8671b-1860">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1860">Otherwise, they are both `false`.</span></span> <span data-ttu-id="8671b-1861"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1861">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-1862">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1862">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-1863">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-1863">Implementing Method</span></span>  
 <span data-ttu-id="8671b-1864">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-1864">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-1865">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest metoda implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1865">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1866">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator "mniejsze niż" <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1866">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1867">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1867">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-1868">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-1868">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-1869">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1869">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1870">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1870">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-1871">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1871">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1872">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione; Ponadto typ węzła ma wartość null <xref:System.Boolean> Jeśli `liftToNull` jest `true` lub <xref:System.Boolean> Jeśli `liftToNull` jest `false`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1872">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="8671b-1873">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1873">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-1874">Zwracany typ metody wykonawcze jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1874">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="8671b-1875">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1875">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1876">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1876">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-1877">Typ węzła jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1877">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="8671b-1878">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1878">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-1879">Typ węzła ma wartość null <xref:System.Boolean> Jeśli `liftToNull` jest `true` lub <xref:System.Boolean> Jeśli `liftToNull` jest `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1879">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1880">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1880">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1881">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1881">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-1882">
            <paramref name="method" /> jest <see langword="null" /> i operator "mniejsze niż" nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1882">
              <paramref name="method" /> is <see langword="null" /> and the "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LessThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1883">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący "mniejsze niż lub równe" porównanie numeryczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1883">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThanOrEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1884">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1884">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1885">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1885">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1886">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący "mniejsze niż lub równe" porównanie numeryczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1886">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1887">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1887">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1888">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-1888">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-1889"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1889">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-1890">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> właściwość `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1890">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="8671b-1891">W przeciwnym razie jest `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1891">Otherwise, it is `false`.</span></span> <span data-ttu-id="8671b-1892"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> Właściwość jest zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1892">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="8671b-1893"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1893">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-1894">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1894">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-1895">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-1895">Implementing Method</span></span>  
 <span data-ttu-id="8671b-1896">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-1896">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-1897">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator "mniejsze niż lub równe" <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1897">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1898">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1898">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-1899">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-1899">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-1900">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1900">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1901">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1901">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-1902">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1902">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1903">Jeśli są spełnione następujące dwa warunki, węzeł zostało zniesione i typ węzła jest <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="8671b-1903">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="8671b-1904">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1904">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-1905">Zwracany typ metody wykonawcze jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1905">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="8671b-1906">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1906">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1907">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1907">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-1908">Typ węzła jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1908">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="8671b-1909">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1909">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-1910">Typ węzła jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1910">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-1911">Poniższy przykład kodu pokazuje sposób tworzenia wyrażenia, który porównuje dwóch liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="8671b-1911">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#26)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1912">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1912">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-1913">Operator "mniejsze niż lub równe" nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1913">The "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member LessThanOrEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.LessThanOrEqual (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-1914">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1914">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-1915">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1915">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="8671b-1916">
            <see langword="true" /> Aby ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> do <see langword="true" />; <see langword="false" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> do <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1916">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-1917">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1917">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1918">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący "mniejsze niż lub równe" porównanie numeryczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1918">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than or equal" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1919">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1919">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1920">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-1920">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-1921"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1921">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-1922">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> właściwość `true` i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości jest równa `liftToNull`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1922">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="8671b-1923">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1923">Otherwise, they are both `false`.</span></span> <span data-ttu-id="8671b-1924"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1924">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-1925">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1925">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-1926">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-1926">Implementing Method</span></span>  
 <span data-ttu-id="8671b-1927">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-1927">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-1928">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest metoda implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1928">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1929">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator "mniejsze niż lub równe" <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-1929">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1930">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1930">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-1931">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-1931">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-1932">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1932">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1933">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1933">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-1934">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1934">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-1935">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione; Ponadto typ węzła ma wartość null <xref:System.Boolean> Jeśli `liftToNull` jest `true` lub <xref:System.Boolean> Jeśli `liftToNull` jest `false`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1935">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="8671b-1936">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-1936">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-1937">Zwracany typ metody wykonawcze jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1937">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="8671b-1938">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-1938">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-1939">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-1939">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-1940">Typ węzła jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1940">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="8671b-1941">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-1941">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-1942">Typ węzła ma wartość null <xref:System.Boolean> Jeśli `liftToNull` jest `true` lub <xref:System.Boolean> Jeśli `liftToNull` jest `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1942">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1943">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1943">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1944">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1944">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-1945">
            <paramref name="method" /> jest <see langword="null" /> i operator "mniejsze niż lub równe" nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1945">
              <paramref name="method" /> is <see langword="null" /> and the "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ListBind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1946">Tworzy <see cref="T:System.Linq.Expressions.MemberListBinding" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1946">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (member As MemberInfo, initializers As IEnumerable(Of ElementInit)) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MemberInfo ^ member, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MemberInfo * seq&lt;System.Linq.Expressions.ElementInit&gt; -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (member, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="8671b-1947">A <see cref="T:System.Reflection.MemberInfo" /> reprezentująca pole lub właściwość umożliwiająca ustawienie <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1947">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="8671b-1948">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.ElementInit" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1948">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1949">Tworzy <see cref="T:System.Linq.Expressions.MemberListBinding" /> gdzie element członkowski jest ona polem ani właściwością.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1949">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1950">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> zawierający <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> równa właściwości <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> i <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> i <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1950">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1951">
            <paramref name="member" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1951">
              <paramref name="member" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-1952">- lub - jeden lub więcej elementów <paramref name="initializers" /> są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1952">-or-  One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1953">
            <paramref name="member" /> nie reprezentuje pole lub właściwość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1953">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="8671b-1954">- lub - <see cref="P:System.Reflection.FieldInfo.FieldType" /> lub <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> pola lub właściwości, które <paramref name="member" /> reprezentuje nie implementuje <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1954">-or-  The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (member As MemberInfo, ParamArray initializers As ElementInit()) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MemberInfo ^ member, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MemberInfo * System.Linq.Expressions.ElementInit[] -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (member, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="8671b-1955">A <see cref="T:System.Reflection.MemberInfo" /> reprezentująca pole lub właściwość umożliwiająca ustawienie <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1955">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="8671b-1956">Tablica <see cref="T:System.Linq.Expressions.ElementInit" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1956">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1957">Tworzy <see cref="T:System.Linq.Expressions.MemberListBinding" /> gdzie element członkowski jest ona polem ani właściwością.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1957">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1958">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> zawierający <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> równa właściwości <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> i <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> i <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1958">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1959">
            <paramref name="member" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1959">
              <paramref name="member" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-1960">- lub - jeden lub więcej elementów <paramref name="initializers" /> są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1960">-or-  One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1961">
            <paramref name="member" /> nie reprezentuje pole lub właściwość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1961">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="8671b-1962">- lub - <see cref="P:System.Reflection.FieldInfo.FieldType" /> lub <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> pola lub właściwości, które <paramref name="member" /> reprezentuje nie implementuje <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1962">-or-  The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MethodInfo propertyAccessor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (propertyAccessor As MethodInfo, initializers As IEnumerable(Of ElementInit)) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MethodInfo ^ propertyAccessor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.ElementInit&gt; -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (propertyAccessor, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="8671b-1963">A <see cref="T:System.Reflection.MethodInfo" /> reprezentujący metody dostępu właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1963">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="8671b-1964">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.ElementInit" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1964">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1965">Tworzy <see cref="T:System.Linq.Expressions.MemberListBinding" /> na podstawie metody dostępu określonej właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1965">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> based on a specified property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1966">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> zawierający <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> równa właściwości <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> właściwością <see cref="T:System.Reflection.MemberInfo" /> reprezentująca właściwości używane w <paramref name="propertyAccessor" />, i <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> wypełniane przy użyciu elementów <paramref name="initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1966">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1967">
            <paramref name="propertyAccessor" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1967">
              <paramref name="propertyAccessor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-1968">- lub - jeden lub więcej elementów <paramref name="initializers" /> są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1968">-or-  One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1969">
            <paramref name="propertyAccessor" /> reprezentuje metody dostępu właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1969">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="8671b-1970">- lub - <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> właściwości, metody reprezentowanej przez <paramref name="propertyAccessor" /> uzyskuje dostęp do nie implementuje <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1970">-or-  The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (propertyAccessor As MethodInfo, ParamArray initializers As ElementInit()) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MethodInfo ^ propertyAccessor, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListBind : System.Reflection.MethodInfo * System.Linq.Expressions.ElementInit[] -&gt; System.Linq.Expressions.MemberListBinding" Usage="System.Linq.Expressions.Expression.ListBind (propertyAccessor, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="8671b-1971">A <see cref="T:System.Reflection.MethodInfo" /> reprezentujący metody dostępu właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1971">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="8671b-1972">Tablica <see cref="T:System.Linq.Expressions.ElementInit" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1972">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1973">Tworzy <see cref="T:System.Linq.Expressions.MemberListBinding" /> obiektu na podstawie określonej właściwości metody dostępu metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1973">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object based on a specified property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1974">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> zawierający <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> równa właściwości <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> właściwością <see cref="T:System.Reflection.MemberInfo" /> reprezentująca właściwości używane w <paramref name="propertyAccessor" />, i <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> wypełniane przy użyciu elementów <paramref name="initializers" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1974">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1975">
            <paramref name="propertyAccessor" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1975">
              <paramref name="propertyAccessor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-1976">- lub - jeden lub więcej elementów <paramref name="initializers" /> są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1976">-or-  One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1977">
            <paramref name="propertyAccessor" /> reprezentuje metody dostępu właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1977">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="8671b-1978">- lub - <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> właściwości, metody reprezentowanej przez <paramref name="propertyAccessor" /> uzyskuje dostęp do nie implementuje <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1978">-or-  The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ListInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-1979">Tworzy <see cref="T:System.Linq.Expressions.ListInitExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1979">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * seq&lt;System.Linq.Expressions.ElementInit&gt; -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="8671b-1980">A <see cref="T:System.Linq.Expressions.NewExpression" /> można ustawić <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1980">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="8671b-1981">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.ElementInit" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1981">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1982">Tworzy <see cref="T:System.Linq.Expressions.ListInitExpression" /> używającego określony <see cref="T:System.Linq.Expressions.ElementInit" /> obiekty do zainicjowania kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1982">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1983">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> i <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> i <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1983">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1984"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość `newExpression` musi reprezentować typ, który implementuje <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1984">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="8671b-1985"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.ListInitExpression> jest równa `newExpression`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-1985">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-1986">Poniższy przykład pokazuje sposób użycia <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> metodę w celu utworzenia <xref:System.Linq.Expressions.ListInitExpression> reprezentujący inicjowania nowego wystąpienia słownik za pomocą dwóch par klucz wartość.</span><span class="sxs-lookup"><span data-stu-id="8671b-1986">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression> that represents the initialization of a new dictionary instance with two key-value pairs.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]
 [!code-vb[System.Linq.Expressions.Expression#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-1987">
            <paramref name="newExpression" /> lub <paramref name="initializers" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1987">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-1988">- lub - jeden lub więcej elementów <paramref name="initializers" /> są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1988">-or-  One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-1989">
            <paramref name="newExpression" />. Typ nie implementuje <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1989">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="8671b-1990">A <see cref="T:System.Linq.Expressions.NewExpression" /> można ustawić <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1990">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="8671b-1991">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.Expression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1991">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-1992">Tworzy <see cref="T:System.Linq.Expressions.ListInitExpression" /> korzystającą metodę o nazwie "Add", aby dodać elementy do kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1992">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-1993">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> i <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-1993">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-1994"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość `newExpression` musi reprezentować typ, który implementuje <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="8671b-1994">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="8671b-1995">Aby można było używać tego przeciążenia <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>, `newExpression`. Typ lub jego typ podstawowy musi deklarować pojedynczą metodę o nazwie "Add" (jest uwzględniana wielkość liter), która przyjmuje dokładnie jednego argumentu.</span><span class="sxs-lookup"><span data-stu-id="8671b-1995">In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="8671b-1996">Typ argumentu musi być możliwy do przypisania z typu reprezentowanego przez <xref:System.Linq.Expressions.Expression.Type%2A> właściwość pierwszy element `initializers`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1996">The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.</span></span>  
  
 <span data-ttu-id="8671b-1997"><xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> Właściwości zwracanego <xref:System.Linq.Expressions.ListInitExpression> zawiera jeden element typu <xref:System.Linq.Expressions.ElementInit> dla każdego elementu `initializers`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1997">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="8671b-1998"><xref:System.Linq.Expressions.ElementInit.Arguments%2A> Właściwości każdego elementu <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> jest kolekcją singleton, zawierający odpowiedni element `initializers`.</span><span class="sxs-lookup"><span data-stu-id="8671b-1998">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="8671b-1999"><xref:System.Linq.Expressions.ElementInit.AddMethod%2A> Właściwości każdego elementu <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> reprezentuje metodę add, które zostało wykryte na `newExpression`. Typ lub jego typ podstawowy.</span><span class="sxs-lookup"><span data-stu-id="8671b-1999">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.</span></span>  
  
 <span data-ttu-id="8671b-2000"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.ListInitExpression> jest równa `newExpression`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-2000">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2001">
            <paramref name="newExpression" /> lub <paramref name="initializers" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2001">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-2002">- lub - jeden lub więcej elementów <paramref name="initializers" /> są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2002">-or-  One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2003">
            <paramref name="newExpression" />. Typ nie implementuje <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2003">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2004">Nie istnieje metoda instancji o nazwie "Add" (jest uwzględniana wielkość liter) zadeklarowane w <paramref name="newExpression" />. Typ lub jego typ podstawowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2004">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.</span>
          </span>
          <span data-ttu-id="8671b-2005">- lub - metody add w <paramref name="newExpression" />. Typ lub jego typ podstawowy nie przyjmuje dokładnie jednego argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2005">-or-  The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.</span>
          </span>
          <span data-ttu-id="8671b-2006">- lub - typ reprezentowany przez <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwość pierwszy element <paramref name="initializers" /> nie można przypisać do typu argumentu metody add w <paramref name="newExpression" />. Typ lub jego typ podstawowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2006">-or-  The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.</span>
          </span>
          <span data-ttu-id="8671b-2007">- lub - więcej niż jeden argument zgodną metodę o nazwie "Add" (bez uwzględniania wielkości liter) istnieje na <paramref name="newExpression" />. Typ i/lub jego typ podstawowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2007">-or-  More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Linq.Expressions.ElementInit[] -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="8671b-2008">A <see cref="T:System.Linq.Expressions.NewExpression" /> można ustawić <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2008">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="8671b-2009">Tablica <see cref="T:System.Linq.Expressions.ElementInit" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2009">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2010">Tworzy <see cref="T:System.Linq.Expressions.ListInitExpression" /> używającego określony <see cref="T:System.Linq.Expressions.ElementInit" /> obiekty do zainicjowania kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2010">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2011">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> i <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> i <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2011">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2012"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość `newExpression` musi reprezentować typ, który implementuje <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="8671b-2012">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="8671b-2013"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.ListInitExpression> jest równa `newExpression`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-2013">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-2014">Poniższy przykład pokazuje sposób użycia <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> metodę w celu utworzenia <xref:System.Linq.Expressions.ListInitExpression> reprezentujący inicjowania nowego wystąpienia słownik za pomocą dwóch par klucz wartość.</span><span class="sxs-lookup"><span data-stu-id="8671b-2014">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression> that represents the initialization of a new dictionary instance with two key-value pairs.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]
 [!code-vb[System.Linq.Expressions.Expression#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2015">
            <paramref name="newExpression" /> lub <paramref name="initializers" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2015">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-2016">- lub - jeden lub więcej elementów <paramref name="initializers" /> są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2016">-or-  One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2017">
            <paramref name="newExpression" />. Typ nie implementuje <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2017">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="8671b-2018">A <see cref="T:System.Linq.Expressions.NewExpression" /> można ustawić <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2018">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="8671b-2019">Tablica <see cref="T:System.Linq.Expressions.Expression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2019">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2020">Tworzy <see cref="T:System.Linq.Expressions.ListInitExpression" /> korzystającą metodę o nazwie "Add", aby dodać elementy do kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2020">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2021">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> i <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2021">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2022"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość `newExpression` musi reprezentować typ, który implementuje <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="8671b-2022">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="8671b-2023">Aby można było używać tego przeciążenia <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>, `newExpression`. Typ lub jego typ podstawowy musi deklarować pojedynczą metodę o nazwie "Add" (jest uwzględniana wielkość liter), która przyjmuje dokładnie jednego argumentu.</span><span class="sxs-lookup"><span data-stu-id="8671b-2023">In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="8671b-2024">Typ argumentu musi być możliwy do przypisania z typu reprezentowanego przez <xref:System.Linq.Expressions.Expression.Type%2A> właściwość pierwszy element `initializers`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2024">The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.</span></span>  
  
 <span data-ttu-id="8671b-2025"><xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> Właściwości zwracanego <xref:System.Linq.Expressions.ListInitExpression> zawiera jeden element typu <xref:System.Linq.Expressions.ElementInit> dla każdego elementu `initializers`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2025">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="8671b-2026"><xref:System.Linq.Expressions.ElementInit.Arguments%2A> Właściwości każdego elementu <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> jest kolekcją singleton, zawierający odpowiedni element `initializers`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2026">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="8671b-2027"><xref:System.Linq.Expressions.ElementInit.AddMethod%2A> Właściwości każdego elementu <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> reprezentuje metodę add, które zostało wykryte na `newExpression`. Typ lub jego typ podstawowy.</span><span class="sxs-lookup"><span data-stu-id="8671b-2027">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.</span></span>  
  
 <span data-ttu-id="8671b-2028"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.ListInitExpression> jest równa `newExpression`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-2028">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2029">
            <paramref name="newExpression" /> lub <paramref name="initializers" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2029">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-2030">- lub - jeden lub więcej elementów <paramref name="initializers" /> są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2030">-or-  One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2031">
            <paramref name="newExpression" />. Typ nie implementuje <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2031">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2032">Nie istnieje metoda instancji o nazwie "Add" (jest uwzględniana wielkość liter) zadeklarowane w <paramref name="newExpression" />. Typ lub jego typ podstawowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2032">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.</span>
          </span>
          <span data-ttu-id="8671b-2033">- lub - metody add w <paramref name="newExpression" />. Typ lub jego typ podstawowy nie przyjmuje dokładnie jednego argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2033">-or-  The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.</span>
          </span>
          <span data-ttu-id="8671b-2034">- lub - typ reprezentowany przez <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwość pierwszy element <paramref name="initializers" /> nie można przypisać do typu argumentu metody add w <paramref name="newExpression" />. Typ lub jego typ podstawowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2034">-or-  The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.</span>
          </span>
          <span data-ttu-id="8671b-2035">- lub - więcej niż jeden argument zgodną metodę o nazwie "Add" (bez uwzględniania wielkości liter) istnieje na <paramref name="newExpression" />. Typ i/lub jego typ podstawowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2035">-or-  More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Reflection.MethodInfo addMethod, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Reflection::MethodInfo ^ addMethod, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, addMethod, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="8671b-2036">A <see cref="T:System.Linq.Expressions.NewExpression" /> można ustawić <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2036">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="addMethod">
          <span data-ttu-id="8671b-2037">A <see cref="T:System.Reflection.MethodInfo" /> reprezentujący metodę instancji o nazwie "Add" (wielkich liter), który dodaje element do kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2037">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method named "Add" (case insensitive), that adds an element to a collection.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="8671b-2038">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.Expression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2038">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2039">Tworzy <see cref="T:System.Linq.Expressions.ListInitExpression" /> , używa określonej metody dodawania elementów do kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2039">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2040">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> i <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2040">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2041"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość `newExpression` musi reprezentować typ, który implementuje <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="8671b-2041">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="8671b-2042">Jeśli `addMethod` jest `null`, `newExpression`. Typ lub jego typ podstawowy musi deklarować pojedynczą metodę o nazwie "Add" (jest uwzględniana wielkość liter), która przyjmuje dokładnie jednego argumentu.</span><span class="sxs-lookup"><span data-stu-id="8671b-2042">If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="8671b-2043">Jeśli `addMethod` nie `null`, musi reprezentować metodę instancji o nazwie "Add" (jest uwzględniana wielkość liter), który ma dokładnie jeden parametr.</span><span class="sxs-lookup"><span data-stu-id="8671b-2043">If `addMethod` is not `null`, it must represent an instance method named "Add" (case insensitive) that has exactly one parameter.</span></span> <span data-ttu-id="8671b-2044">Typ reprezentowany przez <xref:System.Linq.Expressions.Expression.Type%2A> właściwości każdego elementu `initializers` musi być można przypisać do typu argumentu metody add.</span><span class="sxs-lookup"><span data-stu-id="8671b-2044">The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.</span></span>  
  
 <span data-ttu-id="8671b-2045"><xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> Właściwości zwracanego <xref:System.Linq.Expressions.ListInitExpression> zawiera jeden element typu <xref:System.Linq.Expressions.ElementInit> dla każdego elementu `initializers`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2045">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="8671b-2046"><xref:System.Linq.Expressions.ElementInit.Arguments%2A> Właściwości każdego elementu <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> jest kolekcją singleton, zawierający odpowiedni element `initializers`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2046">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="8671b-2047"><xref:System.Linq.Expressions.ElementInit.AddMethod%2A> Właściwości każdego elementu <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> jest równa `addMethod`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2047">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.</span></span>  
  
 <span data-ttu-id="8671b-2048"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.ListInitExpression> jest równa `newExpression`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-2048">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2049">
            <paramref name="newExpression" /> lub <paramref name="initializers" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2049">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-2050">- lub - jeden lub więcej elementów <paramref name="initializers" /> są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2050">-or-  One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2051">
            <paramref name="newExpression" />. Typ nie implementuje <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2051">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
          <span data-ttu-id="8671b-2052">- lub - <paramref name="addMethod" /> nie <see langword="null" /> reprezentuje metodę instancji o nazwie "Add" (jest uwzględniana wielkość liter), która przyjmuje dokładnie jednego argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2052">-or-  <paramref name="addMethod" /> is not <see langword="null" /> and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.</span>
          </span>
          <span data-ttu-id="8671b-2053">- lub - <paramref name="addMethod" /> nie <see langword="null" /> i typu reprezentowanego przez <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwości jednego lub więcej elementów <paramref name="initializers" /> nie można przypisać do typu argumentu metody, <paramref name="addMethod" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2053">-or-  <paramref name="addMethod" /> is not <see langword="null" /> and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2054">
            <paramref name="addMethod" /> jest <see langword="null" /> i nie wystąpienie nazwane "Add", która przyjmuje jeden argument zgodnego z typem istnieje metoda na <paramref name="newExpression" />. Typ lub jego typ podstawowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2054">
              <paramref name="addMethod" /> is <see langword="null" /> and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Reflection.MethodInfo addMethod, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Reflection::MethodInfo ^ addMethod, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member ListInit : System.Linq.Expressions.NewExpression * System.Reflection.MethodInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.ListInitExpression" Usage="System.Linq.Expressions.Expression.ListInit (newExpression, addMethod, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="8671b-2055">A <see cref="T:System.Linq.Expressions.NewExpression" /> można ustawić <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2055">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="addMethod">
          <span data-ttu-id="8671b-2056">A <see cref="T:System.Reflection.MethodInfo" /> reprezentujący metodę wystąpienia, która przyjmuje jeden argument, który dodaje element do kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2056">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method that takes one argument, that adds an element to a collection.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="8671b-2057">Tablica <see cref="T:System.Linq.Expressions.Expression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2057">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2058">Tworzy <see cref="T:System.Linq.Expressions.ListInitExpression" /> , używa określonej metody dodawania elementów do kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2058">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2059">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> i <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2059">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2060"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość `newExpression` musi reprezentować typ, który implementuje <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="8671b-2060">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="8671b-2061">Jeśli `addMethod` jest `null`, `newExpression`. Typ lub jego typ podstawowy musi deklarować pojedynczą metodę o nazwie "Add" (jest uwzględniana wielkość liter), która przyjmuje dokładnie jednego argumentu.</span><span class="sxs-lookup"><span data-stu-id="8671b-2061">If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="8671b-2062">Jeśli `addMethod` nie `null`, musi reprezentować metodę instancji o nazwie "Add" (jest uwzględniana wielkość liter), który ma dokładnie jeden parametr.</span><span class="sxs-lookup"><span data-stu-id="8671b-2062">If `addMethod` is not `null`, it must represent an instance method named "Add" (case insensitive) that has exactly one parameter.</span></span> <span data-ttu-id="8671b-2063">Typ reprezentowany przez <xref:System.Linq.Expressions.Expression.Type%2A> właściwości każdego elementu `initializers` musi być można przypisać do typu argumentu metody add.</span><span class="sxs-lookup"><span data-stu-id="8671b-2063">The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.</span></span>  
  
 <span data-ttu-id="8671b-2064"><xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> Właściwości zwracanego <xref:System.Linq.Expressions.ListInitExpression> zawiera jeden element typu <xref:System.Linq.Expressions.ElementInit> dla każdego elementu `initializers`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2064">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="8671b-2065"><xref:System.Linq.Expressions.ElementInit.Arguments%2A> Właściwości każdego elementu <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> jest kolekcją singleton, zawierający odpowiedni element `initializers`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2065">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="8671b-2066"><xref:System.Linq.Expressions.ElementInit.AddMethod%2A> Właściwości każdego elementu <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> jest równa `addMethod`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2066">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.</span></span>  
  
 <span data-ttu-id="8671b-2067"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.ListInitExpression> jest równa `newExpression`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-2067">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2068">
            <paramref name="newExpression" /> lub <paramref name="initializers" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2068">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-2069">- lub - jeden lub więcej elementów <paramref name="initializers" /> są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2069">-or-  One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2070">
            <paramref name="newExpression" />. Typ nie implementuje <see cref="T:System.Collections.IEnumerable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2070">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
          <span data-ttu-id="8671b-2071">- lub - <paramref name="addMethod" /> nie <see langword="null" /> reprezentuje metodę instancji o nazwie "Add" (jest uwzględniana wielkość liter), która przyjmuje dokładnie jednego argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2071">-or-  <paramref name="addMethod" /> is not <see langword="null" /> and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.</span>
          </span>
          <span data-ttu-id="8671b-2072">- lub - <paramref name="addMethod" /> nie <see langword="null" /> i typu reprezentowanego przez <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwości jednego lub więcej elementów <paramref name="initializers" /> nie można przypisać do typu argumentu metody, <paramref name="addMethod" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2072">-or-  <paramref name="addMethod" /> is not <see langword="null" /> and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2073">
            <paramref name="addMethod" /> jest <see langword="null" /> i nie wystąpienie nazwane "Add", która przyjmuje jeden argument zgodnego z typem istnieje metoda na <paramref name="newExpression" />. Typ lub jego typ podstawowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2073">
              <paramref name="addMethod" /> is <see langword="null" /> and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Loop">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2074">Tworzy <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2074">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body);" />
      <MemberSignature Language="F#" Value="static member Loop : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.LoopExpression" Usage="System.Linq.Expressions.Expression.Loop body" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="8671b-2075">Treść pętli.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2075">The body of the loop.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2076">Tworzy <see cref="T:System.Linq.Expressions.LoopExpression" /> danej jednostki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2076">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2077">Utworzony <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2077">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.LabelTarget break) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression, break As LabelTarget) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::LabelTarget ^ break);" />
      <MemberSignature Language="F#" Value="static member Loop : System.Linq.Expressions.Expression * System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.LoopExpression" Usage="System.Linq.Expressions.Expression.Loop (body, break)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="break" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="8671b-2078">Treść pętli.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2078">The body of the loop.</span>
          </span>
        </param>
        <param name="break">
          <span data-ttu-id="8671b-2079">Obiekt docelowy podziału, używane w treści pętli.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2079">The break target used by the loop body.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2080">Tworzy <see cref="T:System.Linq.Expressions.LoopExpression" /> z danym elementem docelowym treści i podziału.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2080">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body and break target.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2081">Utworzony <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2081">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8671b-2082">Poniższy przykład przedstawia sposób tworzenia wyrażenia bloku, zawierającego <xref:System.Linq.Expressions.LoopExpression> obiektu.</span><span class="sxs-lookup"><span data-stu-id="8671b-2082">The following example demonstrates how to create a block expression that contains a <xref:System.Linq.Expressions.LoopExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break, System.Linq.Expressions.LabelTarget continue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.LabelTarget break, class System.Linq.Expressions.LabelTarget continue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression, break As LabelTarget, continue As LabelTarget) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::LabelTarget ^ break, System::Linq::Expressions::LabelTarget ^ continue);" />
      <MemberSignature Language="F#" Value="static member Loop : System.Linq.Expressions.Expression * System.Linq.Expressions.LabelTarget * System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.LoopExpression" Usage="System.Linq.Expressions.Expression.Loop (body, break, continue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="break" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="continue" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="8671b-2083">Treść pętli.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2083">The body of the loop.</span>
          </span>
        </param>
        <param name="break">
          <span data-ttu-id="8671b-2084">Obiekt docelowy podziału, używane w treści pętli.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2084">The break target used by the loop body.</span>
          </span>
        </param>
        <param name="continue">
          <span data-ttu-id="8671b-2085">Obiekt docelowy Kontynuuj, używane w treści pętli.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2085">The continue target used by the loop body.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2086">Tworzy <see cref="T:System.Linq.Expressions.LoopExpression" /> danej jednostki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2086">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2087">Utworzony <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2087">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeBinary">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2088">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> przez wywołanie metody odpowiedniej fabryki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2088">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> by calling the appropriate factory method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MakeBinary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MakeBinary (binaryType, left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binaryType">
          <span data-ttu-id="8671b-2089">
            <see cref="T:System.Linq.Expressions.ExpressionType" /> , Który określa rodzaj operacji binarnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2089">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="8671b-2090">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący lewy operand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2090">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2091">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący prawy operand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2091">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2092">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" />, podane lewy i prawy operandów za pomocą wywołania metody odpowiedniej fabryki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2092">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left and right operands, by calling an appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2093">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> , Wynika z wywołania metody odpowiedniej fabryki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2093">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2094">`binaryType` Określa parametr, który <xref:System.Linq.Expressions.BinaryExpression> metoda fabryki wywołuje tę metodę.</span><span class="sxs-lookup"><span data-stu-id="8671b-2094">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method calls.</span></span> <span data-ttu-id="8671b-2095">Na przykład jeśli `binaryType` jest <xref:System.Linq.Expressions.ExpressionType.Subtract>, ta metoda wywołuje <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span><span class="sxs-lookup"><span data-stu-id="8671b-2095">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-2096">Poniższy przykład pokazuje sposób użycia <xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29> metodę w celu utworzenia <xref:System.Linq.Expressions.BinaryExpression> reprezentujący odejmowania jedną cyfrę z innego.</span><span class="sxs-lookup"><span data-stu-id="8671b-2096">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29> method to create a <xref:System.Linq.Expressions.BinaryExpression> that represents the subtraction of one number from another.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#8)]
 [!code-vb[System.Linq.Expressions.Expression#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2097">
            <paramref name="binaryType" /> nie odnoszą się do węzła wyrażenia binarnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2097">
              <paramref name="binaryType" /> does not correspond to a binary expression node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2098">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2098">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MakeBinary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MakeBinary (binaryType, left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="binaryType">
          <span data-ttu-id="8671b-2099">
            <see cref="T:System.Linq.Expressions.ExpressionType" /> , Który określa rodzaj operacji binarnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2099">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="8671b-2100">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący lewy operand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2100">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2101">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący prawy operand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2101">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="8671b-2102">
            <see langword="true" /> Aby ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> do <see langword="true" />; <see langword="false" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> do <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2102">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2103">A <see cref="T:System.Reflection.MethodInfo" /> określający implementującej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2103">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2104">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" />podany argument po lewej stronie, kliknij prawym przyciskiem myszy operand i implementacja metody, przez wywołanie metody odpowiedniej fabryki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2104">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand and implementing method, by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2105">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> , Wynika z wywołania metody odpowiedniej fabryki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2105">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2106">`binaryType` Określa parametr, który <xref:System.Linq.Expressions.BinaryExpression> metoda fabryki, Metoda ta będzie wywoływać.</span><span class="sxs-lookup"><span data-stu-id="8671b-2106">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call.</span></span> <span data-ttu-id="8671b-2107">Na przykład jeśli `binaryType` jest <xref:System.Linq.Expressions.ExpressionType.Subtract>, ta metoda wywołuje <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span><span class="sxs-lookup"><span data-stu-id="8671b-2107">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span> <span data-ttu-id="8671b-2108">`liftToNull` i `method` parametry są ignorowane, jeśli metoda odpowiednie fabryki nie ma odpowiadającego mu parametru.</span><span class="sxs-lookup"><span data-stu-id="8671b-2108">The `liftToNull` and `method` parameters are ignored if the appropriate factory method does not have a corresponding parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2109">
            <paramref name="binaryType" /> nie odnoszą się do węzła wyrażenia binarnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2109">
              <paramref name="binaryType" /> does not correspond to a binary expression node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2110">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2110">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member MakeBinary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MakeBinary (binaryType, left, right, liftToNull, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="binaryType">
          <span data-ttu-id="8671b-2111">
            <see cref="T:System.Linq.Expressions.ExpressionType" /> , Który określa rodzaj operacji binarnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2111">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="8671b-2112">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący lewy operand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2112">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2113">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący prawy operand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2113">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="8671b-2114">
            <see langword="true" /> Aby ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> do <see langword="true" />; <see langword="false" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> do <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2114">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2115">A <see cref="T:System.Reflection.MethodInfo" /> określający implementującej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2115">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="8671b-2116">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> reprezentujący funkcji konwersji typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2116">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function.</span>
          </span>
          <span data-ttu-id="8671b-2117">Ten parametr jest używany tylko wtedy, gdy <c>binaryType</c> jest <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> lub przydział złożony...</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2117">This parameter is used only if <c>binaryType</c> is <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> or compound assignment..</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2118">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" />podany argument po lewej stronie, kliknij prawym przyciskiem myszy operand, implementacja metody i — typ funkcji konwersji, przez wywołanie metody odpowiedniej fabryki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2118">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2119">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> , Wynika z wywołania metody odpowiedniej fabryki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2119">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2120">`binaryType` Określa parametr, który <xref:System.Linq.Expressions.BinaryExpression> metoda fabryki, Metoda ta będzie wywoływać.</span><span class="sxs-lookup"><span data-stu-id="8671b-2120">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call.</span></span> <span data-ttu-id="8671b-2121">Na przykład jeśli `binaryType` jest <xref:System.Linq.Expressions.ExpressionType.Subtract>, ta metoda wywołuje <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span><span class="sxs-lookup"><span data-stu-id="8671b-2121">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span> <span data-ttu-id="8671b-2122">`liftToNull`, `method` i `conversion` parametry są ignorowane, jeśli metoda odpowiednie fabryki nie ma odpowiadającego mu parametru.</span><span class="sxs-lookup"><span data-stu-id="8671b-2122">The `liftToNull`, `method` and `conversion` parameters are ignored if the appropriate factory method does not have a corresponding parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2123">
            <paramref name="binaryType" /> nie odnoszą się do węzła wyrażenia binarnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2123">
              <paramref name="binaryType" /> does not correspond to a binary expression node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2124">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2124">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeCatchBlock">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock MakeCatchBlock (Type type, System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock MakeCatchBlock(class System.Type type, class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ MakeCatchBlock(Type ^ type, System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberSignature Language="F#" Value="static member MakeCatchBlock : Type * System.Linq.Expressions.ParameterExpression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.CatchBlock" Usage="System.Linq.Expressions.Expression.MakeCatchBlock (type, variable, body, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-2125">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> z <see cref="T:System.Exception" /> to <see cref="T:System.Linq.Expressions.CatchBlock" /> będzie obsługiwać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2125">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span>
          </span>
        </param>
        <param name="variable">
          <span data-ttu-id="8671b-2126">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> reprezentujący odwołania do <see cref="T:System.Exception" /> obiektu przechwycony przez ten program obsługi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2126">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="8671b-2127">Treść instrukcji catch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2127">The body of the catch statement.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="8671b-2128">Treść <see cref="T:System.Exception" /> filtru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2128">The body of the <see cref="T:System.Exception" /> filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2129">Tworzy <see cref="T:System.Linq.Expressions.CatchBlock" /> reprezentujący instrukcja catch, przy użyciu określonych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2129">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with the specified elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2130">Utworzony <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2130">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2131">`type` musi być równa null i jest zgodny z typem `variable` (jeśli go podano).</span><span class="sxs-lookup"><span data-stu-id="8671b-2131">`type` must be non-null and match the type of `variable` (if it is supplied).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeDynamic">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2132">Tworzy <see cref="T:System.Linq.Expressions.DynamicExpression" /> reprezentujący operację dynamiczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2132">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arguments As IEnumerable(Of Expression)) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="8671b-2133">Typ delegata używany przez <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2133">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="8671b-2134">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2134">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-2135">Argumenty operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2135">The arguments to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2136">Tworzy <see cref="T:System.Linq.Expressions.DynamicExpression" /> reprezentujący operację dynamiczną przez podany <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2136">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2137">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> i ma <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, i <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> równa określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2137">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="8671b-2138">Typ delegata używany przez <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2138">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="8671b-2139">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2139">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="8671b-2140">Argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2140">The argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2141">Tworzy <see cref="T:System.Linq.Expressions.DynamicExpression" /> reprezentujący operację dynamiczną przez podany <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> i jeden argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2141">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and one argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2142">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> i ma <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, i <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> równa określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2142">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, ParamArray arguments As Expression()) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="8671b-2143">Typ delegata używany przez <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2143">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="8671b-2144">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2144">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-2145">Argumenty operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2145">The arguments to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2146">Tworzy <see cref="T:System.Linq.Expressions.DynamicExpression" /> reprezentujący operację dynamiczną przez podany <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2146">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2147">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> i ma <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, i <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> równa określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2147">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="8671b-2148">Typ delegata używany przez <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2148">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="8671b-2149">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2149">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="8671b-2150">Pierwszy argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2150">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="8671b-2151">Drugi argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2151">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2152">Tworzy <see cref="T:System.Linq.Expressions.DynamicExpression" /> reprezentujący operację dynamiczną przez podany <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> i dwa argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2152">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and two arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2153">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> i ma <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, i <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> równa określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2153">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression, arg2 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="8671b-2154">Typ delegata używany przez <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2154">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="8671b-2155">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2155">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="8671b-2156">Pierwszy argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2156">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="8671b-2157">Drugi argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2157">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="8671b-2158">Trzeci argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2158">The third argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2159">Tworzy <see cref="T:System.Linq.Expressions.DynamicExpression" /> reprezentujący operację dynamiczną przez podany <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> i trzy argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2159">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and three arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2160">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> i ma <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, i <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> równa określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2160">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberSignature Language="F#" Value="static member MakeDynamic : Type * System.Runtime.CompilerServices.CallSiteBinder * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.DynamicExpression" Usage="System.Linq.Expressions.Expression.MakeDynamic (delegateType, binder, arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="8671b-2161">Typ delegata używany przez <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2161">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="8671b-2162">Obiekt wiążący środowiska uruchomieniowego dla operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2162">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="8671b-2163">Pierwszy argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2163">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="8671b-2164">Drugi argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2164">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="8671b-2165">Trzeci argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2165">The third argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="8671b-2166">Czwarty argument operacji dynamicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2166">The fourth argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2167">Tworzy <see cref="T:System.Linq.Expressions.DynamicExpression" /> reprezentujący operację dynamiczną przez podany <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> i cztery argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2167">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and four arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2168">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> i ma <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, i <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> równa określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2168">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGoto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression MakeGoto (System.Linq.Expressions.GotoExpressionKind kind, System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression MakeGoto(valuetype System.Linq.Expressions.GotoExpressionKind kind, class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ MakeGoto(System::Linq::Expressions::GotoExpressionKind kind, System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member MakeGoto : System.Linq.Expressions.GotoExpressionKind * System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.MakeGoto (kind, target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="System.Linq.Expressions.GotoExpressionKind" />
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="kind">
          <span data-ttu-id="8671b-2169">
            <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> z <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2169">The <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> of the <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="8671b-2170">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> , <see cref="T:System.Linq.Expressions.GotoExpression" /> Spowoduje przejście do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2170">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="8671b-2171">Wartość, które zostaną przekazane do skojarzonego etykiety po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2171">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-2172">
            <see cref="T:System.Type" /> Można ustawić <see cref="P:System.Linq.Expressions.Expression.Type" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2172">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2173">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący przeskoku określonego <see cref="T:System.Linq.Expressions.GotoExpressionKind" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2173">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a jump of the specified <see cref="T:System.Linq.Expressions.GotoExpressionKind" />.</span>
          </span>
          <span data-ttu-id="8671b-2174">Wartość przekazana do etykiety po przeskakiwanie można również określić.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2174">The value passed to the label upon jumping can also be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2175">A <see cref="T:System.Linq.Expressions.GotoExpression" /> z <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> równa <paramref name="kind" />, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> właściwością <paramref name="target" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwością <paramref name="type" />, i <paramref name="value" /> mają być przekazane do etykietą docelową po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2175">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to <paramref name="kind" />, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression MakeIndex (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression MakeIndex(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeIndex (instance As Expression, indexer As PropertyInfo, arguments As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ MakeIndex(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member MakeIndex : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.MakeIndex (instance, indexer, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="8671b-2176">Obiekt, do której należy właściwość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2176">The object to which the property belongs.</span>
          </span>
          <span data-ttu-id="8671b-2177">Powinna to być wartość null, jeśli właściwość jest <see langword="static" /> (<see langword="shared" /> w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2177">It should be null if the property is <see langword="static" /> (<see langword="shared" /> in Visual Basic).</span>
          </span>
        </param>
        <param name="indexer">
          <span data-ttu-id="8671b-2178">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujące właściwość do indeksu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2178">An <see cref="T:System.Linq.Expressions.Expression" /> representing the property to index.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-2179">
            <c>IEnumerable&lt;wyrażenie&gt; </c> (<c>IEnumerable (programu Expression)</c> w języku Visual Basic) zawiera argumenty, które będą używane do indeksowania właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2179">An <c>IEnumerable&lt;Expression&gt;</c> (<c>IEnumerable (Of Expression)</c> in Visual Basic) that contains the arguments that will be used to index the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2180">Tworzy <see cref="T:System.Linq.Expressions.IndexExpression" /> reprezentująca dostęp do właściwości indeksowanych w obiekcie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2180">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> that represents accessing an indexed property in an object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2181">Utworzony <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2181">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeMemberAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression MakeMemberAccess (System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression MakeMemberAccess(class System.Linq.Expressions.Expression expression, class System.Reflection.MemberInfo member) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ MakeMemberAccess(System::Linq::Expressions::Expression ^ expression, System::Reflection::MemberInfo ^ member);" />
      <MemberSignature Language="F#" Value="static member MakeMemberAccess : System.Linq.Expressions.Expression * System.Reflection.MemberInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.MakeMemberAccess (expression, member)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-2182">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentująca obiekt, który należy do elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2182">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the object that the member belongs to.</span>
          </span>
          <span data-ttu-id="8671b-2183">Może to być wartość null dla statycznych elementów członkowskich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2183">This can be null for static members.</span>
          </span>
        </param>
        <param name="member">
          <span data-ttu-id="8671b-2184">
            <see cref="T:System.Reflection.MemberInfo" /> Opisujący pola lub właściwości, które były dostępne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2184">The <see cref="T:System.Reflection.MemberInfo" /> that describes the field or property to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2185">Tworzy <see cref="T:System.Linq.Expressions.MemberExpression" /> reprezentująca dostęp do pola lub właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2185">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing either a field or a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2186">
            <see cref="T:System.Linq.Expressions.MemberExpression" /> , Wynika z wywołania metody odpowiedniej fabryki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2186">The <see cref="T:System.Linq.Expressions.MemberExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2187">Ta metoda może służyć do tworzenia <xref:System.Linq.Expressions.MemberExpression> reprezentująca dostęp do pola lub właściwości, w zależności od typu `member`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2187">This method can be used to create a <xref:System.Linq.Expressions.MemberExpression> that represents accessing either a field or a property, depending on the type of `member`.</span></span> <span data-ttu-id="8671b-2188">Jeśli `member` typu <xref:System.Reflection.FieldInfo>, ta metoda wywołuje <xref:System.Linq.Expressions.Expression.Field%2A> utworzyć <xref:System.Linq.Expressions.MemberExpression>.</span><span class="sxs-lookup"><span data-stu-id="8671b-2188">If `member` is of type <xref:System.Reflection.FieldInfo>, this method calls <xref:System.Linq.Expressions.Expression.Field%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.</span></span> <span data-ttu-id="8671b-2189">Jeśli `member` typu <xref:System.Reflection.PropertyInfo>, ta metoda wywołuje <xref:System.Linq.Expressions.Expression.Property%2A> utworzyć <xref:System.Linq.Expressions.MemberExpression>.</span><span class="sxs-lookup"><span data-stu-id="8671b-2189">If `member` is of type <xref:System.Reflection.PropertyInfo>, this method calls <xref:System.Linq.Expressions.Expression.Property%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2190">
            <paramref name="member" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2190">
              <paramref name="member" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2191">
            <paramref name="member" /> nie reprezentuje pole lub właściwość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2191">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeTry">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression MakeTry (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.Expression fault, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt; handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression MakeTry(class System.Type type, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally, class System.Linq.Expressions.Expression fault, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.CatchBlock&gt; handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ MakeTry(Type ^ type, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally, System::Linq::Expressions::Expression ^ fault, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberSignature Language="F#" Value="static member MakeTry : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.CatchBlock&gt; -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.MakeTry (type, body, finally, fault, handlers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fault" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-2192">Typ wyniku wyrażenia try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2192">The result type of the try expression.</span>
          </span>
          <span data-ttu-id="8671b-2193">Jeśli ma wartość null, bodh i całej obsługi muszą mieć identyczne typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2193">If null, bodh and all handlers must have identical type.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="8671b-2194">Treści bloku try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2194">The body of the try block.</span>
          </span>
        </param>
        <param name="finally">
          <span data-ttu-id="8671b-2195">Treści bloku finally.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2195">The body of the finally block.</span>
          </span>
          <span data-ttu-id="8671b-2196">Należy przekazać wartość null, jeśli blok try ma nie na koniec bloku skojarzonych z nim.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2196">Pass null if the try block has no finally block associated with it.</span>
          </span>
        </param>
        <param name="fault">
          <span data-ttu-id="8671b-2197">Treść bloku błędów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2197">The body of the fault block.</span>
          </span>
          <span data-ttu-id="8671b-2198">Należy przekazać wartość null, jeśli blok try ma nie bloku błędów skojarzonych z nim.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2198">Pass null if the try block has no fault block associated with it.</span>
          </span>
        </param>
        <param name="handlers">
          <span data-ttu-id="8671b-2199">Kolekcja <see cref="T:System.Linq.Expressions.CatchBlock" />s reprezentujący instrukcji catch, który ma zostać skojarzony z bloku try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2199">A collection of <see cref="T:System.Linq.Expressions.CatchBlock" />s representing the catch statements to be associated with the try block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2200">Tworzy <see cref="T:System.Linq.Expressions.TryExpression" /> reprezentujący bloku try z określonych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2200">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with the specified elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2201">Utworzony <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2201">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeUnary">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2202">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> przez wywołanie metody odpowiedniej fabryki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2202">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> by calling the appropriate factory method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType unaryType, class System.Linq.Expressions.Expression operand, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ MakeUnary(System::Linq::Expressions::ExpressionType unaryType, System::Linq::Expressions::Expression ^ operand, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member MakeUnary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.MakeUnary (unaryType, operand, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="unaryType">
          <span data-ttu-id="8671b-2203">
            <see cref="T:System.Linq.Expressions.ExpressionType" /> Określająca typ operację jednoargumentową.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2203">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</span>
          </span>
        </param>
        <param name="operand">
          <span data-ttu-id="8671b-2204">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2204">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-2205">
            <see cref="T:System.Type" /> , Który określa typ, który ma zostać przekonwertowane na (przekazać <see langword="null" /> Jeśli nie ma to zastosowanie).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2205">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass <see langword="null" /> if not applicable).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2206">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" />, podany argument operacji, przez wywołanie metody odpowiedniej fabryki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2206">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand, by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2207">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> , Wynika z wywołania metody odpowiedniej fabryki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2207">The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2208">`unaryType` Określa parametr, który <xref:System.Linq.Expressions.UnaryExpression> metoda fabryki wywołuje tę metodę.</span><span class="sxs-lookup"><span data-stu-id="8671b-2208">The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls.</span></span> <span data-ttu-id="8671b-2209">Na przykład jeśli `unaryType` jest równa <xref:System.Linq.Expressions.ExpressionType.Convert>, ta metoda wywołuje <xref:System.Linq.Expressions.Expression.Convert%2A>.</span><span class="sxs-lookup"><span data-stu-id="8671b-2209">For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>.</span></span> <span data-ttu-id="8671b-2210">`type`Parametr jest ignorowany, jeśli nie ma zastosowania do metody fabryka, która jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="8671b-2210">The `type`parameter is ignored if it does not apply to the factory method that is called.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2211">
            <paramref name="operand" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2211">
              <paramref name="operand" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2212">
            <paramref name="unaryType" /> nie odpowiada na węzeł wyrażenie jednoargumentowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2212">
              <paramref name="unaryType" /> does not correspond to a unary expression node.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType unaryType, class System.Linq.Expressions.Expression operand, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ MakeUnary(System::Linq::Expressions::ExpressionType unaryType, System::Linq::Expressions::Expression ^ operand, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MakeUnary : System.Linq.Expressions.ExpressionType * System.Linq.Expressions.Expression * Type * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.MakeUnary (unaryType, operand, type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="unaryType">
          <span data-ttu-id="8671b-2213">
            <see cref="T:System.Linq.Expressions.ExpressionType" /> Określająca typ operację jednoargumentową.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2213">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</span>
          </span>
        </param>
        <param name="operand">
          <span data-ttu-id="8671b-2214">
            <see cref="T:System.Linq.Expressions.Expression" /> Reprezentujący argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2214">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-2215">
            <see cref="T:System.Type" /> , Który określa typ, który ma zostać przekonwertowane na (przekazać <see langword="null" /> Jeśli nie ma to zastosowanie).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2215">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass <see langword="null" /> if not applicable).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2216">
            <see cref="T:System.Reflection.MethodInfo" /> Reprezentujący implementującej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2216">The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2217">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" />, podany argument i implementacja metody, przez wywołanie metody odpowiedniej fabryki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2217">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand and implementing method, by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2218">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> , Wynika z wywołania metody odpowiedniej fabryki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2218">The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2219">`unaryType` Określa parametr, który <xref:System.Linq.Expressions.UnaryExpression> metoda fabryki wywołuje tę metodę.</span><span class="sxs-lookup"><span data-stu-id="8671b-2219">The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls.</span></span> <span data-ttu-id="8671b-2220">Na przykład jeśli `unaryType` jest równa <xref:System.Linq.Expressions.ExpressionType.Convert>, ta metoda wywołuje <xref:System.Linq.Expressions.Expression.Convert%2A>.</span><span class="sxs-lookup"><span data-stu-id="8671b-2220">For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>.</span></span> <span data-ttu-id="8671b-2221">`type` i `method` parametry są ignorowane, jeśli nie mają zastosowania do metody fabryka, która jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="8671b-2221">The `type` and `method` parameters are ignored if they do not apply to the factory method that is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2222">
            <paramref name="operand" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2222">
              <paramref name="operand" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2223">
            <paramref name="unaryType" /> nie odpowiada na węzeł wyrażenie jednoargumentowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2223">
              <paramref name="unaryType" /> does not correspond to a unary expression node.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MemberBind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2224">Tworzy <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> reprezentujący cyklicznego inicjowanie elementów członkowskich elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2224">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (member As MemberInfo, bindings As IEnumerable(Of MemberBinding)) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MemberInfo ^ member, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MemberInfo * seq&lt;System.Linq.Expressions.MemberBinding&gt; -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (member, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="8671b-2225">
            <see cref="T:System.Reflection.MemberInfo" /> Można ustawić <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2225">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="8671b-2226">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.MemberBinding" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2226">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2227">Tworzy <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> reprezentujący cykliczne inicjowanie elementów członkowskich pola lub właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2227">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2228">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> zawierający <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> równa właściwości <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> i <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> i <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2228">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2229">`member` Parametru musi reprezentować pole lub właściwość.</span><span class="sxs-lookup"><span data-stu-id="8671b-2229">The `member` parameter must represent a field or property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2230">
            <paramref name="member" /> lub <paramref name="bindings" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2230">
              <paramref name="member" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2231">
            <paramref name="member" /> nie reprezentuje pole lub właściwość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2231">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="8671b-2232">- lub - <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> właściwość elementu <paramref name="bindings" /> nie reprezentuje elementem członkowskim typu pola lub właściwości, które <paramref name="member" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2232">-or-  The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (member As MemberInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MemberInfo ^ member, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MemberInfo * System.Linq.Expressions.MemberBinding[] -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (member, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="8671b-2233">
            <see cref="T:System.Reflection.MemberInfo" /> Można ustawić <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2233">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="8671b-2234">Tablica <see cref="T:System.Linq.Expressions.MemberBinding" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2234">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2235">Tworzy <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> reprezentujący cykliczne inicjowanie elementów członkowskich pola lub właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2235">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2236">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> zawierający <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> równa właściwości <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> i <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> i <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2236">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2237">`member` Parametru musi reprezentować pole lub właściwość.</span><span class="sxs-lookup"><span data-stu-id="8671b-2237">The `member` parameter must represent a field or property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2238">
            <paramref name="member" /> lub <paramref name="bindings" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2238">
              <paramref name="member" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2239">
            <paramref name="member" /> nie reprezentuje pole lub właściwość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2239">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="8671b-2240">- lub - <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> właściwość elementu <paramref name="bindings" /> nie reprezentuje elementem członkowskim typu pola lub właściwości, które <paramref name="member" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2240">-or-  The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MethodInfo propertyAccessor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (propertyAccessor As MethodInfo, bindings As IEnumerable(Of MemberBinding)) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MethodInfo ^ propertyAccessor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.MemberBinding&gt; -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (propertyAccessor, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="8671b-2241">
            <see cref="T:System.Reflection.MethodInfo" /> Reprezentujący metody dostępu właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2241">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="8671b-2242">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.MemberBinding" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2242">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2243">Tworzy <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> reprezentujący inicjowania cyklicznego elementów członkowskich elementu członkowskiego, która jest dostępna za pomocą metody dostępu właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2243">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2244">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> zawierający <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> równa właściwości <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> właściwością <see cref="T:System.Reflection.PropertyInfo" /> reprezentująca właściwości używane w <paramref name="propertyAccessor" />, i <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2244">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2245">
            <paramref name="propertyAccessor" /> lub <paramref name="bindings" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2245">
              <paramref name="propertyAccessor" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2246">
            <paramref name="propertyAccessor" /> reprezentuje metody dostępu właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2246">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="8671b-2247">- lub - <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> właściwość elementu <paramref name="bindings" /> nie reprezentuje elementem członkowskim typu właściwości używane przez metodę która <paramref name="propertyAccessor" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2247">-or-  The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (propertyAccessor As MethodInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MethodInfo ^ propertyAccessor, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberBind : System.Reflection.MethodInfo * System.Linq.Expressions.MemberBinding[] -&gt; System.Linq.Expressions.MemberMemberBinding" Usage="System.Linq.Expressions.Expression.MemberBind (propertyAccessor, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="8671b-2248">
            <see cref="T:System.Reflection.MethodInfo" /> Reprezentujący metody dostępu właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2248">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="8671b-2249">Tablica <see cref="T:System.Linq.Expressions.MemberBinding" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2249">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2250">Tworzy <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> reprezentujący inicjowania cyklicznego elementów członkowskich elementu członkowskiego, która jest dostępna za pomocą metody dostępu właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2250">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2251">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> zawierający <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> równa właściwości <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> właściwością <see cref="T:System.Reflection.PropertyInfo" /> reprezentująca właściwości używane w <paramref name="propertyAccessor" />, i <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2251">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2252">
            <paramref name="propertyAccessor" /> lub <paramref name="bindings" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2252">
              <paramref name="propertyAccessor" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2253">
            <paramref name="propertyAccessor" /> reprezentuje metody dostępu właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2253">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="8671b-2254">- lub - <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> właściwość elementu <paramref name="bindings" /> nie reprezentuje elementem członkowskim typu właściwości używane przez metodę która <paramref name="propertyAccessor" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2254">-or-  The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MemberInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2255">Reprezentuje wyrażenie, które tworzy nowy obiekt i inicjuje właściwość obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2255">Represents an expression that creates a new object and initializes a property of the object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberInitExpression MemberInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberInitExpression ^ MemberInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberInit : System.Linq.Expressions.NewExpression * seq&lt;System.Linq.Expressions.MemberBinding&gt; -&gt; System.Linq.Expressions.MemberInitExpression" Usage="System.Linq.Expressions.Expression.MemberInit (newExpression, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="8671b-2256">A <see cref="T:System.Linq.Expressions.NewExpression" /> można ustawić <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2256">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="8671b-2257">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.MemberBinding" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2257">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2258">Reprezentuje wyrażenie, które tworzy nowy obiekt i inicjuje właściwość obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2258">Represents an expression that creates a new object and initializes a property of the object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2259">A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> i <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> i <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2259">A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2260"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.MemberInitExpression> jest równa <xref:System.Linq.Expressions.Expression.Type%2A> właściwość `newExpression`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2260">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-2261">W poniższym przykładzie pokazano wyrażenie, które tworzy nowy obiekt i inicjuje właściwość obiektu.</span><span class="sxs-lookup"><span data-stu-id="8671b-2261">The following example demonstrates an expression that creates a new object and initializes a property of the object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#40)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2262">
            <paramref name="newExpression" /> lub <paramref name="bindings" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2262">
              <paramref name="newExpression" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2263">
            <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> Właściwość elementu <paramref name="bindings" /> nie reprezentuje członek typu, <paramref name="newExpression" />. Wpisz reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2263">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberInitExpression MemberInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberInitExpression ^ MemberInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberSignature Language="F#" Value="static member MemberInit : System.Linq.Expressions.NewExpression * System.Linq.Expressions.MemberBinding[] -&gt; System.Linq.Expressions.MemberInitExpression" Usage="System.Linq.Expressions.Expression.MemberInit (newExpression, bindings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="8671b-2264">A <see cref="T:System.Linq.Expressions.NewExpression" /> można ustawić <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2264">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="8671b-2265">Tablica <see cref="T:System.Linq.Expressions.MemberBinding" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2265">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2266">Tworzy <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2266">Creates a <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2267">A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> i <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> i <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2267">A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2268"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.MemberInitExpression> jest równa <xref:System.Linq.Expressions.Expression.Type%2A> właściwość `newExpression`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2268">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-2269">Poniższy przykład pokazuje sposób użycia <xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29> metodę w celu utworzenia <xref:System.Linq.Expressions.MemberInitExpression> reprezentujący inicjowania dwa elementy członkowskie nowego obiektu.</span><span class="sxs-lookup"><span data-stu-id="8671b-2269">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29> method to create a <xref:System.Linq.Expressions.MemberInitExpression> that represents the initialization of two members of a new object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#9)]
 [!code-vb[System.Linq.Expressions.Expression#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2270">
            <paramref name="newExpression" /> lub <paramref name="bindings" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2270">
              <paramref name="newExpression" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2271">
            <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> Właściwość elementu <paramref name="bindings" /> nie reprezentuje członek typu, <paramref name="newExpression" />. Wpisz reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2271">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Modulo">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2272">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operacji arytmetycznych resztę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2272">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Modulo(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Modulo (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Modulo(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Modulo : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Modulo (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2273">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2273">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2274">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2274">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2275">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operacji arytmetycznych resztę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2275">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2276">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2276">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2277">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2277">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-2278"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2278">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-2279">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2279">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-2280">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2280">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-2281"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2281">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-2282">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2282">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-2283">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-2283">Implementing Method</span></span>  
 <span data-ttu-id="8671b-2284">Następujące reguły określają wybranej metody wykonawcze dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-2284">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-2285">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator modulo <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-2285">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2286">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2286">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-2287">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-2287">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-2288">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2288">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2289">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2289">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-2290">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2290">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2291">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-2291">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-2292">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2292">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-2293">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-2293">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-2294">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2294">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2295">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2295">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-2296">Typ węzła jest typ wyniku operator modulo wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-2296">The type of the node is the result type of the predefined modulus operator.</span></span>  
  
-   <span data-ttu-id="8671b-2297">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2297">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-2298">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku operator modulo wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-2298">The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2299">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2299">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2300">Operator modulo nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2300">The modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Modulo(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Modulo (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Modulo(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Modulo : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Modulo (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2301">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2301">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2302">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2302">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2303">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2303">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2304">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operacji arytmetycznych resztę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2304">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2305">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2305">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2306">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2306">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-2307"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2307">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-2308">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2308">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-2309">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2309">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-2310"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2310">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-2311">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2311">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-2312">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-2312">Implementing Method</span></span>  
 <span data-ttu-id="8671b-2313">Implementującej metody dla tej operacji jest wybierany w oparciu o następujące reguły:</span><span class="sxs-lookup"><span data-stu-id="8671b-2313">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="8671b-2314">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest implementującej metody dla węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2314">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="8671b-2315">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator modulo <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-2315">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2316">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2316">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-2317">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-2317">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-2318">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2318">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2319">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2319">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-2320">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2320">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2321">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-2321">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-2322">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2322">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-2323">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-2323">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-2324">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2324">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2325">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2325">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-2326">Typ węzła jest typ wyniku operator modulo wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-2326">The type of the node is the result type of the predefined modulus operator.</span></span>  
  
-   <span data-ttu-id="8671b-2327">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2327">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-2328">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku operator modulo wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-2328">The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2329">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2329">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2330">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2330">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2331">
            <paramref name="method" /> jest <see langword="null" /> i operator modulo nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2331">
              <paramref name="method" /> is <see langword="null" /> and the modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ModuloAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2332">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania resztę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2332">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ModuloAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ModuloAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2333">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2333">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2334">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2334">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2335">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania resztę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2335">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2336">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2336">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member ModuloAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ModuloAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2337">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2337">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2338">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2338">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2339">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2339">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2340">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania resztę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2340">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2341">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2341">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member ModuloAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ModuloAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2342">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2342">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2343">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2343">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2344">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2344">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="8671b-2345">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2345">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2346">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania resztę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2346">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2347">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2347">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Multiply">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2348">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację arytmetyczną mnożenia, która nie ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2348">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Multiply(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Multiply(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Multiply (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2349">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2349">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2350">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2350">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2351">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację arytmetyczną mnożenia, która nie ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2351">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2352">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2352">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2353">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2353">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-2354"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2354">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-2355">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2355">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-2356">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2356">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-2357"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2357">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-2358">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2358">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-2359">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-2359">Implementing Method</span></span>  
 <span data-ttu-id="8671b-2360">Następujące reguły określają wybranej metody wykonawcze dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-2360">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-2361">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator mnożenia <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-2361">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2362">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2362">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-2363">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-2363">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-2364">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2364">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2365">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2365">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-2366">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2366">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2367">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-2367">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-2368">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2368">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-2369">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-2369">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-2370">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2370">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2371">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2371">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-2372">Typ węzła jest typ wyniku operator mnożenia wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-2372">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="8671b-2373">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2373">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-2374">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku operator mnożenia wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-2374">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-2375">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie, które mnoży dwie wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-2375">The following code example shows how to create an expression that multiplies two values.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#27)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2376">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2376">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2377">Nie zdefiniowano operator mnożenia dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2377">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Multiply(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Multiply(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Multiply (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2378">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2378">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2379">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2379">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2380">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2380">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2381">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację arytmetyczną mnożenia, która nie ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2381">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2382">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2382">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2383">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2383">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-2384"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2384">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-2385">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2385">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-2386">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2386">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-2387"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2387">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-2388">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2388">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-2389">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-2389">Implementing Method</span></span>  
 <span data-ttu-id="8671b-2390">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-2390">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-2391">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest implementującej metody dla węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2391">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="8671b-2392">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator mnożenia <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-2392">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2393">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2393">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-2394">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-2394">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-2395">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2395">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2396">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2396">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-2397">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2397">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2398">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-2398">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-2399">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2399">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-2400">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-2400">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-2401">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2401">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2402">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2402">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-2403">Typ węzła jest typ wyniku operator mnożenia wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-2403">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="8671b-2404">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2404">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-2405">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku operator mnożenia wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-2405">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2406">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2406">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2407">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2407">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2408">
            <paramref name="method" /> jest <see langword="null" /> i nie zdefiniowano operator mnożenia dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2408">
              <paramref name="method" /> is <see langword="null" /> and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2409">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania mnożenia, która nie ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2409">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2410">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2410">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2411">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2411">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2412">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania mnożenia, która nie ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2412">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2413">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2413">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2414">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2414">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2415">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2415">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2416">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2416">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2417">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania mnożenia, która nie ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2417">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2418">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2418">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2419">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2419">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2420">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2420">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2421">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2421">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="8671b-2422">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2422">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2423">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania mnożenia, która nie ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2423">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2424">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2424">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2425">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania mnożenia, która ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2425">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssignChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2426">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2426">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2427">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2427">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2428">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania mnożenia, która ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2428">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2429">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2429">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssignChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2430">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2430">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2431">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2431">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2432">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2432">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2433">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania mnożenia, która ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2433">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2434">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2434">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member MultiplyAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyAssignChecked (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2435">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2435">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2436">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2436">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2437">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2437">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="8671b-2438">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2438">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2439">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację przypisania mnożenia, która ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2439">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2440">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2440">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2441">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację arytmetyczną mnożenia, która ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2441">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member MultiplyChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2442">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2442">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2443">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2443">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2444">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację arytmetyczną mnożenia, która ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2444">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2445">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2445">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2446">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2446">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-2447"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2447">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-2448">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2448">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-2449">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2449">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-2450"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2450">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-2451">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2451">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-2452">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-2452">Implementing Method</span></span>  
 <span data-ttu-id="8671b-2453">Następujące reguły określają wybranej metody wykonawcze dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-2453">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-2454">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator mnożenia <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-2454">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2455">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2455">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-2456">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-2456">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-2457">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2457">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2458">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2458">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-2459">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2459">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2460">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-2460">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-2461">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2461">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-2462">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-2462">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-2463">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2463">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2464">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2464">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-2465">Typ węzła jest typ wyniku operator mnożenia wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-2465">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="8671b-2466">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2466">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-2467">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku operator mnożenia wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-2467">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2468">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2468">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2469">Nie zdefiniowano operator mnożenia dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2469">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member MultiplyChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.MultiplyChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2470">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2470">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2471">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2471">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2472">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2472">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2473">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację arytmetyczną mnożenia, która ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2473">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2474">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2474">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2475">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2475">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-2476"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2476">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-2477">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2477">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-2478">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2478">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-2479"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2479">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-2480">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2480">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-2481">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-2481">Implementing Method</span></span>  
 <span data-ttu-id="8671b-2482">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-2482">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-2483">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest implementującej metody dla węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2483">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="8671b-2484">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator mnożenia <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-2484">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2485">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2485">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-2486">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-2486">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-2487">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2487">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2488">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2488">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-2489">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2489">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2490">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-2490">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-2491">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2491">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-2492">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-2492">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-2493">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2493">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2494">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2494">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-2495">Typ węzła jest typ wyniku operator mnożenia wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-2495">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="8671b-2496">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2496">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-2497">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku operator mnożenia wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-2497">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2498">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2498">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2499">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2499">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2500">
            <paramref name="method" /> jest <see langword="null" /> i nie zdefiniowano operator mnożenia dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2500">
              <paramref name="method" /> is <see langword="null" /> and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Negate">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2501">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący operację arytmetyczny negacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2501">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Negate(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Negate(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Negate expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-2502">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2502">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2503">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący operację arytmetyczny negacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2503">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2504">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2504">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2505"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Właściwość wynikowy <xref:System.Linq.Expressions.UnaryExpression> ustawiono implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2505">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="8671b-2506"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2506">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-2507">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2507">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-2508">Są one w przeciwnym razie wartość false.</span><span class="sxs-lookup"><span data-stu-id="8671b-2508">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-2509">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-2509">Implementing Method</span></span>  
 <span data-ttu-id="8671b-2510">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-2510">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-2511">Jeśli `expression`. Typem jest typ zdefiniowany przez użytkownika, który definiuje Jednoargumentowy operator odejmowania, <xref:System.Reflection.MethodInfo> , który reprezentuje operator jest implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2511">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2512">W przeciwnym razie, jeśli `expression`. Typ jest typu liczbowego, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2512">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-2513">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-2513">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-2514">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2514">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2515">Jeśli `expression`. Typ można przypisać do typu argumentu metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2515">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-2516">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2516">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2517">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-2517">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-2518">`expression`. Typ jest typem wartościowym i odpowiedni typ wartości nie przyjmujące wartości jest równa argument typu implementującego metodę.</span><span class="sxs-lookup"><span data-stu-id="8671b-2518">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-2519">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-2519">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-2520">Jeśli metoda implementującej jest `null`, typ węzła jest `expression`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-2520">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="8671b-2521">Jeśli `expression`. Typ wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2521">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-2522">W przeciwnym razie zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2522">Otherwise, the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-2523">Poniższy przykład pokazuje, jak utworzyć wyrażenie, które reprezentuje operację arytmetyczny negacji.</span><span class="sxs-lookup"><span data-stu-id="8671b-2523">The following example demonstrates how to create an expression that represents an arithmetic negation operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#50](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#50)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#50](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2524">
            <paramref name="expression" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2524">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2525">Jednoargumentowy minus operator nie jest zdefiniowany dla <paramref name="expression" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2525">The unary minus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Negate(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Negate(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Negate : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Negate (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-2526">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2526">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2527">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2527">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2528">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący operację arytmetyczny negacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2528">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2529">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2529">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2530"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Właściwość wynikowy <xref:System.Linq.Expressions.UnaryExpression> ustawiono implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2530">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="8671b-2531"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2531">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-2532">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2532">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-2533">Są one w przeciwnym razie wartość false.</span><span class="sxs-lookup"><span data-stu-id="8671b-2533">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-2534">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-2534">Implementing Method</span></span>  
 <span data-ttu-id="8671b-2535">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-2535">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-2536">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje jeden argument jest implementującej metody dla węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2536">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="8671b-2537">Jeśli `expression`. Typem jest typ zdefiniowany przez użytkownika, który definiuje Jednoargumentowy operator odejmowania, <xref:System.Reflection.MethodInfo> , który reprezentuje operator jest implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2537">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2538">W przeciwnym razie, jeśli `expression`. Typ jest typu liczbowego, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2538">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-2539">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-2539">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-2540">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2540">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2541">Jeśli `expression`. Typ można przypisać do typu argumentu metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2541">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-2542">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2542">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2543">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-2543">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-2544">`expression`. Typ jest typem wartościowym i odpowiedni typ wartości nie przyjmujące wartości jest równa argument typu implementującego metodę.</span><span class="sxs-lookup"><span data-stu-id="8671b-2544">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-2545">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-2545">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-2546">Jeśli metoda implementującej jest `null`, typ węzła jest `expression`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-2546">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="8671b-2547">Jeśli `expression`. Typ wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2547">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-2548">W przeciwnym razie zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2548">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2549">
            <paramref name="expression" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2549">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2550">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie ma dokładnie jednego argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2550">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2551">
            <paramref name="method" /> jest <see langword="null" /> i jednoargumentowy minus operator nie jest zdefiniowany dla <paramref name="expression" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2551">
              <paramref name="method" /> is <see langword="null" /> and the unary minus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
          <span data-ttu-id="8671b-2552">- lub - <paramref name="expression" />. Typu (lub odpowiedni typ wartości null, jeśli jest to typ wartości null) nie jest możliwy do przypisania do typu argumentu metody reprezentowanej przez <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2552">-or-  <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NegateChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2553">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący operację arytmetyczny negacji, który ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2553">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression NegateChecked(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ NegateChecked(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member NegateChecked : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.NegateChecked expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-2554">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2554">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2555">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący operację arytmetyczny negacji, który ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2555">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2556">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2556">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2557"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Właściwość wynikowy <xref:System.Linq.Expressions.UnaryExpression> ustawiono implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2557">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="8671b-2558"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2558">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-2559">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2559">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-2560">Są one w przeciwnym razie wartość false.</span><span class="sxs-lookup"><span data-stu-id="8671b-2560">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-2561">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-2561">Implementing Method</span></span>  
 <span data-ttu-id="8671b-2562">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-2562">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-2563">Jeśli `expression`. Typem jest typ zdefiniowany przez użytkownika, który definiuje Jednoargumentowy operator odejmowania, <xref:System.Reflection.MethodInfo> , który reprezentuje operator jest implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2563">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2564">W przeciwnym razie, jeśli `expression`. Typ jest typu liczbowego, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2564">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-2565">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-2565">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-2566">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2566">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2567">Jeśli `expression`. Typ można przypisać do typu argumentu metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2567">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-2568">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2568">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2569">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-2569">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-2570">`expression`. Typ jest typem wartościowym i odpowiedni typ wartości nie przyjmujące wartości jest równa argument typu implementującego metodę.</span><span class="sxs-lookup"><span data-stu-id="8671b-2570">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-2571">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-2571">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-2572">Jeśli metoda implementującej jest `null`, typ węzła jest `expression`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-2572">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="8671b-2573">Jeśli `expression`. Typ wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2573">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-2574">W przeciwnym razie zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2574">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2575">
            <paramref name="expression" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2575">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2576">Jednoargumentowy minus operator nie jest zdefiniowany dla <paramref name="expression" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2576">The unary minus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression NegateChecked(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ NegateChecked(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member NegateChecked : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.NegateChecked (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-2577">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2577">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2578">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2578">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2579">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący operację arytmetyczny negacji, który ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2579">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span>
          </span>
          <span data-ttu-id="8671b-2580">Implementowanie metoda może być określona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2580">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2581">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2581">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2582"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Właściwość wynikowy <xref:System.Linq.Expressions.UnaryExpression> ustawiono implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2582">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="8671b-2583"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2583">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-2584">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2584">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-2585">Są one w przeciwnym razie wartość false.</span><span class="sxs-lookup"><span data-stu-id="8671b-2585">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-2586">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-2586">Implementing Method</span></span>  
 <span data-ttu-id="8671b-2587">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-2587">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-2588">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje jeden argument jest implementującej metody dla węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2588">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="8671b-2589">Jeśli `expression`. Typem jest typ zdefiniowany przez użytkownika, który definiuje Jednoargumentowy operator odejmowania, <xref:System.Reflection.MethodInfo> , który reprezentuje operator jest implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2589">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2590">W przeciwnym razie, jeśli `expression`. Typ jest typu liczbowego, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2590">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-2591">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-2591">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-2592">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2592">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2593">Jeśli `expression`. Typ można przypisać do typu argumentu metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2593">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-2594">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2594">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2595">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-2595">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-2596">`expression`. Typ jest typem wartościowym i odpowiedni typ wartości nie przyjmujące wartości jest równa argument typu implementującego metodę.</span><span class="sxs-lookup"><span data-stu-id="8671b-2596">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-2597">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-2597">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-2598">Jeśli metoda implementującej jest `null`, typ węzła jest `expression`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-2598">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="8671b-2599">Jeśli `expression`. Typ wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2599">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-2600">W przeciwnym razie zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2600">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2601">
            <paramref name="expression" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2601">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2602">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie ma dokładnie jednego argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2602">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2603">
            <paramref name="method" /> jest <see langword="null" /> i jednoargumentowy minus operator nie jest zdefiniowany dla <paramref name="expression" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2603">
              <paramref name="method" /> is <see langword="null" /> and the unary minus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
          <span data-ttu-id="8671b-2604">- lub - <paramref name="expression" />. Typu (lub odpowiedni typ wartości null, jeśli jest to typ wartości null) nie jest możliwy do przypisania do typu argumentu metody reprezentowanej przez <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2604">-or-  <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="New">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2605">Tworzy <see cref="T:System.Linq.Expressions.NewExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2605">Creates a <see cref="T:System.Linq.Expressions.NewExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New constructor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="8671b-2606">
            <see cref="T:System.Reflection.ConstructorInfo" /> Można ustawić <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2606">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2607">Tworzy <see cref="T:System.Linq.Expressions.NewExpression" /> reprezentujący wywołanie określonego konstruktora, który nie przyjmuje żadnych argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2607">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor that takes no arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2608">A <see cref="T:System.Linq.Expressions.NewExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.New" /> i <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2608">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2609"><xref:System.Linq.Expressions.NewExpression.Arguments%2A> i <xref:System.Linq.Expressions.NewExpression.Members%2A> właściwości wynikające <xref:System.Linq.Expressions.NewExpression> są puste kolekcje.</span><span class="sxs-lookup"><span data-stu-id="8671b-2609">The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections.</span></span> <span data-ttu-id="8671b-2610"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość reprezentuje typ deklarujący konstruktora, reprezentowane przez `constructor`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2610">The <xref:System.Linq.Expressions.Expression.Type%2A> property represents the declaring type of the constructor represented by `constructor`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2611">
            <paramref name="constructor" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2611">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2612">Konstruktor, <paramref name="constructor" /> reprezentuje ma co najmniej jeden parametr.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2612">The constructor that <paramref name="constructor" /> represents has at least one parameter.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member New : Type -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-2613">Element <see cref="T:System.Type" /> ma konstruktora, który nie przyjmuje żadnych argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2613">A <see cref="T:System.Type" /> that has a constructor that takes no arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2614">Tworzy <see cref="T:System.Linq.Expressions.NewExpression" /> reprezentujący wywołanie konstruktora bez parametrów dla określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2614">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the parameterless constructor of the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2615">A <see cref="T:System.Linq.Expressions.NewExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.New" /> i <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> właściwością <see cref="T:System.Reflection.ConstructorInfo" /> reprezentujący konstruktora bez parametrów dla określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2615">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the <see cref="T:System.Reflection.ConstructorInfo" /> that represents the constructor without parameters for the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2616">`type` Parametru musi reprezentować typ, który ma konstruktora bez parametrów.</span><span class="sxs-lookup"><span data-stu-id="8671b-2616">The `type` parameter must represent a type that has a constructor without parameters.</span></span>  
  
 <span data-ttu-id="8671b-2617"><xref:System.Linq.Expressions.NewExpression.Arguments%2A> i <xref:System.Linq.Expressions.NewExpression.Members%2A> właściwości wynikające <xref:System.Linq.Expressions.NewExpression> są puste kolekcje.</span><span class="sxs-lookup"><span data-stu-id="8671b-2617">The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections.</span></span> <span data-ttu-id="8671b-2618"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwości jest równa `type`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2618">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-2619">Poniższy przykład pokazuje sposób użycia <xref:System.Linq.Expressions.Expression.New%28System.Type%29> metodę w celu utworzenia <xref:System.Linq.Expressions.NewExpression> reprezentujący tworzenia nowego wystąpienia obiektu słownika przez wywołanie konstruktora bez parametrów.</span><span class="sxs-lookup"><span data-stu-id="8671b-2619">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.New%28System.Type%29> method to create a <xref:System.Linq.Expressions.NewExpression> that represents constructing a new instance of a dictionary object by calling the constructor without parameters.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#10)]
 [!code-vb[System.Linq.Expressions.Expression#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2620">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2620">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2621">Typ, <paramref name="type" /> reprezentuje nie ma konstruktora bez parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2621">The type that <paramref name="type" /> represents does not have a constructor without parameters.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression)) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="8671b-2622">
            <see cref="T:System.Reflection.ConstructorInfo" /> Można ustawić <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2622">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-2623">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.Expression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2623">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2624">Tworzy <see cref="T:System.Linq.Expressions.NewExpression" /> reprezentujący wywołanie konstruktora określonego z określonymi argumentami.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2624">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2625">A <see cref="T:System.Linq.Expressions.NewExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.New" /> i <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> i <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2625">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2626">`arguments` Parametr musi zawierać taką samą liczbę elementów jako liczba parametrów dla konstruktora, reprezentowane przez `constructor`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2626">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="8671b-2627">Jeśli `arguments` jest `null`, jest uznawane za pusta i <xref:System.Linq.Expressions.NewExpression.Arguments%2A> właściwość wynikowy <xref:System.Linq.Expressions.NewExpression> jest pustą kolekcją.</span><span class="sxs-lookup"><span data-stu-id="8671b-2627">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="8671b-2628"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.NewExpression> reprezentuje typ deklarujący konstruktora, reprezentowane przez `constructor`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2628">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="8671b-2629"><xref:System.Linq.Expressions.NewExpression.Members%2A> Właściwość jest pusta kolekcja.</span><span class="sxs-lookup"><span data-stu-id="8671b-2629">The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2630">
            <paramref name="constructor" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2630">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-2631">- lub - element <paramref name="arguments" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2631">-or-  An element of <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2632">
            <paramref name="arguments" /> Parametr nie zawiera taką samą liczbę elementów jako liczba parametrów dla konstruktora, <paramref name="constructor" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2632">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="8671b-2633">- lub - <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwość elementu <paramref name="arguments" /> nie można przypisać do typu odpowiedniego parametru konstruktora, <paramref name="constructor" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2633">-or-  The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, ParamArray arguments As Expression()) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="8671b-2634">
            <see cref="T:System.Reflection.ConstructorInfo" /> Można ustawić <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2634">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-2635">Tablica <see cref="T:System.Linq.Expressions.Expression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2635">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2636">Tworzy <see cref="T:System.Linq.Expressions.NewExpression" /> reprezentujący wywołanie konstruktora określonego z określonymi argumentami.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2636">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2637">A <see cref="T:System.Linq.Expressions.NewExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.New" /> i <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> i <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2637">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2638">`arguments` Parametr musi zawierać taką samą liczbę elementów jako liczba parametrów dla konstruktora, reprezentowane przez `constructor`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2638">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="8671b-2639">Jeśli `arguments` jest `null`, jest uznawane za pusta i <xref:System.Linq.Expressions.NewExpression.Arguments%2A> właściwość wynikowy <xref:System.Linq.Expressions.NewExpression> jest pustą kolekcją.</span><span class="sxs-lookup"><span data-stu-id="8671b-2639">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="8671b-2640"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.NewExpression> reprezentuje typ deklarujący konstruktora, reprezentowane przez `constructor`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2640">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="8671b-2641"><xref:System.Linq.Expressions.NewExpression.Members%2A> Właściwość jest pusta kolekcja.</span><span class="sxs-lookup"><span data-stu-id="8671b-2641">The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2642">
            <paramref name="constructor" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2642">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-2643">- lub - element <paramref name="arguments" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2643">-or-  An element of <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2644">Długość <paramref name="arguments" /> jest zgodna z liczbą parametrów dla konstruktora, <paramref name="constructor" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2644">The length of <paramref name="arguments" /> does match the number of parameters for the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="8671b-2645">- lub - <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwość elementu <paramref name="arguments" /> nie można przypisać do typu odpowiedniego parametru konstruktora, <paramref name="constructor" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2645">-or-  The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.MemberInfo&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression), members As IEnumerable(Of MemberInfo)) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments, System::Collections::Generic::IEnumerable&lt;System::Reflection::MemberInfo ^&gt; ^ members);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * seq&lt;System.Linq.Expressions.Expression&gt; * seq&lt;System.Reflection.MemberInfo&gt; -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="members" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="8671b-2646">
            <see cref="T:System.Reflection.ConstructorInfo" /> Można ustawić <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2646">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-2647">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.Expression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2647">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <param name="members">
          <span data-ttu-id="8671b-2648">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Reflection.MemberInfo" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.NewExpression.Members" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2648">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2649">Tworzy <see cref="T:System.Linq.Expressions.NewExpression" /> reprezentujący wywołanie konstruktora określonego z określonymi argumentami.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2649">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span>
          </span>
          <span data-ttu-id="8671b-2650">Elementy członkowskie, które uzyskują dostęp do pól Konstruktor inicjowane są określone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2650">The members that access the constructor initialized fields are specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2651">A <see cref="T:System.Linq.Expressions.NewExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.New" /> i <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> i <see cref="P:System.Linq.Expressions.NewExpression.Members" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2651">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2652">`arguments` Parametr musi zawierać taką samą liczbę elementów jako liczba parametrów dla konstruktora, reprezentowane przez `constructor`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2652">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="8671b-2653">Jeśli `arguments` jest `null`, jest uznawane za pusta i <xref:System.Linq.Expressions.NewExpression.Arguments%2A> właściwość wynikowy <xref:System.Linq.Expressions.NewExpression> jest pustą kolekcją.</span><span class="sxs-lookup"><span data-stu-id="8671b-2653">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="8671b-2654">Jeśli `members` jest `null`, <xref:System.Linq.Expressions.NewExpression.Members%2A> właściwość wynikowy <xref:System.Linq.Expressions.NewExpression> jest pustą kolekcją.</span><span class="sxs-lookup"><span data-stu-id="8671b-2654">If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span> <span data-ttu-id="8671b-2655">Jeśli `members` nie `null`, musi mieć taką samą liczbę elementów jako `arguments` i każdy element nie może być `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2655">If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`.</span></span> <span data-ttu-id="8671b-2656">Każdy element obiektu `members` musi być <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> lub <xref:System.Reflection.MethodInfo> reprezentujący elementu członkowskiego wystąpienia typu deklarującego konstruktora, reprezentowane przez `constructor`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2656">Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="8671b-2657">Jeśli termin reprezentuje właściwości, właściwość musi mieć `get` metody dostępu.</span><span class="sxs-lookup"><span data-stu-id="8671b-2657">If it represents a property, the property must have a `get` accessor.</span></span> <span data-ttu-id="8671b-2658">Odpowiedni element `arguments` dla każdego elementu `members` musi mieć <xref:System.Linq.Expressions.Expression.Type%2A> właściwość, która reprezentuje typ, który można przypisać do typu elementu członkowskiego, który `members` element reprezentuje.</span><span class="sxs-lookup"><span data-stu-id="8671b-2658">The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.</span></span>  
  
 <span data-ttu-id="8671b-2659"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.NewExpression> reprezentuje typ deklarujący konstruktora, `constructor` reprezentuje.</span><span class="sxs-lookup"><span data-stu-id="8671b-2659">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2660">
            <paramref name="constructor" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2660">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-2661">- lub - element <paramref name="arguments" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2661">-or-  An element of <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-2662">- lub - element <paramref name="members" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2662">-or-  An element of <paramref name="members" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2663">
            <paramref name="arguments" /> Parametr nie zawiera taką samą liczbę elementów jako liczba parametrów dla konstruktora, <paramref name="constructor" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2663">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="8671b-2664">- lub - <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwość elementu <paramref name="arguments" /> nie można przypisać do typu odpowiedniego parametru konstruktora, <paramref name="constructor" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2664">-or-  The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="8671b-2665">- lub - <paramref name="members" /> parametr nie ma taką samą liczbę elementów jako <paramref name="arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2665">-or-  The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.</span>
          </span>
          <span data-ttu-id="8671b-2666">- lub - element <paramref name="arguments" /> ma <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwości, który reprezentuje typ, który nie jest możliwy do przypisania do typu elementu członkowskiego, który jest reprezentowany przez odpowiedni element <paramref name="members" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2666">-or-  An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, params System.Reflection.MemberInfo[] members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Reflection.MemberInfo[] members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression), ParamArray members As MemberInfo()) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments, ... cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ members);" />
      <MemberSignature Language="F#" Value="static member New : System.Reflection.ConstructorInfo * seq&lt;System.Linq.Expressions.Expression&gt; * System.Reflection.MemberInfo[] -&gt; System.Linq.Expressions.NewExpression" Usage="System.Linq.Expressions.Expression.New (constructor, arguments, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="members" Type="System.Reflection.MemberInfo[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="8671b-2667">
            <see cref="T:System.Reflection.ConstructorInfo" /> Można ustawić <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2667">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-2668">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.Expression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2668">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <param name="members">
          <span data-ttu-id="8671b-2669">Tablica <see cref="T:System.Reflection.MemberInfo" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.NewExpression.Members" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2669">An array of <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2670">Tworzy <see cref="T:System.Linq.Expressions.NewExpression" /> reprezentujący wywołanie konstruktora określonego z określonymi argumentami.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2670">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span>
          </span>
          <span data-ttu-id="8671b-2671">Elementy członkowskie, które uzyskują dostęp do pól Konstruktor inicjowane są określane jako tablica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2671">The members that access the constructor initialized fields are specified as an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2672">A <see cref="T:System.Linq.Expressions.NewExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.New" /> i <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> i <see cref="P:System.Linq.Expressions.NewExpression.Members" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2672">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2673">`arguments` Parametr musi zawierać taką samą liczbę elementów jako liczba parametrów dla konstruktora, reprezentowane przez `constructor`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2673">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="8671b-2674">Jeśli `arguments` jest `null`, jest uznawane za pusta i <xref:System.Linq.Expressions.NewExpression.Arguments%2A> właściwość wynikowy <xref:System.Linq.Expressions.NewExpression> jest pustą kolekcją.</span><span class="sxs-lookup"><span data-stu-id="8671b-2674">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="8671b-2675">Jeśli `members` jest `null`, <xref:System.Linq.Expressions.NewExpression.Members%2A> właściwość wynikowy <xref:System.Linq.Expressions.NewExpression> jest pustą kolekcją.</span><span class="sxs-lookup"><span data-stu-id="8671b-2675">If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span> <span data-ttu-id="8671b-2676">Jeśli `members` nie `null`, musi mieć taką samą liczbę elementów jako `arguments` i każdy element nie może być `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2676">If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`.</span></span> <span data-ttu-id="8671b-2677">Każdy element obiektu `members` musi być <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> lub <xref:System.Reflection.MethodInfo> reprezentujący elementu członkowskiego wystąpienia typu deklarującego konstruktora, reprezentowane przez `constructor`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2677">Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="8671b-2678">Jeśli termin reprezentuje właściwości, właściwość musi być możliwe do pobrania wartości pól skojarzone.</span><span class="sxs-lookup"><span data-stu-id="8671b-2678">If it represents a property, the property must be able to retrieve the value of the associated field.</span></span> <span data-ttu-id="8671b-2679">Odpowiedni element `arguments` dla każdego elementu `members` musi mieć <xref:System.Linq.Expressions.Expression.Type%2A> właściwość, która reprezentuje typ, który można przypisać do typu elementu członkowskiego, który `members` element reprezentuje.</span><span class="sxs-lookup"><span data-stu-id="8671b-2679">The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.</span></span>  
  
 <span data-ttu-id="8671b-2680"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.NewExpression> reprezentuje typ deklarujący konstruktora, `constructor` reprezentuje.</span><span class="sxs-lookup"><span data-stu-id="8671b-2680">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2681">
            <paramref name="constructor" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2681">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-2682">- lub - element <paramref name="arguments" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2682">-or-  An element of <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-2683">- lub - element <paramref name="members" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2683">-or-  An element of <paramref name="members" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2684">
            <paramref name="arguments" /> Parametr nie zawiera taką samą liczbę elementów jako liczba parametrów dla konstruktora, <paramref name="constructor" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2684">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="8671b-2685">- lub - <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwość elementu <paramref name="arguments" /> nie można przypisać do typu odpowiedniego parametru konstruktora, <paramref name="constructor" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2685">-or-  The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="8671b-2686">- lub - <paramref name="members" /> parametr nie ma taką samą liczbę elementów jako <paramref name="arguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2686">-or-  The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.</span>
          </span>
          <span data-ttu-id="8671b-2687">- lub - element <paramref name="arguments" /> ma <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwości, który reprezentuje typ, który nie jest możliwy do przypisania do typu elementu członkowskiego, który jest reprezentowany przez odpowiedni element <paramref name="members" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2687">-or-  An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NewArrayBounds">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2688">Tworzy <see cref="T:System.Linq.Expressions.NewArrayExpression" /> reprezentujący tworzenie tablicy, który ma określony stopień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2688">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayBounds(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayBounds(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ bounds);" />
      <MemberSignature Language="F#" Value="static member NewArrayBounds : Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayBounds (type, bounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bounds" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-2689">A <see cref="T:System.Type" /> reprezentujący typ elementu tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2689">A <see cref="T:System.Type" /> that represents the element type of the array.</span>
          </span>
        </param>
        <param name="bounds">
          <span data-ttu-id="8671b-2690">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.Expression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2690">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2691">Tworzy <see cref="T:System.Linq.Expressions.NewArrayExpression" /> reprezentujący tworzenie tablicy, który ma określony stopień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2691">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2692">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> i <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2692">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2693"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.NewArrayExpression> reprezentuje typ tablicy, w której pozycję jest równa długości `bounds` i którego typ elementu jest `type`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2693">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.</span></span>  
  
 <span data-ttu-id="8671b-2694"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwości każdego elementu `bounds` musi reprezentować typ całkowitoliczbowy.</span><span class="sxs-lookup"><span data-stu-id="8671b-2694">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-2695">Poniższy przykład pokazuje sposób użycia <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> metodę, aby utworzyć drzewo wyrażenia, reprezentujący tworzenia tablicy ciągów, która ma pozycję 2.</span><span class="sxs-lookup"><span data-stu-id="8671b-2695">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]
 [!code-vb[System.Linq.Expressions.Expression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2696">
            <paramref name="type" /> lub <paramref name="bounds" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2696">
              <paramref name="type" /> or <paramref name="bounds" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-2697">- lub - element <paramref name="bounds" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2697">-or-  An element of <paramref name="bounds" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2698">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> Właściwość elementu <paramref name="bounds" /> nie reprezentuje typ całkowitoliczbowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2698">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, params System.Linq.Expressions.Expression[] bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayBounds(class System.Type type, class System.Linq.Expressions.Expression[] bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayBounds(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ bounds);" />
      <MemberSignature Language="F#" Value="static member NewArrayBounds : Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayBounds (type, bounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bounds" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-2699">A <see cref="T:System.Type" /> reprezentujący typ elementu tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2699">A <see cref="T:System.Type" /> that represents the element type of the array.</span>
          </span>
        </param>
        <param name="bounds">
          <span data-ttu-id="8671b-2700">Tablica <see cref="T:System.Linq.Expressions.Expression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2700">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2701">Tworzy <see cref="T:System.Linq.Expressions.NewArrayExpression" /> reprezentujący tworzenie tablicy, który ma określony stopień.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2701">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2702">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> i <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2702">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2703"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.NewArrayExpression> reprezentuje typ tablicy, w której pozycję jest równa długości `bounds` i którego typ elementu jest `type`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2703">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.</span></span>  
  
 <span data-ttu-id="8671b-2704"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwości każdego elementu `bounds` musi reprezentować typ całkowitoliczbowy.</span><span class="sxs-lookup"><span data-stu-id="8671b-2704">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-2705">Poniższy przykład pokazuje sposób użycia <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> metodę, aby utworzyć drzewo wyrażenia, reprezentujący tworzenia tablicy ciągów, która ma pozycję 2.</span><span class="sxs-lookup"><span data-stu-id="8671b-2705">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]
 [!code-vb[System.Linq.Expressions.Expression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2706">
            <paramref name="type" /> lub <paramref name="bounds" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2706">
              <paramref name="type" /> or <paramref name="bounds" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-2707">- lub - element <paramref name="bounds" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2707">-or-  An element of <paramref name="bounds" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2708">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> Właściwość elementu <paramref name="bounds" /> nie reprezentuje typ całkowitoliczbowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2708">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NewArrayInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2709">Tworzy <see cref="T:System.Linq.Expressions.NewArrayExpression" /> reprezentująca tablicę jednowymiarową tworzenia i inicjując go z listy elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2709">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayInit(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayInit(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member NewArrayInit : Type * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayInit (type, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-2710">A <see cref="T:System.Type" /> reprezentujący typ elementu tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2710">A <see cref="T:System.Type" /> that represents the element type of the array.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="8671b-2711">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <see cref="T:System.Linq.Expressions.Expression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2711">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2712">Tworzy <see cref="T:System.Linq.Expressions.NewArrayExpression" /> reprezentująca tablicę jednowymiarową tworzenia i inicjując go z listy elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2712">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2713">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> i <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2713">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2714"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwości każdego elementu `initializers` musi reprezentować typ, który można przypisać do typu reprezentowanego przez `type`, prawdopodobnie po jego *cytowane*.</span><span class="sxs-lookup"><span data-stu-id="8671b-2714">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8671b-2715">Element będzie można podać tylko wtedy, gdy `type` jest <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="8671b-2715">An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="8671b-2716">Cytowanie oznacza, że element jest opakowana w <xref:System.Linq.Expressions.ExpressionType.Quote> węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2716">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="8671b-2717">Węzeł wynikowy jest <xref:System.Linq.Expressions.UnaryExpression> którego <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> właściwości jest elementem `initializers`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2717">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.</span></span>  
  
 <span data-ttu-id="8671b-2718"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.NewArrayExpression> reprezentuje typ tablicy której pozycję to 1 i którego typ elementu jest `type`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2718">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-2719">Poniższy przykład pokazuje sposób użycia <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> metodę, aby utworzyć drzewo wyrażenia, reprezentujący tworzenia tablicy jednowymiarowej ciąg, który jest inicjowany za pomocą listy wyrażenia ciągu.</span><span class="sxs-lookup"><span data-stu-id="8671b-2719">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]
 [!code-vb[System.Linq.Expressions.Expression#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2720">
            <paramref name="type" /> lub <paramref name="initializers" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2720">
              <paramref name="type" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-2721">- lub - element <paramref name="initializers" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2721">-or-  An element of <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2722">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> Właściwość elementu <paramref name="initializers" /> reprezentuje typ, który nie jest możliwy do przypisania do typu, <paramref name="type" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2722">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type that <paramref name="type" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayInit(class System.Type type, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayInit(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberSignature Language="F#" Value="static member NewArrayInit : Type * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.NewArrayExpression" Usage="System.Linq.Expressions.Expression.NewArrayInit (type, initializers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-2723">A <see cref="T:System.Type" /> reprezentujący typ elementu tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2723">A <see cref="T:System.Type" /> that represents the element type of the array.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="8671b-2724">Tablica <see cref="T:System.Linq.Expressions.Expression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2724">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2725">Tworzy <see cref="T:System.Linq.Expressions.NewArrayExpression" /> reprezentująca tablicę jednowymiarową tworzenia i inicjując go z listy elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2725">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2726">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> i <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2726">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2727"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwości każdego elementu `initializers` musi reprezentować typ, który można przypisać do typu reprezentowanego przez `type`, prawdopodobnie po jego *cytowane*.</span><span class="sxs-lookup"><span data-stu-id="8671b-2727">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8671b-2728">Element będzie można podać tylko wtedy, gdy `type` jest <xref:System.Linq.Expressions.Expression>.</span><span class="sxs-lookup"><span data-stu-id="8671b-2728">An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="8671b-2729">Cytowanie oznacza, że element jest opakowana w <xref:System.Linq.Expressions.ExpressionType.Quote> węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2729">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="8671b-2730">Węzeł wynikowy jest <xref:System.Linq.Expressions.UnaryExpression> którego <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> właściwości jest elementem `initializers`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2730">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.</span></span>  
  
 <span data-ttu-id="8671b-2731"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.NewArrayExpression> reprezentuje typ tablicy której pozycję to 1 i którego typ elementu jest `type`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2731">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-2732">Poniższy przykład pokazuje sposób użycia <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> metodę, aby utworzyć drzewo wyrażenia, reprezentujący tworzenia tablicy jednowymiarowej ciąg, który jest inicjowany za pomocą listy wyrażenia ciągu.</span><span class="sxs-lookup"><span data-stu-id="8671b-2732">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]
 [!code-vb[System.Linq.Expressions.Expression#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2733">
            <paramref name="type" /> lub <paramref name="initializers" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2733">
              <paramref name="type" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-2734">- lub - element <paramref name="initializers" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2734">-or-  An element of <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2735">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> Właściwość elementu <paramref name="initializers" /> reprezentuje typ, który nie jest możliwy do przypisania do typu <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2735">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type <paramref name="type" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Linq::Expressions::ExpressionType NodeType { System::Linq::Expressions::ExpressionType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Linq.Expressions.ExpressionType" Usage="System.Linq.Expressions.Expression.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2736">Pobiera typ węzła <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2736">Gets the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8671b-2737">Jedną z <see cref="T:System.Linq.Expressions.ExpressionType" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2737">One of the <see cref="T:System.Linq.Expressions.ExpressionType" /> values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2738"><xref:System.Linq.Expressions.Expression.NodeType%2A> Właściwość zapewnia bardziej wyspecjalizowane opis <xref:System.Linq.Expressions.Expression> niż po prostu jego typu pochodnego.</span><span class="sxs-lookup"><span data-stu-id="8671b-2738">The <xref:System.Linq.Expressions.Expression.NodeType%2A> property provides a more specialized description of an <xref:System.Linq.Expressions.Expression> than just its derived type.</span></span> <span data-ttu-id="8671b-2739">Na przykład <xref:System.Linq.Expressions.BinaryExpression> może służyć do reprezentowania różnego rodzaju wyrażenia binarne, takie jak operacji dzielenia lub operacją "większe niż".</span><span class="sxs-lookup"><span data-stu-id="8671b-2739">For example, a <xref:System.Linq.Expressions.BinaryExpression> can be used to represent many different kinds of binary expressions, such as a division operation or a "greater than" operation.</span></span> <span data-ttu-id="8671b-2740"><xref:System.Linq.Expressions.Expression.NodeType%2A> Właściwość co opisywałoby, te wyrażenia binarne jako <xref:System.Linq.Expressions.ExpressionType.Divide> i <xref:System.Linq.Expressions.ExpressionType.GreaterThan>, odpowiednio.</span><span class="sxs-lookup"><span data-stu-id="8671b-2740">The <xref:System.Linq.Expressions.Expression.NodeType%2A> property would describe these binary expressions as <xref:System.Linq.Expressions.ExpressionType.Divide> and <xref:System.Linq.Expressions.ExpressionType.GreaterThan>, respectively.</span></span>  
  
 <span data-ttu-id="8671b-2741">CLR typu statycznego wyrażenia, <xref:System.Linq.Expressions.Expression> reprezentuje obiekt jest reprezentowany przez <xref:System.Linq.Expressions.Expression.Type%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="8671b-2741">The static CLR type of the expression that the <xref:System.Linq.Expressions.Expression> object represents is represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Not">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2742">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący operację dopełnienia bitowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2742">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Not(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Not(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Not : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Not expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-2743">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2743">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2744">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący operację dopełnienia bitowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2744">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2745">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2745">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2746"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Właściwość wynikowy <xref:System.Linq.Expressions.UnaryExpression> ustawiono implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2746">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="8671b-2747"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2747">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-2748">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2748">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-2749">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2749">Otherwise, they are `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-2750">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-2750">Implementing Method</span></span>  
 <span data-ttu-id="8671b-2751">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-2751">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-2752">Jeśli `expression`. Typem jest typ zdefiniowany przez użytkownika, który definiuje jednoargumentowy not operator <xref:System.Reflection.MethodInfo> , który reprezentuje operator jest implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2752">If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2753">W przeciwnym razie, jeśli `expression`. Typ jest typem liczbowa lub Boolean, metoda implementującej `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2753">Otherwise, if `expression`.Type is a numeric or Boolean type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-2754">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-2754">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-2755">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2755">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2756">Jeśli `expression`. Typ można przypisać do typu argumentu metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2756">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-2757">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2757">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2758">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-2758">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-2759">`expression`. Typ jest typem wartościowym i odpowiedni typ niedopuszczający jest równy argument typu implementującego metodę.</span><span class="sxs-lookup"><span data-stu-id="8671b-2759">`expression`.Type is a nullable value type and the corresponding non-nullable type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-2760">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-2760">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-2761">Jeśli metoda implementującej jest `null`, typ węzła jest `expression`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-2761">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="8671b-2762">Jeśli `expression`. Typ wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2762">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-2763">W przeciwnym razie zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2763">Otherwise, the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-2764">Poniższy przykład przedstawia sposób tworzenia wyrażenia, który reprezentuje wartość logiczna nie operacji.</span><span class="sxs-lookup"><span data-stu-id="8671b-2764">The following example demonstrates how to create an expression that represents a logical NOT operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#51](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#51)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#51](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2765">
            <paramref name="expression" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2765">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2766">Jednoargumentowy not operator nie jest zdefiniowany dla <paramref name="expression" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2766">The unary not operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Not(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Not(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Not : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Not (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-2767">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2767">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2768">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2768">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2769">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący operację dopełnienia bitowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2769">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span>
          </span>
          <span data-ttu-id="8671b-2770">Implementowanie metoda może być określona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2770">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2771">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2771">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2772"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Właściwość wynikowy <xref:System.Linq.Expressions.UnaryExpression> ustawiono implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2772">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="8671b-2773"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2773">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-2774">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2774">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-2775">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2775">Otherwise, they are `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-2776">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-2776">Implementing Method</span></span>  
 <span data-ttu-id="8671b-2777">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-2777">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-2778">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje jeden argument jest implementującej metody dla węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2778">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="8671b-2779">Jeśli `expression`. Typem jest typ zdefiniowany przez użytkownika, który definiuje jednoargumentowy not operator <xref:System.Reflection.MethodInfo> , który reprezentuje operator jest implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2779">If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2780">W przeciwnym razie, jeśli `expression`. Typ jest typu liczbowego, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2780">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-2781">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-2781">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-2782">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2782">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2783">Jeśli `expression`. Typ można przypisać do typu argumentu metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2783">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-2784">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2784">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2785">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-2785">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-2786">`expression`. Typ jest typem wartościowym i odpowiedni typ wartości nie przyjmujące wartości jest równa argument typu implementującego metodę.</span><span class="sxs-lookup"><span data-stu-id="8671b-2786">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-2787">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-2787">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-2788">Jeśli metoda implementującej jest `null`, typ węzła jest `expression`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-2788">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="8671b-2789">Jeśli `expression`. Typ wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2789">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-2790">W przeciwnym razie zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2790">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2791">
            <paramref name="expression" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2791">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2792">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie ma dokładnie jednego argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2792">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2793">
            <paramref name="method" /> jest <see langword="null" /> i jednoargumentowy not operator nie jest zdefiniowany dla <paramref name="expression" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2793">
              <paramref name="method" /> is <see langword="null" /> and the unary not operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
          <span data-ttu-id="8671b-2794">- lub - <paramref name="expression" />. Typu (lub odpowiedni typ wartości null, jeśli jest to typ wartości null) nie jest możliwy do przypisania do typu argumentu metody reprezentowanej przez <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2794">-or-  <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NotEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2795">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący porównania nierówności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2795">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression NotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ NotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member NotEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.NotEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2796">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2796">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2797">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2797">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2798">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący porównania nierówności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2798">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2799">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2799">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2800">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2800">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-2801"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2801">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-2802">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> właściwość `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2802">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="8671b-2803">W przeciwnym razie jest `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2803">Otherwise, it is `false`.</span></span> <span data-ttu-id="8671b-2804"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> Właściwość jest zawsze `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2804">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="8671b-2805"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2805">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-2806">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2806">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-2807">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-2807">Implementing Method</span></span>  
 <span data-ttu-id="8671b-2808">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-2808">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-2809">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator nierówności <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-2809">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2810">W przeciwnym razie jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2810">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-2811">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-2811">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-2812">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2812">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2813">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2813">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-2814">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2814">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2815">Jeśli są spełnione następujące dwa warunki, węzeł zostało zniesione i typ węzła jest <xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="8671b-2815">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="8671b-2816">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2816">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-2817">Zwracany typ metody wykonawcze jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-2817">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="8671b-2818">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2818">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2819">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2819">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-2820">Typ węzła jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-2820">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="8671b-2821">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2821">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-2822">Typ węzła jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-2822">The type of the node is <xref:System.Boolean>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2823">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2823">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2824">Nie zdefiniowano operator nierówności dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2824">The inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression NotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ NotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member NotEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * bool * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.NotEqual (left, right, liftToNull, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2825">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2825">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2826">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2826">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="8671b-2827">
            <see langword="true" /> Aby ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> do <see langword="true" />; <see langword="false" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> do <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2827">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2828">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2828">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2829">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący porównania nierówności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2829">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2830">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2830">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2831">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2831">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-2832"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2832">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-2833">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> właściwość `true` i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości jest równa `liftToNull`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2833">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="8671b-2834">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2834">Otherwise, they are both `false`.</span></span> <span data-ttu-id="8671b-2835"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2835">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-2836">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2836">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-2837">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-2837">Implementing Method</span></span>  
 <span data-ttu-id="8671b-2838">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-2838">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-2839">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest metoda implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-2839">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2840">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator nierówności <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-2840">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2841">W przeciwnym razie jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2841">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-2842">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-2842">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-2843">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2843">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2844">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2844">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-2845">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2845">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2846">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione; Ponadto typ węzła ma wartość null <xref:System.Boolean> Jeśli `liftToNull` jest `true` lub <xref:System.Boolean> Jeśli `liftToNull` jest `false`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2846">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="8671b-2847">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2847">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-2848">Zwracany typ metody wykonawcze jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-2848">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="8671b-2849">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2849">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2850">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2850">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-2851">Typ węzła jest <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-2851">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="8671b-2852">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2852">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-2853">Typ węzła ma wartość null <xref:System.Boolean> Jeśli `liftToNull` jest `true` lub <xref:System.Boolean> Jeśli `liftToNull` jest `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2853">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2854">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2854">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2855">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2855">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2856">
            <paramref name="method" /> jest <see langword="null" /> i nie zdefiniowano operator nierówności dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2856">
              <paramref name="method" /> is <see langword="null" /> and the inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OnesComplement">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2857">Zwraca wyrażenie odpowiadające te dopełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2857">Returns the expression representing the ones complement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression OnesComplement(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ OnesComplement(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member OnesComplement : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.OnesComplement expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-2858">
            <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2858">An <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2859">Zwraca wyrażenie odpowiadające te dopełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2859">Returns the expression representing the ones complement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2860">Wystąpienie <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2860">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression OnesComplement(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ OnesComplement(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member OnesComplement : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.OnesComplement (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-2861">
            <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2861">An <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2862">A <see cref="T:System.Reflection.MethodInfo" /> reprezentujący implementującej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2862">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2863">Zwraca wyrażenie odpowiadające te dopełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2863">Returns the expression representing the ones complement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2864">Wystąpienie <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2864">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Or">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2865">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący bitowej <see langword="OR" /> operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2865">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Or(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Or (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Or(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Or : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Or (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2866">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2866">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2867">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2867">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2868">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący bitowej <see langword="OR" /> operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2868">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2869">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2869">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2870">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2870">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-2871"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2871">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-2872">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2872">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-2873">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2873">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-2874"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2874">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-2875">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2875">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-2876">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-2876">Implementing Method</span></span>  
 <span data-ttu-id="8671b-2877">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-2877">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-2878">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora testu koniunkcji `OR` operatora <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-2878">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2879">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ typów całkowitych lub wartości logicznej, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2879">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-2880">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-2880">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-2881">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2881">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2882">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2882">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-2883">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2883">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2884">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-2884">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-2885">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2885">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-2886">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-2886">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-2887">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2887">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2888">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2888">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-2889">Typ węzła jest typ wyniku jest wstępnie zdefiniowane bitowe `OR` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-2889">The type of the node is the result type of the predefined bitwise `OR` operator.</span></span>  
  
-   <span data-ttu-id="8671b-2890">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2890">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-2891">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku jest wstępnie zdefiniowane bitowe `OR` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-2891">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-2892">W poniższym przykładzie kodu pokazano, jak utworzyć wyrażenie, które reprezentuje operację logiczne OR.</span><span class="sxs-lookup"><span data-stu-id="8671b-2892">The following code example shows how to create an expression that represents a logical OR operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#28)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2893">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2893">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2894">Operatora testu koniunkcji <see langword="OR" /> operator nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2894">The bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Or(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Or (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Or(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Or : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Or (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2895">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2895">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2896">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2896">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2897">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2897">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2898">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący bitowej <see langword="OR" /> operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2898">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2899">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2899">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2900">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2900">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-2901"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2901">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-2902">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2902">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-2903">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2903">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-2904"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2904">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-2905">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2905">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-2906">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-2906">Implementing Method</span></span>  
 <span data-ttu-id="8671b-2907">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-2907">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-2908">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest metoda implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-2908">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2909">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora testu koniunkcji `OR` operatora <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-2909">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2910">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ typów całkowitych lub wartości logicznej, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2910">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-2911">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-2911">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-2912">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2912">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2913">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2913">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-2914">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2914">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2915">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-2915">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-2916">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2916">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-2917">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-2917">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-2918">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2918">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2919">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2919">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-2920">Typ węzła jest typ wyniku jest wstępnie zdefiniowane bitowe `OR` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-2920">The type of the node is the result type of the predefined bitwise `OR` operator.</span></span>  
  
-   <span data-ttu-id="8671b-2921">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2921">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-2922">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku jest wstępnie zdefiniowane bitowe `OR` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-2922">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2923">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2923">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-2924">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2924">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2925">
            <paramref name="method" /> jest <see langword="null" /> i operatora testu koniunkcji <see langword="OR" /> operator nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2925">
              <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2926">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący bitowe operacji przypisania OR.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2926">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member OrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2927">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2927">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2928">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2928">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2929">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący bitowe operacji przypisania OR.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2929">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2930">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2930">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member OrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2931">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2931">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2932">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2932">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2933">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2933">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2934">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący bitowe operacji przypisania OR.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2934">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2935">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2935">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member OrAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2936">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2936">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2937">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2937">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2938">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2938">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="8671b-2939">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2939">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2940">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący bitowe operacji przypisania OR.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2940">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2941">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2941">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrElse">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-2942">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący warunkowe <see langword="OR" /> operacji, która ocenia drugi argument operacji tylko wtedy, gdy pierwszy operator daje w wyniku <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2942">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operator evaluates to <see langword="false" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrElse(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrElse (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrElse(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member OrElse : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrElse (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2943">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2943">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2944">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2944">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2945">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący warunkowe <see langword="OR" /> operacji, która ocenia drugi argument operacji tylko wtedy, gdy pierwszy operand ma wartość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2945">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="false" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2946">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2946">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2947">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2947">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-2948"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2948">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-2949">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2949">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-2950">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2950">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-2951"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2951">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-2952">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2952">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-2953">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-2953">Implementing Method</span></span>  
 <span data-ttu-id="8671b-2954">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-2954">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-2955">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora testu koniunkcji `OR` operatora <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-2955">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8671b-2956">Warunkowe `OR` nie może zostać Przeciążony operator w języku C# lub Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8671b-2956">The conditional `OR` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="8671b-2957">Jednak warunkową `OR` operator jest obliczane przy użyciu operatora testu koniunkcji `OR` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-2957">However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator.</span></span> <span data-ttu-id="8671b-2958">W związku z tym, zdefiniowane przez użytkownika przeciążenia operatora testu koniunkcji `OR` operator może być implementującej metody dla tego typu węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2958">Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="8671b-2959">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ typów logicznych, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2959">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-2960">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-2960">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-2961">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2961">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2962">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2962">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-2963">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2963">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-2964">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-2964">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-2965">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2965">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-2966">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-2966">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-2967">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2967">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2968">`left`. Typ i `right`. Typ są tego samego typu Boolean.</span><span class="sxs-lookup"><span data-stu-id="8671b-2968">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="8671b-2969">Jeśli `left`. Typ i `right`. Typ nie dopuszczają, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2969">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-2970">Typ węzła jest typ wyniku wstępnie zdefiniowanych warunkowe `OR` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-2970">The type of the node is the result type of the predefined conditional `OR` operator.</span></span>  
  
-   <span data-ttu-id="8671b-2971">Jeśli `left`. Typ i `right`. Typ dopuszczający wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2971">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-2972">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku wstępnie zdefiniowanych warunkowe `OR` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-2972">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-2973">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie, który reprezentuje wartość logiczna `OR` operacji, która ocenia drugi argument operacji tylko wtedy, gdy pierwszy operand ma wartość `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2973">The following code example shows how to create an expression that represents a logical `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#29)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-2974">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2974">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-2975">Operatora testu koniunkcji <see langword="OR" /> operator nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2975">The bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="8671b-2976">- lub - <paramref name="left" />. Typ i <paramref name="right" />. Typ nie są tego samego typu Boolean.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2976">-or-  <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrElse(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrElse (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrElse(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member OrElse : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.OrElse (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-2977">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2977">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-2978">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2978">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-2979">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2979">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-2980">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący warunkowe <see langword="OR" /> operacji, która ocenia drugi argument operacji tylko wtedy, gdy pierwszy operand ma wartość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2980">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="false" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-2981">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-2981">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-2982">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-2982">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-2983"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2983">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-2984">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2984">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-2985">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2985">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-2986"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2986">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-2987">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2987">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-2988">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-2988">Implementing Method</span></span>  
 <span data-ttu-id="8671b-2989">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-2989">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-2990">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest implementującej metody dla węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2990">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="8671b-2991">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora testu koniunkcji `OR` operatora <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-2991">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8671b-2992">Warunkowe `OR` nie może zostać Przeciążony operator w języku C# lub Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8671b-2992">The conditional `OR` operator cannot be overloaded in C# or Visual Basic.</span></span> <span data-ttu-id="8671b-2993">Jednak warunkową `OR` operator jest obliczane przy użyciu operatora testu koniunkcji `OR` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-2993">However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator.</span></span> <span data-ttu-id="8671b-2994">W związku z tym, zdefiniowane przez użytkownika przeciążenia operatora testu koniunkcji `OR` operator może być implementującej metody dla tego typu węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-2994">Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="8671b-2995">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ typów logicznych, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-2995">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-2996">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-2996">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-2997">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-2997">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-2998">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-2998">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-2999">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-2999">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3000">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-3000">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-3001">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3001">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-3002">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-3002">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-3003">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-3003">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-3004">`left`. Typ i `right`. Typ są tego samego typu Boolean.</span><span class="sxs-lookup"><span data-stu-id="8671b-3004">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="8671b-3005">Jeśli `left`. Typ i `right`. Typ nie dopuszczają, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3005">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-3006">Typ węzła jest typ wyniku wstępnie zdefiniowanych warunkowe `OR` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-3006">The type of the node is the result type of the predefined conditional `OR` operator.</span></span>  
  
-   <span data-ttu-id="8671b-3007">Jeśli `left`. Typ i `right`. Typ dopuszczający wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3007">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-3008">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku wstępnie zdefiniowanych warunkowe `OR` operatora.</span><span class="sxs-lookup"><span data-stu-id="8671b-3008">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3009">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3009">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-3010">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3010">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-3011">
            <paramref name="method" /> jest <see langword="null" /> i operatora testu koniunkcji <see langword="OR" /> operator nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3011">
              <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="8671b-3012">- lub - <paramref name="method" /> jest <see langword="null" /> i <paramref name="left" />. Typ i <paramref name="right" />. Typ nie są tego samego typu Boolean.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3012">-or-  <paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parameter">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3013">Tworzy <see cref="T:System.Linq.Expressions.ParameterExpression" /> węzeł, który może służyć do identyfikowania parametr lub zmienna w drzewo wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3013">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Parameter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Parameter(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Parameter(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Parameter(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Parameter : Type -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Parameter type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-3014">Typ parametr lub zmienna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3014">The type of the parameter or variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3015">Tworzy <see cref="T:System.Linq.Expressions.ParameterExpression" /> węzeł, który może służyć do identyfikowania parametr lub zmienna w drzewo wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3015">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3016">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> węzeł o określonej nazwie i typie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3016">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8671b-3017">Poniższy przykład przedstawia sposób tworzenia <xref:System.Linq.Expressions.MethodCallExpression> obiekt, który drukuje wartość <xref:System.Linq.Expressions.ParameterExpression> obiektu.</span><span class="sxs-lookup"><span data-stu-id="8671b-3017">The following example demonstrates how to create a <xref:System.Linq.Expressions.MethodCallExpression> object that prints the value of a <xref:System.Linq.Expressions.ParameterExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#49](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#49)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#49](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#49)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Parameter (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Parameter(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Parameter(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Parameter : Type * string -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Parameter (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-3018">Typ parametr lub zmienna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3018">The type of the parameter or variable.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="8671b-3019">Nazwa parametr lub zmienna, używana do debugowania lub drukowanie tylko do celów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3019">The name of the parameter or variable, used for debugging or printing purpose only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3020">Tworzy <see cref="T:System.Linq.Expressions.ParameterExpression" /> węzeł, który może służyć do identyfikowania parametr lub zmienna w drzewo wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3020">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3021">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> i <see cref="P:System.Linq.Expressions.Expression.Type" /> i <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3021">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> and <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3022">
            <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3022">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostDecrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3023">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący przypisanie wyrażenia, a następnie przez kolejne dekrementacji 1 oryginalne wyrażenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3023">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostDecrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostDecrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PostDecrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostDecrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3024">
            <see cref="T:System.Linq.Expressions.Expression" /> Można zastosować operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3024">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3025">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący przypisanie wyrażenia, a następnie przez kolejne dekrementacji 1 oryginalne wyrażenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3025">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3026">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący wyrażenie wynikowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3026">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostDecrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostDecrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PostDecrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostDecrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3027">
            <see cref="T:System.Linq.Expressions.Expression" /> Można zastosować operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3027">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-3028">A <see cref="T:System.Reflection.MethodInfo" /> reprezentujący implementującej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3028">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3029">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący przypisanie wyrażenia, a następnie przez kolejne dekrementacji 1 oryginalne wyrażenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3029">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3030">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący wyrażenie wynikowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3030">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostIncrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3031">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący przypisanie wyrażenia, a następnie przez kolejne przyrostu 1 oryginalne wyrażenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3031">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostIncrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostIncrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PostIncrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostIncrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3032">
            <see cref="T:System.Linq.Expressions.Expression" /> Można zastosować operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3032">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3033">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący przypisanie wyrażenia, a następnie przez kolejne przyrostu 1 oryginalne wyrażenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3033">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3034">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący wyrażenie wynikowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3034">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostIncrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostIncrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PostIncrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PostIncrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3035">
            <see cref="T:System.Linq.Expressions.Expression" /> Można zastosować operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3035">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-3036">A <see cref="T:System.Reflection.MethodInfo" /> reprezentujący implementującej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3036">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3037">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący przypisanie wyrażenia, a następnie przez kolejne przyrostu 1 oryginalne wyrażenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3037">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3038">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący wyrażenie wynikowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3038">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Power">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3039">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący zwiększenie liczby do potęgi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3039">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Power(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Power (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Power(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Power : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Power (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3040">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3040">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3041">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3041">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3042">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący zwiększenie liczby do potęgi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3042">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3043">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3043">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3044">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-3044">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-3045"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3045">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-3046">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3046">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-3047">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3047">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-3048"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3048">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-3049">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3049">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-3050">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-3050">Implementing Method</span></span>  
 <span data-ttu-id="8671b-3051">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-3051">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-3052">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora potęgowania <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-3052">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3053">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ są <xref:System.Double>, implementacja metody jest <xref:System.Math.Pow%2A>.</span><span class="sxs-lookup"><span data-stu-id="8671b-3053">Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-3054">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-3054">Node Type and Lifted versus Non-Lifted</span></span>  
  
-   <span data-ttu-id="8671b-3055">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3055">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-3056">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3056">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3057">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-3057">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-3058">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3058">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-3059">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-3059">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3060">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3060">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-3061">Nie zdefiniowano operator potęgowania dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3061">The exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="8671b-3062">- lub - <paramref name="left" />. Typ i/lub <paramref name="right" />. Nie są typu <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3062">-or-  <paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Power(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Power (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Power(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Power : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Power (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3063">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3063">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3064">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3064">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-3065">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3065">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3066">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący zwiększenie liczby do potęgi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3066">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3067">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3067">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3068">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-3068">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-3069"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3069">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-3070">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3070">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-3071">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3071">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-3072"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3072">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-3073">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3073">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-3074">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-3074">Implementing Method</span></span>  
 <span data-ttu-id="8671b-3075">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-3075">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-3076">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest metoda implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-3076">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3077">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora potęgowania <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-3077">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3078">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ są <xref:System.Double>, implementacja metody jest <xref:System.Math.Pow%2A>.</span><span class="sxs-lookup"><span data-stu-id="8671b-3078">Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-3079">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-3079">Node Type and Lifted versus Non-Lifted</span></span>  
  
-   <span data-ttu-id="8671b-3080">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3080">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-3081">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3081">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3082">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-3082">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-3083">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3083">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-3084">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-3084">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3085">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3085">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-3086">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3086">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-3087">
            <paramref name="method" /> jest <see langword="null" /> i operatora potęgowania nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3087">
              <paramref name="method" /> is <see langword="null" /> and the exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="8671b-3088">- lub - <paramref name="method" /> jest <see langword="null" /> i <paramref name="left" />. Typ i/lub <paramref name="right" />. Nie są typu <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3088">-or-  <paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PowerAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3089">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący podnoszenia wyrażenia do potęgi i przypisywanie wynik wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3089">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member PowerAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.PowerAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3090">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3090">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3091">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3091">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3092">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący podnoszenia wyrażenia do potęgi i przypisywanie wynik wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3092">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3093">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3093">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PowerAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.PowerAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3094">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3094">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3095">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3095">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-3096">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3096">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3097">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący podnoszenia wyrażenia do potęgi i przypisywanie wynik wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3097">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3098">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3098">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member PowerAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.PowerAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3099">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3099">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3100">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3100">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-3101">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3101">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="8671b-3102">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3102">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3103">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący podnoszenia wyrażenia do potęgi i przypisywanie wynik wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3103">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3104">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3104">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PreDecrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3105">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> zmniejsza tego wyrażenia przez 1 i przypisuje wynik z powrotem do wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3105">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreDecrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreDecrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PreDecrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreDecrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3106">
            <see cref="T:System.Linq.Expressions.Expression" /> Można zastosować operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3106">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3107">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> zmniejsza tego wyrażenia przez 1 i przypisuje wynik z powrotem do wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3107">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3108">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący wyrażenie wynikowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3108">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreDecrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreDecrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PreDecrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreDecrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3109">
            <see cref="T:System.Linq.Expressions.Expression" /> Można zastosować operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3109">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-3110">A <see cref="T:System.Reflection.MethodInfo" /> reprezentujący implementującej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3110">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3111">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> zmniejsza tego wyrażenia przez 1 i przypisuje wynik z powrotem do wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3111">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3112">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący wyrażenie wynikowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3112">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PreIncrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3113">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> , zwiększa się o 1 wyrażenia i przypisuje wynik wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3113">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreIncrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreIncrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member PreIncrementAssign : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreIncrementAssign expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3114">
            <see cref="T:System.Linq.Expressions.Expression" /> Można zastosować operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3114">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3115">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> , zwiększa się o 1 wyrażenia i przypisuje wynik wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3115">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3116">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący wyrażenie wynikowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3116">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreIncrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreIncrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member PreIncrementAssign : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.PreIncrementAssign (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3117">
            <see cref="T:System.Linq.Expressions.Expression" /> Można zastosować operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3117">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-3118">A <see cref="T:System.Reflection.MethodInfo" /> reprezentujący implementującej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3118">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3119">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> , zwiększa się o 1 wyrażenia i przypisuje wynik wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3119">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3120">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący wyrażenie wynikowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3120">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Property">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3121">Tworzy <see cref="T:System.Linq.Expressions.MemberExpression" /> reprezentująca dostęp do właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3121">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo propertyAccessor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo propertyAccessor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ propertyAccessor);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, propertyAccessor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3122">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3122">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span>
          </span>
          <span data-ttu-id="8671b-3123">Może to być wartość null dla właściwości statyczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3123">This can be null for static properties.</span>
          </span>
        </param>
        <param name="propertyAccessor">
          <span data-ttu-id="8671b-3124">
            <see cref="T:System.Reflection.MethodInfo" /> Reprezentujący metody dostępu właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3124">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3125">Tworzy <see cref="T:System.Linq.Expressions.MemberExpression" /> reprezentująca dostęp do właściwości przy użyciu metody dostępu właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3125">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property by using a property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3126">A <see cref="T:System.Linq.Expressions.MemberExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> właściwością <paramref name="expression" /> i <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> właściwością <see cref="T:System.Reflection.PropertyInfo" /> reprezentująca właściwości używane w <paramref name="propertyAccessor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3126">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3127"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.MemberExpression> jest równa <xref:System.Reflection.PropertyInfo.PropertyType%2A> właściwość <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span><span class="sxs-lookup"><span data-stu-id="8671b-3127">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span></span>  
  
 <span data-ttu-id="8671b-3128">Jeśli metoda reprezentowane przez `propertyAccessor` jest `static` (`Shared` w języku Visual Basic), `expression` może być `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3128">If the method represented by `propertyAccessor` is `static` (`Shared` in Visual Basic), `expression` can be `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3129">
            <paramref name="propertyAccessor" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3129">
              <paramref name="propertyAccessor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-3130">- lub - metoda który <paramref name="propertyAccessor" /> reprezentuje nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic) i <paramref name="expression" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3130">-or-  The method that <paramref name="propertyAccessor" /> represents is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-3131">
            <paramref name="expression" />. Typ nie jest możliwy do przypisania do metody reprezentowanej przez typ deklarujący <paramref name="propertyAccessor" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3131">
              <paramref name="expression" />.Type is not assignable to the declaring type of the method represented by <paramref name="propertyAccessor" />.</span>
          </span>
          <span data-ttu-id="8671b-3132">- lub - metoda który <paramref name="propertyAccessor" /> reprezentuje nie jest metoda dostępu właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3132">-or-  The method that <paramref name="propertyAccessor" /> represents is not a property accessor method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.PropertyInfo property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Reflection.PropertyInfo property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::Reflection::PropertyInfo ^ property);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, property)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="property" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3133">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3133">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span>
          </span>
          <span data-ttu-id="8671b-3134">Może to być wartość null dla właściwości statyczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3134">This can be null for static properties.</span>
          </span>
        </param>
        <param name="property">
          <span data-ttu-id="8671b-3135">
            <see cref="T:System.Reflection.PropertyInfo" /> Można ustawić <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3135">The <see cref="T:System.Reflection.PropertyInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3136">Tworzy <see cref="T:System.Linq.Expressions.MemberExpression" /> reprezentująca dostęp do właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3136">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3137">A <see cref="T:System.Linq.Expressions.MemberExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> i <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> i <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3137">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3138"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.MemberExpression> jest równa <xref:System.Reflection.PropertyInfo.PropertyType%2A> właściwość <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span><span class="sxs-lookup"><span data-stu-id="8671b-3138">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span></span>  
  
 <span data-ttu-id="8671b-3139">Jeśli właściwość jest reprezentowane przez `property` jest `static` (`Shared` w języku Visual Basic), `expression` może być `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3139">If the property represented by `property` is `static` (`Shared` in Visual Basic), `expression` can be `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3140">
            <paramref name="property" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3140">
              <paramref name="property" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="8671b-3141">- lub - właściwości, <paramref name="property" /> reprezentuje nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic) i <paramref name="expression" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3141">-or-  The property that <paramref name="property" /> represents is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-3142">
            <paramref name="expression" />. Typ nie jest możliwy do przypisania do właściwości typ deklarujący, <paramref name="property" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3142">
              <paramref name="expression" />.Type is not assignable to the declaring type of the property that <paramref name="property" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3143">
            <see cref="T:System.Linq.Expressions.Expression" /> Którego <see cref="P:System.Linq.Expressions.Expression.Type" /> zawiera właściwość o nazwie <c>propertyName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3143">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property named <c>propertyName</c>.</span>
          </span>
          <span data-ttu-id="8671b-3144">Może to być <see langword="null" /> właściwości statycznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3144">This can be <see langword="null" /> for static properties.</span>
          </span>
        </param>
        <param name="propertyName">
          <span data-ttu-id="8671b-3145">Nazwa właściwości, można uzyskać dostęp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3145">The name of a property to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3146">Tworzy <see cref="T:System.Linq.Expressions.MemberExpression" /> reprezentująca dostęp do właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3146">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3147">A <see cref="T:System.Linq.Expressions.MemberExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> właściwością <paramref name="expression" />i <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> właściwością <see cref="T:System.Reflection.PropertyInfo" /> reprezentująca właściwość oznaczona <paramref name="propertyName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3147">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property denoted by <paramref name="propertyName" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3148"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.MemberExpression> jest równa <xref:System.Reflection.PropertyInfo.PropertyType%2A> właściwość <xref:System.Reflection.PropertyInfo> reprezentująca właściwość oznaczona `propertyName`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3148">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the <xref:System.Reflection.PropertyInfo> that represents the property denoted by `propertyName`.</span></span>  
  
 <span data-ttu-id="8671b-3149">Metoda ta wyszukuje `expression`. Typ i jego typów podstawowych dla właściwości o nazwie `propertyName`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3149">This method searches `expression`.Type and its base types for a property that has the name `propertyName`.</span></span> <span data-ttu-id="8671b-3150">Właściwości publiczne mają pierwszeństwo nad niepublicznych właściwości.</span><span class="sxs-lookup"><span data-stu-id="8671b-3150">Public properties are given preference over non-public properties.</span></span> <span data-ttu-id="8671b-3151">Jeśli zostanie znalezione dopasowania właściwości, ta metoda przekazuje `expression` i <xref:System.Reflection.PropertyInfo> reprezentujący tę właściwość, aby <xref:System.Linq.Expressions.Expression.Property%2A>.</span><span class="sxs-lookup"><span data-stu-id="8671b-3151">If a matching property is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> that represents that property to <xref:System.Linq.Expressions.Expression.Property%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-3152">Poniższy przykład pokazuje, jak utworzyć wyrażenie, które reprezentuje, uzyskiwanie dostępu do właściwości.</span><span class="sxs-lookup"><span data-stu-id="8671b-3152">The following example shows how to create an expression that represents accessing a property.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#38)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3153">
            <paramref name="expression" /> lub <paramref name="propertyName" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3153">
              <paramref name="expression" /> or <paramref name="propertyName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-3154">Nie ma właściwości o nazwie <paramref name="propertyName" /> jest zdefiniowany w <paramref name="expression" />. Typ lub jego typów podstawowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3154">No property named <paramref name="propertyName" /> is defined in <paramref name="expression" />.Type or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, indexer As PropertyInfo, arguments As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.Property (instance, indexer, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="8671b-3155">Obiekt, do której należy właściwość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3155">The object to which the property belongs.</span>
          </span>
          <span data-ttu-id="8671b-3156">Jeśli właściwość jest statyczne/udostępnione, musisz mieć wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3156">If the property is static/shared, it must be null.</span>
          </span>
        </param>
        <param name="indexer">
          <span data-ttu-id="8671b-3157">
            <see cref="T:System.Reflection.PropertyInfo" /> Reprezentująca właściwość do indeksu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3157">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-3158">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> z <see cref="T:System.Linq.Expressions.Expression" /> obiekty, które są używane do indeksowania właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3158">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3159">Tworzy <see cref="T:System.Linq.Expressions.IndexExpression" /> reprezentującą dostępu do właściwości indeksowanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3159">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3160">Utworzony <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3160">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, indexer As PropertyInfo, ParamArray arguments As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * System.Reflection.PropertyInfo * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.Property (instance, indexer, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="8671b-3161">Obiekt, do której należy właściwość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3161">The object to which the property belongs.</span>
          </span>
          <span data-ttu-id="8671b-3162">Jeśli właściwość jest statyczne/udostępnione, musisz mieć wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3162">If the property is static/shared, it must be null.</span>
          </span>
        </param>
        <param name="indexer">
          <span data-ttu-id="8671b-3163">
            <see cref="T:System.Reflection.PropertyInfo" /> Reprezentująca właściwość do indeksu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3163">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-3164">Tablica <see cref="T:System.Linq.Expressions.Expression" /> obiekty, które są używane do indeksowania właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3164">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3165">Tworzy <see cref="T:System.Linq.Expressions.IndexExpression" /> reprezentującą dostępu do właściwości indeksowanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3165">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3166">Utworzony <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3166">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, string propertyName, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, string propertyName, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, propertyName As String, ParamArray arguments As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::String ^ propertyName, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * string * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.IndexExpression" Usage="System.Linq.Expressions.Expression.Property (instance, propertyName, arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="8671b-3167">Obiekt, do której należy właściwość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3167">The object to which the property belongs.</span>
          </span>
          <span data-ttu-id="8671b-3168">Jeśli właściwość jest statyczne/udostępnione, musisz mieć wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3168">If the property is static/shared, it must be null.</span>
          </span>
        </param>
        <param name="propertyName">
          <span data-ttu-id="8671b-3169">Nazwa indeksatora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3169">The name of the indexer.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="8671b-3170">Tablica <see cref="T:System.Linq.Expressions.Expression" /> obiekty, które są używane do indeksowania właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3170">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3171">Tworzy <see cref="T:System.Linq.Expressions.IndexExpression" /> reprezentującą dostępu do właściwości indeksowanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3171">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3172">Utworzony <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3172">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, Type type, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Type type, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="static member Property : System.Linq.Expressions.Expression * Type * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.Property (expression, type, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3173">Obiekt zawierający właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3173">The containing object of the property.</span>
          </span>
          <span data-ttu-id="8671b-3174">Może to być wartość null dla właściwości statyczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3174">This can be null for static properties.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-3175">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> Zawierający właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3175">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the property.</span>
          </span>
        </param>
        <param name="propertyName">
          <span data-ttu-id="8671b-3176">Właściwość, która ma być uzyskiwany dostęp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3176">The property to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3177">Tworzy <see cref="T:System.Linq.Expressions.MemberExpression" /> uzyskiwania dostępu do właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3177">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> accessing a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3178">Utworzony <see cref="T:System.Linq.Expressions.MemberExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3178">The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyOrField">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression PropertyOrField (System.Linq.Expressions.Expression expression, string propertyOrFieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression PropertyOrField(class System.Linq.Expressions.Expression expression, string propertyOrFieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ PropertyOrField(System::Linq::Expressions::Expression ^ expression, System::String ^ propertyOrFieldName);" />
      <MemberSignature Language="F#" Value="static member PropertyOrField : System.Linq.Expressions.Expression * string -&gt; System.Linq.Expressions.MemberExpression" Usage="System.Linq.Expressions.Expression.PropertyOrField (expression, propertyOrFieldName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyOrFieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3179">
            <see cref="T:System.Linq.Expressions.Expression" /> Którego <see cref="P:System.Linq.Expressions.Expression.Type" /> zawiera właściwość lub pole o nazwie <c>propertyOrFieldName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3179">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property or field named <c>propertyOrFieldName</c>.</span>
          </span>
          <span data-ttu-id="8671b-3180">Może to być wartość null dla statycznych elementów członkowskich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3180">This can be null for static members.</span>
          </span>
        </param>
        <param name="propertyOrFieldName">
          <span data-ttu-id="8671b-3181">Nazwa właściwości lub pola, które ma być uzyskiwany dostęp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3181">The name of a property or field to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3182">Tworzy <see cref="T:System.Linq.Expressions.MemberExpression" /> reprezentująca dostęp do właściwości lub pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3182">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property or field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3183">A <see cref="T:System.Linq.Expressions.MemberExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> właściwością <paramref name="expression" />i <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> właściwością <see cref="T:System.Reflection.PropertyInfo" /> lub <see cref="T:System.Reflection.FieldInfo" /> reprezentująca właściwość lub pole wskazywane przez <paramref name="propertyOrFieldName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3183">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> or <see cref="T:System.Reflection.FieldInfo" /> that represents the property or field denoted by <paramref name="propertyOrFieldName" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3184"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwości wynikające <xref:System.Linq.Expressions.MemberExpression> jest równa <xref:System.Reflection.PropertyInfo.PropertyType%2A> lub <xref:System.Reflection.FieldInfo.FieldType%2A> właściwości <xref:System.Reflection.PropertyInfo> lub <xref:System.Reflection.FieldInfo>, odpowiednio, który reprezentuje właściwość lub pole wskazywane przez `propertyOrFieldName`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3184">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> or <xref:System.Reflection.FieldInfo.FieldType%2A> properties of the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo>, respectively, that represents the property or field denoted by `propertyOrFieldName`.</span></span>  
  
 <span data-ttu-id="8671b-3185">Metoda ta wyszukuje `expression`. Typ i jego typów podstawowych, właściwość lub pole o nazwie `propertyOrFieldName`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3185">This method searches `expression`.Type and its base types for a property or field that has the name `propertyOrFieldName`.</span></span> <span data-ttu-id="8671b-3186">Właściwości publiczne i pola są podane preferencji za pośrednictwem właściwości niepubliczne i pola.</span><span class="sxs-lookup"><span data-stu-id="8671b-3186">Public properties and fields are given preference over non-public properties and fields.</span></span> <span data-ttu-id="8671b-3187">Ponadto właściwości mają pierwszeństwo nad polami.</span><span class="sxs-lookup"><span data-stu-id="8671b-3187">Also, properties are given preference over fields.</span></span> <span data-ttu-id="8671b-3188">Jeśli właściwość lub pole dopasowania zostanie znaleziony, ta metoda przekazuje `expression` i <xref:System.Reflection.PropertyInfo> lub <xref:System.Reflection.FieldInfo> reprezentujący tej właściwości lub pola <xref:System.Linq.Expressions.Expression.Property%2A> lub <xref:System.Linq.Expressions.Expression.Field%2A>, odpowiednio.</span><span class="sxs-lookup"><span data-stu-id="8671b-3188">If a matching property or field is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo> that represents that property or field to <xref:System.Linq.Expressions.Expression.Property%2A> or <xref:System.Linq.Expressions.Expression.Field%2A>, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-3189">Poniższy przykład pokazuje, jak utworzyć wyrażenie, które reprezentuje, uzyskiwanie dostępu do właściwości lub pola.</span><span class="sxs-lookup"><span data-stu-id="8671b-3189">The following example shows how to create an expression that represents accessing a property or field.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#39)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#39)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3190">
            <paramref name="expression" /> lub <paramref name="propertyOrFieldName" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3190">
              <paramref name="expression" /> or <paramref name="propertyOrFieldName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-3191">Nie właściwości lub pola o nazwie <paramref name="propertyOrFieldName" /> jest zdefiniowany w <paramref name="expression" />. Typ lub jego typów podstawowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3191">No property or field named <paramref name="propertyOrFieldName" /> is defined in <paramref name="expression" />.Type or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Quote">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Quote (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Quote(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Quote(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member Quote : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Quote expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3192">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3192">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3193">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący wyrażenie stałej wartości typu <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3193">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3194">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3194">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3195"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.UnaryExpression> reprezentuje zbudowany typ <xref:System.Linq.Expressions.Expression%601>, gdzie argument typu jest typu reprezentowanego przez `expression`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-3195">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents the constructed type <xref:System.Linq.Expressions.Expression%601>, where the type argument is the type represented by `expression`.Type.</span></span> <span data-ttu-id="8671b-3196"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3196">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`.</span></span> <span data-ttu-id="8671b-3197">Zarówno <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3197">Both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3198">
            <paramref name="expression" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3198">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Reduce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression Reduce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Reduce" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Reduce () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Linq::Expressions::Expression ^ Reduce();" />
      <MemberSignature Language="F#" Value="abstract member Reduce : unit -&gt; System.Linq.Expressions.Expression&#xA;override this.Reduce : unit -&gt; System.Linq.Expressions.Expression" Usage="expression.Reduce " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3199">Zmniejsza tego węzła w celu prostszego wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3199">Reduces this node to a simpler expression.</span>
          </span>
          <span data-ttu-id="8671b-3200">Jeśli CanReduce zwraca wartość true, powinny zostać zwrócone prawidłowe wyrażenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3200">If CanReduce returns true, this should return a valid expression.</span>
          </span>
          <span data-ttu-id="8671b-3201">Ta metoda może zwrócić inny węzeł, która sama musi zostać obniżona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3201">This method can return another node which itself must be reduced.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3202">Wyrażenie mniejsze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3202">The reduced expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceAndCheck">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ReduceAndCheck ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ReduceAndCheck() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
      <MemberSignature Language="VB.NET" Value="Public Function ReduceAndCheck () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ ReduceAndCheck();" />
      <MemberSignature Language="F#" Value="member this.ReduceAndCheck : unit -&gt; System.Linq.Expressions.Expression" Usage="expression.ReduceAndCheck " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3203">Zmniejsza tego węzła w celu prostszego wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3203">Reduces this node to a simpler expression.</span>
          </span>
          <span data-ttu-id="8671b-3204">Jeśli CanReduce zwraca wartość true, powinny zostać zwrócone prawidłowe wyrażenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3204">If CanReduce returns true, this should return a valid expression.</span>
          </span>
          <span data-ttu-id="8671b-3205">Ta metoda może zwrócić inny węzeł, która sama musi zostać obniżona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3205">This method can return another node which itself must be reduced.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3206">Wyrażenie mniejsze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3206">The reduced expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3207">W odróżnieniu od Reduce ta metoda sprawdza, czy niższych węźle spełnia określone invariants.</span><span class="sxs-lookup"><span data-stu-id="8671b-3207">Unlike Reduce, this method checks that the reduced node satisfies certain invariants.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceExtensions">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ReduceExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ReduceExtensions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReduceExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Function ReduceExtensions () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ ReduceExtensions();" />
      <MemberSignature Language="F#" Value="member this.ReduceExtensions : unit -&gt; System.Linq.Expressions.Expression" Usage="expression.ReduceExtensions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3208">Zmniejsza wyrażenia na typ węzła znane, (który nie jest węzłem rozszerzenia) lub po prostu zwraca wyrażenie, jeśli nie jest jeszcze znany typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3208">Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3209">Wyrażenie mniejsze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3209">The reduced expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ReferenceEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ReferenceEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ReferenceEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ReferenceEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ReferenceEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3210">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3210">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3211">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3211">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3212">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący porównanie równości odwołań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3212">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference equality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3213">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3213">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceNotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ReferenceNotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ReferenceNotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceNotEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ReferenceNotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member ReferenceNotEqual : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.ReferenceNotEqual (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3214">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3214">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3215">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3215">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3216">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący porównanie nierówności odwołań.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3216">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference inequality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3217">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3217">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Rethrow">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3218">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący ponowne generowanie wyjątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3218">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Rethrow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Rethrow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Rethrow () As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Rethrow();" />
      <MemberSignature Language="F#" Value="static member Rethrow : unit -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Rethrow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3219">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący ponowne generowanie wyjątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3219">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3220">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący ponowne generowanie wyjątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3220">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Rethrow (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Rethrow(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Rethrow(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Rethrow(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Rethrow : Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Rethrow type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-3221">Nowy <see cref="T:System.Type" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3221">The new <see cref="T:System.Type" /> of the expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3222">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący ponowne generowanie wyjątku z danym typem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3222">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception with a given type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3223">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący ponowne generowanie wyjątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3223">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Return">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3224">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący instrukcji return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3224">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Return (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="8671b-3225">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> , <see cref="T:System.Linq.Expressions.GotoExpression" /> Spowoduje przejście do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3225">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3226">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący instrukcji return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3226">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3227">A <see cref="T:System.Linq.Expressions.GotoExpression" /> z <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> równa Return <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> właściwością <paramref name="target" />i wartość null, które zostaną przekazane do etykietą docelową po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3227">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Return (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="8671b-3228">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> , <see cref="T:System.Linq.Expressions.GotoExpression" /> Spowoduje przejście do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3228">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="8671b-3229">Wartość, które zostaną przekazane do skojarzonego etykiety po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3229">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3230">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący instrukcji return.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3230">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span>
          </span>
          <span data-ttu-id="8671b-3231">Można określić wartość przekazana do etykiety na skok.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3231">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3232">A <see cref="T:System.Linq.Expressions.GotoExpression" /> z <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> równa Kontynuuj <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> właściwością <paramref name="target" />, i <paramref name="value" /> mają być przekazane do etykietą docelową po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3232">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8671b-3233">Poniższy przykład przedstawia sposób tworzenia wyrażenia zawierającego <xref:System.Linq.Expressions.Expression.Return%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-3233">The following example demonstrates how to create an expression that contains the <xref:System.Linq.Expressions.Expression.Return%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return (target, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="8671b-3234">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> , <see cref="T:System.Linq.Expressions.GotoExpression" /> Spowoduje przejście do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3234">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-3235">
            <see cref="T:System.Type" /> Można ustawić <see cref="P:System.Linq.Expressions.Expression.Type" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3235">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3236">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący instrukcję return z określonym typem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3236">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3237">A <see cref="T:System.Linq.Expressions.GotoExpression" /> z <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> równa Return <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> właściwością <paramref name="target" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwością <paramref name="type" />i wartość null, które zostaną przekazane do etykietą docelową po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3237">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Return : System.Linq.Expressions.LabelTarget * System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.GotoExpression" Usage="System.Linq.Expressions.Expression.Return (target, value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="8671b-3238">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> , <see cref="T:System.Linq.Expressions.GotoExpression" /> Spowoduje przejście do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3238">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="8671b-3239">Wartość, które zostaną przekazane do skojarzonego etykiety po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3239">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-3240">
            <see cref="T:System.Type" /> Można ustawić <see cref="P:System.Linq.Expressions.Expression.Type" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3240">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3241">Tworzy <see cref="T:System.Linq.Expressions.GotoExpression" /> reprezentujący instrukcję return z określonym typem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3241">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type.</span>
          </span>
          <span data-ttu-id="8671b-3242">Można określić wartość przekazana do etykiety na skok.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3242">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3243">A <see cref="T:System.Linq.Expressions.GotoExpression" /> z <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> równa Kontynuuj <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> właściwością <paramref name="target" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> właściwością <paramref name="type" />, i <paramref name="value" /> mają być przekazane do etykietą docelową po przeskakiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3243">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RightShift">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3244">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację bitowego przesunięcia w prawo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3244">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShift (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member RightShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShift (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3245">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3245">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3246">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3246">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3247">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację bitowego przesunięcia w prawo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3247">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3248">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3248">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3249">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-3249">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-3250"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3250">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-3251">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3251">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-3252">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3252">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-3253"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3253">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-3254">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3254">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-3255">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-3255">Implementing Method</span></span>  
 <span data-ttu-id="8671b-3256">Następujące reguły określają wybranej metody wykonawcze dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-3256">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-3257">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora przesunięcia w prawo, <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-3257">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3258">W przeciwnym razie, jeśli `left`. Typ jest typem całkowitym (jeden z <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, lub odpowiednie typy dopuszczające wartości null) i `right`. Typ jest <xref:System.Int32>, implementacja metody jest `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3258">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-3259">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-3259">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-3260">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-3260">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-3261">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3261">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-3262">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3262">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3263">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-3263">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-3264">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3264">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-3265">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-3265">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-3266">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-3266">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-3267">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3267">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-3268">Typ węzła jest typ wyniku wstępnie zdefiniowanego operatora przesunięcia w prawo.</span><span class="sxs-lookup"><span data-stu-id="8671b-3268">The type of the node is the result type of the predefined right-shift operator.</span></span>  
  
-   <span data-ttu-id="8671b-3269">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3269">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-3270">Typ węzła jest typ dopuszczający wartość null, który odpowiada typ wyniku wstępnie zdefiniowanego operatora przesunięcia w prawo.</span><span class="sxs-lookup"><span data-stu-id="8671b-3270">The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3271">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3271">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-3272">Operator przesunięcia w prawo nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3272">The right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShift (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member RightShift : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShift (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3273">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3273">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3274">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3274">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-3275">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3275">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3276">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację bitowego przesunięcia w prawo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3276">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3277">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3277">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3278">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-3278">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-3279"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3279">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-3280">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3280">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-3281">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3281">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-3282"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3282">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-3283">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3283">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-3284">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-3284">Implementing Method</span></span>  
 <span data-ttu-id="8671b-3285">Następujące reguły określają wybranej metody wykonawcze dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-3285">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-3286">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest implementującej metody dla węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3286">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="8671b-3287">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operatora przesunięcia w prawo, <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-3287">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3288">W przeciwnym razie, jeśli `left`. Typ jest typem całkowitym (jeden z <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, lub odpowiednie typy dopuszczające wartości null) i `right`. Typ jest <xref:System.Int32>, implementacja metody jest `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3288">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-3289">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-3289">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-3290">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-3290">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-3291">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3291">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-3292">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3292">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3293">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-3293">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-3294">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3294">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-3295">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-3295">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-3296">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-3296">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-3297">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3297">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-3298">Typ węzła jest typ wyniku wstępnie zdefiniowanego operatora przesunięcia w prawo.</span><span class="sxs-lookup"><span data-stu-id="8671b-3298">The type of the node is the result type of the predefined right-shift operator.</span></span>  
  
-   <span data-ttu-id="8671b-3299">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3299">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-3300">Typ węzła jest typ dopuszczający wartość null, który odpowiada typ wyniku wstępnie zdefiniowanego operatora przesunięcia w prawo.</span><span class="sxs-lookup"><span data-stu-id="8671b-3300">The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3301">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3301">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-3302">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3302">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-3303">
            <paramref name="method" /> jest <see langword="null" /> i operator przesunięcia w prawo nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3303">
              <paramref name="method" /> is <see langword="null" /> and the right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RightShiftAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3304">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację logiczną przypisania przesunięcia w prawo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3304">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member RightShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShiftAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3305">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3305">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3306">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3306">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3307">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację logiczną przypisania przesunięcia w prawo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3307">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3308">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3308">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member RightShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShiftAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3309">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3309">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3310">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3310">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-3311">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3311">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3312">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację logiczną przypisania przesunięcia w prawo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3312">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3313">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3313">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member RightShiftAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.RightShiftAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3314">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3314">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3315">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3315">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-3316">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3316">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="8671b-3317">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3317">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3318">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację logiczną przypisania przesunięcia w prawo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3318">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3319">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3319">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RuntimeVariables">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3320">Tworzy wystąpienie <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3320">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RuntimeVariables (variables As IEnumerable(Of ParameterExpression)) As RuntimeVariablesExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::RuntimeVariablesExpression ^ RuntimeVariables(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables);" />
      <MemberSignature Language="F#" Value="static member RuntimeVariables : seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.RuntimeVariablesExpression" Usage="System.Linq.Expressions.Expression.RuntimeVariables variables" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.RuntimeVariablesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">
          <span data-ttu-id="8671b-3321">Kolekcja <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3321">A collection of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3322">Tworzy wystąpienie <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3322">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3323">Wystąpienie <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> i <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3323">An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (params System.Linq.Expressions.ParameterExpression[] variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(class System.Linq.Expressions.ParameterExpression[] variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RuntimeVariables (ParamArray variables As ParameterExpression()) As RuntimeVariablesExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::RuntimeVariablesExpression ^ RuntimeVariables(... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables);" />
      <MemberSignature Language="F#" Value="static member RuntimeVariables : System.Linq.Expressions.ParameterExpression[] -&gt; System.Linq.Expressions.RuntimeVariablesExpression" Usage="System.Linq.Expressions.Expression.RuntimeVariables variables" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.RuntimeVariablesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables">
          <span data-ttu-id="8671b-3324">Tablica <see cref="T:System.Linq.Expressions.ParameterExpression" /> obiekty służące do wypełniania <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3324">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3325">Tworzy wystąpienie <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3325">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3326">Wystąpienie <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> i <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3326">An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3327">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację odejmowania arytmetyczne, które ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3327">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Subtract(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Subtract(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Subtract (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3328">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3328">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3329">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3329">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3330">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację odejmowania arytmetyczne, które ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3330">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3331">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3331">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3332">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-3332">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-3333"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3333">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-3334">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3334">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-3335">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3335">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-3336"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3336">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-3337">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3337">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-3338">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-3338">Implementing Method</span></span>  
 <span data-ttu-id="8671b-3339">Następujące reguły określają wybranej metody wykonawcze dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-3339">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-3340">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator odejmowania <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-3340">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3341">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3341">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-3342">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-3342">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-3343">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-3343">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-3344">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3344">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-3345">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3345">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3346">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-3346">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-3347">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3347">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-3348">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-3348">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-3349">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-3349">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-3350">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3350">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-3351">Typ węzła jest typ wyniku operator odejmowania wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-3351">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="8671b-3352">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3352">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-3353">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku operator odejmowania wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-3353">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-3354">Poniższy przykład kodu pokazuje, jak utworzyć wyrażenie, które odejmuje argumentu z pierwszego argumentu.</span><span class="sxs-lookup"><span data-stu-id="8671b-3354">The following code example shows how to create an expression that subtracts the argument from the first argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#30)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3355">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3355">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-3356">Operator odejmowania nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3356">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Subtract(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Subtract(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.Subtract (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3357">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3357">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3358">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3358">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-3359">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3359">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3360">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację odejmowania arytmetyczne, które ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3360">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3361">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3361">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3362">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-3362">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-3363"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3363">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-3364">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3364">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-3365">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3365">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-3366"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3366">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-3367">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3367">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-3368">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-3368">Implementing Method</span></span>  
 <span data-ttu-id="8671b-3369">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-3369">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-3370">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest implementującej metody dla węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3370">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="8671b-3371">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator odejmowania <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-3371">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3372">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3372">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-3373">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-3373">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-3374">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-3374">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-3375">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3375">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-3376">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3376">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3377">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-3377">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-3378">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3378">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-3379">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-3379">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-3380">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-3380">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-3381">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3381">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-3382">Typ węzła jest typ wyniku operator odejmowania wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-3382">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="8671b-3383">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3383">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-3384">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku operator odejmowania wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-3384">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3385">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3385">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-3386">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3386">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-3387">
            <paramref name="method" /> jest <see langword="null" /> i operator odejmowania nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3387">
              <paramref name="method" /> is <see langword="null" /> and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3388">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację Przypisanie odejmowania, który nie ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3388">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member SubtractAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssign (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3389">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3389">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3390">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3390">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3391">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację Przypisanie odejmowania, który nie ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3391">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3392">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3392">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member SubtractAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssign (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3393">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3393">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3394">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3394">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-3395">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3395">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3396">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację Przypisanie odejmowania, który nie ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3396">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3397">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3397">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member SubtractAssign : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssign (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3398">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3398">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3399">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3399">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-3400">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3400">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="8671b-3401">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3401">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3402">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację Przypisanie odejmowania, który nie ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3402">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3403">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3403">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3404">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację Przypisanie odejmowania, który ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3404">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member SubtractAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssignChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3405">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3405">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3406">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3406">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3407">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację Przypisanie odejmowania, który ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3407">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3408">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3408">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member SubtractAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssignChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3409">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3409">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3410">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3410">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-3411">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3411">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3412">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację Przypisanie odejmowania, który ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3412">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3413">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3413">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberSignature Language="F#" Value="static member SubtractAssignChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.LambdaExpression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractAssignChecked (left, right, method, conversion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3414">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3414">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3415">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3415">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-3416">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3416">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="8671b-3417">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3417">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3418">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację Przypisanie odejmowania, który ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3418">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3419">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3419">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3420">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację odejmowania arytmetyczne, który ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3420">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="static member SubtractChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractChecked (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3421">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3421">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3422">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3422">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3423">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację odejmowania arytmetyczne, który ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3423">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3424">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3424">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3425">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-3425">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-3426"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3426">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-3427">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3427">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-3428">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3428">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-3429"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3429">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-3430">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3430">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-3431">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-3431">Implementing Method</span></span>  
 <span data-ttu-id="8671b-3432">Następujące reguły określają wybranej metody wykonawcze dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-3432">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-3433">Jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator odejmowania <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-3433">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3434">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3434">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-3435">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-3435">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-3436">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-3436">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-3437">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3437">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-3438">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3438">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3439">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-3439">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-3440">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3440">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-3441">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-3441">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-3442">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-3442">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-3443">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3443">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-3444">Typ węzła jest typ wyniku operator odejmowania wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-3444">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="8671b-3445">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3445">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-3446">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku operator odejmowania wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-3446">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3447">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3447">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-3448">Operator odejmowania nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3448">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member SubtractChecked : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.BinaryExpression" Usage="System.Linq.Expressions.Expression.SubtractChecked (left, right, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="8671b-3449">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3449">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="8671b-3450">A <see cref="T:System.Linq.Expressions.Expression" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3450">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-3451">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3451">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3452">Tworzy <see cref="T:System.Linq.Expressions.BinaryExpression" /> reprezentujący operację odejmowania arytmetyczne, który ma sprawdzanie przepełnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3452">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3453">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> i <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, i <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3453">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3454">Wartość wynikowa <xref:System.Linq.Expressions.BinaryExpression> ma <xref:System.Linq.Expressions.BinaryExpression.Method%2A> właściwością implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-3454">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="8671b-3455"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3455">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-3456">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3456">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-3457">W przeciwnym razie są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3457">Otherwise, they are `false`.</span></span> <span data-ttu-id="8671b-3458"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> Właściwość `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3458">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="8671b-3459">Poniższe informacje zawierają opis metody wykonawcze, typ węzła i tego, czy zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3459">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-3460">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-3460">Implementing Method</span></span>  
 <span data-ttu-id="8671b-3461">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-3461">The following rules determine the implementing method for the operation :</span></span>  
  
-   <span data-ttu-id="8671b-3462">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje dwa argumenty, jest implementującej metody dla węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3462">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="8671b-3463">W przeciwnym razie, jeśli <xref:System.Linq.Expressions.Expression.Type%2A> właściwości albo `left` lub `right` reprezentuje typ zdefiniowany przez użytkownika, który przeciążenia operator odejmowania <xref:System.Reflection.MethodInfo> reprezentujący się, że metoda jest metodą implementującej.</span><span class="sxs-lookup"><span data-stu-id="8671b-3463">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3464">W przeciwnym razie, jeśli `left`. Typ i `right`. Typ to typy liczbowe, implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3464">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-3465">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-3465">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-3466">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-3466">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-3467">Jeśli `left`. Typ i `right`. Typ można przypisać odpowiednie typy argumentów metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3467">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-3468">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3468">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3469">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-3469">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-3470">`left`. Typ i `right`. Typ są oba typy wartości, z których co najmniej jedna ma wartość null, a odpowiednie typy nieprzyjmujące wartości są równe odpowiednie typy argumentów metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3470">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-3471">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-3471">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-3472">Jeśli metoda implementującej jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-3472">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="8671b-3473">Jeśli `left`. Typ i `right`. Typ są obie wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3473">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-3474">Typ węzła jest typ wyniku operator odejmowania wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-3474">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="8671b-3475">Jeśli `left`. Typ i `right`. Typ są dopuszczającego wartość null, zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3475">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="8671b-3476">Typ węzła jest typ dopuszczający wartość null, odpowiadający typ wyniku operator odejmowania wstępnie zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="8671b-3476">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3477">
            <paramref name="left" /> lub <paramref name="right" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3477">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-3478">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie przyjmuje dokładnie dwóch argumentów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3478">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-3479">
            <paramref name="method" /> jest <see langword="null" /> i operator odejmowania nie jest zdefiniowany dla <paramref name="left" />. Typ i <paramref name="right" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3479">
              <paramref name="method" /> is <see langword="null" /> and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Switch">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3480">Tworzy <see cref="T:System.Linq.Expressions.SwitchExpression" /> reprezentujący <see langword="switch" /> instrukcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3480">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue">
          <span data-ttu-id="8671b-3481">Wartość, która ma być testowana w każdym przypadku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3481">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="8671b-3482">Zestaw przypadków dla tego wyrażenia switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3482">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3483">Tworzy <see cref="T:System.Linq.Expressions.SwitchExpression" /> reprezentujący <see langword="switch" /> instrukcję bez przypadek domyślny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3483">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement without a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3484">Utworzony <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3484">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3485">Wszystkie <xref:System.Linq.Expressions.SwitchCase> obiekty w <xref:System.Linq.Expressions.SwitchExpression> obiekt musi mieć tego samego typu, chyba że <xref:System.Linq.Expressions.SwitchExpression> ma typ `void`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3485">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="8671b-3486">Każdy <xref:System.Linq.Expressions.SwitchCase> obiektu jest niejawny `break` instrukcji, co oznacza, że nie istnieje żadne niejawne fall za pośrednictwem od jednej etykiety case do innej.</span><span class="sxs-lookup"><span data-stu-id="8671b-3486">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
 <span data-ttu-id="8671b-3487">Jeśli `switchValue` nie pasuje do żadnego przypadków, jest zgłaszany żaden wyjątek.</span><span class="sxs-lookup"><span data-stu-id="8671b-3487">If `switchValue` does not match any of the cases, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-3488">Poniższy przykład pokazuje, jak utworzyć wyrażenie, który reprezentuje instrukcji pomocą przełącznika bez przypadek domyślny.</span><span class="sxs-lookup"><span data-stu-id="8671b-3488">The following example demonstrates how to create an expression that represents a swtich statement without a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#34)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, defaultBody, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue">
          <span data-ttu-id="8671b-3489">Wartość, która ma być testowana w każdym przypadku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3489">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="8671b-3490">Wynik o przełącznikiem Jeśli <c>switchValue</c> nie pasuje do żadnego z przypadków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3490">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="8671b-3491">Zestaw przypadków dla tego wyrażenia switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3491">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3492">Tworzy <see cref="T:System.Linq.Expressions.SwitchExpression" /> reprezentujący <see langword="switch" /> instrukcję, która ma przypadek domyślny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3492">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3493">Utworzony <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3493">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3494">Wszystkie <xref:System.Linq.Expressions.SwitchCase> obiekty w <xref:System.Linq.Expressions.SwitchExpression> obiekt musi mieć tego samego typu, chyba że <xref:System.Linq.Expressions.SwitchExpression> ma typ `void`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3494">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="8671b-3495">Każdy <xref:System.Linq.Expressions.SwitchCase> obiektu jest niejawny `break` instrukcji, co oznacza, że nie istnieje żadne niejawne fall za pośrednictwem od jednej etykiety case do innej.</span><span class="sxs-lookup"><span data-stu-id="8671b-3495">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
 <span data-ttu-id="8671b-3496">Jeśli `switchValue` nie pasuje do żadnego z przypadków przypadek domyślny, reprezentowane przez `defaultBody` jest uruchamiany.</span><span class="sxs-lookup"><span data-stu-id="8671b-3496">If `switchValue` does not match any of the cases, the default case represented by `defaultBody` is run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-3497">Poniższy przykład pokazuje, jak utworzyć wyrażenie, który reprezentuje instrukcji pomocą przełącznika, który ma przypadek domyślny.</span><span class="sxs-lookup"><span data-stu-id="8671b-3497">The following example demonstrates how to create an expression that represents a swtich statement that has a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.SwitchCase&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, cases As IEnumerable(Of SwitchCase)) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.SwitchCase&gt; -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt;" />
      </Parameters>
      <Docs>
        <param name="switchValue">
          <span data-ttu-id="8671b-3498">Wartość, która ma być testowana w każdym przypadku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3498">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="8671b-3499">Wynik o przełącznikiem Jeśli <c>switchValue</c> nie pasuje do żadnego z przypadków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3499">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="comparison">
          <span data-ttu-id="8671b-3500">Metoda porównania równości do użycia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3500">The equality comparison method to use.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="8671b-3501">Zestaw przypadków dla tego wyrażenia switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3501">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3502">Tworzy <see cref="T:System.Linq.Expressions.SwitchExpression" /> reprezentujący <see langword="switch" /> instrukcję, która ma przypadek domyślny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3502">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3503">Utworzony <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3503">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue">
          <span data-ttu-id="8671b-3504">Wartość, która ma być testowana w każdym przypadku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3504">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="8671b-3505">Wynik o przełącznikiem Jeśli <c>switchValue</c> nie pasuje do żadnego z przypadków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3505">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="comparison">
          <span data-ttu-id="8671b-3506">Metoda porównania równości do użycia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3506">The equality comparison method to use.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="8671b-3507">Zestaw przypadków dla tego wyrażenia switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3507">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3508">Tworzy <see cref="T:System.Linq.Expressions.SwitchExpression" /> reprezentujący <see langword="switch" /> instrukcję, która ma przypadek domyślny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3508">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3509">Utworzony <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3509">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Type type, class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.SwitchCase&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(Type ^ type, System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * seq&lt;System.Linq.Expressions.SwitchCase&gt; -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (type, switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-3510">Typ wyniku przełącznika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3510">The result type of the switch.</span>
          </span>
        </param>
        <param name="switchValue">
          <span data-ttu-id="8671b-3511">Wartość, która ma być testowana w każdym przypadku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3511">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="8671b-3512">Wynik o przełącznikiem Jeśli <c>switchValue</c> nie pasuje do żadnego z przypadków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3512">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="comparison">
          <span data-ttu-id="8671b-3513">Metoda porównania równości do użycia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3513">The equality comparison method to use.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="8671b-3514">Zestaw przypadków dla tego wyrażenia switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3514">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3515">Tworzy <see cref="T:System.Linq.Expressions.SwitchExpression" /> reprezentujący <see langword="switch" /> instrukcję, która ma przypadek domyślny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3515">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3516">Utworzony <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3516">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Type type, class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(Type ^ type, System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberSignature Language="F#" Value="static member Switch : Type * System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Reflection.MethodInfo * System.Linq.Expressions.SwitchCase[] -&gt; System.Linq.Expressions.SwitchExpression" Usage="System.Linq.Expressions.Expression.Switch (type, switchValue, defaultBody, comparison, cases)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-3517">Typ wyniku przełącznika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3517">The result type of the switch.</span>
          </span>
        </param>
        <param name="switchValue">
          <span data-ttu-id="8671b-3518">Wartość, która ma być testowana w każdym przypadku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3518">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="8671b-3519">Wynik o przełącznikiem Jeśli <c>switchValue</c> nie pasuje do żadnego z przypadków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3519">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="comparison">
          <span data-ttu-id="8671b-3520">Metoda porównania równości do użycia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3520">The equality comparison method to use.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="8671b-3521">Zestaw przypadków dla tego wyrażenia switch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3521">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3522">Tworzy <see cref="T:System.Linq.Expressions.SwitchExpression" /> reprezentujący <see langword="switch" /> instrukcję, która ma przypadek domyślny...</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3522">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case..</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3523">Utworzony <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3523">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SwitchCase">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3524">Tworzy <see cref="T:System.Linq.Expressions.SwitchCase" /> obiektów, które zostaną użyte w <see cref="T:System.Linq.Expressions.SwitchExpression" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3524">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SwitchCase">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; testValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchCase SwitchCase(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; testValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchCase (body As Expression, testValues As IEnumerable(Of Expression)) As SwitchCase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchCase ^ SwitchCase(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ testValues);" />
      <MemberSignature Language="F#" Value="static member SwitchCase : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.Expression&gt; -&gt; System.Linq.Expressions.SwitchCase" Usage="System.Linq.Expressions.Expression.SwitchCase (body, testValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="testValues" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="8671b-3525">Treść przypadku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3525">The body of the case.</span>
          </span>
        </param>
        <param name="testValues">
          <span data-ttu-id="8671b-3526">Wartości testów sprawy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3526">The test values of the case.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3527">Tworzy <see cref="T:System.Linq.Expressions.SwitchCase" /> obiektów, które zostaną użyte w <see cref="T:System.Linq.Expressions.SwitchExpression" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3527">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3528">Utworzony <see cref="T:System.Linq.Expressions.SwitchCase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3528">The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3529">Wszystkie <xref:System.Linq.Expressions.SwitchCase> obiekty w <xref:System.Linq.Expressions.SwitchExpression> obiekt musi mieć tego samego typu, chyba że <xref:System.Linq.Expressions.SwitchExpression> ma typ `void`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3529">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="8671b-3530">Każdy <xref:System.Linq.Expressions.SwitchCase> obiektu jest niejawny `break` instrukcji, co oznacza, że nie istnieje żadne niejawne fall za pośrednictwem od jednej etykiety case do innej.</span><span class="sxs-lookup"><span data-stu-id="8671b-3530">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-3531">Poniższy przykład pokazuje, jak utworzyć wyrażenie, który reprezentuje instrukcji pomocą przełącznika, który ma przypadek domyślny.</span><span class="sxs-lookup"><span data-stu-id="8671b-3531">The following example demonstrates how to create an expression that represents a swtich statement that has a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchCase">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, params System.Linq.Expressions.Expression[] testValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchCase SwitchCase(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression[] testValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchCase (body As Expression, ParamArray testValues As Expression()) As SwitchCase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchCase ^ SwitchCase(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ testValues);" />
      <MemberSignature Language="F#" Value="static member SwitchCase : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression[] -&gt; System.Linq.Expressions.SwitchCase" Usage="System.Linq.Expressions.Expression.SwitchCase (body, testValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="testValues" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="8671b-3532">Treść przypadku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3532">The body of the case.</span>
          </span>
        </param>
        <param name="testValues">
          <span data-ttu-id="8671b-3533">Wartości testów sprawy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3533">The test values of the case.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3534">Tworzy <see cref="T:System.Linq.Expressions.SwitchCase" /> do użycia w <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3534">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> for use in a <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3535">Utworzony <see cref="T:System.Linq.Expressions.SwitchCase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3535">The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SymbolDocument">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3536">Tworzy wystąpienie <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3536">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="8671b-3537">A <see cref="T:System.String" /> można ustawić <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> równa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3537">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3538">Tworzy wystąpienie <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3538">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3539">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> zawierający <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3539">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string * Guid -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument (fileName, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="8671b-3540">A <see cref="T:System.String" /> można ustawić <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> równa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3540">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span>
          </span>
        </param>
        <param name="language">
          <span data-ttu-id="8671b-3541">A <see cref="T:System.Guid" /> można ustawić <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> równa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3541">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3542">Tworzy wystąpienie <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3542">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3543">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> zawierający <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> i <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> właściwości ustawione na określoną wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3543">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> properties set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language, valuetype System.Guid languageVendor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid, languageVendor As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language, Guid languageVendor);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string * Guid * Guid -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument (fileName, language, languageVendor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
        <Parameter Name="languageVendor" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="8671b-3544">A <see cref="T:System.String" /> można ustawić <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> równa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3544">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span>
          </span>
        </param>
        <param name="language">
          <span data-ttu-id="8671b-3545">A <see cref="T:System.Guid" /> można ustawić <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> równa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3545">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span>
          </span>
        </param>
        <param name="languageVendor">
          <span data-ttu-id="8671b-3546">A <see cref="T:System.Guid" /> można ustawić <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> równa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3546">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3547">Tworzy wystąpienie <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3547">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3548">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> zawierający <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> i <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> i <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> właściwości ustawione na określoną wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3548">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> properties set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor, Guid documentType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language, valuetype System.Guid languageVendor, valuetype System.Guid documentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid, languageVendor As Guid, documentType As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language, Guid languageVendor, Guid documentType);" />
      <MemberSignature Language="F#" Value="static member SymbolDocument : string * Guid * Guid * Guid -&gt; System.Linq.Expressions.SymbolDocumentInfo" Usage="System.Linq.Expressions.Expression.SymbolDocument (fileName, language, languageVendor, documentType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
        <Parameter Name="languageVendor" Type="System.Guid" />
        <Parameter Name="documentType" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="8671b-3549">A <see cref="T:System.String" /> można ustawić <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> równa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3549">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span>
          </span>
        </param>
        <param name="language">
          <span data-ttu-id="8671b-3550">A <see cref="T:System.Guid" /> można ustawić <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> równa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3550">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span>
          </span>
        </param>
        <param name="languageVendor">
          <span data-ttu-id="8671b-3551">A <see cref="T:System.Guid" /> można ustawić <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> równa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3551">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</span>
          </span>
        </param>
        <param name="documentType">
          <span data-ttu-id="8671b-3552">A <see cref="T:System.Guid" /> można ustawić <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> równa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3552">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3553">Tworzy wystąpienie <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3553">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3554">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> zawierający <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> i <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> i <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> i <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> właściwości ustawione na określoną wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3554">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> properties set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Throw">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3555">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący, zostanie zgłoszony wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3555">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Throw(class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Throw (value As Expression) As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Throw(System::Linq::Expressions::Expression ^ value);" />
      <MemberSignature Language="F#" Value="static member Throw : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Throw value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="8671b-3556">
            <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3556">An <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3557">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący, zostanie zgłoszony wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3557">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3558">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3558">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8671b-3559">Poniższy przykład przedstawia sposób tworzenia <xref:System.Linq.Expressions.TryExpression> obiektu, który używa <xref:System.Linq.Expressions.Expression.Throw%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-3559">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that uses the <xref:System.Linq.Expressions.Expression.Throw%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Throw(class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Throw(System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Throw : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Throw (value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="8671b-3560">
            <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3560">An <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-3561">Nowy <see cref="T:System.Type" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3561">The new <see cref="T:System.Type" /> of the expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3562">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący, zostanie zgłoszony wyjątek z danym typem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3562">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception with a given type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3563">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3563">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="expression.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3564">Zwraca tekstową reprezentację wartości <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3564">Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3565">Tekstowa reprezentacja <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3565">A textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryCatch (System.Linq.Expressions.Expression body, params System.Linq.Expressions.CatchBlock[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryCatch(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.CatchBlock[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCatch (body As Expression, ParamArray handlers As CatchBlock()) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryCatch(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberSignature Language="F#" Value="static member TryCatch : System.Linq.Expressions.Expression * System.Linq.Expressions.CatchBlock[] -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryCatch (body, handlers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Linq.Expressions.CatchBlock[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="8671b-3566">Treści bloku try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3566">The body of the try block.</span>
          </span>
        </param>
        <param name="handlers">
          <span data-ttu-id="8671b-3567">Tablica zero lub więcej <see cref="T:System.Linq.Expressions.CatchBlock" /> wyrażeń reprezentujących instrukcji catch, który ma zostać skojarzony z bloku try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3567">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3568">Tworzy <see cref="T:System.Linq.Expressions.TryExpression" /> reprezentujący bloku try z dowolnej liczby catch, instrukcje i ani błędów, ani bloku finally.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3568">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and neither a fault nor finally block.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3569">Utworzony <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3569">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8671b-3570">Poniższy przykład przedstawia sposób tworzenia <xref:System.Linq.Expressions.TryExpression> obiekt, który zawiera instrukcję catch.</span><span class="sxs-lookup"><span data-stu-id="8671b-3570">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatchFinally">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryCatchFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, params System.Linq.Expressions.CatchBlock[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryCatchFinally(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally, class System.Linq.Expressions.CatchBlock[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCatchFinally (body As Expression, finally As Expression, ParamArray handlers As CatchBlock()) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryCatchFinally(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally, ... cli::array &lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberSignature Language="F#" Value="static member TryCatchFinally : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression * System.Linq.Expressions.CatchBlock[] -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryCatchFinally (body, finally, handlers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Linq.Expressions.CatchBlock[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="8671b-3571">Treści bloku try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3571">The body of the try block.</span>
          </span>
        </param>
        <param name="finally">
          <span data-ttu-id="8671b-3572">Treści bloku finally.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3572">The body of the finally block.</span>
          </span>
        </param>
        <param name="handlers">
          <span data-ttu-id="8671b-3573">Tablica zero lub więcej <see cref="T:System.Linq.Expressions.CatchBlock" /> wyrażeń reprezentujących instrukcji catch, który ma zostać skojarzony z bloku try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3573">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3574">Tworzy <see cref="T:System.Linq.Expressions.TryExpression" /> reprezentujący bloku try z dowolnej liczby instrukcji catch i bloku finally.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3574">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and a finally block.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3575">Utworzony <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3575">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8671b-3576">Poniższy przykład przedstawia sposób tworzenia <xref:System.Linq.Expressions.TryExpression> obiekt, który zawiera instrukcję catch i finally, instrukcja.</span><span class="sxs-lookup"><span data-stu-id="8671b-3576">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement and a finally statement.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#48)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFault">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryFault (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression fault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryFault(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression fault) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFault (body As Expression, fault As Expression) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryFault(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ fault);" />
      <MemberSignature Language="F#" Value="static member TryFault : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryFault (body, fault)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fault" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="8671b-3577">Treści bloku try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3577">The body of the try block.</span>
          </span>
        </param>
        <param name="fault">
          <span data-ttu-id="8671b-3578">Treść bloku błędów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3578">The body of the fault block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3579">Tworzy <see cref="T:System.Linq.Expressions.TryExpression" /> reprezentujący bloku try z blokiem błędów i nie catch, instrukcje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3579">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a fault block and no catch statements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3580">Utworzony <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3580">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFinally">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryFinally(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFinally (body As Expression, finally As Expression) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryFinally(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally);" />
      <MemberSignature Language="F#" Value="static member TryFinally : System.Linq.Expressions.Expression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.TryExpression" Usage="System.Linq.Expressions.Expression.TryFinally (body, finally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="8671b-3581">Treści bloku try.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3581">The body of the try block.</span>
          </span>
        </param>
        <param name="finally">
          <span data-ttu-id="8671b-3582">Treści bloku finally.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3582">The body of the finally block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3583">Tworzy <see cref="T:System.Linq.Expressions.TryExpression" /> reprezentujący za pomocą bloku try finally blok i nie catch, instrukcje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3583">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a finally block and no catch statements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3584">Utworzony <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3584">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetActionType">
      <MemberSignature Language="C#" Value="public static bool TryGetActionType (Type[] typeArgs, out Type actionType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetActionType(class System.Type[] typeArgs, [out] class System.Type&amp; actionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetActionType (typeArgs As Type(), ByRef actionType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetActionType(cli::array &lt;Type ^&gt; ^ typeArgs, [Runtime::InteropServices::Out] Type ^ % actionType);" />
      <MemberSignature Language="F#" Value="static member TryGetActionType : Type[] *  -&gt; bool" Usage="System.Linq.Expressions.Expression.TryGetActionType (typeArgs, actionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" />
        <Parameter Name="actionType" Type="System.Type" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="8671b-3585">Tablica obiektów typu, które określają argumenty typu dla typu delegat elementu System.Action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3585">An array of Type objects that specify the type arguments for the System.Action delegate type.</span>
          </span>
        </param>
        <param name="actionType">
          <span data-ttu-id="8671b-3586">Po powrocie z tej metody zawiera typ delegat elementu System.Action ogólny, który zawiera argumenty określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3586">When this method returns, contains the generic System.Action delegate type that has specific type arguments.</span>
          </span>
          <span data-ttu-id="8671b-3587">Zawiera wartość null, jeśli nie ogólnego delegat elementu System.Action, który odpowiada <c>typeArgs</c>. Ten parametr jest przekazywany jako niezainicjowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3587">Contains null if there is no generic System.Action delegate that matches the <c>typeArgs</c>.This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3588">Tworzy <see cref="P:System.Linq.Expressions.Expression.Type" /> obiekt, który reprezentuje typ ogólny delegat elementu System.Action, który zawiera argumenty określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3588">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Action delegate type that has specific type arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3589">wartość true, jeśli typ ogólny delegat elementu System.Action został utworzony dla określonej <paramref name="typeArgs" />; wartość false w przeciwnym razie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3589">true if generic System.Action delegate type was created for specific <paramref name="typeArgs" />; false otherwise.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetFuncType">
      <MemberSignature Language="C#" Value="public static bool TryGetFuncType (Type[] typeArgs, out Type funcType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetFuncType(class System.Type[] typeArgs, [out] class System.Type&amp; funcType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetFuncType (typeArgs As Type(), ByRef funcType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetFuncType(cli::array &lt;Type ^&gt; ^ typeArgs, [Runtime::InteropServices::Out] Type ^ % funcType);" />
      <MemberSignature Language="F#" Value="static member TryGetFuncType : Type[] *  -&gt; bool" Usage="System.Linq.Expressions.Expression.TryGetFuncType (typeArgs, funcType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" />
        <Parameter Name="funcType" Type="System.Type" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="8671b-3590">Tablica obiektów typu, które określają argumenty typu dla typu delegata System.Func.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3590">An array of Type objects that specify the type arguments for the System.Func delegate type.</span>
          </span>
        </param>
        <param name="funcType">
          <span data-ttu-id="8671b-3591">Po powrocie z tej metody zawiera typ delegata System.Func ogólny, który zawiera argumenty określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3591">When this method returns, contains the generic System.Func delegate type that has specific type arguments.</span>
          </span>
          <span data-ttu-id="8671b-3592">Zawiera wartość null, jeśli nie Delegat ogólny System.Func, który odpowiada <c>typeArgs</c>. Ten parametr jest przekazywany jako niezainicjowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3592">Contains null if there is no generic System.Func delegate that matches the <c>typeArgs</c>.This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3593">Tworzy <see cref="P:System.Linq.Expressions.Expression.Type" /> obiekt, który reprezentuje typ ogólny delegata System.Func, który zawiera argumenty określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3593">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Func delegate type that has specific type arguments.</span>
          </span>
          <span data-ttu-id="8671b-3594">Ostatni argument typu określa zwracany typ delegata utworzony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3594">The last type argument specifies the return type of the created delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3595">wartość true, jeśli ogólny typ delegata System.Func została utworzona dla konkretnego <paramref name="typeArgs" />; wartość false w przeciwnym razie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3595">true if generic System.Func delegate type was created for specific <paramref name="typeArgs" />; false otherwise.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public virtual Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ Type { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type" Usage="System.Linq.Expressions.Expression.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3596">Pobiera typu statycznego wyrażenia, które to <see cref="T:System.Linq.Expressions.Expression" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3596">Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8671b-3597">
            <see cref="T:System.Type" /> Reprezentujący typu statycznego wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3597">The <see cref="T:System.Type" /> that represents the static type of the expression.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3598"><xref:System.Linq.Expressions.Expression.NodeType%2A> Jest typ węzła drzewa wyrażeń, natomiast <xref:System.Linq.Expressions.Expression.Type%2A> reprezentuje wspólnego języka wspólnego (CLR) typu statycznego wyrażenia, który reprezentuje węzeł.</span><span class="sxs-lookup"><span data-stu-id="8671b-3598">The <xref:System.Linq.Expressions.Expression.NodeType%2A> is the type of the expression tree node, whereas the <xref:System.Linq.Expressions.Expression.Type%2A> represents the static common language runtime (CLR) type of the expression that the node represents.</span></span> <span data-ttu-id="8671b-3599">Na przykład dwoma węzłami z różnych typów węzłów może mieć takie same <xref:System.Linq.Expressions.Expression.Type%2A>, jak pokazano w poniższym przykładzie kodu.</span><span class="sxs-lookup"><span data-stu-id="8671b-3599">For example, two nodes with different node types can have the same <xref:System.Linq.Expressions.Expression.Type%2A>, as shown in the following code example.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#36)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression TypeAs (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression TypeAs(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ TypeAs(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member TypeAs : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.TypeAs (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3600">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3600">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-3601">A <see cref="T:System.Type" /> można ustawić <see cref="P:System.Linq.Expressions.Expression.Type" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3601">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3602">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący jawnego odwołania lub konwersja boxing gdzie <see langword="null" /> jest podany, jeśli konwersja nie powiedzie się.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3602">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit reference or boxing conversion where <see langword="null" /> is supplied if the conversion fails.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3603">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> i <see cref="P:System.Linq.Expressions.Expression.Type" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3603">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3604"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Właściwość wynikowy <xref:System.Linq.Expressions.UnaryExpression> jest `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3604">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is `null`.</span></span> <span data-ttu-id="8671b-3605"><xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> właściwości są `false`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3605">The <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> properties are both `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-3606">Poniższy przykład pokazuje sposób użycia <xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29> metodę w celu utworzenia <xref:System.Linq.Expressions.UnaryExpression> reprezentujący konwersja odwołania wyrażenia nieprzyjmujące wartości liczby całkowitej. typ dopuszczający wartość null liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="8671b-3606">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29> method to create a <xref:System.Linq.Expressions.UnaryExpression> that represents the reference conversion of a non-nullable integer expression to the nullable integer type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#11)]
 [!code-vb[System.Linq.Expressions.Expression#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3607">
            <paramref name="expression" /> lub <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3607">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TypeEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TypeBinaryExpression TypeEqual (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TypeBinaryExpression TypeEqual(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TypeBinaryExpression ^ TypeEqual(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member TypeEqual : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.TypeBinaryExpression" Usage="System.Linq.Expressions.Expression.TypeEqual (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3608">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="T:System.Linq.Expressions.Expression" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3608">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="T:System.Linq.Expressions.Expression" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-3609">A <see cref="P:System.Linq.Expressions.Expression.Type" /> można ustawić <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3609">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3610">Tworzy <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> , porównuje tożsamości typu run-time.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3610">Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> that compares run-time type identity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3611">A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> dla którego <see cref="P:System.Linq.Expressions.Expression.NodeType" /> właściwości jest równa <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> i dla których <see cref="T:System.Linq.Expressions.Expression" /> i <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> właściwości są ustawione do określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3611">A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> and for which the <see cref="T:System.Linq.Expressions.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeIs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TypeBinaryExpression TypeIs (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TypeBinaryExpression TypeIs(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TypeBinaryExpression ^ TypeIs(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member TypeIs : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.TypeBinaryExpression" Usage="System.Linq.Expressions.Expression.TypeIs (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3612">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3612">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-3613">A <see cref="P:System.Linq.Expressions.Expression.Type" /> można ustawić <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3613">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3614">Tworzy <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3614">Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3615">A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> dla którego <see cref="P:System.Linq.Expressions.Expression.NodeType" /> właściwości jest równa <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> i dla których <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> i <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> właściwości są ustawione do określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3615">A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> and for which the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3616"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość wynikowy <xref:System.Linq.Expressions.UnaryExpression> reprezentuje <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="8671b-3616">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8671b-3617">Poniższy przykład pokazuje sposób użycia <xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29> metodę w celu utworzenia <xref:System.Linq.Expressions.TypeBinaryExpression> reprezentująca to test typ wartości ciągu przed <xref:System.Int32> typu.</span><span class="sxs-lookup"><span data-stu-id="8671b-3617">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29> method to create a <xref:System.Linq.Expressions.TypeBinaryExpression> that represents a type test of a string value against the <xref:System.Int32> type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#12)]
 [!code-vb[System.Linq.Expressions.Expression#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3618">
            <paramref name="expression" /> lub <paramref name="type" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3618">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UnaryPlus">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3619">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący Jednoargumentowa operacja plus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3619">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression UnaryPlus(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ UnaryPlus(System::Linq::Expressions::Expression ^ expression);" />
      <MemberSignature Language="F#" Value="static member UnaryPlus : System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.UnaryPlus expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3620">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3620">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3621">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący Jednoargumentowa operacja plus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3621">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3622">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> właściwość o określonej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3622">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3623"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Właściwość wynikowy <xref:System.Linq.Expressions.UnaryExpression> ustawiono implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-3623">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="8671b-3624"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3624">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-3625">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3625">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-3626">Są one w przeciwnym razie wartość false.</span><span class="sxs-lookup"><span data-stu-id="8671b-3626">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-3627">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-3627">Implementing Method</span></span>  
 <span data-ttu-id="8671b-3628">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-3628">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-3629">Jeśli `expression`. Typem jest typ zdefiniowany przez użytkownika, który definiuje operator, plus jednoargumentowy <xref:System.Reflection.MethodInfo> , który reprezentuje operator jest implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-3629">If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3630">W przeciwnym razie, jeśli `expression`. Typ jest typu liczbowego, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3630">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-3631">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-3631">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-3632">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-3632">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-3633">Jeśli `expression`. Typ można przypisać do typu argumentu metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3633">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-3634">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3634">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3635">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-3635">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-3636">`expression`. Typ jest typem wartościowym i odpowiedni typ wartości nie przyjmujące wartości jest równa argument typu implementującego metodę.</span><span class="sxs-lookup"><span data-stu-id="8671b-3636">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-3637">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-3637">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-3638">Jeśli metoda implementującej jest `null`, typ węzła jest `expression`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-3638">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="8671b-3639">Jeśli `expression`. Typ wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3639">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-3640">W przeciwnym razie zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3640">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3641">
            <paramref name="expression" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3641">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-3642">Jednoargumentowy operator plus nie jest zdefiniowany dla <paramref name="expression" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3642">The unary plus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression UnaryPlus(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ UnaryPlus(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member UnaryPlus : System.Linq.Expressions.Expression * System.Reflection.MethodInfo -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.UnaryPlus (expression, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3643">
            <see cref="T:System.Linq.Expressions.Expression" /> Można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3643">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="8671b-3644">A <see cref="T:System.Reflection.MethodInfo" /> można ustawić <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> równa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3644">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3645">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący Jednoargumentowa operacja plus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3645">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3646">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> zawierający <see cref="P:System.Linq.Expressions.Expression.NodeType" /> równa właściwości <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> i <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> równa określonej wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3646">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3647"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> Właściwość wynikowy <xref:System.Linq.Expressions.UnaryExpression> ustawiono implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-3647">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="8671b-3648"><xref:System.Linq.Expressions.Expression.Type%2A> Właściwość jest ustawiona na typ węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3648">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="8671b-3649">Jeśli węzeł zostało zniesione, <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> i <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> właściwości są `true`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3649">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="8671b-3650">Są one w przeciwnym razie wartość false.</span><span class="sxs-lookup"><span data-stu-id="8671b-3650">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="8671b-3651">Metoda implementująca</span><span class="sxs-lookup"><span data-stu-id="8671b-3651">Implementing Method</span></span>  
 <span data-ttu-id="8671b-3652">Następujące reguły określają implementującej metody dla operacji:</span><span class="sxs-lookup"><span data-stu-id="8671b-3652">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="8671b-3653">Jeśli `method` nie jest `null` i reprezentuje inny niż void, `static` (`Shared` w języku Visual Basic) metoda, która przyjmuje jeden argument jest implementującej metody dla węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3653">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="8671b-3654">Jeśli `expression`. Typem jest typ zdefiniowany przez użytkownika, który definiuje operator, plus jednoargumentowy <xref:System.Reflection.MethodInfo> , który reprezentuje operator jest implementującej metody.</span><span class="sxs-lookup"><span data-stu-id="8671b-3654">If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3655">W przeciwnym razie, jeśli `expression`. Typ jest typu liczbowego, jest implementującej metody `null`.</span><span class="sxs-lookup"><span data-stu-id="8671b-3655">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="8671b-3656">Typ węzła oraz węzły podniesione i niepodniesione</span><span class="sxs-lookup"><span data-stu-id="8671b-3656">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="8671b-3657">Jeśli implementującej metody nie jest `null`:</span><span class="sxs-lookup"><span data-stu-id="8671b-3657">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="8671b-3658">Jeśli `expression`. Typ można przypisać do typu argumentu metody wykonawcze, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3658">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="8671b-3659">Typ węzła jest typem zwracanym metody wykonawcze.</span><span class="sxs-lookup"><span data-stu-id="8671b-3659">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="8671b-3660">Jeśli następujące dwa warunki są spełnione, węzeł zostało zniesione i typ węzła jest typ dopuszczający wartość null, który odpowiada na zwracany typ metody wykonawcze:</span><span class="sxs-lookup"><span data-stu-id="8671b-3660">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="8671b-3661">`expression`. Typ jest typem wartościowym i odpowiedni typ wartości nie przyjmujące wartości jest równa argument typu implementującego metodę.</span><span class="sxs-lookup"><span data-stu-id="8671b-3661">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="8671b-3662">Zwracany typ metody wykonawcze jest typem wartości niedopuszczającym wartości.</span><span class="sxs-lookup"><span data-stu-id="8671b-3662">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="8671b-3663">Jeśli metoda implementującej jest `null`, typ węzła jest `expression`. Typ.</span><span class="sxs-lookup"><span data-stu-id="8671b-3663">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="8671b-3664">Jeśli `expression`. Typ wartości null, węzeł nie zostało zniesione.</span><span class="sxs-lookup"><span data-stu-id="8671b-3664">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="8671b-3665">W przeciwnym razie zostało zniesione węzła.</span><span class="sxs-lookup"><span data-stu-id="8671b-3665">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8671b-3666">
            <paramref name="expression" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3666">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8671b-3667">
            <paramref name="method" /> nie jest <see langword="null" /> i metody reprezentująca zwraca <see langword="void" />, nie jest <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic), lub nie ma dokładnie jednego argumentu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3667">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="8671b-3668">
            <paramref name="method" /> jest <see langword="null" /> i Jednoargumentowy operator plus nie jest zdefiniowany dla <paramref name="expression" />. Typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3668">
              <paramref name="method" /> is <see langword="null" /> and the unary plus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
          <span data-ttu-id="8671b-3669">- lub - <paramref name="expression" />. Typu (lub odpowiedni typ wartości null, jeśli jest to typ wartości null) nie jest możliwy do przypisania do typu argumentu metody reprezentowanej przez <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3669">-or-  <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Unbox (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Unbox(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Unbox(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Unbox : System.Linq.Expressions.Expression * Type -&gt; System.Linq.Expressions.UnaryExpression" Usage="System.Linq.Expressions.Expression.Unbox (expression, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="8671b-3670">
            <see cref="T:System.Linq.Expressions.Expression" /> Do rozpakowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3670">An <see cref="T:System.Linq.Expressions.Expression" /> to unbox.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="8671b-3671">Nowy <see cref="T:System.Type" /> wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3671">The new <see cref="T:System.Type" /> of the expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3672">Tworzy <see cref="T:System.Linq.Expressions.UnaryExpression" /> reprezentujący jawne rozpakowywania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3672">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit unboxing.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3673">Wystąpienie <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3673">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Variable">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8671b-3674">Tworzy <see cref="T:System.Linq.Expressions.ParameterExpression" /> węzeł, który może służyć do identyfikowania parametr lub zmienna w drzewo wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3674">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Variable (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Variable(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Variable(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Variable(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member Variable : Type -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Variable type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-3675">Typ parametr lub zmienna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3675">The type of the parameter or variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3676">Tworzy <see cref="T:System.Linq.Expressions.ParameterExpression" /> węzeł, który może służyć do identyfikowania parametr lub zmienna w drzewo wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3676">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3677">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> węzeł o określonej nazwie i typie</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3677">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Variable (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Variable(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Variable(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member Variable : Type * string -&gt; System.Linq.Expressions.ParameterExpression" Usage="System.Linq.Expressions.Expression.Variable (type, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="8671b-3678">Typ parametr lub zmienna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3678">The type of the parameter or variable.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="8671b-3679">Nazwa parametr lub zmienna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3679">The name of the parameter or variable.</span>
          </span>
          <span data-ttu-id="8671b-3680">Ta nazwa jest używana do debugowania lub drukowanie tylko do celów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3680">This name is used for debugging or printing purpose only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3681">Tworzy <see cref="T:System.Linq.Expressions.ParameterExpression" /> węzeł, który może służyć do identyfikowania parametr lub zmienna w drzewo wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3681">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3682">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> węzeł o określonej nazwie i typie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3682">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitChildren (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitChildren(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberSignature Language="F#" Value="abstract member VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression&#xA;override this.VisitChildren : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="expression.VisitChildren visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">
          <span data-ttu-id="8671b-3683">Wystąpienie <see cref="T:System.Func`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3683">An instance of <see cref="T:System.Func`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8671b-3684">Zmniejsza węzeł, a następnie wywołuje delegata gości na mniejsze wyrażenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3684">Reduces the node and then calls the visitor delegate on the reduced expression.</span>
          </span>
          <span data-ttu-id="8671b-3685">Metoda zgłasza wyjątek, jeśli węzeł nie jest obniżaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3685">The method throws an exception if the node is not reducible.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8671b-3686">Wyrażenie odwiedzana lub wyrażeniem, które powinny zostać użyte w drzewie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8671b-3686">The expression being visited, or an expression which should replace it in the tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8671b-3687">Zastępuje tę metodę, aby zapewnić logikę, aby zapoznać się z węzłów podrzędnych.</span><span class="sxs-lookup"><span data-stu-id="8671b-3687">Override this method to provide logic to walk the node's children.</span></span> <span data-ttu-id="8671b-3688">Typowa implementacja wywołuje obiekt odwiedzający. Odwiedź stronę na każdym z jego elementów podrzędnych, a ewentualne je zmienić, powinna zwrócić nową kopię sam z zmodyfikowane elementy podrzędne.</span><span class="sxs-lookup"><span data-stu-id="8671b-3688">A typical implementation will call visitor.Visit on each of its children, and if any of them change, should return a new copy of itself with the modified children.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>