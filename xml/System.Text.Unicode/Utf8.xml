<Type Name="Utf8" FullName="System.Text.Unicode.Utf8">
  <Metadata><Meta Name="ms.openlocfilehash" Value="33237e25e2292e543bc5e780f50fecc9883cb67e" /><Meta Name="ms.sourcegitcommit" Value="cfc0e4215fd0d259582ada2141878befd7c3c8c6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/12/2019" /><Meta Name="ms.locfileid" Value="67855502" /></Metadata><TypeSignature Language="C#" Value="public static class Utf8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Utf8 extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Unicode.Utf8" />
  <TypeSignature Language="VB.NET" Value="Public Class Utf8" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8 abstract sealed" />
  <TypeSignature Language="F#" Value="type Utf8 = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia metody statyczne, które konwertują dane podzielony między kodowania UTF-8 i UTF-16.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="FromUtf16">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus FromUtf16 (ReadOnlySpan&lt;char&gt; source, Span&lt;byte&gt; destination, out int charsRead, out int bytesWritten, bool replaceInvalidSequences = true, bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus FromUtf16(valuetype System.ReadOnlySpan`1&lt;char&gt; source, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; charsRead, [out] int32&amp; bytesWritten, bool replaceInvalidSequences, bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Unicode.Utf8.FromUtf16(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUtf16 (source As ReadOnlySpan(Of Char), destination As Span(Of Byte), ByRef charsRead As Integer, ByRef bytesWritten As Integer, Optional replaceInvalidSequences As Boolean = true, Optional isFinalBlock As Boolean = true) As OperationStatus" />
      <MemberSignature Language="F#" Value="static member FromUtf16 : ReadOnlySpan&lt;char&gt; * Span&lt;byte&gt; *  *  * bool * bool -&gt; System.Buffers.OperationStatus" Usage="System.Text.Unicode.Utf8.FromUtf16 (source, destination, charsRead, bytesWritten, replaceInvalidSequences, isFinalBlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="charsRead" Type="System.Int32" RefType="out" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="replaceInvalidSequences" Type="System.Boolean" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">Zakres znaków tylko do odczytu kodowany w formacie UTF-16.</param>
        <param name="destination">UTF-8 zakodowany zakresu bajtów.</param>
        <param name="charsRead">Gdy metoda zwraca, liczbę znaków czytanych od <paramref name="source" />.</param>
        <param name="bytesWritten">Gdy metoda zwraca, liczbę znaków napisanych do <paramref name="destination" />.</param>
        <param name="replaceInvalidSequences"><see langword="true" /> Aby zamienić nieprawidłowe sekwencje UTF-16 w <paramref name="source" /> z U + FFFD; <see langword="false" /> do zwrócenia <see cref="F:System.Buffers.OperationStatus.InvalidData" /> Jeśli znaleziono nieprawidłowe znaki w <paramref name="source" />.</param>
        <param name="isFinalBlock"><see langword="true" /> Jeśli metoda nie powinna zwracać <see cref="F:System.Buffers.OperationStatus.InvalidData" />; w przeciwnym razie <see langword="false" />.</param>
        <summary>Konwertuje zakres znaków UTF-16 zakresu zakodowane bajtów UTF-8.</summary>
        <returns>Wartość, która wskazuje, że stan konwersji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

### Remarks

Ta metoda odnosi się do [UTFEncoding.GetBytes](xref:System.Text.UTF8Encoding.GetBytes%2A) metody, z wyjątkiem, że ma inną Konwencją wywoływania, mechanizmy obsługi różnych błędów i różną charakterystykę wydajności. 

Jeśli jest "replaceInvalidSequences" `true`, metoda zastępuje wszelkie źle sformułowane podciągów w `source` z U + FFFD w `destination` i kontynuuje przetwarzanie, pozostała część buforu. W przeciwnym razie metoda zwraca <xref:System.Buffers.OperationStatus.InvalidData?displayProperty=nameWithType> jeśli wykryje nieważną istnienie sekwencji źle sformułowane.

Jeśli metoda zwraca kod błędu, parametry wyjściowe wskazują, ile danych zostało pomyślnie transkodowane i lokalizację podsekwencję źle sformułowane można określić na podstawie tych wartości.

Jeśli jest "replaceInvalidSequences" `true`, metoda nigdy nie zwraca <xref:System.Buffers.OperationStatus.InvalidData?displayProperty=nameWithType>. Jeśli jest "isFinalBlock" `true`, Metoda ta nie jest nigdy nie zwraca <xref:System.Buffers.OperationStatus.NeedMoreData?displayProperty=nameWithType>.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUtf16">
      <MemberSignature Language="C#" Value="public static System.Buffers.OperationStatus ToUtf16 (ReadOnlySpan&lt;byte&gt; source, Span&lt;char&gt; destination, out int bytesRead, out int charsWritten, bool replaceInvalidSequences = true, bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Buffers.OperationStatus ToUtf16(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; bytesRead, [out] int32&amp; charsWritten, bool replaceInvalidSequences, bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Unicode.Utf8.ToUtf16(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@,System.Int32@,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUtf16 (source As ReadOnlySpan(Of Byte), destination As Span(Of Char), ByRef bytesRead As Integer, ByRef charsWritten As Integer, Optional replaceInvalidSequences As Boolean = true, Optional isFinalBlock As Boolean = true) As OperationStatus" />
      <MemberSignature Language="F#" Value="static member ToUtf16 : ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; *  *  * bool * bool -&gt; System.Buffers.OperationStatus" Usage="System.Text.Unicode.Utf8.ToUtf16 (source, destination, bytesRead, charsWritten, replaceInvalidSequences, isFinalBlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.OperationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="bytesRead" Type="System.Int32" RefType="out" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="replaceInvalidSequences" Type="System.Boolean" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">Zakres zakodowany tylko do odczytu znaków UTF-8.</param>
        <param name="destination">Zakres bajtów zakodowany UTF-8...</param>
        <param name="bytesRead">Gdy metoda zwraca, liczba bajtów odczytanych z <paramref name="source" />.</param>
        <param name="charsWritten">Gdy metoda zwraca, liczbę znaków napisanych do <paramref name="destination" />.</param>
        <param name="replaceInvalidSequences"><see langword="true" /> Aby zamienić nieprawidłowe sekwencje UTF-8 w <paramref name="source" /> z U + FFFD; <see langword="false" /> do zwrócenia <see cref="F:System.Buffers.OperationStatus.InvalidData" /> Jeśli znaleziono nieprawidłowe znaki w <paramref name="source" />.</param>
        <param name="isFinalBlock"><see langword="true" /> Jeśli metoda nie powinna zwracać <see cref="F:System.Buffers.OperationStatus.InvalidData" />; w przeciwnym razie <see langword="false" />.</param>
        <summary>Konwertuje zakresu zakodowane jako tylko do odczytu bajtów UTF-8 zakres znaków UTF-16 zakodowany.</summary>
        <returns>Wartość, która wskazuje stan konwersji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

### Remarks

Ta metoda odnosi się do [UTFEncoding.GetChars](xref:System.Text.UTF8Encoding.GetChars%2A) metody, z wyjątkiem, że ma inną Konwencją wywoływania, mechanizmy obsługi różnych błędów i różną charakterystykę wydajności. 

Jeśli jest "replaceInvalidSequences" `true`, metoda zastępuje wszelkie źle sformułowane podciągów w `source` z U + FFFD w `destination` i kontynuuje przetwarzanie, pozostała część buforu. W przeciwnym razie metoda zwraca <xref:System.Buffers.OperationStatus.InvalidData?displayProperty=nameWithType> jeśli wykryje nieważną istnienie sekwencji źle sformułowane.

Jeśli metoda zwraca kod błędu, parametry wyjściowe wskazują, ile danych zostało pomyślnie transkodowane i lokalizację podsekwencję źle sformułowane można określić na podstawie tych wartości.

Jeśli jest "replaceInvalidSequences" `true`, metoda nigdy nie zwraca <xref:System.Buffers.OperationStatus.InvalidData?displayProperty=nameWithType>. Jeśli jest "isFinalBlock" `true`, Metoda ta nie jest nigdy nie zwraca <xref:System.Buffers.OperationStatus.NeedMoreData?displayProperty=nameWithType>.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
