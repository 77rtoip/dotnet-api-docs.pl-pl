<Type Name="ApplicationActivator" FullName="System.Runtime.Hosting.ApplicationActivator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="09e881a31fa9ec7f6e692c1d532cec070a27ae58" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30564397" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ApplicationActivator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ApplicationActivator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Hosting.ApplicationActivator" />
  <TypeSignature Language="VB.NET" Value="Public Class ApplicationActivator" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationActivator" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia klasę podstawową dla aktywacji opartej na manifest zestawów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Istnieje jedno wystąpienie wyznaczonych <xref:System.Runtime.Hosting.ApplicationActivator> klasy w każdym <xref:System.AppDomain> na aktywację z których wszystkie są kierowane wywołania. <xref:System.AppDomainManager> Dla bieżącego <xref:System.AppDomain> zapewniają własne niestandardowe <xref:System.Runtime.Hosting.ApplicationActivator> w tym celu. Jeśli niestandardowego <xref:System.Runtime.Hosting.ApplicationActivator> nie zostanie podany, wystąpienie domyślne <xref:System.Runtime.Hosting.ApplicationActivator> jest tworzony.  
  
 W poniższych krokach opisano zachowanie domyślne <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> implementacji metody:  
  
1.  Sprawdza, czy <xref:System.ActivationContext> dodatków być aktywowana dopasowań <xref:System.ActivationContext> bieżącej domeny; w przeciwnym razie będzie kontynuowane do kroku 2. W przeciwnym razie wykonuje zestaw i zwraca wynik w dojścia obiektu.  
  
2.  Aktywuje dodatku w nowym <xref:System.AppDomain>. Podjąć następujące kroki, aby zainicjować nowe <xref:System.AppDomain> przy użyciu <xref:System.Runtime.Hosting.ActivationArguments> dla dodatku.  
  
    1.  Tworzy nowy <xref:System.AppDomainSetup> przy użyciu <xref:System.Runtime.Hosting.ActivationArguments> obiekt, który zawiera kontekstu aktywacji dla dodatku.  
  
    2.  Wywołania <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> metodę w celu utworzenia nowej domeny za pomocą <xref:System.AppDomainSetup> obiektu.  
  
    3.  <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> Wywołania metody <xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=nameWithType> metoda uzyskania <xref:System.Security.Policy.ApplicationTrust> obiektu dla dodatku. Jeśli <xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A> zwraca `true`, dodatek jest wykonywana. Jeśli nie, <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> zgłasza <xref:System.Security.Policy.PolicyException> wskazujący, że nie można uzyskać uprawnienia do wykonywania.  
  
    4.  Jeśli dodatek jest zaufany do uruchomienia, a następnie nowy <xref:System.AppDomain> został utworzony i skonfigurowany do <xref:System.ActivationContext> dodatków, i dodatek jest załadowany i wykonywane.  
  
    5.  Wynik aktywacji dodatek jest zwracana w dojścia obiektu.  
  
 Niestandardowe aktywatora można dostosować aktywacji dodatek do określonego zestawu okolicznościach. Na przykład aktywatora niestandardowych można znaleźć istniejącego <xref:System.AppDomain> aktywować tego dodatku zamiast tworzenia nowej domeny zawsze.  
  
 W poniższych krokach opisano zachowanie niestandardowego <xref:System.Runtime.Hosting.ApplicationActivator> włączającą dodatku w istniejącym <xref:System.AppDomain>:  
  
1.  Niestandardowe aktywatora znajduje domeny, który ma taką samą <xref:System.ActivationContext> jako dodatek, który jest aktywowane.  
  
2.  Jeśli <xref:System.ActivationContext> nigdy nie zarejestrowano przed w procesie, tworzy nowe niestandardowe aktywatora <xref:System.AppDomain> dla tego <xref:System.ActivationContext> przez wywołanie metody <xref:System.AppDomain.CreateDomain%2A> metody bezpośrednio lub delegowanie działanie <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> w klasie podstawowej.  
  
3.  W przypadku istniejącej domeny o tej samej <xref:System.ActivationContext>, a następnie można oddelegować aktywatora <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> wywołanie metody <xref:System.Runtime.Hosting.ApplicationActivator> w domenie docelowej. Należy pamiętać, że będzie to wywołanie międzydomenowego <xref:System.Runtime.Hosting.ApplicationActivator> który znajduje się w celu <xref:System.AppDomain>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób uzyskiwania <xref:System.Runtime.Hosting.ApplicationActivator> obiektu z bieżącego <xref:System.AppDomain.DomainManager%2A> dla manifest aplikacji.  
  
 [!code-csharp[System.Runtime.Hosting.ApplicationActivator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.Hosting.ApplicationActivator/cs/program.cs#1)]
 [!code-vb[System.Runtime.Hosting.ApplicationActivator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.Hosting.ApplicationActivator/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationActivator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ApplicationActivator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.Hosting.ApplicationActivator" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstance">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy wystąpienie aplikacji do aktywacji, przy użyciu kontekstu aktywacji, który identyfikuje aplikację.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
      </Parameters>
      <Docs>
        <param name="activationContext">
          <see cref="T:System.ActivationContext" /> , Które identyfikują aplikacji, aby aktywować.</param>
        <summary>Tworzy wystąpienie aplikacji do aktywacji, przy użyciu kontekstu aktywacji określony.</summary>
        <returns>
          <see cref="T:System.Runtime.Remoting.ObjectHandle" /> Czyli otoki dla wartości zwracanej wykonywania aplikacji. Zwracana wartość musi być odkodowany dostępu do rzeczywistego obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest przeznaczona dla aktywacji na podstawie manifestu aplikacji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="activationContext" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext, string[] activationCustomData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext, cli::array &lt;System::String ^&gt; ^ activationCustomData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
        <Parameter Name="activationCustomData" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="activationContext">
          <see cref="T:System.ActivationContext" /> , Które identyfikują aplikacji, aby aktywować.</param>
        <param name="activationCustomData">Dane niestandardowe aktywacji.</param>
        <summary>Tworzy wystąpienie aplikacji do aktywacji, używając kontekstu aktywacji określonej i danych niestandardowych aktywacji.</summary>
        <returns>
          <see cref="T:System.Runtime.Remoting.ObjectHandle" /> Czyli otoki dla wartości zwracanej wykonywania aplikacji. Zwracana wartość musi być odkodowany dostępu do rzeczywistego obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest przeznaczona dla aktywacji na podstawie manifestu aplikacji. Dane aktywacji składa się z informacje, takie jak część ciągu zapytania adresu URL.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="activationContext" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceHelper">
      <MemberSignature Language="C#" Value="protected static System.Runtime.Remoting.ObjectHandle CreateInstanceHelper (AppDomainSetup adSetup);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceHelper(class System.AppDomainSetup adSetup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CreateInstanceHelper (adSetup As AppDomainSetup) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceHelper(AppDomainSetup ^ adSetup);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="adSetup" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="adSetup">
          <see cref="T:System.AppDomainSetup" /> Którego <see cref="P:System.AppDomainSetup.ActivationArguments" /> właściwości identyfikuje aplikację do aktywacji.</param>
        <summary>Tworzy wystąpienie aplikacji przy użyciu określonego <see cref="T:System.AppDomainSetup" /> obiektu.</summary>
        <returns>
          <see cref="T:System.Runtime.Remoting.ObjectHandle" /> Czyli otoki dla wartości zwracanej wykonywania aplikacji. Zwracana wartość musi być odkodowany dostępu do rzeczywistego obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest przeznaczona dla aktywacji na podstawie manifestu aplikacji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.AppDomainSetup.ActivationArguments" /> Właściwość <paramref name="adSetup" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Security.Policy.PolicyException">Wystąpienie aplikacji nie można wykonać operacji, ponieważ ustawienia zasad w bieżącej domenie aplikacji nie zostaną określone uprawnienia dla tej aplikacji do uruchamiania.</exception>
      </Docs>
    </Member>
  </Members>
</Type>