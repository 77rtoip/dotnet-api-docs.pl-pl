<Type Name="DependencyPropertyHelper" FullName="System.Windows.DependencyPropertyHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="991865ade837b92661fd5f42757182b3de9f77a8" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69445021" /></Metadata><TypeSignature Language="C#" Value="public static class DependencyPropertyHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DependencyPropertyHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyPropertyHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyHelper abstract sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia pojedynczą metodę pomocnika<see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />(), która raportuje źródło systemu właściwości dla efektywnej wartości właściwości zależności.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 System[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] właściwości jest dość skomplikowany i opiera się na ocenie wartości, które potencjalnie mogą pochodzić z różnych wejść, na podstawie ustalonego pierwszeństwa wyznaczania wartości. Ponieważ te źródła potencjalnie pochodzą z kodu czasu wykonywania, od skompilowanego znacznika lub nawet z ustawień użytkownika w czasie wykonywania, może być przydatne, aby dokładnie wiedzieć, który uczestnik w systemie wartości właściwości zależności ustanowił wartość uzyskaną podczas wywoływania <xref:System.Windows.DependencyObject.GetValue%2A>w czasie wykonywania tej właściwości. Jeśli wartość pochodzi z innego źródła niż zamierzone, może być konieczne dostosowanie pewnego aspektu aplikacji. Źródłem wartości może być styl, motyw, wartość lokalna, animacja, powiązanie lub wartość oparta na czasie wykonywania, taka jak ustawienia systemowe przez motywy lub zasoby systemowe. Aby uzyskać więcej informacji, zobacz [pierwszeństwo wartości właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).  
  
 Zamiast określonego wystąpienia właściwości obiektu, są metadane właściwości, które są ogólnie dostępne dla właściwości. Metadane właściwości są dostępne przez wywołanie <xref:System.Windows.DependencyProperty.GetMetadata%2A> i zbadanie zwracanej <xref:System.Windows.PropertyMetadata> (lub jednej z kilku możliwych klas pochodnych, do których rzutuje metadane zwracanej właściwości).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetValueSource">
      <MemberSignature Language="C#" Value="public static System.Windows.ValueSource GetValueSource (System.Windows.DependencyObject dependencyObject, System.Windows.DependencyProperty dependencyProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.ValueSource GetValueSource(class System.Windows.DependencyObject dependencyObject, class System.Windows.DependencyProperty dependencyProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::ValueSource GetValueSource(System::Windows::DependencyObject ^ dependencyObject, System::Windows::DependencyProperty ^ dependencyProperty);" />
      <MemberSignature Language="F#" Value="static member GetValueSource : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.ValueSource" Usage="System.Windows.DependencyPropertyHelper.GetValueSource (dependencyObject, dependencyProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ValueSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
        <Parameter Name="dependencyProperty" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">Element, który zawiera <paramref name="dependencyProperty" /> informacje o programie do raportowania.</param>
        <param name="dependencyProperty">Identyfikator dla właściwości zależności, dla której mają być raportowane informacje.</param>
        <summary>Zwraca strukturę, która zgłasza różne metadane i charakterystykę systemu właściwości określonej właściwości zależności w konkretnym <see cref="T:System.Windows.DependencyObject" />elemencie.</summary>
        <returns><see cref="T:System.Windows.ValueSource" /> Struktura, która raportuje określone informacje.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy wywołać tę metodę w kontekście w taki sposób, że późnych uczestników określania wartości właściwości mogą działać na właściwości. Na przykład powiązania mogą nie być aktywne we właściwości, chyba że wszystkie elementy uczestników w drzewie elementów są załadowane, a powiązanie asynchroniczne jest propagowane, a obiekt źródłowy powiązania jest połączony. Podobnie należy udostępnić zasoby, w tym wszystkie niezbędne słowniki motywów.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsTemplatedValueDynamic">
      <MemberSignature Language="C#" Value="public static bool IsTemplatedValueDynamic (System.Windows.DependencyObject elementInTemplate, System.Windows.DependencyProperty dependencyProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTemplatedValueDynamic(class System.Windows.DependencyObject elementInTemplate, class System.Windows.DependencyProperty dependencyProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyHelper.IsTemplatedValueDynamic(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsTemplatedValueDynamic(System::Windows::DependencyObject ^ elementInTemplate, System::Windows::DependencyProperty ^ dependencyProperty);" />
      <MemberSignature Language="F#" Value="static member IsTemplatedValueDynamic : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; bool" Usage="System.Windows.DependencyPropertyHelper.IsTemplatedValueDynamic (elementInTemplate, dependencyProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementInTemplate" Type="System.Windows.DependencyObject" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dependencyProperty" Type="System.Windows.DependencyProperty" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="elementInTemplate">Element, który należy do wystąpienia szablonu.</param>
        <param name="dependencyProperty">Właściwość zależności.</param>
        <summary>Wskazuje, czy określony element należy do wystąpienia szablonu, który definiuje wartość określonej właściwości, która może ulec zmianie w czasie wykonywania na podstawie zmian w innym miejscu.</summary>
        <returns><see langword="true" />Jeśli <paramref name="elementInTemplate" /> należy do wystąpienia szablonu, który definiuje wartość określonej właściwości, która może ulec zmianie w czasie wykonywania na podstawie zmian w innym miejscu; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
Przykłady wartości, które mogą ulec zmianie w czasie wykonywania na podstawie zmian w innym miejscu <xref:System.Windows.Data.Binding>są <xref:System.Windows.TemplateBindingExtension> wartościami <xref:System.Windows.DynamicResourceExtension> ustawionymi przez i obiekty.

Ta metoda zawiera bardziej szczegółowe informacje w przypadkach, gdy wartość <xref:System.Windows.ValueSource.BaseValueSource?displayProperty=nameWithType> właściwości jest. <xref:System.Windows.BaseValueSource.ParentTemplate?displayProperty=nameWithType>
Informacje są głównie używane do narzędzi diagnostycznych.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
