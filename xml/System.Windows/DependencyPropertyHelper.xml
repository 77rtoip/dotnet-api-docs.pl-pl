<Type Name="DependencyPropertyHelper" FullName="System.Windows.DependencyPropertyHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a92c758627e8518b493edf17e3bc3f08b388edc5" /><Meta Name="ms.sourcegitcommit" Value="f9e71795ba0f9c2dfaa74bec233343ed0f3ffd99" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/14/2019" /><Meta Name="ms.locfileid" Value="57962345" /></Metadata><TypeSignature Language="C#" Value="public static class DependencyPropertyHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DependencyPropertyHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyPropertyHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyHelper abstract sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia metody pomocnika pojedynczego (<see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />) Raporty właściwości systemowe źródło efektywne wartości właściwości zależności.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] System właściwości jest dosyć złożona i zależy od racjonalizacji wartości, które potencjalnie pochodzić z różnych danych wejściowych, oparte na pierwszeństwo oznaczanie ustalonych wartości. Ponieważ te źródła potencjalnie pochodzą od czasu wykonywania kodu, skompilowany kod znaczników, lub nawet od ustawień użytkownika w czasie wykonywania, mogą być przydatne wiedzieli dokładnie uczestnika, który w systemie wartość właściwości zależności określone wartości, należy uzyskać podczas wywoływania <xref:System.Windows.DependencyObject.GetValue%2A>w czasie wykonywania dla tej właściwości. Jeśli wartość pochodzi z innego źródła, niż gdyby planowano, może być konieczne dostosowanie niektórych aspektów aplikacji. Źródło wartości może być styl motyw, wartości lokalnej, animacji, powiązanie i wartość na podstawie czasu wykonywania, takie jak ustawienia systemu za pośrednictwem motywy lub zasobów systemowych. Aby uzyskać więcej informacji, zobacz [następstwo wartości właściwości](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).  
  
 Innym mechanizmem, który zgłasza właściwości ogólnie rzecz biorąc, zamiast określonego wystąpienia właściwości do obiektu, jest metadanych właściwości modelu. Metadane właściwości jest znalezienia przez wywołanie metody <xref:System.Windows.DependencyProperty.GetMetadata%2A> i sprawdzając zwracanego <xref:System.Windows.PropertyMetadata> (lub jeden z kilku możliwych klas pochodnych, które metadane właściwości zwracany jest castable do).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetValueSource">
      <MemberSignature Language="C#" Value="public static System.Windows.ValueSource GetValueSource (System.Windows.DependencyObject dependencyObject, System.Windows.DependencyProperty dependencyProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.ValueSource GetValueSource(class System.Windows.DependencyObject dependencyObject, class System.Windows.DependencyProperty dependencyProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::ValueSource GetValueSource(System::Windows::DependencyObject ^ dependencyObject, System::Windows::DependencyProperty ^ dependencyProperty);" />
      <MemberSignature Language="F#" Value="static member GetValueSource : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.ValueSource" Usage="System.Windows.DependencyPropertyHelper.GetValueSource (dependencyObject, dependencyProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ValueSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
        <Parameter Name="dependencyProperty" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">Element, który zawiera <paramref name="dependencyProperty" /> do informacji raportu.</param>
        <param name="dependencyProperty">Identyfikator właściwości zależności, aby informacje o raporcie dla.</param>
        <summary>Zwraca strukturę, któremu podlega różnych właściwości i metadanych systemu cechy właściwość określona zależność na danym <see cref="T:System.Windows.DependencyObject" />.</summary>
        <returns>A <see cref="T:System.Windows.ValueSource" /> struktury, które przedstawia informacje szczegółowe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Taki sposób, że późno uczestników określenie wartości właściwości są w stanie działać we właściwości, powinna wywołać tę metodę w kontekście. Na przykład nie może być aktywny we właściwości powiązania, chyba że zostaną załadowane wszystkie elementy uczestnika w drzewie elementów wiązania asynchronicznego jest propagowany i obiektu źródłowego powiązania jest połączony. Podobnie zasobów, w tym wszystkich niezbędnych motyw słowników powinny być dostępne.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsTemplatedValueDynamic">
      <MemberSignature Language="C#" Value="public static bool IsTemplatedValueDynamic (System.Windows.DependencyObject elementInTemplate, System.Windows.DependencyProperty dependencyProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTemplatedValueDynamic(class System.Windows.DependencyObject elementInTemplate, class System.Windows.DependencyProperty dependencyProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyHelper.IsTemplatedValueDynamic(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsTemplatedValueDynamic(System::Windows::DependencyObject ^ elementInTemplate, System::Windows::DependencyProperty ^ dependencyProperty);" />
      <MemberSignature Language="F#" Value="static member IsTemplatedValueDynamic : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; bool" Usage="System.Windows.DependencyPropertyHelper.IsTemplatedValueDynamic (elementInTemplate, dependencyProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementInTemplate" Type="System.Windows.DependencyObject" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dependencyProperty" Type="System.Windows.DependencyProperty" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="elementInTemplate">Element, który należy do wystąpienia szablonu.</param>
        <param name="dependencyProperty">Właściwości zależności.</param>
        <summary>Wskazuje, czy określony element należy do wystąpienia szablonu, który definiuje wartość dla określonej właściwości, które mogą ulec zmianie w oparciu o zmiany w innym miejscu w czasie wykonywania.</summary>
        <returns><see langword="true" /> Jeśli <paramref name="elementInTemplate" /> należy do wystąpienia szablonu, który definiuje wartość dla określonej właściwości, które mogą ulec zmianie w czasie wykonywania, oparta na zmianach w innym miejscu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
Przykładowe wartości, które mogą ulec zmianie w oparciu o zmiany w innym miejscu w czasie wykonywania są wartościami ustawionymi przez <xref:System.Windows.Data.Binding>, <xref:System.Windows.TemplateBindingExtension> i <xref:System.Windows.DynamicResourceExtension> obiektów.

Ta metoda zapewnia bardziej szczegółowe informacje w przypadkach, gdzie wartość <xref:System.Windows.ValueSource.BaseValueSource?displayProperty=nameWithType> właściwość <xref:System.Windows.BaseValueSource.ParentTemplate?displayProperty=nameWithType>.
Niniejsze informacje są użytkowania do narzędzia diagnostyczne.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>