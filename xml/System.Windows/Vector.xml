<Type Name="Vector" FullName="System.Windows.Vector">
  <TypeSignature Language="C#" Value="public struct Vector : IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Vector extends System.ValueType implements class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Vector" />
  <TypeSignature Language="VB.NET" Value="Public Structure Vector&#xA;Implements IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Vector : IFormattable" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.VectorConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.VectorValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0e082-101">Reprezentuje przemieszczenie przestrzeni 2-D.</span><span class="sxs-lookup"><span data-stu-id="0e082-101">Represents a displacement in 2-D space.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e082-102">A <xref:System.Windows.Point> reprezentuje stałej pozycji, ale <xref:System.Windows.Vector> reprezentuje kierunku i wielkości (na przykład szybkość pracy lub przyspieszania).</span><span class="sxs-lookup"><span data-stu-id="0e082-102">A <xref:System.Windows.Point> represents a fixed position, but a <xref:System.Windows.Vector> represents a direction and a magnitude (for example, velocity or acceleration).</span></span> <span data-ttu-id="0e082-103">W związku z tym punkty końcowe segment linii są punkty, ale ich różnica jest wektorem; oznacza to kierunku i długości tego wiersza segmentu.</span><span class="sxs-lookup"><span data-stu-id="0e082-103">Thus, the endpoints of a line segment are points but their difference is a vector; that is, the direction and length of that line segment.</span></span>  
  
 <span data-ttu-id="0e082-104">W języku XAML, separator <xref:System.Windows.Vector.X%2A> i <xref:System.Windows.Vector.Y%2A> wartości <xref:System.Windows.Vector> może być przecinkiem i spacją.</span><span class="sxs-lookup"><span data-stu-id="0e082-104">In XAML, the delimiter between the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> values of a <xref:System.Windows.Vector> can be either a comma or a space.</span></span>  
  
 <span data-ttu-id="0e082-105">Niektóre kultur może używać przecinka jako dziesiętne ogranicznik zamiast znak kropki.</span><span class="sxs-lookup"><span data-stu-id="0e082-105">Some cultures might use the comma character as the decimal delimiter instead of the period character.</span></span> <span data-ttu-id="0e082-106">Przetwarzanie Niezmienna kultura XAML domyślne ustawienia en-us, w większości implementacji procesora XAML oraz oczekuje okres dziesiętną ogranicznikiem.</span><span class="sxs-lookup"><span data-stu-id="0e082-106">XAML processing for invariant culture defaults to en-US in most XAML processor implementations, and expects the period to be the decimal delimiter.</span></span> <span data-ttu-id="0e082-107">Należy unikać używania przecinka jako separator dziesiętny w przypadku określania <xref:System.Windows.Vector> w języku XAML, ponieważ, który będzie mogą powodować konfliktów z konwersji typu ciąg <xref:System.Windows.Vector> wartość do atrybutu <xref:System.Windows.Vector.X%2A> i <xref:System.Windows.Vector.Y%2A> składników.</span><span class="sxs-lookup"><span data-stu-id="0e082-107">You should avoid using the comma character as the decimal delimiter if specifying a <xref:System.Windows.Vector> in XAML, because that will clash with the string type conversion of a <xref:System.Windows.Vector> attribute value into the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> components.</span></span>  
  
<a name="xamlAttributeUsage_Vector"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="0e082-108">Użycie atrybutu języka XAML</span><span class="sxs-lookup"><span data-stu-id="0e082-108">XAML Attribute Usage</span></span>  
  
```  
<object property="x,y"/>  
-or-  
<object property="x y"/>  
```  
  
<a name="xamlValues_Vector"></a>   
## <a name="xaml-values"></a><span data-ttu-id="0e082-109">Wartości XAML</span><span class="sxs-lookup"><span data-stu-id="0e082-109">XAML Values</span></span>  
 <span data-ttu-id="0e082-110">*x*</span><span class="sxs-lookup"><span data-stu-id="0e082-110">*x*</span></span>  
 <span data-ttu-id="0e082-111">Vector X składnika.</span><span class="sxs-lookup"><span data-stu-id="0e082-111">The vector's X component.</span></span> <span data-ttu-id="0e082-112">Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Vector.X%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e082-112">For more information, see the <xref:System.Windows.Vector.X%2A> property.</span></span>  
  
 <span data-ttu-id="0e082-113">*y*</span><span class="sxs-lookup"><span data-stu-id="0e082-113">*y*</span></span>  
 <span data-ttu-id="0e082-114">Vector Y składnika.</span><span class="sxs-lookup"><span data-stu-id="0e082-114">The vector's Y component.</span></span> <span data-ttu-id="0e082-115">Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Vector.Y%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e082-115">For more information, see the <xref:System.Windows.Vector.Y%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e082-116">Poniższy przykład przedstawia sposób dodawania dwóch <xref:System.Windows.Vector> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-116">The following example shows how to add two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorSample#10](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorSample/CSharp/Window1.xaml.cs#10)]
 [!code-vb[VectorSample#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorSample/visualbasic/window1.xaml.vb#10)]  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Windows.Vector.Add" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Vector (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (x As Double, y As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Vector(double x, double y);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="0e082-117"><see cref="P:System.Windows.Vector.X" />-Przesunięcie nowej <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-117">The <see cref="P:System.Windows.Vector.X" />-offset of the new <see cref="T:System.Windows.Vector" />.</span></span></param>
        <param name="y"><span data-ttu-id="0e082-118"><see cref="P:System.Windows.Vector.Y" />-Przesunięcie nowej <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-118">The <see cref="P:System.Windows.Vector.Y" />-offset of the new <see cref="T:System.Windows.Vector" />.</span></span></param>
        <summary><span data-ttu-id="0e082-119">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Vector" /> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-119">Initializes a new instance of the <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-120">Poniższy przykład pokazuje, jak utworzyć dwa wektory i dodać je razem.</span><span class="sxs-lookup"><span data-stu-id="0e082-120">The following example shows how to create two vectors and add them together.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddTwoVectorsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addtwovectorsexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0e082-121">Dodaje wektora punktu lub inny sposób.</span><span class="sxs-lookup"><span data-stu-id="0e082-121">Adds a vector to a point or to another vector.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Windows.Point Add (System.Windows.Vector vector, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Point Add(valuetype System.Windows.Vector vector, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point Add(System::Windows::Vector vector, System::Windows::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="0e082-122">Kwota można przetłumaczyć określonego punktu.</span><span class="sxs-lookup"><span data-stu-id="0e082-122">The amount to translate the specified point.</span></span></param>
        <param name="point"><span data-ttu-id="0e082-123">Wskaż tłumaczenia.</span><span class="sxs-lookup"><span data-stu-id="0e082-123">The point to translate.</span></span></param>
        <summary><span data-ttu-id="0e082-124">Tłumaczy określony punkt określony wektor i zwraca wynikowy punktu.</span><span class="sxs-lookup"><span data-stu-id="0e082-124">Translates the specified point by the specified vector and returns the resulting point.</span></span></summary>
        <returns><span data-ttu-id="0e082-125">Wynik tłumaczenia <paramref name="point" /> przez <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-125">The result of translating <paramref name="point" /> by <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-126">Poniższy przykład przedstawia sposób ta metoda służy do dodawania <xref:System.Windows.Point> struktury do <xref:System.Windows.Vector> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-126">The following example shows how to use this method to add a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddPointAndVectorExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addpointandvectorexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Add (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Add(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Add(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="0e082-127">Pierwszy wektorów do dodania.</span><span class="sxs-lookup"><span data-stu-id="0e082-127">The first vector to add.</span></span></param>
        <param name="vector2"><span data-ttu-id="0e082-128">Drugi wektorów do dodania.</span><span class="sxs-lookup"><span data-stu-id="0e082-128">The second vector to add.</span></span></param>
        <summary><span data-ttu-id="0e082-129">Dodaje dwa wektory i zwraca wynik w postaci <see cref="T:System.Windows.Vector" /> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-129">Adds two vectors and returns the result as a <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <returns><span data-ttu-id="0e082-130">Suma <paramref name="vector1" /> i <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-130">The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-131">Poniższy przykład przedstawia sposób ta metoda służy do dodawania dwóch <xref:System.Windows.Vector> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-131">The following example shows how to use this method to add two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddTwoVectorsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addtwovectorsexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="AngleBetween">
      <MemberSignature Language="C#" Value="public static double AngleBetween (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 AngleBetween(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AngleBetween (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double AngleBetween(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="0e082-132">Pierwszy wektorów do oceny.</span><span class="sxs-lookup"><span data-stu-id="0e082-132">The first vector to evaluate.</span></span></param>
        <param name="vector2"><span data-ttu-id="0e082-133">Drugi wektorów do oceny.</span><span class="sxs-lookup"><span data-stu-id="0e082-133">The second vector to evaluate.</span></span></param>
        <summary><span data-ttu-id="0e082-134">Pobiera kąt wyrażona w stopniach między dwoma wektorami określony.</span><span class="sxs-lookup"><span data-stu-id="0e082-134">Retrieves the angle, expressed in degrees, between the two specified vectors.</span></span></summary>
        <returns><span data-ttu-id="0e082-135">Kąt w stopniach, między <paramref name="vector1" /> i <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-135">The angle, in degrees, between <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-136">Poniższy przykład przedstawia użycie tej metody można pobrać kąta między dwoma <xref:System.Windows.Vector> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-136">The following example shows how to use this method to get the angle between two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AngleBetweenExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#anglebetweenexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossProduct">
      <MemberSignature Language="C#" Value="public static double CrossProduct (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 CrossProduct(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrossProduct (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double CrossProduct(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="0e082-137">Pierwszy wektorów do oceny.</span><span class="sxs-lookup"><span data-stu-id="0e082-137">The first vector to evaluate.</span></span></param>
        <param name="vector2"><span data-ttu-id="0e082-138">Drugi wektorów do oceny.</span><span class="sxs-lookup"><span data-stu-id="0e082-138">The second vector to evaluate.</span></span></param>
        <summary><span data-ttu-id="0e082-139">Oblicza iloczyn wektorowy dwóch wektorów.</span><span class="sxs-lookup"><span data-stu-id="0e082-139">Calculates the cross product of two vectors.</span></span></summary>
        <returns><span data-ttu-id="0e082-140">Iloczyn wektorowy <paramref name="vector1" /> i <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-140">The cross product of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span> <span data-ttu-id="0e082-141">Aby obliczyć iloczyn wektorowy używana jest następująca formuła:</span><span class="sxs-lookup"><span data-stu-id="0e082-141">The following formula is used to calculate the cross product:</span></span>  
  
 <span data-ttu-id="0e082-142"><c>(Vector1.X * Vector2.Y)-(Vector1.Y * Vector2.X)</c></span><span class="sxs-lookup"><span data-stu-id="0e082-142"><c>(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</c></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-143">Poniższy przykład przedstawia użycie tej metody można obliczyć iloczyn wektorowy dwóch <xref:System.Windows.Vector> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-143">The following example shows how to use this method to calculate the cross product of two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#CrossProductExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#crossproductexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Determinant">
      <MemberSignature Language="C#" Value="public static double Determinant (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Determinant(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Determinant (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Determinant(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="0e082-144">Pierwszy wektorów do oceny.</span><span class="sxs-lookup"><span data-stu-id="0e082-144">The first vector to evaluate.</span></span></param>
        <param name="vector2"><span data-ttu-id="0e082-145">Drugi wektorów do oceny.</span><span class="sxs-lookup"><span data-stu-id="0e082-145">The second vector to evaluate.</span></span></param>
        <summary><span data-ttu-id="0e082-146">Oblicza cyfr dwa wektory.</span><span class="sxs-lookup"><span data-stu-id="0e082-146">Calculates the determinant of two vectors.</span></span></summary>
        <returns><span data-ttu-id="0e082-147">Cyfr <paramref name="vector1" /> i <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-147">The determinant of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-148">Poniższy przykład przedstawia sposób obliczania cyfr dwa <xref:System.Windows.Vector> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-148">The following example shows how to calculate the determinant of two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#DeterminantExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#determinantexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Divide (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Divide(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Divide(System::Windows::Vector vector, double scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="0e082-149">Struktura wektorów do dzielenia.</span><span class="sxs-lookup"><span data-stu-id="0e082-149">The vector structure to divide.</span></span></param>
        <param name="scalar"><span data-ttu-id="0e082-150">Wartość, o którą <c>wektor</c> jest podzielona.</span><span class="sxs-lookup"><span data-stu-id="0e082-150">The amount by which <c>vector</c> is divided.</span></span></param>
        <summary><span data-ttu-id="0e082-151">Dzieli określony wektor przez określony skalarnych i zwraca wynik w postaci <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-151">Divides the specified vector by the specified scalar and returns the result as a <see cref="T:System.Windows.Vector" />.</span></span></summary>
        <returns><span data-ttu-id="0e082-152">Wynik dzielenia <paramref name="vector" /> przez <paramref name="scalar" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-152">The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-153">Poniższy przykład przedstawia użycie tej metody do dzielenia <xref:System.Windows.Vector> przez wartością skalarną.</span><span class="sxs-lookup"><span data-stu-id="0e082-153">The following example shows how to use this method to divide a <xref:System.Windows.Vector> by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#DivideExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#divideexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0e082-154">Porównuje dwa wektory pod kątem równości.</span><span class="sxs-lookup"><span data-stu-id="0e082-154">Compares two vectors for equality.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e082-155">Wektor <xref:System.Windows.Vector.X%2A> i <xref:System.Windows.Vector.Y%2A> właściwości opisano przy użyciu <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="0e082-155">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="0e082-156">Ponieważ wartość <xref:System.Double> mogą tracić dokładność podczas operacji arytmetycznych na niej porównanie między dwoma <xref:System.Double> struktur, które są logicznie równe może zakończyć się niepowodzeniem.</span><span class="sxs-lookup"><span data-stu-id="0e082-156">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="0e082-157">Wektor do porównania.</span><span class="sxs-lookup"><span data-stu-id="0e082-157">The vector to compare.</span></span></param>
        <summary><span data-ttu-id="0e082-158">Określa, czy określony <see cref="T:System.Object" /> jest <see cref="T:System.Windows.Vector" /> struktury, a jeśli tak jest, czy ma takie same <see cref="P:System.Windows.Vector.X" /> i <see cref="P:System.Windows.Vector.Y" /> wartości jako tego wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-158">Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Vector" /> structure and, if it is, whether it has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector.</span></span></summary>
        <returns>
          <span data-ttu-id="0e082-159"><see langword="true" /> Jeśli <paramref name="o" /> jest <see cref="T:System.Windows.Vector" /> i ma tę samą <see cref="P:System.Windows.Vector.X" /> i <see cref="P:System.Windows.Vector.Y" /> wartości jako tego wektor; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-159"><see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Windows.Vector" /> and has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e082-160">Wektor <xref:System.Windows.Vector.X%2A> i <xref:System.Windows.Vector.Y%2A> właściwości opisano przy użyciu <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="0e082-160">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="0e082-161">Ponieważ wartość <xref:System.Double> mogą tracić dokładność podczas operacji arytmetycznych na niej porównanie między dwoma <xref:System.Windows.Vector> struktur, które są logicznie równe może zakończyć się niepowodzeniem.</span><span class="sxs-lookup"><span data-stu-id="0e082-161">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e082-162">Poniższy przykład przedstawia sposób używania tej metody, aby sprawdzić, czy <xref:System.Windows.Vector> i <xref:System.Object> są takie same.</span><span class="sxs-lookup"><span data-stu-id="0e082-162">The following example shows how to use this method to check whether a <xref:System.Windows.Vector> and an <xref:System.Object> are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Vector value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.Vector value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Windows::Vector value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="0e082-163">Wektor do porównania z tym wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-163">The vector to compare with this vector.</span></span></param>
        <summary><span data-ttu-id="0e082-164">Porównuje dwa wektory pod kątem równości.</span><span class="sxs-lookup"><span data-stu-id="0e082-164">Compares two vectors for equality.</span></span></summary>
        <returns>
          <span data-ttu-id="0e082-165"><see langword="true" /> Jeśli <paramref name="value" /> ma taką samą <see cref="P:System.Windows.Vector.X" /> i <see cref="P:System.Windows.Vector.Y" /> wartości jako tego wektor; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-165"><see langword="true" /> if <paramref name="value" /> has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e082-166">Wektor <xref:System.Windows.Vector.X%2A> i <xref:System.Windows.Vector.Y%2A> właściwości opisano przy użyciu <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="0e082-166">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="0e082-167">Ponieważ wartość <xref:System.Double> mogą tracić dokładność podczas operacji arytmetycznych na niej porównanie między dwoma <xref:System.Windows.Vector> struktur, które są logicznie równe może zakończyć się niepowodzeniem.</span><span class="sxs-lookup"><span data-stu-id="0e082-167">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e082-168">Poniższy przykład przedstawia sposób używania tej metody, aby sprawdzić, czy dwa <xref:System.Windows.Vector> struktury są takie same.</span><span class="sxs-lookup"><span data-stu-id="0e082-168">The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="0e082-169">Pierwszy wektorów do porównania.</span><span class="sxs-lookup"><span data-stu-id="0e082-169">The first vector to compare.</span></span></param>
        <param name="vector2"><span data-ttu-id="0e082-170">Drugi wektorów do porównania.</span><span class="sxs-lookup"><span data-stu-id="0e082-170">The second vector to compare.</span></span></param>
        <summary><span data-ttu-id="0e082-171">Porównuje dwa wektory określony pod kątem równości.</span><span class="sxs-lookup"><span data-stu-id="0e082-171">Compares the two specified vectors for equality.</span></span></summary>
        <returns>
          <span data-ttu-id="0e082-172"><see langword="true" /> Jeśli t on <see cref="P:System.Windows.Vector.X" /> i <see cref="P:System.Windows.Vector.Y" /> składniki <paramref name="vector1" /> i <paramref name="vector2" /> są równe; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-172"><see langword="true" /> if t he <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e082-173">Wektor <xref:System.Windows.Vector.X%2A> i <xref:System.Windows.Vector.Y%2A> właściwości opisano przy użyciu <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="0e082-173">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="0e082-174">Ponieważ wartość <xref:System.Double> mogą tracić dokładność podczas operacji arytmetycznych na niej porównanie między dwoma <xref:System.Double> struktur, które są logicznie równe może zakończyć się niepowodzeniem.</span><span class="sxs-lookup"><span data-stu-id="0e082-174">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e082-175">Poniższy przykład przedstawia sposób używania tej metody, aby sprawdzić, czy dwa <xref:System.Windows.Vector> struktury są takie same.</span><span class="sxs-lookup"><span data-stu-id="0e082-175">The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0e082-176">Zwraca wartość skrótu dla tego wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-176">Returns the hash code for this vector.</span></span></summary>
        <returns><span data-ttu-id="0e082-177">Kod skrótu dla tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="0e082-177">The hash code for this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-178">Poniższy przykład przedstawia sposób uzyskać skrótu <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="0e082-178">The following example shows how to get the hash code of a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#GetHashCodeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#gethashcodeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public double Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Length { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e082-179">Pobiera długość to wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-179">Gets the length of this vector.</span></span></summary>
        <value><span data-ttu-id="0e082-180">Długość tej wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-180">The length of this vector.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e082-181">Długość wektora jest czasami nazywany wielkości.</span><span class="sxs-lookup"><span data-stu-id="0e082-181">The length of a vector is sometimes referred to as the magnitude.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e082-182">W poniższym przykładzie przedstawiono sposób używają tej właściwości można pobrać długość wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-182">The following example shows how use this property to get the length of a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#LengthExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#lengthexample)]
 [!code-vb[VectorExamples_snip#LengthExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#lengthexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LengthSquared">
      <MemberSignature Language="C#" Value="public double LengthSquared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 LengthSquared" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.LengthSquared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LengthSquared As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double LengthSquared { double get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e082-183">Pobiera kwadratowe długości tego wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-183">Gets the square of the length of this vector.</span></span></summary>
        <value><span data-ttu-id="0e082-184">Kwadrat <see cref="P:System.Windows.Vector.Length" /> tego wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-184">The square of the <see cref="P:System.Windows.Vector.Length" /> of this vector.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e082-185">Długość wektora jest czasami nazywany jego znaczenie.</span><span class="sxs-lookup"><span data-stu-id="0e082-185">The length of a vector is sometimes referred to as its magnitude.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e082-186">Poniższy przykład przedstawia użycie tej właściwości można pobrać wartości kwadratu długość wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-186">The following example shows how to use this property to get the square of the length of a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#LengthSquaredExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#lengthsquaredexample)]
 [!code-vb[VectorExamples_snip#LengthSquaredExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#lengthsquaredexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Multiply">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0e082-187">Mnoży określony wektor przez określony <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, lub <see cref="T:System.Windows.Vector" /> i zwraca wynik w postaci <see cref="T:System.Windows.Vector" /> lub <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-187">Multiplies the specified vector by the specified <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, or <see cref="T:System.Windows.Vector" /> and returns the result as a <see cref="T:System.Windows.Vector" /> or <see cref="T:System.Double" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (double scalar, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(float64 scalar, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(double scalar, System::Windows::Vector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="scalar"><span data-ttu-id="0e082-188">Aby pomnożyć skalarnych.</span><span class="sxs-lookup"><span data-stu-id="0e082-188">The scalar to multiply.</span></span></param>
        <param name="vector"><span data-ttu-id="0e082-189">Wektor Aby pomnożyć.</span><span class="sxs-lookup"><span data-stu-id="0e082-189">The vector to multiply.</span></span></param>
        <summary><span data-ttu-id="0e082-190">Mnoży określonej skalarnej określony wektor i zwraca wynikowy <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-190">Multiplies the specified scalar by the specified vector and returns the resulting <see cref="T:System.Windows.Vector" />.</span></span></summary>
        <returns><span data-ttu-id="0e082-191">Wynik mnożenia <paramref name="scalar" /> i <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-191">The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-192">Poniższy przykład przedstawia sposób używania tej metody, aby pomnożyć skalarnej przez <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="0e082-192">The following example shows how to use this method to multiply a scalar by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByScalarExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbyscalarexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(System::Windows::Vector vector, double scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="0e082-193">Wektor Aby pomnożyć.</span><span class="sxs-lookup"><span data-stu-id="0e082-193">The vector to multiply.</span></span></param>
        <param name="scalar"><span data-ttu-id="0e082-194">Aby pomnożyć skalarnych.</span><span class="sxs-lookup"><span data-stu-id="0e082-194">The scalar to multiply.</span></span></param>
        <summary><span data-ttu-id="0e082-195">Mnoży określony wektor przez określony skalarnych i zwraca wynikowy <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-195">Multiplies the specified vector by the specified scalar and returns the resulting <see cref="T:System.Windows.Vector" />.</span></span></summary>
        <returns><span data-ttu-id="0e082-196">Wynik mnożenia <paramref name="vector" /> i <paramref name="scalar" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-196">The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-197">Poniższy przykład przedstawia sposób używania tej metody, aby pomnożyć <xref:System.Windows.Vector> przez wartością skalarną.</span><span class="sxs-lookup"><span data-stu-id="0e082-197">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByScalarExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbyscalarexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(valuetype System.Windows.Vector vector, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(System::Windows::Vector vector, System::Windows::Media::Matrix matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="0e082-198">Struktura wektorów do przekształcenia.</span><span class="sxs-lookup"><span data-stu-id="0e082-198">The vector structure to transform.</span></span></param>
        <param name="matrix"><span data-ttu-id="0e082-199">Przekształcenie do zastosowania <c>wektor</c>.</span><span class="sxs-lookup"><span data-stu-id="0e082-199">The transformation to apply to <c>vector</c>.</span></span></param>
        <summary><span data-ttu-id="0e082-200">Transformacje współrzędnych określony wektor przy użyciu określonego <see cref="T:System.Windows.Media.Matrix" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-200">Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</span></span></summary>
        <returns><span data-ttu-id="0e082-201">Wynik transformacji <paramref name="vector" /> przez <paramref name="matrix" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-201">The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-202">Poniższy przykład przedstawia sposób używania tej metody, aby pomnożyć <xref:System.Windows.Vector> przez <xref:System.Windows.Media.Matrix>.</span><span class="sxs-lookup"><span data-stu-id="0e082-202">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Media.Matrix>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByMatrixExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbymatrixexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static double Multiply (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Multiply(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Multiply(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="0e082-203">Pierwszym wektorze wielokrotnie.</span><span class="sxs-lookup"><span data-stu-id="0e082-203">The first vector to multiply.</span></span></param>
        <param name="vector2"><span data-ttu-id="0e082-204">Drugi struktura wektor Aby pomnożyć.</span><span class="sxs-lookup"><span data-stu-id="0e082-204">The second vector structure to multiply.</span></span></param>
        <summary><span data-ttu-id="0e082-205">Oblicza iloczyn dwóch określony poprzez nosicieli i zwraca wynik w postaci <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-205">Calculates the dot product of the two specified vectors and returns the result as a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="0e082-206">A <see cref="T:System.Double" /> zawierający skalarne iloczyn kropka <paramref name="vector1" /> i <paramref name="vector2" />, która jest obliczana przy użyciu następującej formuły:</span><span class="sxs-lookup"><span data-stu-id="0e082-206">A <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:</span></span>  
  
 <span data-ttu-id="0e082-207"><c>(vector1. X * vector2. X) + (vector1. Y * vector2. Y)</c></span><span class="sxs-lookup"><span data-stu-id="0e082-207"><c>(vector1.X * vector2.X) + (vector1.Y * vector2.Y)</c></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-208">Poniższy przykład przedstawia sposób używania tej metody, aby pomnożyć <xref:System.Windows.Vector> przez <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="0e082-208">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#GetDotProductExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#getdotproductexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public void Negate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Negate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Negate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Negate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Negate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0e082-209">Negacja tego wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-209">Negates this vector.</span></span> <span data-ttu-id="0e082-210">Wektor ma tej samej wielkości jak przed, ale jest teraz przeciwnym kierunku.</span><span class="sxs-lookup"><span data-stu-id="0e082-210">The vector has the same magnitude as before, but its direction is now opposite.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-211">Poniższy przykład pokazuje, jak do używania tej metody, aby odwrócić wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-211">The following example shows how to use this method to negate a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#NegateExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#negateexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public void Normalize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Normalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Normalize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Normalize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Normalize();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0e082-212">Normalizuje wektor tego.</span><span class="sxs-lookup"><span data-stu-id="0e082-212">Normalizes this vector.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e082-213">Znormalizowany wektor zachowuje jego kierunku, ale jego <xref:System.Windows.Vector.Length%2A> staje się 1.</span><span class="sxs-lookup"><span data-stu-id="0e082-213">A normalized vector maintains its direction but its <xref:System.Windows.Vector.Length%2A> becomes 1.</span></span> <span data-ttu-id="0e082-214">Wynikowa wektora jest często nazywana wektor jednostki.</span><span class="sxs-lookup"><span data-stu-id="0e082-214">The resulting vector is often called a unit vector.</span></span> <span data-ttu-id="0e082-215">Wektor jest znormalizowany przez podzielenie wektora przez jego własnej <xref:System.Windows.Vector.Length%2A>.</span><span class="sxs-lookup"><span data-stu-id="0e082-215">A vector is normalized by dividing the vector by its own <xref:System.Windows.Vector.Length%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e082-216">Poniższy przykład przedstawia użycie tej metody do normalizacji wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-216">The following example shows how to use this method to normalize a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#NormalizeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#normalizeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0e082-217">Dodaje wektora punktu lub inny sposób.</span><span class="sxs-lookup"><span data-stu-id="0e082-217">Adds a vector to a point or to another vector.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Windows.Point operator + (System.Windows.Vector vector, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Addition(valuetype System.Windows.Vector vector, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point operator +(System::Windows::Vector vector, System::Windows::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="0e082-218">Wektor używana do tłumaczenia <c>punktu</c>.</span><span class="sxs-lookup"><span data-stu-id="0e082-218">The vector used to translate <c>point</c>.</span></span></param>
        <param name="point"><span data-ttu-id="0e082-219">Wskaż tłumaczenia.</span><span class="sxs-lookup"><span data-stu-id="0e082-219">The point to translate.</span></span></param>
        <summary><span data-ttu-id="0e082-220">Tłumaczy punkt określony wektor i zwraca wynikowy punktu.</span><span class="sxs-lookup"><span data-stu-id="0e082-220">Translates a point by the specified vector and returns the resulting point.</span></span></summary>
        <returns><span data-ttu-id="0e082-221">Wynik tłumaczenia <paramref name="point" /> przez <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-221">The result of translating <paramref name="point" /> by <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-222">Poniższy przykład przedstawia użycie tego operatora (+) do tłumaczenia <xref:System.Windows.Point> struktury do <xref:System.Windows.Vector> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-222">The following example shows how to use this operator (+) to translate a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedadditionoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedadditionoperatorexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator + (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Addition(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator +(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="0e082-223">Pierwszy wektorów do dodania.</span><span class="sxs-lookup"><span data-stu-id="0e082-223">The first vector to add.</span></span></param>
        <param name="vector2"><span data-ttu-id="0e082-224">Drugi wektorów do dodania.</span><span class="sxs-lookup"><span data-stu-id="0e082-224">The second vector to add.</span></span></param>
        <summary><span data-ttu-id="0e082-225">Dodaje dwa wektory i zwraca wynik w postaci wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-225">Adds two vectors and returns the result as a vector.</span></span></summary>
        <returns><span data-ttu-id="0e082-226">Suma <paramref name="vector1" /> i <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-226">The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-227">Poniższy przykład przedstawia sposób Użyj tego operatora (+), aby dodać dwa <xref:System.Windows.Vector> struktury i przywracać <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="0e082-227">The following example shows how to use this operator (+) to add two <xref:System.Windows.Vector> structures and return a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedadditionoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedadditionoperatorexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator / (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Division(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator /(System::Windows::Vector vector, double scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="0e082-228">Wektor do dzielenia.</span><span class="sxs-lookup"><span data-stu-id="0e082-228">The vector to divide.</span></span></param>
        <param name="scalar"><span data-ttu-id="0e082-229">Skalarnych za pomocą którego <c>wektor</c> zostanie podzielona.</span><span class="sxs-lookup"><span data-stu-id="0e082-229">The scalar by which <c>vector</c> will be divided.</span></span></param>
        <summary><span data-ttu-id="0e082-230">Dzieli określony wektor przez określony skalarnych i zwraca wynikowy wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-230">Divides the specified vector by the specified scalar and returns the resulting vector.</span></span></summary>
        <returns><span data-ttu-id="0e082-231">Wynik dzielenia <paramref name="vector" /> przez <paramref name="scalar" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-231">The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-232">Poniższy przykład przedstawia użycie tego operatora (/) do dzielenia <xref:System.Windows.Vector> struktury przez wartością skalarną.</span><span class="sxs-lookup"><span data-stu-id="0e082-232">The following example shows how to use this operator (/) to divide a <xref:System.Windows.Vector> structure by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedDivisionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadeddivisionoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedDivisionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadeddivisionoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="0e082-233">Pierwszy wektorów do porównania.</span><span class="sxs-lookup"><span data-stu-id="0e082-233">The first vector to compare.</span></span></param>
        <param name="vector2"><span data-ttu-id="0e082-234">Drugi wektorów do porównania.</span><span class="sxs-lookup"><span data-stu-id="0e082-234">The second vector to compare.</span></span></param>
        <summary><span data-ttu-id="0e082-235">Porównuje dwa wektory pod kątem równości.</span><span class="sxs-lookup"><span data-stu-id="0e082-235">Compares two vectors for equality.</span></span></summary>
        <returns>
          <span data-ttu-id="0e082-236"><see langword="true" /> Jeśli <see cref="P:System.Windows.Vector.X" /> i <see cref="P:System.Windows.Vector.Y" /> składniki <paramref name="vector1" /> i <paramref name="vector2" /> są równe; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-236"><see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e082-237">Wektor <xref:System.Windows.Vector.X%2A> i <xref:System.Windows.Vector.Y%2A> właściwości opisano przy użyciu <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="0e082-237">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="0e082-238">Ponieważ wartość <xref:System.Double> mogą tracić dokładność podczas operacji arytmetycznych na niej porównanie między dwoma <xref:System.Windows.Vector> struktur, które są logicznie równe może zakończyć się niepowodzeniem.</span><span class="sxs-lookup"><span data-stu-id="0e082-238">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e082-239">Poniższy przykład przedstawia sposób Użyj tego operatora (==), aby sprawdzić, czy dwa <xref:System.Windows.Vector> struktury są takie same.</span><span class="sxs-lookup"><span data-stu-id="0e082-239">The following example shows how to use this operator (==) to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedequalityoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Equals" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0e082-240">Konwertuje wektora <see cref="T:System.Windows.Size" /> lub <see cref="T:System.Windows.Point" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-240">Converts a vector into a <see cref="T:System.Windows.Size" /> or a <see cref="T:System.Windows.Point" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Point (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Explicit(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Point(System::Windows::Vector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="0e082-241">Wektor do konwersji.</span><span class="sxs-lookup"><span data-stu-id="0e082-241">The vector to convert.</span></span></param>
        <summary><span data-ttu-id="0e082-242">Tworzy <see cref="T:System.Windows.Point" /> z <see cref="P:System.Windows.Vector.X" /> i <see cref="P:System.Windows.Vector.Y" /> wartości tego wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-242">Creates a <see cref="T:System.Windows.Point" /> with the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this vector.</span></span></summary>
        <returns><span data-ttu-id="0e082-243">Punkt z <see cref="P:System.Windows.Point.X" />- i <see cref="P:System.Windows.Point.Y" />-koordynować wartości równej <see cref="P:System.Windows.Vector.X" /> i <see cref="P:System.Windows.Vector.Y" /> wartości przesunięcia <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-243">A point with <see cref="P:System.Windows.Point.X" />- and <see cref="P:System.Windows.Point.Y" />-coordinate values equal to the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> offset values of <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-244">Poniższy przykład przedstawia sposób konwertowania <xref:System.Windows.Vector> do <xref:System.Windows.Point>.</span><span class="sxs-lookup"><span data-stu-id="0e082-244">The following example shows how to convert a <xref:System.Windows.Vector> into a <xref:System.Windows.Point>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedExplicitOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedexplicitoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedExplicitOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedexplicitoperatorexample2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Size (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Size op_Explicit(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Size(System::Windows::Vector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="0e082-245">Wektor do konwersji.</span><span class="sxs-lookup"><span data-stu-id="0e082-245">The vector to convert.</span></span></param>
        <summary><span data-ttu-id="0e082-246">Tworzy <see cref="T:System.Windows.Size" /> z przesunięcia tego wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-246">Creates a <see cref="T:System.Windows.Size" /> from the offsets of this vector.</span></span></summary>
        <returns><span data-ttu-id="0e082-247">A <see cref="T:System.Windows.Size" /> z <see cref="P:System.Windows.Size.Width" /> wartość bezwzględna to wektora <see cref="P:System.Windows.Vector.X" /> właściwości i <see cref="P:System.Windows.Size.Height" /> wartość bezwzględna to wektora <see cref="P:System.Windows.Vector.Y" /> właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e082-247">A <see cref="T:System.Windows.Size" /> with a <see cref="P:System.Windows.Size.Width" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.X" /> property and a <see cref="P:System.Windows.Size.Height" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.Y" /> property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-248">Poniższy przykład przedstawia sposób jawnie przekonwertować <xref:System.Windows.Vector> do <xref:System.Windows.Size>.</span><span class="sxs-lookup"><span data-stu-id="0e082-248">The following example shows how to explicitly convert a <xref:System.Windows.Vector> into a <xref:System.Windows.Size>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedExplicitOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedexplicitoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedExplicitOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedexplicitoperatorexample1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="0e082-249">Pierwszy wektorów do porównania.</span><span class="sxs-lookup"><span data-stu-id="0e082-249">The first vector to compare.</span></span></param>
        <param name="vector2"><span data-ttu-id="0e082-250">Drugi wektorów do porównania.</span><span class="sxs-lookup"><span data-stu-id="0e082-250">The second vector to compare.</span></span></param>
        <summary><span data-ttu-id="0e082-251">Porównuje dwa wektory pod kątem nierówności.</span><span class="sxs-lookup"><span data-stu-id="0e082-251">Compares two vectors for inequality.</span></span></summary>
        <returns>
          <span data-ttu-id="0e082-252"><see langword="true" /> Jeśli <see cref="P:System.Windows.Vector.X" /> i <see cref="P:System.Windows.Vector.Y" /> składniki <paramref name="vector1" /> i <paramref name="vector2" /> są różne; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-252"><see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are different; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e082-253">Wektor <xref:System.Windows.Vector.X%2A> i <xref:System.Windows.Vector.Y%2A> właściwości opisano przy użyciu <xref:System.Double> wartości.</span><span class="sxs-lookup"><span data-stu-id="0e082-253">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="0e082-254">Ponieważ wartość <xref:System.Double> mogą tracić dokładność podczas operacji arytmetycznych na niej porównanie między dwoma <xref:System.Windows.Vector> struktur, które są logicznie równe może zakończyć się niepowodzeniem.</span><span class="sxs-lookup"><span data-stu-id="0e082-254">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e082-255">Poniższy przykład przedstawia użycie tego operatora (! =) do sprawdzania, czy dwa <xref:System.Windows.Vector> struktur nie są takie same.</span><span class="sxs-lookup"><span data-stu-id="0e082-255">The following example shows how to use this operator (!=) to check whether two <xref:System.Windows.Vector> structures are not equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedinequalityoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedinequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Multiply">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0e082-256">Mnoży określonego <see cref="T:System.Windows.Vector" /> przez określony <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, lub <see cref="T:System.Windows.Vector" /> i zwraca wynik.</span><span class="sxs-lookup"><span data-stu-id="0e082-256">Multiplies the specified <see cref="T:System.Windows.Vector" /> by the specified <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, or <see cref="T:System.Windows.Vector" /> and returns the result.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (double scalar, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(float64 scalar, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(double scalar, System::Windows::Vector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="scalar"><span data-ttu-id="0e082-257">Aby pomnożyć skalarnych.</span><span class="sxs-lookup"><span data-stu-id="0e082-257">The scalar to multiply.</span></span></param>
        <param name="vector"><span data-ttu-id="0e082-258">Wektor Aby pomnożyć.</span><span class="sxs-lookup"><span data-stu-id="0e082-258">The vector to multiply.</span></span></param>
        <summary><span data-ttu-id="0e082-259">Mnoży określonej skalarnej określony wektor i zwraca wynikowy wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-259">Multiplies the specified scalar by the specified vector and returns the resulting vector.</span></span></summary>
        <returns><span data-ttu-id="0e082-260">Wynik mnożenia <paramref name="scalar" /> i <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-260">The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-261">Poniższy przykład przedstawia sposób Użyj tego operatora (\*), aby pomnożyć skalarnej przez <xref:System.Windows.Vector> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-261">The following example shows how to use this operator (\*) to multiply a scalar by a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplicationoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplicationoperatorexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(System::Windows::Vector vector, double scalar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="0e082-262">Wektor Aby pomnożyć.</span><span class="sxs-lookup"><span data-stu-id="0e082-262">The vector to multiply.</span></span></param>
        <param name="scalar"><span data-ttu-id="0e082-263">Aby pomnożyć skalarnych.</span><span class="sxs-lookup"><span data-stu-id="0e082-263">The scalar to multiply.</span></span></param>
        <summary><span data-ttu-id="0e082-264">Mnoży określony wektor przez określony skalarnych i zwraca wynikowy wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-264">Multiplies the specified vector by the specified scalar and returns the resulting vector.</span></span></summary>
        <returns><span data-ttu-id="0e082-265">Wynik mnożenia <paramref name="vector" /> i <paramref name="scalar" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-265">The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-266">Poniższy przykład przedstawia sposób Użyj tego operatora (\*), aby pomnożyć <xref:System.Windows.Vector> struktury przez wartością skalarną.</span><span class="sxs-lookup"><span data-stu-id="0e082-266">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplicationoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplicationoperatorexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(valuetype System.Windows.Vector vector, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(System::Windows::Vector vector, System::Windows::Media::Matrix matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="0e082-267">Wektor do przekształcenia.</span><span class="sxs-lookup"><span data-stu-id="0e082-267">The vector to transform.</span></span></param>
        <param name="matrix"><span data-ttu-id="0e082-268">Przekształcenie do zastosowania <c>wektor</c>.</span><span class="sxs-lookup"><span data-stu-id="0e082-268">The transformation to apply to <c>vector</c>.</span></span></param>
        <summary><span data-ttu-id="0e082-269">Transformacje współrzędnych określony wektor przy użyciu określonego <see cref="T:System.Windows.Media.Matrix" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-269">Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</span></span></summary>
        <returns><span data-ttu-id="0e082-270">Wynik transformacji <paramref name="vector" /> przez <paramref name="matrix" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-270">The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-271">Poniższy przykład przedstawia sposób Użyj tego operatora (\*), aby pomnożyć <xref:System.Windows.Vector> struktury przez <xref:System.Windows.Media.Matrix> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-271">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Media.Matrix> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplyvectorbymatrixoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplyvectorbymatrixoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static double operator * (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Multiply(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double operator *(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="0e082-272">Pierwszym wektorze wielokrotnie.</span><span class="sxs-lookup"><span data-stu-id="0e082-272">The first vector to multiply.</span></span></param>
        <param name="vector2"><span data-ttu-id="0e082-273">Drugi wektor Aby pomnożyć.</span><span class="sxs-lookup"><span data-stu-id="0e082-273">The second vector to multiply.</span></span></param>
        <summary><span data-ttu-id="0e082-274">Oblicza iloczyn dwóch struktur określony wektor i zwraca wynik w postaci <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-274">Calculates the dot product of the two specified vector structures and returns the result as a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="0e082-275">Zwraca <see cref="T:System.Double" /> zawierający skalarne iloczyn kropka <paramref name="vector1" /> i <paramref name="vector2" />, która jest obliczana przy użyciu następującej formuły:</span><span class="sxs-lookup"><span data-stu-id="0e082-275">Returns a <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:</span></span>  
  
 <span data-ttu-id="0e082-276"><c>vector1. X * vector2. X + vector1. Y * vector2. Y</c></span><span class="sxs-lookup"><span data-stu-id="0e082-276"><c>vector1.X * vector2.X + vector1.Y * vector2.Y</c></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-277">Poniższy przykład przedstawia sposób Użyj tego operatora (\*), aby pomnożyć <xref:System.Windows.Vector> struktury przez <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="0e082-277">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedoperatorgetdotproductexample)]
 [!code-vb[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedoperatorgetdotproductexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator - (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Subtraction(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator -(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="0e082-278">Wektor, z którego <c>vector2</c> jest odejmowany.</span><span class="sxs-lookup"><span data-stu-id="0e082-278">The vector from which <c>vector2</c> is subtracted.</span></span></param>
        <param name="vector2"><span data-ttu-id="0e082-279">Wektor, którą chcesz odjąć od <c>vector1</c>.</span><span class="sxs-lookup"><span data-stu-id="0e082-279">The vector to subtract from <c>vector1</c>.</span></span></param>
        <summary><span data-ttu-id="0e082-280">Odejmuje co określony wektor z innej.</span><span class="sxs-lookup"><span data-stu-id="0e082-280">Subtracts one specified vector from another.</span></span></summary>
        <returns><span data-ttu-id="0e082-281">Różnica między <paramref name="vector1" /> i <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-281">The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-282">Poniższy przykład przedstawia użycie tego operatora (-) do odjęcia <xref:System.Windows.Vector> struktury z <xref:System.Windows.Vector> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-282">The following example shows how to use this operator (-) to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedsubtractionoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedsubtractionoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator - (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_UnaryNegation(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator -(System::Windows::Vector vector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="0e082-283">Wektor, aby odwrócić.</span><span class="sxs-lookup"><span data-stu-id="0e082-283">The vector to negate.</span></span></param>
        <summary><span data-ttu-id="0e082-284">Negacja określony wektor.</span><span class="sxs-lookup"><span data-stu-id="0e082-284">Negates the specified vector.</span></span></summary>
        <returns><span data-ttu-id="0e082-285">Wektor z <see cref="P:System.Windows.Vector.X" /> i <see cref="P:System.Windows.Vector.Y" /> wartości przeciwne z <see cref="P:System.Windows.Vector.X" /> i <see cref="P:System.Windows.Vector.Y" /> wartości <paramref name="vector" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-285">A vector with <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values opposite of the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-286">Poniższy przykład przedstawia użycie tej operator negacji Aby odwrócić <xref:System.Windows.Vector> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-286">The following example shows how to use this negation operator to negate a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedNegationOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadednegationoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedNegationOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadednegationoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Negate" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Parse (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Parse(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (source As String) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Parse(System::String ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="0e082-287">Reprezentacja ciągu wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-287">The string representation of the vector.</span></span></param>
        <summary><span data-ttu-id="0e082-288">Konwertuje reprezentację ciągu wektora na równoważne <see cref="T:System.Windows.Vector" /> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-288">Converts a string representation of a vector into the equivalent <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <returns><span data-ttu-id="0e082-289">Odpowiednik <see cref="T:System.Windows.Vector" /> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-289">The equivalent <see cref="T:System.Windows.Vector" /> structure.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-290">Poniższy przykład przedstawia sposób używania tej metody można przekonwertować reprezentację ciągu wektorów do <xref:System.Windows.Vector> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-290">The following example shows how to use this method to convert a string representation of a vector into a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#ParseExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#parseexample)]
 [!code-vb[VectorExamples_snip#ParseExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#parseexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Subtract (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Subtract(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Subtract(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="0e082-291">Wektor, z którego <c>vector2</c> jest odejmowany.</span><span class="sxs-lookup"><span data-stu-id="0e082-291">The vector from which <c>vector2</c> is subtracted.</span></span></param>
        <param name="vector2"><span data-ttu-id="0e082-292">Wektor, którą chcesz odjąć od <c>vector1</c>.</span><span class="sxs-lookup"><span data-stu-id="0e082-292">The vector to subtract from <c>vector1</c>.</span></span></param>
        <summary><span data-ttu-id="0e082-293">Odejmuje określony wektor z innym określonym wektora.</span><span class="sxs-lookup"><span data-stu-id="0e082-293">Subtracts the specified vector from another specified vector.</span></span></summary>
        <returns><span data-ttu-id="0e082-294">Różnica między <paramref name="vector1" /> i <paramref name="vector2" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-294">The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-295">Poniższy przykład przedstawia użycie tej metody do odjęcia <xref:System.Windows.Vector> struktury z <xref:System.Windows.Vector> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-295">The following example shows how to use this method to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#SubtractExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#subtractexample)]
 [!code-vb[VectorExamples_snip#SubtractExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#subtractexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="0e082-296">Ciąg określający formatu do użycia.</span><span class="sxs-lookup"><span data-stu-id="0e082-296">The string specifying the format to use.</span></span>  
  
 <span data-ttu-id="0e082-297">—lub—</span><span class="sxs-lookup"><span data-stu-id="0e082-297">-or-</span></span>  
  
 <span data-ttu-id="0e082-298"><see langword="null" /> Aby użyć domyślnego formatu zdefiniowany dla typu <see cref="T:System.IFormattable" /> implementacji.</span><span class="sxs-lookup"><span data-stu-id="0e082-298"><see langword="null" /> to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</span></span></param>
        <param name="provider"><span data-ttu-id="0e082-299"><see langword="IFormatProvider" /> Na potrzeby formatowania wartości.</span><span class="sxs-lookup"><span data-stu-id="0e082-299">The <see langword="IFormatProvider" /> to use to format the value.</span></span>  
  
 <span data-ttu-id="0e082-300">—lub—</span><span class="sxs-lookup"><span data-stu-id="0e082-300">-or-</span></span>  
  
 <span data-ttu-id="0e082-301"><see langword="null" /> Aby uzyskać informacje formatujące z bieżących ustawień regionalnych systemu operacyjnego.</span><span class="sxs-lookup"><span data-stu-id="0e082-301"><see langword="null" /> to obtain the numeric format information from the current locale setting of the operating system.</span></span></param>
        <summary><span data-ttu-id="0e082-302">Ten element członkowski obsługuje [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastrukturę i nie jest przeznaczona do użycia bezpośrednio w kodzie.</span><span class="sxs-lookup"><span data-stu-id="0e082-302">This member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span> <span data-ttu-id="0e082-303">Opis tego elementu członkowskiego, zobacz <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-303">For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="0e082-304">Ciąg zawierający wartość bieżącego wystąpienia w określonym formacie.</span><span class="sxs-lookup"><span data-stu-id="0e082-304">A string containing the value of the current instance in the specified format.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0e082-305">Zwraca reprezentację ciągu tego <see cref="T:System.Windows.Vector" /> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-305">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0e082-306">Zwraca reprezentację ciągu tego <see cref="T:System.Windows.Vector" /> struktury.</span><span class="sxs-lookup"><span data-stu-id="0e082-306">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <returns><span data-ttu-id="0e082-307">Ciąg reprezentujący <see cref="P:System.Windows.Vector.X" /> i <see cref="P:System.Windows.Vector.Y" /> wartości to <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-307">A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-308">Poniższy przykład przedstawia użycie tej metody uzyskać reprezentację ciągu <xref:System.Windows.Vector>.</span><span class="sxs-lookup"><span data-stu-id="0e082-308">The following example shows how to use this method to get a string representation of a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#ToStringExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#tostringexample)]
 [!code-vb[VectorExamples_snip#ToStringExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#tostringexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="0e082-309">Formatowanie informacje specyficzne dla kultury.</span><span class="sxs-lookup"><span data-stu-id="0e082-309">The culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="0e082-310">Zwraca reprezentację ciągu tego <see cref="T:System.Windows.Vector" /> struktury z określonymi informacjami formatowania.</span><span class="sxs-lookup"><span data-stu-id="0e082-310">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure with the specified formatting information.</span></span></summary>
        <returns><span data-ttu-id="0e082-311">Ciąg reprezentujący <see cref="P:System.Windows.Vector.X" /> i <see cref="P:System.Windows.Vector.Y" /> wartości to <see cref="T:System.Windows.Vector" />.</span><span class="sxs-lookup"><span data-stu-id="0e082-311">A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public double X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.X" />
      <MemberSignature Language="VB.NET" Value="Public Property X As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double X { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e082-312">Pobiera lub ustawia <see cref="P:System.Windows.Vector.X" /> wektor tego składnika.</span><span class="sxs-lookup"><span data-stu-id="0e082-312">Gets or sets the <see cref="P:System.Windows.Vector.X" /> component of this vector.</span></span></summary>
        <value><span data-ttu-id="0e082-313"><see cref="P:System.Windows.Vector.X" /> Wektor tego składnika.</span><span class="sxs-lookup"><span data-stu-id="0e082-313">The <see cref="P:System.Windows.Vector.X" /> component of this vector.</span></span> <span data-ttu-id="0e082-314">Wartość domyślna to 0.</span><span class="sxs-lookup"><span data-stu-id="0e082-314">The default value is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-315">Poniższy przykład przedstawia sposób sprawdzić dwa <xref:System.Windows.Vector> struktury pod kątem równości.</span><span class="sxs-lookup"><span data-stu-id="0e082-315">The following example shows how to check two <xref:System.Windows.Vector> structures for equality.</span></span>  
  
 [!code-csharp[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#vectorequalityexample)]
 [!code-vb[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#vectorequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Vector.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public double Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.Y" />
      <MemberSignature Language="VB.NET" Value="Public Property Y As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Y { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e082-316">Pobiera lub ustawia <see cref="P:System.Windows.Vector.Y" /> wektor tego składnika.</span><span class="sxs-lookup"><span data-stu-id="0e082-316">Gets or sets the <see cref="P:System.Windows.Vector.Y" /> component of this vector.</span></span></summary>
        <value><span data-ttu-id="0e082-317"><see cref="P:System.Windows.Vector.Y" /> Wektor tego składnika.</span><span class="sxs-lookup"><span data-stu-id="0e082-317">The <see cref="P:System.Windows.Vector.Y" /> component of this vector.</span></span> <span data-ttu-id="0e082-318">Wartość domyślna to 0.</span><span class="sxs-lookup"><span data-stu-id="0e082-318">The default value is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e082-319">Poniższy przykład przedstawia sposób sprawdzić dwa <xref:System.Windows.Vector> struktury pod kątem równości.</span><span class="sxs-lookup"><span data-stu-id="0e082-319">The following example shows how to check two <xref:System.Windows.Vector> structures for equality.</span></span>  
  
 [!code-csharp[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#vectorequalityexample)]
 [!code-vb[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#vectorequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Vector.X" />
      </Docs>
    </Member>
  </Members>
</Type>