<Type Name="PropertyMetadata" FullName="System.Windows.PropertyMetadata">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cfaa68a67cd83c15d520906814bae974a118e88e" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69444313" /></Metadata><TypeSignature Language="C#" Value="public class PropertyMetadata" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyMetadata extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.PropertyMetadata" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyMetadata" />
  <TypeSignature Language="F#" Value="type PropertyMetadata = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="47b4f-101">Definiuje pewne aspekty zachowania właściwości zależności, które są stosowane do określonego typu, włącznie z warunkami, w których zostały zarejestrowane.</span><span class="sxs-lookup"><span data-stu-id="47b4f-101">Defines certain behavior aspects of a dependency property as it is applied to a specific type, including conditions it was registered with.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b4f-102">Metadane właściwości mogą być definiowane i używane podczas rejestracji właściwości zależności podczas wywoływania <xref:System.Windows.DependencyProperty.Register%2A> metody (lub odmian dla dołączonych właściwości lub właściwości zależności tylko do odczytu) lub po zakończeniu rejestracji pierwotnego właściciela podczas wywoływania <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> Metoda.</span><span class="sxs-lookup"><span data-stu-id="47b4f-102">Property metadata can be defined and used during dependency property registration when calling the <xref:System.Windows.DependencyProperty.Register%2A> method (or variations for attached properties or read-only dependency properties), or after original owner registration when calling the <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> method.</span></span> <span data-ttu-id="47b4f-103"><xref:System.Windows.DependencyProperty.AddOwner%2A>Pobiera również metadane właściwości.</span><span class="sxs-lookup"><span data-stu-id="47b4f-103"><xref:System.Windows.DependencyProperty.AddOwner%2A> also takes property metadata.</span></span>  
  
 <span data-ttu-id="47b4f-104">Ta klasa jest konkretną klasą bazową, która może być używana w każdym z tych wywołań.</span><span class="sxs-lookup"><span data-stu-id="47b4f-104">This class is a concrete base class that can be used in each of these calls.</span></span> <span data-ttu-id="47b4f-105">Jednak bardzo często należy określić metadane przy użyciu jednej z klas pochodnych, takich jak <xref:System.Windows.FrameworkPropertyMetadata>.</span><span class="sxs-lookup"><span data-stu-id="47b4f-105">However, it is very common to specify metadata using one of the derived classes such as <xref:System.Windows.FrameworkPropertyMetadata>.</span></span> <span data-ttu-id="47b4f-106">Te klasy pochodne obsługują bardziej szczegółowe metadane przenoszone jako wartości właściwości logicznych, które są przydatne do wykrywania lub włączania niektórych zachowań systemu właściwości i układu, które są implementowane tylko [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] na poziomie platformy.</span><span class="sxs-lookup"><span data-stu-id="47b4f-106">These derived classes support more detailed metadata carried as Boolean property values, which are useful for either detecting or enabling some property system and layout behaviors that are only implemented at the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] framework level.</span></span>  
  
 <span data-ttu-id="47b4f-107">Niektóre właściwości tej klasy są do odczytu i zapisu do modelu obiektów, ale mogą być zapisywane tylko przed wystąpieniem używanym w operacji systemu właściwości, takiej jak <xref:System.Windows.DependencyProperty.Register%2A> lub. <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A></span><span class="sxs-lookup"><span data-stu-id="47b4f-107">Several properties of this class are read-write to the object model, but can only be written prior to the instance being used in a property system operation such as <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>.</span></span> <span data-ttu-id="47b4f-108">Każdą z tych właściwości można również ustawić przez konstruktora, ale są one uwidocznione, aby <xref:System.Windows.PropertyMetadata.Merge%2A> implementacje metod mogły je skonfigurować.</span><span class="sxs-lookup"><span data-stu-id="47b4f-108">Each of these properties could also have been set by the constructor but are exposed so that <xref:System.Windows.PropertyMetadata.Merge%2A> method implementations can set them.</span></span>  
  
<a name="xamlTextUsage_PropertyMetadata"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="47b4f-109">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="47b4f-109">XAML Text Usage</span></span>  
 <span data-ttu-id="47b4f-110">Ten typ i składowe tego typu nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="47b4f-110">This type, and members of this type, are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="47b4f-111">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.PropertyMetadata" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="47b4f-111">Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="47b4f-112">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.PropertyMetadata" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="47b4f-112">Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Object ^ defaultValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyMetadata : obj -&gt; System.Windows.PropertyMetadata" Usage="new System.Windows.PropertyMetadata defaultValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="47b4f-113">Wartość domyślna do określenia dla właściwości zależności, zazwyczaj określona jako wartość określonego typu.</span><span class="sxs-lookup"><span data-stu-id="47b4f-113">The default value to specify for a dependency property, usually provided as a value of some specific type.</span></span></param>
        <summary><span data-ttu-id="47b4f-114">Inicjuje nowe wystąpienie <see cref="T:System.Windows.PropertyMetadata" /> klasy z określoną wartością domyślną dla właściwości zależności, do której zostaną zastosowane te metadane.</span><span class="sxs-lookup"><span data-stu-id="47b4f-114">Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with a specified default value for the dependency property that this metadata will be applied to.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b4f-115">Typ podanej `defaultValue` wartości musi być zgodny lub być powiązany z typem określonym w oryginalnej rejestracji właściwości zależności, do której zostaną zastosowane te metadane.</span><span class="sxs-lookup"><span data-stu-id="47b4f-115">The type of the value provided for `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="47b4f-116">Niezgodność między domyślnym typem wartości metadanych a typem właściwości zależności, która jest stosowana, może być trudna do debugowania, ponieważ nie jest wykrywalna podczas kompilacji (niezgodność spowoduje wystąpienie wyjątku czasu wykonywania).</span><span class="sxs-lookup"><span data-stu-id="47b4f-116">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).</span></span>  
  
 <span data-ttu-id="47b4f-117">Chociaż jest to wartość domyślna dla konstruktora bez parametrów, `defaultValue` <xref:System.Windows.DependencyProperty.UnsetValue> nie można określić elementu.</span><span class="sxs-lookup"><span data-stu-id="47b4f-117">Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified.</span></span> <span data-ttu-id="47b4f-118">Próba wykonania tej czynności spowoduje wystąpienie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="47b4f-118">Attempting to do so will raise an exception.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor1param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor1param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="47b4f-119"><paramref name="defaultValue" />nie można ustawić wartości <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="47b4f-119"><paramref name="defaultValue" /> cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyMetadata : System.Windows.PropertyChangedCallback -&gt; System.Windows.PropertyMetadata" Usage="new System.Windows.PropertyMetadata propertyChangedCallback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback"><span data-ttu-id="47b4f-120">Odwołanie do implementacji programu obsługi, która ma zostać wywołana przez system właściwości za każdym razem, gdy rzeczywista wartość właściwości zostanie zmieniona.</span><span class="sxs-lookup"><span data-stu-id="47b4f-120">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</span></span></param>
        <summary><span data-ttu-id="47b4f-121">Inicjuje nowe wystąpienie <see cref="T:System.Windows.PropertyMetadata" /> klasy z określonym <see cref="T:System.Windows.PropertyChangedCallback" /> odwołaniem do implementacji.</span><span class="sxs-lookup"><span data-stu-id="47b4f-121">Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with the specified <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor1paramcallback](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor1paramcallback)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyMetadata : obj * System.Windows.PropertyChangedCallback -&gt; System.Windows.PropertyMetadata" Usage="new System.Windows.PropertyMetadata (defaultValue, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="47b4f-122">Wartość domyślna właściwości zależności, zazwyczaj określona jako wartość pewnego określonego typu.</span><span class="sxs-lookup"><span data-stu-id="47b4f-122">The default value of the dependency property, usually provided as a value of some specific type.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="47b4f-123">Odwołanie do implementacji programu obsługi, która ma zostać wywołana przez system właściwości za każdym razem, gdy rzeczywista wartość właściwości zostanie zmieniona.</span><span class="sxs-lookup"><span data-stu-id="47b4f-123">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</span></span></param>
        <summary><span data-ttu-id="47b4f-124">Inicjuje nowe wystąpienie <see cref="T:System.Windows.PropertyMetadata" /> klasy z określoną wartością domyślną i <see cref="T:System.Windows.PropertyChangedCallback" /> odwołaniem do implementacji.</span><span class="sxs-lookup"><span data-stu-id="47b4f-124">Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with the specified default value and <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b4f-125">Typ podanej `defaultValue` wartości musi być zgodny lub być powiązany z typem określonym w oryginalnej rejestracji właściwości zależności, do której zostaną zastosowane te metadane.</span><span class="sxs-lookup"><span data-stu-id="47b4f-125">The type of the value provided `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="47b4f-126">Niezgodność między domyślnym typem wartości metadanych a typem właściwości zależności, która jest stosowana, może być trudna do debugowania, ponieważ nie jest wykrywalna podczas kompilacji (niezgodność spowoduje wystąpienie wyjątku czasu wykonywania).</span><span class="sxs-lookup"><span data-stu-id="47b4f-126">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).</span></span>  
  
 <span data-ttu-id="47b4f-127">Chociaż jest to wartość domyślna dla konstruktora bez parametrów, `defaultValue` <xref:System.Windows.DependencyProperty.UnsetValue> nie można określić elementu.</span><span class="sxs-lookup"><span data-stu-id="47b4f-127">Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified.</span></span> <span data-ttu-id="47b4f-128">Próba wykonania tej czynności spowoduje wystąpienie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="47b4f-128">Attempting to do so will raise an exception.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor2param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor2param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="47b4f-129"><paramref name="defaultValue" />nie można ustawić wartości <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="47b4f-129"><paramref name="defaultValue" /> cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyMetadata : obj * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.PropertyMetadata" Usage="new System.Windows.PropertyMetadata (defaultValue, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="47b4f-130">Wartość domyślna właściwości zależności, zazwyczaj określona jako wartość pewnego określonego typu.</span><span class="sxs-lookup"><span data-stu-id="47b4f-130">The default value of the dependency property, usually provided as a value of some specific type.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="47b4f-131">Odwołanie do implementacji programu obsługi, która ma zostać wywołana przez system właściwości za każdym razem, gdy rzeczywista wartość właściwości zostanie zmieniona.</span><span class="sxs-lookup"><span data-stu-id="47b4f-131">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="47b4f-132">Odwołanie do implementacji programu obsługi, która ma być wywoływana za każdym razem, gdy <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> system właściwości wywołuje tę właściwość.</span><span class="sxs-lookup"><span data-stu-id="47b4f-132">Reference to a handler implementation that is to be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span></span></param>
        <summary><span data-ttu-id="47b4f-133">Inicjuje nowe wystąpienie <see cref="T:System.Windows.PropertyMetadata" /> klasy z określoną wartością domyślną i wywołaniami zwrotnymi.</span><span class="sxs-lookup"><span data-stu-id="47b4f-133">Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with the specified default value and callbacks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b4f-134">Jeśli <xref:System.Windows.CoerceValueCallback> chcesz określić <xref:System.Windows.PropertyChangedCallback>, ale nie do, można przekazać `null` `propertyChangedCallback` parametr.</span><span class="sxs-lookup"><span data-stu-id="47b4f-134">If you want to specify a <xref:System.Windows.CoerceValueCallback> but not a <xref:System.Windows.PropertyChangedCallback>, you can pass `null` for the `propertyChangedCallback` parameter.</span></span>  
  
 <span data-ttu-id="47b4f-135">Typ podanej `defaultValue` wartości musi być zgodny lub być powiązany z typem określonym w oryginalnej rejestracji właściwości zależności, do której zostaną zastosowane te metadane.</span><span class="sxs-lookup"><span data-stu-id="47b4f-135">The type of the value provided for `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="47b4f-136">Niezgodność między domyślnym typem wartości metadanych a typem właściwości zależności, która jest stosowana, może być trudna do debugowania, ponieważ nie jest wykrywalna podczas kompilacji (niezgodność spowoduje wystąpienie wyjątku czasu wykonywania).</span><span class="sxs-lookup"><span data-stu-id="47b4f-136">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).</span></span>  
  
 <span data-ttu-id="47b4f-137">Chociaż jest to wartość domyślna dla konstruktora bez parametrów, `defaultValue` <xref:System.Windows.DependencyProperty.UnsetValue> nie można określić elementu.</span><span class="sxs-lookup"><span data-stu-id="47b4f-137">Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified.</span></span> <span data-ttu-id="47b4f-138">Próba wykonania tej czynności spowoduje wystąpienie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="47b4f-138">Attempting to do so will raise an exception.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor3param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor3param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="47b4f-139"><paramref name="defaultValue" />nie można ustawić wartości <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="47b4f-139"><paramref name="defaultValue" /> cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CoerceValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.CoerceValueCallback CoerceValueCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.CoerceValueCallback CoerceValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.CoerceValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public Property CoerceValueCallback As CoerceValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::CoerceValueCallback ^ CoerceValueCallback { System::Windows::CoerceValueCallback ^ get(); void set(System::Windows::CoerceValueCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CoerceValueCallback : System.Windows.CoerceValueCallback with get, set" Usage="System.Windows.PropertyMetadata.CoerceValueCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.CoerceValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="47b4f-140">Pobiera lub ustawia odwołanie do <see cref="T:System.Windows.CoerceValueCallback" /> implementacji określonej w tych metadanych.</span><span class="sxs-lookup"><span data-stu-id="47b4f-140">Gets or sets a reference to a <see cref="T:System.Windows.CoerceValueCallback" /> implementation specified in this metadata.</span></span></summary>
        <value><span data-ttu-id="47b4f-141">Odwołanie <see cref="T:System.Windows.CoerceValueCallback" /> do implementacji.</span><span class="sxs-lookup"><span data-stu-id="47b4f-141">A <see cref="T:System.Windows.CoerceValueCallback" /> implementation reference.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b4f-142">Wywołania zwrotne w metadanych właściwości nie są zwykle publicznymi elementami członkowskimi typu zawierającego, więc wartość tej właściwości nie jest istotna dla większości scenariuszy, które po prostu zużywają metadane istniejącej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="47b4f-142">The callbacks in property metadata are not typically public members on the containing type, so the value of this property is not important for most scenarios that just consume an existing dependency property's metadata.</span></span> <span data-ttu-id="47b4f-143">Jednym z powodów, dla których ta właściwość jest narażona, jest to, że podklasy metadanych mogą wykonywać żądaną logikę scalania, jeśli oba metadane <xref:System.Windows.CoerceValueCallback>podstawowe i przesłanianie/dodawanie metadanych określają.</span><span class="sxs-lookup"><span data-stu-id="47b4f-143">One reason this property is exposed is so that metadata subclasses can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <xref:System.Windows.CoerceValueCallback>.</span></span> <span data-ttu-id="47b4f-144">Jednak domyślna logika scalania dla a <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> ma zastąpić poprzednią.</span><span class="sxs-lookup"><span data-stu-id="47b4f-144">However, the default merge logic for a <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> is to replace the previous one.</span></span>  
  
 <span data-ttu-id="47b4f-145"><xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>jest zdefiniowany w modelu obiektów jako do odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="47b4f-145"><xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> is defined in the object model as read-write.</span></span> <span data-ttu-id="47b4f-146">Można to zmienić po zainicjowaniu <xref:System.Windows.PropertyMetadata> samego obiektu. <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A></span><span class="sxs-lookup"><span data-stu-id="47b4f-146">This is so <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself.</span></span> <span data-ttu-id="47b4f-147">Jednak po wykorzystaniu metadanych jako części wywołania metody <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości spowoduje opieczętowanie, że wystąpienie metadanych i właściwości są teraz traktowane jako niezmienne.</span><span class="sxs-lookup"><span data-stu-id="47b4f-147">However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable.</span></span> <span data-ttu-id="47b4f-148">Próba ustawienia <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> <xref:System.Windows.PropertyMetadata.IsSealed%2A> raz wtymwystąpieniumetadanychspowodujewystąpieniewyjątku.`true`</span><span class="sxs-lookup"><span data-stu-id="47b4f-148">Attempting to set <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47b4f-149">Nie można ustawić właściwości metadanych, gdy zostanie ona zastosowana do operacji właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="47b4f-149">Cannot set a metadata property once it is applied to a dependency property operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public object DefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.DefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DefaultValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultValue : obj with get, set" Usage="System.Windows.PropertyMetadata.DefaultValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="47b4f-150">Pobiera lub ustawia wartość domyślną właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="47b4f-150">Gets or sets the default value of the dependency property.</span></span></summary>
        <value><span data-ttu-id="47b4f-151">Wartość domyślna właściwości.</span><span class="sxs-lookup"><span data-stu-id="47b4f-151">The default value of the property.</span></span> <span data-ttu-id="47b4f-152">Wartość domyślna w <see cref="T:System.Windows.PropertyMetadata" /> wystąpieniu utworzonym za pomocą konstruktora bez parametrów <see cref="F:System.Windows.DependencyProperty.UnsetValue" />będzie.</span><span class="sxs-lookup"><span data-stu-id="47b4f-152">The default value on a <see cref="T:System.Windows.PropertyMetadata" /> instance created with the parameterless constructor will be <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b4f-153"><xref:System.Windows.PropertyMetadata.DefaultValue%2A>jest zdefiniowany w modelu obiektów jako do odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="47b4f-153"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> is defined in the object model as read-write.</span></span> <span data-ttu-id="47b4f-154">Można to zmienić po zainicjowaniu <xref:System.Windows.PropertyMetadata> samego obiektu. <xref:System.Windows.PropertyMetadata.DefaultValue%2A></span><span class="sxs-lookup"><span data-stu-id="47b4f-154">This is so <xref:System.Windows.PropertyMetadata.DefaultValue%2A> can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself.</span></span> <span data-ttu-id="47b4f-155">Jednak po wykorzystaniu metadanych jako części wywołania metody <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości spowoduje opieczętowanie, że wystąpienie metadanych i właściwości są teraz traktowane jako niezmienne.</span><span class="sxs-lookup"><span data-stu-id="47b4f-155">However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable.</span></span> <span data-ttu-id="47b4f-156">Próba ustawienia <xref:System.Windows.PropertyMetadata.DefaultValue%2A> <xref:System.Windows.PropertyMetadata.IsSealed%2A> raz wtymwystąpieniumetadanychspowodujewystąpieniewyjątku.`true`</span><span class="sxs-lookup"><span data-stu-id="47b4f-156">Attempting to set <xref:System.Windows.PropertyMetadata.DefaultValue%2A> once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
 <span data-ttu-id="47b4f-157">Chociaż jest to wartość domyślna dla konstruktora bez parametrów, `defaultValue` <xref:System.Windows.DependencyProperty.UnsetValue> <xref:System.Windows.PropertyMetadata.DefaultValue%2A> nie można ustawiać przy użyciu ani konstruktora.</span><span class="sxs-lookup"><span data-stu-id="47b4f-157">Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be set using either <xref:System.Windows.PropertyMetadata.DefaultValue%2A> or the constructor.</span></span> <span data-ttu-id="47b4f-158">Próba wykonania tej czynności spowoduje wystąpienie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="47b4f-158">Attempting to do so will raise an exception.</span></span>  
  
<a name="xamlTextUsage_PropertyChangedCallback"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="47b4f-159">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="47b4f-159">XAML Text Usage</span></span>  
 <span data-ttu-id="47b4f-160">Elementy członkowskie tego typu nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]programie.</span><span class="sxs-lookup"><span data-stu-id="47b4f-160">Members of this type are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="47b4f-161">Nie można ustawić na wartość <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> po utworzeniu.</span><span class="sxs-lookup"><span data-stu-id="47b4f-161">Cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> once created.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47b4f-162">Nie można ustawić właściwości metadanych, gdy zostanie ona zastosowana do operacji właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="47b4f-162">Cannot set a metadata property once it is applied to a dependency property operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="protected bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.PropertyMetadata.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="47b4f-163">Pobiera wartość określającą, czy metadane zostały zastosowane do właściwości w jakiś sposób, co skutkuje niezmiennym stanem tego wystąpienia metadanych.</span><span class="sxs-lookup"><span data-stu-id="47b4f-163">Gets a value that determines whether the metadata has been applied to a property in some way, resulting in the immutable state of that metadata instance.</span></span></summary>
        <value><span data-ttu-id="47b4f-164"><see langword="true" />Jeśli wystąpienie metadanych jest niezmienne; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="47b4f-164"><see langword="true" /> if the metadata instance is immutable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b4f-165">Różne właściwości <xref:System.Windows.PropertyMetadata>, takie jak <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, są zdefiniowane w modelu obiektów jako do odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="47b4f-165">Various properties of <xref:System.Windows.PropertyMetadata>, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are defined in the object model as read-write.</span></span> <span data-ttu-id="47b4f-166">Dzieje się tak, aby można było dostosować te właściwości po zainicjowaniu <xref:System.Windows.PropertyMetadata> samego obiektu.</span><span class="sxs-lookup"><span data-stu-id="47b4f-166">This is so those properties can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself.</span></span> <span data-ttu-id="47b4f-167">Jednak po zastosowaniu metadanych do właściwości zależności w ramach wywołania do <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości będzie zapieczętować to wystąpienie metadanych i właściwości są teraz traktowane jako niezmienne.</span><span class="sxs-lookup"><span data-stu-id="47b4f-167">However, once the metadata is applied to a dependency property as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable.</span></span> <span data-ttu-id="47b4f-168">W czasie jednego z tych wywołań <xref:System.Windows.PropertyMetadata.OnApply%2A> jest wywoływana, a wartość tej właściwości jest ustawiona na. `true`</span><span class="sxs-lookup"><span data-stu-id="47b4f-168">At the time of one of these calls, <xref:System.Windows.PropertyMetadata.OnApply%2A> is called, and the value of this property is set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47b4f-169">Poniższy przykład sprawdza <xref:System.Windows.PropertyMetadata.IsSealed%2A> przed operacją ustawiania niestandardowej właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="47b4f-169">The following example  checks <xref:System.Windows.PropertyMetadata.IsSealed%2A> prior to a set operation of a custom metadata property.</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#MergeImpl](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#mergeimpl)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="protected virtual void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Merge(class System.Windows.PropertyMetadata baseMetadata, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Merge (baseMetadata As PropertyMetadata, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Merge(System::Windows::PropertyMetadata ^ baseMetadata, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit&#xA;override this.Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit" Usage="propertyMetadata.Merge (baseMetadata, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="baseMetadata"><span data-ttu-id="47b4f-170">Podstawowe metadane do scalenia z wartościami tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="47b4f-170">The base metadata to merge with this instance's values.</span></span></param>
        <param name="dp"><span data-ttu-id="47b4f-171">Właściwość zależności, do której są stosowane te metadane.</span><span class="sxs-lookup"><span data-stu-id="47b4f-171">The dependency property to which this metadata is being applied.</span></span></param>
        <summary><span data-ttu-id="47b4f-172">Scala te metadane z podstawowymi metadanymi.</span><span class="sxs-lookup"><span data-stu-id="47b4f-172">Merges this metadata with the base metadata.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b4f-173">Ta metoda jest używana wewnętrznie w przypadku przesłaniania metadanych (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> Metoda).</span><span class="sxs-lookup"><span data-stu-id="47b4f-173">This method is used internally when metadata is being overridden (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47b4f-174">Poniższy przykład implementuje scalanie dla niestandardowego typu metadanych, który dodaje dodatkową właściwość do metadanych właściwości.</span><span class="sxs-lookup"><span data-stu-id="47b4f-174">The following example implements a merge for a custom metadata type that adds an additional property to the property metadata.</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#MergeImpl](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#mergeimpl)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="47b4f-175">Implementacje klas, które <see cref="T:System.Windows.PropertyMetadata" /> pochodzą z powinny zastąpić tę metodę, w celu uwzględnienia wszelkich właściwości metadanych, które zostały dodane do ich implementacji.</span><span class="sxs-lookup"><span data-stu-id="47b4f-175">Class implementations that derive from <see cref="T:System.Windows.PropertyMetadata" /> should override this method to account for any metadata properties they have added in their implementations.</span></span> <span data-ttu-id="47b4f-176">Na przykład Twoja implementacja mogła dodać nową wartość wyliczenia flagwise, a <see cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementacja powinna mieć możliwość poprawnego łączenia tych flag.</span><span class="sxs-lookup"><span data-stu-id="47b4f-176">For instance, your implementation might have added a new flagwise enumeration value, and the <see cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation should then be able to combine those flags correctly.</span></span>  
  
<span data-ttu-id="47b4f-177">Zawsze należy wywoływać implementację podstawową przed kodem implementacji, ponieważ podstawowa implementacja jest w trakcie scalania wszystkich właściwości już zdefiniowanych w <see cref="T:System.Windows.PropertyMetadata" /> typie.</span><span class="sxs-lookup"><span data-stu-id="47b4f-177">Always call the base implementation prior to your implementation code, because the base implementation takes care of merging all the properties already defined on the <see cref="T:System.Windows.PropertyMetadata" /> type.</span></span>  
  
<span data-ttu-id="47b4f-178">Dokładne zachowanie scalania jest aktualne.</span><span class="sxs-lookup"><span data-stu-id="47b4f-178">The exact behavior of the merge is up to you.</span></span> <span data-ttu-id="47b4f-179">Można wybrać opcję łączenia wartości, przywrócić wartość bazową, jeśli metadane pochodne zostały pozostawione domyślnie lub wiele innych zachowań opartych na typach właściwości, które zostały dodane do określonej klasy metadanych, i ich znaczenia.</span><span class="sxs-lookup"><span data-stu-id="47b4f-179">You could choose to have values combined, revert to base value if the derived metadata were left at the default, or many other behaviors based on the types of properties you have added to your particular metadata class, and their meanings.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="OnApply">
      <MemberSignature Language="C#" Value="protected virtual void OnApply (System.Windows.DependencyProperty dp, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnApply(class System.Windows.DependencyProperty dp, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnApply (dp As DependencyProperty, targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnApply(System::Windows::DependencyProperty ^ dp, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member OnApply : System.Windows.DependencyProperty * Type -&gt; unit&#xA;override this.OnApply : System.Windows.DependencyProperty * Type -&gt; unit" Usage="propertyMetadata.OnApply (dp, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="47b4f-180">Właściwość zależności, do której zastosowano metadane.</span><span class="sxs-lookup"><span data-stu-id="47b4f-180">The dependency property to which the metadata has been applied.</span></span></param>
        <param name="targetType"><span data-ttu-id="47b4f-181">Typ skojarzony z tymi metadanymi, jeśli jest to metadane specyficzne dla określonego typu.</span><span class="sxs-lookup"><span data-stu-id="47b4f-181">The type associated with this metadata if this is type-specific metadata.</span></span> <span data-ttu-id="47b4f-182">Jeśli jest to metadane domyślne, ta wartość jest odwołaniem o wartości null.</span><span class="sxs-lookup"><span data-stu-id="47b4f-182">If this is default metadata, this value is a null reference.</span></span></param>
        <summary><span data-ttu-id="47b4f-183">Wywoływana, gdy te metadane zostały zastosowane do właściwości, co oznacza, że metadane są zapieczętowane.</span><span class="sxs-lookup"><span data-stu-id="47b4f-183">Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b4f-184">Podklasy powinny zapewnić, że wszystkie zmienność struktury <xref:System.Windows.PropertyMetadata> danych podklasy powinny być oznaczone jako niezmienne, gdy <xref:System.Windows.PropertyMetadata.OnApply%2A> jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="47b4f-184">Subclasses should assure that any mutability of the data structure of a <xref:System.Windows.PropertyMetadata> subclass should be marked as immutable once <xref:System.Windows.PropertyMetadata.OnApply%2A> is called.</span></span> <span data-ttu-id="47b4f-185">Ten element zostanie wywołany po zastosowaniu metadanych do operacji systemu właściwości (Register, Add Owner, override Metadata).</span><span class="sxs-lookup"><span data-stu-id="47b4f-185">This will be called once the metadata is applied to a property system operation (register, add owner, override metadata).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyChangedCallback">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyChangedCallback PropertyChangedCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyChangedCallback PropertyChangedCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.PropertyChangedCallback" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyChangedCallback As PropertyChangedCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyChangedCallback ^ PropertyChangedCallback { System::Windows::PropertyChangedCallback ^ get(); void set(System::Windows::PropertyChangedCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PropertyChangedCallback : System.Windows.PropertyChangedCallback with get, set" Usage="System.Windows.PropertyMetadata.PropertyChangedCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyChangedCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="47b4f-186">Pobiera lub ustawia odwołanie do <see cref="T:System.Windows.PropertyChangedCallback" /> implementacji określonej w tych metadanych.</span><span class="sxs-lookup"><span data-stu-id="47b4f-186">Gets or sets a reference to a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation specified in this metadata.</span></span></summary>
        <value><span data-ttu-id="47b4f-187">Odwołanie <see cref="T:System.Windows.PropertyChangedCallback" /> do implementacji.</span><span class="sxs-lookup"><span data-stu-id="47b4f-187">A <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b4f-188">Wywołania zwrotne w metadanych właściwości nie są zwykle publicznymi elementami członkowskimi typu definiującego, więc wartość tej właściwości nie jest istotna dla większości scenariuszy, które po prostu zużywają metadane istniejącej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="47b4f-188">The callbacks in property metadata are not typically public members on the defining type, so the value of this property is not important for most scenarios that just consume an existing dependency property's metadata.</span></span> <span data-ttu-id="47b4f-189">Jednym z powodów, dla których ta właściwość jest ujawniana, jest to, że klasy metadanych mogą wykonywać żądaną logikę scalania, jeśli oba <xref:System.Windows.PropertyChangedCallback>metadane podstawowe i przesłanianie/dodawanie metadanych określają.</span><span class="sxs-lookup"><span data-stu-id="47b4f-189">One reason this property is exposed is so that metadata classes can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <xref:System.Windows.PropertyChangedCallback>.</span></span> <span data-ttu-id="47b4f-190">Domyślna logika scalania dla programu to obsługa wszystkich <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> implementacji w tabeli i wywoływanie każdej z nich, z wywołaniami zwrotnymi ustanowionymi przez najgłębszej klasy w hierarchii uruchomionej jako pierwsze.</span><span class="sxs-lookup"><span data-stu-id="47b4f-190">The default merge logic for is to maintain all <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> implementations in a table and call each of them, with callbacks established by the deepest class in hierarchy running first.</span></span>  
  
 <span data-ttu-id="47b4f-191"><xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A>jest zdefiniowany w modelu obiektów jako do odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="47b4f-191"><xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> is defined in the object model as read-write.</span></span> <span data-ttu-id="47b4f-192">Można to zmienić po zainicjowaniu <xref:System.Windows.PropertyMetadata> samego obiektu. <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A></span><span class="sxs-lookup"><span data-stu-id="47b4f-192">This is so <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself.</span></span> <span data-ttu-id="47b4f-193">Jednak po wykorzystaniu metadanych jako części wywołania metody <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości spowoduje opieczętowanie, że wystąpienie metadanych i właściwości są teraz traktowane jako niezmienne.</span><span class="sxs-lookup"><span data-stu-id="47b4f-193">However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable.</span></span> <span data-ttu-id="47b4f-194">Próba ustawienia <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> <xref:System.Windows.PropertyMetadata.IsSealed%2A> raz wtymwystąpieniumetadanychspowodujewystąpieniewyjątku.`true`</span><span class="sxs-lookup"><span data-stu-id="47b4f-194">Attempting to set <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="47b4f-195">Nie można ustawić właściwości metadanych, gdy zostanie ona zastosowana do operacji właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="47b4f-195">Cannot set a metadata property once it is applied to a dependency property operation.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
