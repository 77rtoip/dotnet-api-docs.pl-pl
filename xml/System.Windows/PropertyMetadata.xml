<Type Name="PropertyMetadata" FullName="System.Windows.PropertyMetadata">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="423f853a60d99a5767f47d8a9e4d3ef0dce3cb15" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39845061" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PropertyMetadata" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyMetadata extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.PropertyMetadata" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyMetadata" />
  <TypeSignature Language="F#" Value="type PropertyMetadata = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="f017e-101">Definiuje zachowanie niektórych aspektów właściwości zależności, natychmiast po zastosowaniu do określonego typu, w tym warunki, który został zarejestrowany za pomocą.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f017e-101">Defines certain behavior aspects of a dependency property as it is applied to a specific type, including conditions it was registered with.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f017e-102">Metadane właściwości mogą być definiowane i używany podczas rejestracji właściwość zależności podczas wywoływania <xref:System.Windows.DependencyProperty.Register%2A> — metoda (lub odmiany dołączone właściwości lub właściwości zależności tylko do odczytu) lub po pierwotnej rejestracji właściciel podczas wywoływania <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="f017e-102">Property metadata can be defined and used during dependency property registration when calling the <xref:System.Windows.DependencyProperty.Register%2A> method (or variations for attached properties or read-only dependency properties), or after original owner registration when calling the <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> method.</span></span> <span data-ttu-id="f017e-103"><xref:System.Windows.DependencyProperty.AddOwner%2A> pobiera również metadanych właściwości modelu.</span><span class="sxs-lookup"><span data-stu-id="f017e-103"><xref:System.Windows.DependencyProperty.AddOwner%2A> also takes property metadata.</span></span>  
  
 <span data-ttu-id="f017e-104">Ta klasa jest konkretnej klasy podstawowej, która może być używana w każdej z tych wywołań.</span><span class="sxs-lookup"><span data-stu-id="f017e-104">This class is a concrete base class that can be used in each of these calls.</span></span> <span data-ttu-id="f017e-105">Jednak to bardzo powszechne, aby określić metadanych przy użyciu jednej z klas pochodnych, takich jak <xref:System.Windows.FrameworkPropertyMetadata>.</span><span class="sxs-lookup"><span data-stu-id="f017e-105">However, it is very common to specify metadata using one of the derived classes such as <xref:System.Windows.FrameworkPropertyMetadata>.</span></span> <span data-ttu-id="f017e-106">Te klasy pochodnej obsługuje bardziej szczegółowe metadanych jako wartości właściwości typu Boolean, które są przydatne w przypadku wykrycia lub włączenie niektórych właściwości systemu i układ zachowania, które są implementowane tylko na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] poziomie struktury.</span><span class="sxs-lookup"><span data-stu-id="f017e-106">These derived classes support more detailed metadata carried as Boolean property values, which are useful for either detecting or enabling some property system and layout behaviors that are only implemented at the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] framework level.</span></span>  
  
 <span data-ttu-id="f017e-107">Kilka właściwości tej klasy jest odczytu i zapisu w modelu obiektów, ale może być zapisany tylko przed wystąpienia, takich jak używane w ramach operacji systemu właściwości <xref:System.Windows.DependencyProperty.Register%2A> lub <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="f017e-107">Several properties of this class are read-write to the object model, but can only be written prior to the instance being used in a property system operation such as <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>.</span></span> <span data-ttu-id="f017e-108">Każda z tych właściwości może być także ustawiona przez konstruktora, ale są widoczne, aby <xref:System.Windows.PropertyMetadata.Merge%2A> je ustawić implementacje metod.</span><span class="sxs-lookup"><span data-stu-id="f017e-108">Each of these properties could also have been set by the constructor but are exposed so that <xref:System.Windows.PropertyMetadata.Merge%2A> method implementations can set them.</span></span>  
  
<a name="xamlTextUsage_PropertyMetadata"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="f017e-109">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="f017e-109">XAML Text Usage</span></span>  
 <span data-ttu-id="f017e-110">Ten typ i elementy członkowskie tego typu nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="f017e-110">This type, and members of this type, are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f017e-111">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.PropertyMetadata" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-111">Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f017e-112">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.PropertyMetadata" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-112">Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Object ^ defaultValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyMetadata : obj -&gt; System.Windows.PropertyMetadata" Usage="new System.Windows.PropertyMetadata defaultValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="f017e-113">Wartość domyślna do określenia dla właściwości zależności, zwykle dostarczane jako wartości niektóre określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-113">The default value to specify for a dependency property, usually provided as a value of some specific type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f017e-114">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.PropertyMetadata" /> klasy z określoną wartość domyślną dla właściwości zależności, które te metadane zostaną zastosowane do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-114">Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with a specified default value for the dependency property that this metadata will be applied to.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f017e-115">Typ wartości parametru `defaultValue` muszą być zgodne, lub być one związane z typem określonym w oryginalnej rejestrację właściwości zależności, które te metadane zostaną zastosowane do.</span><span class="sxs-lookup"><span data-stu-id="f017e-115">The type of the value provided for `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="f017e-116">Niezgodności między metadanych domyślny typ wartości i typ właściwości zależności, które są stosowane do może być trudne do debugowania, ponieważ ta niezgodność występuje wykrywalny podczas kompilacji (niezgodność zgłosi wyjątek czasu wykonywania).</span><span class="sxs-lookup"><span data-stu-id="f017e-116">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).</span></span>  
  
 <span data-ttu-id="f017e-117">Chociaż istnieje domyślny dla konstruktora bez parametrów `defaultValue` z <xref:System.Windows.DependencyProperty.UnsetValue> nie może być określony.</span><span class="sxs-lookup"><span data-stu-id="f017e-117">Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified.</span></span> <span data-ttu-id="f017e-118">Próby podjęły zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="f017e-118">Attempting to do so will raise an exception.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor1param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor1param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f017e-119">
            <paramref name="defaultValue" /> Nie można ustawić na wartość <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-119">
              <paramref name="defaultValue" /> cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyMetadata : System.Windows.PropertyChangedCallback -&gt; System.Windows.PropertyMetadata" Usage="new System.Windows.PropertyMetadata propertyChangedCallback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback">
          <span data-ttu-id="f017e-120">Odwołanie do implementacji programu obsługi, który ma być wywoływany przez system właściwości, zawsze wtedy, gdy zmienia się od wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-120">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f017e-121">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.PropertyMetadata" /> klasy z określonym <see cref="T:System.Windows.PropertyChangedCallback" /> odwołanie do implementacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-121">Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with the specified <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor1paramcallback](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor1paramcallback)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyMetadata : obj * System.Windows.PropertyChangedCallback -&gt; System.Windows.PropertyMetadata" Usage="new System.Windows.PropertyMetadata (defaultValue, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="f017e-122">Wartość domyślna właściwości zależności, zwykle dostarczane jako wartości niektóre określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-122">The default value of the dependency property, usually provided as a value of some specific type.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="f017e-123">Odwołanie do implementacji programu obsługi, który ma być wywoływany przez system właściwości, zawsze wtedy, gdy zmienia się od wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-123">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f017e-124">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.PropertyMetadata" /> klasy z określoną wartość domyślną i <see cref="T:System.Windows.PropertyChangedCallback" /> odwołanie do implementacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-124">Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with the specified default value and <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f017e-125">Typ wartości, podane `defaultValue` muszą być zgodne, lub być one związane z typem określonym w oryginalnej rejestrację właściwości zależności, które te metadane zostaną zastosowane do.</span><span class="sxs-lookup"><span data-stu-id="f017e-125">The type of the value provided `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="f017e-126">Niezgodności między metadanych domyślny typ wartości i typ właściwości zależności, które są stosowane do może być trudne do debugowania, ponieważ ta niezgodność występuje wykrywalny podczas kompilacji (niezgodność zgłosi wyjątek czasu wykonywania).</span><span class="sxs-lookup"><span data-stu-id="f017e-126">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).</span></span>  
  
 <span data-ttu-id="f017e-127">Chociaż istnieje domyślny dla konstruktora bez parametrów `defaultValue` z <xref:System.Windows.DependencyProperty.UnsetValue> nie może być określony.</span><span class="sxs-lookup"><span data-stu-id="f017e-127">Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified.</span></span> <span data-ttu-id="f017e-128">Próby podjęły zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="f017e-128">Attempting to do so will raise an exception.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor2param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor2param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f017e-129">
            <paramref name="defaultValue" /> Nie można ustawić na wartość <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-129">
              <paramref name="defaultValue" /> cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyMetadata : obj * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.PropertyMetadata" Usage="new System.Windows.PropertyMetadata (defaultValue, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="f017e-130">Wartość domyślna właściwości zależności, zwykle dostarczane jako wartości niektóre określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-130">The default value of the dependency property, usually provided as a value of some specific type.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="f017e-131">Odwołanie do implementacji programu obsługi, który ma być wywoływany przez system właściwości, zawsze wtedy, gdy zmienia się od wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-131">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="f017e-132">Odwołanie do implementacji programu obsługi, który ma być wywoływana zawsze wtedy, gdy system właściwość wywołuje <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> względem tej właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-132">Reference to a handler implementation that is to be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f017e-133">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.PropertyMetadata" /> klasy z określoną wartość domyślną i wywołania zwrotne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-133">Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" /> class with the specified default value and callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f017e-134">Jeśli chcesz określić <xref:System.Windows.CoerceValueCallback> , ale nie <xref:System.Windows.PropertyChangedCallback>, można przekazać `null` dla `propertyChangedCallback` parametru.</span><span class="sxs-lookup"><span data-stu-id="f017e-134">If you want to specify a <xref:System.Windows.CoerceValueCallback> but not a <xref:System.Windows.PropertyChangedCallback>, you can pass `null` for the `propertyChangedCallback` parameter.</span></span>  
  
 <span data-ttu-id="f017e-135">Typ wartości parametru `defaultValue` muszą być zgodne, lub być one związane z typem określonym w oryginalnej rejestrację właściwości zależności, które te metadane zostaną zastosowane do.</span><span class="sxs-lookup"><span data-stu-id="f017e-135">The type of the value provided for `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="f017e-136">Niezgodności między metadanych domyślny typ wartości i typ właściwości zależności, które są stosowane do może być trudne do debugowania, ponieważ ta niezgodność występuje wykrywalny podczas kompilacji (niezgodność zgłosi wyjątek czasu wykonywania).</span><span class="sxs-lookup"><span data-stu-id="f017e-136">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).</span></span>  
  
 <span data-ttu-id="f017e-137">Chociaż istnieje domyślny dla konstruktora bez parametrów `defaultValue` z <xref:System.Windows.DependencyProperty.UnsetValue> nie może być określony.</span><span class="sxs-lookup"><span data-stu-id="f017e-137">Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified.</span></span> <span data-ttu-id="f017e-138">Próby podjęły zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="f017e-138">Attempting to do so will raise an exception.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  
[!code-csharp[PropertyMetadataAPIs#PMCtor3param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor3param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f017e-139">
            <paramref name="defaultValue" /> Nie można ustawić na wartość <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-139">
              <paramref name="defaultValue" /> cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CoerceValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.CoerceValueCallback CoerceValueCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.CoerceValueCallback CoerceValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.CoerceValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public Property CoerceValueCallback As CoerceValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::CoerceValueCallback ^ CoerceValueCallback { System::Windows::CoerceValueCallback ^ get(); void set(System::Windows::CoerceValueCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CoerceValueCallback : System.Windows.CoerceValueCallback with get, set" Usage="System.Windows.PropertyMetadata.CoerceValueCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.CoerceValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f017e-140">Pobiera lub ustawia odwołanie <see cref="T:System.Windows.CoerceValueCallback" /> implementacji określonego w metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-140">Gets or sets a reference to a <see cref="T:System.Windows.CoerceValueCallback" /> implementation specified in this metadata.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f017e-141">A <see cref="T:System.Windows.CoerceValueCallback" /> odwołanie do implementacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-141">A <see cref="T:System.Windows.CoerceValueCallback" /> implementation reference.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f017e-142">Wywołania zwrotne w metadanych właściwości nie są zwykle publiczne elementy członkowskie w typie zawierającym, więc wartość tej właściwości nie jest ważna w przypadku większości scenariuszy korzystających z tylko metadanych istniejącej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="f017e-142">The callbacks in property metadata are not typically public members on the containing type, so the value of this property is not important for most scenarios that just consume an existing dependency property's metadata.</span></span> <span data-ttu-id="f017e-143">Jednym z powodów ta właściwość jest uwidaczniana jest tak, aby podklasy metadanych może wykonać logikę żądaną scalania, jeśli podstawowy metadane i zastępowanie/Dodawanie metadanych określ <xref:System.Windows.CoerceValueCallback>.</span><span class="sxs-lookup"><span data-stu-id="f017e-143">One reason this property is exposed is so that metadata subclasses can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <xref:System.Windows.CoerceValueCallback>.</span></span> <span data-ttu-id="f017e-144">Jednak domyślnie scalania logikę <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> ma zastąpić poprzedni.</span><span class="sxs-lookup"><span data-stu-id="f017e-144">However, the default merge logic for a <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> is to replace the previous one.</span></span>  
  
 <span data-ttu-id="f017e-145"><xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> jest zdefiniowany w modelu obiektu jako odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="f017e-145"><xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> is defined in the object model as read-write.</span></span> <span data-ttu-id="f017e-146">Dzieje się tak <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> można zmienić po zainicjowaniu elementu <xref:System.Windows.PropertyMetadata> sam obiekt.</span><span class="sxs-lookup"><span data-stu-id="f017e-146">This is so <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself.</span></span> <span data-ttu-id="f017e-147">Jednak po zużyciu metadanych jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości zostanie zapieczętowania to wystąpienie metadanych i właściwości są teraz uważany za niezmienialny.</span><span class="sxs-lookup"><span data-stu-id="f017e-147">However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable.</span></span> <span data-ttu-id="f017e-148">Trwa próba skonfigurowania <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> po <xref:System.Windows.PropertyMetadata.IsSealed%2A> jest `true` na te metadane wystąpienia zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="f017e-148">Attempting to set <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f017e-149">Nie można ustawić właściwości metadanych, po zastosowaniu operacji właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-149">Cannot set a metadata property once it is applied to a dependency property operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public object DefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.DefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DefaultValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultValue : obj with get, set" Usage="System.Windows.PropertyMetadata.DefaultValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f017e-150">Pobiera lub ustawia domyślną wartość właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-150">Gets or sets the default value of the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f017e-151">Wartość domyślna właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-151">The default value of the property.</span>
          </span>
          <span data-ttu-id="f017e-152">Wartość domyślna dla <see cref="T:System.Windows.PropertyMetadata" /> wystąpienia utworzone za pomocą konstruktora bez parametrów zostaną <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-152">The default value on a <see cref="T:System.Windows.PropertyMetadata" /> instance created with the parameterless constructor will be <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f017e-153"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> jest zdefiniowany w modelu obiektu jako odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="f017e-153"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> is defined in the object model as read-write.</span></span> <span data-ttu-id="f017e-154">Dzieje się tak <xref:System.Windows.PropertyMetadata.DefaultValue%2A> można zmienić po zainicjowaniu elementu <xref:System.Windows.PropertyMetadata> sam obiekt.</span><span class="sxs-lookup"><span data-stu-id="f017e-154">This is so <xref:System.Windows.PropertyMetadata.DefaultValue%2A> can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself.</span></span> <span data-ttu-id="f017e-155">Jednak po zużyciu metadanych jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości zostanie zapieczętowania to wystąpienie metadanych i właściwości są teraz uważany za niezmienialny.</span><span class="sxs-lookup"><span data-stu-id="f017e-155">However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable.</span></span> <span data-ttu-id="f017e-156">Trwa próba skonfigurowania <xref:System.Windows.PropertyMetadata.DefaultValue%2A> po <xref:System.Windows.PropertyMetadata.IsSealed%2A> jest `true` na te metadane wystąpienia zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="f017e-156">Attempting to set <xref:System.Windows.PropertyMetadata.DefaultValue%2A> once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
 <span data-ttu-id="f017e-157">Chociaż istnieje domyślny dla konstruktora bez parametrów `defaultValue` z <xref:System.Windows.DependencyProperty.UnsetValue> nie można ustawić za pomocą <xref:System.Windows.PropertyMetadata.DefaultValue%2A> lub konstruktora.</span><span class="sxs-lookup"><span data-stu-id="f017e-157">Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be set using either <xref:System.Windows.PropertyMetadata.DefaultValue%2A> or the constructor.</span></span> <span data-ttu-id="f017e-158">Próby podjęły zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="f017e-158">Attempting to do so will raise an exception.</span></span>  
  
<a name="xamlTextUsage_PropertyChangedCallback"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="f017e-159">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="f017e-159">XAML Text Usage</span></span>  
 <span data-ttu-id="f017e-160">Elementy członkowskie tego typu nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="f017e-160">Members of this type are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f017e-161">Nie można ustawić na wartość <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> po utworzeniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-161">Cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> once created.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f017e-162">Nie można ustawić właściwości metadanych, po zastosowaniu operacji właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-162">Cannot set a metadata property once it is applied to a dependency property operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="protected bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.PropertyMetadata.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f017e-163">Pobiera wartość określającą, czy metadane zostały zastosowane do właściwości w jakiś sposób skutkuje niezmiennego stanu danego wystąpienia metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-163">Gets a value that determines whether the metadata has been applied to a property in some way, resulting in the immutable state of that metadata instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f017e-164">
            <see langword="true" /> Jeśli wystąpienie metadanych jest niezmienny; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-164">
              <see langword="true" /> if the metadata instance is immutable; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f017e-165">Różne właściwości <xref:System.Windows.PropertyMetadata>, takich jak <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, są zdefiniowane w modelu obiektu jako odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="f017e-165">Various properties of <xref:System.Windows.PropertyMetadata>, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are defined in the object model as read-write.</span></span> <span data-ttu-id="f017e-166">Jest to, aby te właściwości można zmienić po zainicjowaniu elementu <xref:System.Windows.PropertyMetadata> sam obiekt.</span><span class="sxs-lookup"><span data-stu-id="f017e-166">This is so those properties can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself.</span></span> <span data-ttu-id="f017e-167">Jednak po zastosowaniu metadanych właściwości zależności jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości zostanie zapieczętowania to wystąpienie metadanych i właściwości są teraz uważany za niezmienialny.</span><span class="sxs-lookup"><span data-stu-id="f017e-167">However, once the metadata is applied to a dependency property as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable.</span></span> <span data-ttu-id="f017e-168">W czasie jednej z tych wywołań <xref:System.Windows.PropertyMetadata.OnApply%2A> nosi nazwę, a wartość tej właściwości jest równa `true`.</span><span class="sxs-lookup"><span data-stu-id="f017e-168">At the time of one of these calls, <xref:System.Windows.PropertyMetadata.OnApply%2A> is called, and the value of this property is set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f017e-169">Następujące testy przykład <xref:System.Windows.PropertyMetadata.IsSealed%2A> przed operacją zestaw właściwości niestandardowych metadanych.</span><span class="sxs-lookup"><span data-stu-id="f017e-169">The following example  checks <xref:System.Windows.PropertyMetadata.IsSealed%2A> prior to a set operation of a custom metadata property.</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#MergeImpl](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#mergeimpl)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="protected virtual void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Merge(class System.Windows.PropertyMetadata baseMetadata, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Merge (baseMetadata As PropertyMetadata, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Merge(System::Windows::PropertyMetadata ^ baseMetadata, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit&#xA;override this.Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit" Usage="propertyMetadata.Merge (baseMetadata, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="baseMetadata">
          <span data-ttu-id="f017e-170">Podstawowy metadane do scalenia z wartościami tego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-170">The base metadata to merge with this instance's values.</span>
          </span>
        </param>
        <param name="dp">
          <span data-ttu-id="f017e-171">Właściwości zależności, do którego jest stosowane w metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-171">The dependency property to which this metadata is being applied.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f017e-172">Scala te metadane za pomocą podstawowej metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-172">Merges this metadata with the base metadata.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f017e-173">Ta metoda jest używana wewnętrznie, gdy metadane są zastępowane (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> metody).</span><span class="sxs-lookup"><span data-stu-id="f017e-173">This method is used internally when metadata is being overridden (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f017e-174">Poniższy przykład implementuje scalania dla typu niestandardowych metadanych, który dodaje dodatkowe właściwości metadanych właściwości modelu.</span><span class="sxs-lookup"><span data-stu-id="f017e-174">The following example implements a merge for a custom metadata type that adds an additional property to the property metadata.</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#MergeImpl](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#mergeimpl)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="f017e-175">
            <para>Klasa implementacji, które wynikają z <see cref="T:System.Windows.PropertyMetadata" /> powinny przesłaniać tę metodę, aby uwzględnić wszystkie właściwości metadanych dodali w implementacji. Na przykład implementacji, że dodano nową wartość wyliczenia flagwise i <see cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementacji następnie powinien mieć możliwość łączenia tych flag poprawnie.  Zawsze wywoływać implementację podstawową przed kod implementacji, ponieważ Podstawowa implementacja dba o wszystkie właściwości, które są już zdefiniowane na scalanie <see cref="T:System.Windows.PropertyMetadata" /> typu.  Dokładne zachowanie scalania jest do Ciebie. Można wybrać wartości w połączeniu, przywrócić wartości bazowej, jeśli pozostawiono pochodnej metadanych na domyślny lub wielu innych zachowań na podstawie typów właściwości, które zostały dodane do klasy określonej metadanych i ich znaczenie.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-175">
              <para>Class implementations that derive from <see cref="T:System.Windows.PropertyMetadata" /> should override this method to account for any metadata properties they have added in their implementations. For instance, your implementation might have added a new flagwise enumeration value, and the <see cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation should then be able to combine those flags correctly.  Always call the base implementation prior to your implementation code, because the base implementation takes care of merging all the properties already defined on the <see cref="T:System.Windows.PropertyMetadata" /> type.  The exact behavior of the merge is up to you. You could choose to have values combined, revert to base value if the derived metadata were left at the default, or many other behaviors based on the types of properties you have added to your particular metadata class, and their meanings.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="OnApply">
      <MemberSignature Language="C#" Value="protected virtual void OnApply (System.Windows.DependencyProperty dp, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnApply(class System.Windows.DependencyProperty dp, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnApply (dp As DependencyProperty, targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnApply(System::Windows::DependencyProperty ^ dp, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member OnApply : System.Windows.DependencyProperty * Type -&gt; unit&#xA;override this.OnApply : System.Windows.DependencyProperty * Type -&gt; unit" Usage="propertyMetadata.OnApply (dp, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="f017e-176">Właściwości zależności, do którego zastosowano metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-176">The dependency property to which the metadata has been applied.</span>
          </span>
        </param>
        <param name="targetType">
          <span data-ttu-id="f017e-177">Typ skojarzony z metadanych, jeśli jest to metadane specyficzne dla danego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-177">The type associated with this metadata if this is type-specific metadata.</span>
          </span>
          <span data-ttu-id="f017e-178">Jeśli jest to domyślny metadanych, ta wartość jest odwołanie o wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-178">If this is default metadata, this value is a null reference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f017e-179">Wywołuje się, gdy metadane zostały doliczone do właściwości, co oznacza, że metadane jest zapieczętowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-179">Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f017e-180">Podklasy powinny zapewnić, że wszelkie zmienność struktury danych <xref:System.Windows.PropertyMetadata> podklasy powinien być oznaczony jako niezmienialny raz <xref:System.Windows.PropertyMetadata.OnApply%2A> jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="f017e-180">Subclasses should assure that any mutability of the data structure of a <xref:System.Windows.PropertyMetadata> subclass should be marked as immutable once <xref:System.Windows.PropertyMetadata.OnApply%2A> is called.</span></span> <span data-ttu-id="f017e-181">Ta zostanie wywołana, po zastosowaniu metadanych dla działania systemu właściwości (rejestrowanie, dodawanie właściciela, Zastąp metadane).</span><span class="sxs-lookup"><span data-stu-id="f017e-181">This will be called once the metadata is applied to a property system operation (register, add owner, override metadata).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyChangedCallback">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyChangedCallback PropertyChangedCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyChangedCallback PropertyChangedCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyMetadata.PropertyChangedCallback" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyChangedCallback As PropertyChangedCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyChangedCallback ^ PropertyChangedCallback { System::Windows::PropertyChangedCallback ^ get(); void set(System::Windows::PropertyChangedCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PropertyChangedCallback : System.Windows.PropertyChangedCallback with get, set" Usage="System.Windows.PropertyMetadata.PropertyChangedCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyChangedCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f017e-182">Pobiera lub ustawia odwołanie <see cref="T:System.Windows.PropertyChangedCallback" /> implementacji określonego w metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-182">Gets or sets a reference to a <see cref="T:System.Windows.PropertyChangedCallback" /> implementation specified in this metadata.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f017e-183">A <see cref="T:System.Windows.PropertyChangedCallback" /> odwołanie do implementacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-183">A <see cref="T:System.Windows.PropertyChangedCallback" /> implementation reference.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f017e-184">Wywołania zwrotne w metadanych właściwości nie są zwykle publiczne elementy członkowskie na typ definiujący, więc wartość tej właściwości nie jest ważna w przypadku większości scenariuszy korzystających z tylko metadanych istniejącej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="f017e-184">The callbacks in property metadata are not typically public members on the defining type, so the value of this property is not important for most scenarios that just consume an existing dependency property's metadata.</span></span> <span data-ttu-id="f017e-185">Jednym z powodów ta właściwość jest uwidaczniana jest tak, aby metadanych klas może wykonać logikę żądaną scalania, jeśli podstawowy metadane i zastępowanie/Dodawanie metadanych określ <xref:System.Windows.PropertyChangedCallback>.</span><span class="sxs-lookup"><span data-stu-id="f017e-185">One reason this property is exposed is so that metadata classes can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <xref:System.Windows.PropertyChangedCallback>.</span></span> <span data-ttu-id="f017e-186">Domyślną logikę scalania jest zachowanie wszystkich <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> implementacji w tabeli i wywołania ich za pomocą wywołania zwrotne ustanowione przez klasę najgłębiej zagnieżdżoną w hierarchii systemem pierwsze.</span><span class="sxs-lookup"><span data-stu-id="f017e-186">The default merge logic for is to maintain all <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> implementations in a table and call each of them, with callbacks established by the deepest class in hierarchy running first.</span></span>  
  
 <span data-ttu-id="f017e-187"><xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> jest zdefiniowany w modelu obiektu jako odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="f017e-187"><xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> is defined in the object model as read-write.</span></span> <span data-ttu-id="f017e-188">Dzieje się tak <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> można zmienić po zainicjowaniu elementu <xref:System.Windows.PropertyMetadata> sam obiekt.</span><span class="sxs-lookup"><span data-stu-id="f017e-188">This is so <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself.</span></span> <span data-ttu-id="f017e-189">Jednak po zużyciu metadanych jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości zostanie zapieczętowania to wystąpienie metadanych i właściwości są teraz uważany za niezmienialny.</span><span class="sxs-lookup"><span data-stu-id="f017e-189">However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable.</span></span> <span data-ttu-id="f017e-190">Trwa próba skonfigurowania <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> po <xref:System.Windows.PropertyMetadata.IsSealed%2A> jest `true` na te metadane wystąpienia zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="f017e-190">Attempting to set <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f017e-191">Nie można ustawić właściwości metadanych, po zastosowaniu operacji właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f017e-191">Cannot set a metadata property once it is applied to a dependency property operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>