<Type Name="LengthConverter" FullName="System.Windows.LengthConverter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fa65b4410c72835c5b977942d8d33b6a4e6e7ae2" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69444478" /></Metadata><TypeSignature Language="C#" Value="public class LengthConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LengthConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LengthConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class LengthConverter&#xA;Inherits TypeConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class LengthConverter : System::ComponentModel::TypeConverter" />
  <TypeSignature Language="F#" Value="type LengthConverter = class&#xA;    inherit TypeConverter" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Konwertuje wystąpienia innych typów do i z wystąpień <see cref="T:System.Double" /> , które reprezentują długość obiektu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.LengthConverter>obsługuje konwersję do i z następujących typów: <xref:System.String>, <xref:System.Decimal> <xref:System.Int32> <xref:System.Double> <xref:System.Single> <xref:System.Int16> <xref:System.UInt64>, ,,<xref:System.UInt16>,,,,, i. <xref:System.UInt32> <xref:System.Int64>  
  
## Examples  
 Poniższy przykład pokazuje, jak utworzyć wystąpienie <xref:System.Windows.LengthConverter> obiektu i korzystać z niego. Zdefiniowano `ChangeLeft` metodę niestandardową, która konwertuje zawartość elementu [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] <xref:System.Windows.Controls.ListBoxItem> (zdefiniowanego w osobnym pliku) na wystąpienie elementu <xref:System.Double>, a następnie do elementu <xref:System.String>. Ta <xref:System.Windows.Controls.ListBoxItem> Metoda przekazuje <xref:System.Double>do <xref:System.Windows.LengthConverter> <xref:System.Windows.Controls.ListBoxItem> obiektu,który<xref:System.Windows.Controls.ContentControl.Content%2A> konwertuje do wystąpienia. Zauważ, że ta wartość została już przekonwertowana na <xref:System.String> za <xref:System.Windows.Controls.Control.ToString%2A> pomocą metody. Ta wartość jest następnie przenoszona z powrotem <xref:System.Windows.Controls.Canvas.SetLeft%2A> do metody <xref:System.Windows.Controls.Canvas.GetLeft%2A> i metody <xref:System.Windows.Controls.Canvas> `text1` w celu zmiany położenia obiektu.  
  
 [!code-csharp[CanvasPositioningProperties#2](~/samples/snippets/csharp/VS_Snippets_Wpf/CanvasPositioningProperties/CSharp/Window1.xaml.cs#2)]
 [!code-vb[CanvasPositioningProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CanvasPositioningProperties/VisualBasic/Window1.xaml.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LengthConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LengthConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LengthConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.LengthConverter" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, class System.Type sourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LengthConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertFrom (typeDescriptorContext As ITypeDescriptorContext, sourceType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ typeDescriptorContext, Type ^ sourceType);" />
      <MemberSignature Language="F#" Value="override this.CanConvertFrom : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool" Usage="lengthConverter.CanConvertFrom (typeDescriptorContext, sourceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDescriptorContext" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeDescriptorContext">Zawiera informacje kontekstowe dotyczące składnika.</param>
        <param name="sourceType">Identyfikuje typ danych do obliczenia dla konwersji.</param>
        <summary>Określa <see cref="T:System.Double" /> , czy konwersja jest możliwa z określonego typu do, który reprezentuje długość obiektu.</summary>
        <returns><see langword="true" />Jeśli konwersja jest możliwa; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.LengthConverter>obsługuje konwersję do i z następujących typów: <xref:System.String>, <xref:System.Decimal> <xref:System.Int32> <xref:System.Double> <xref:System.Single> <xref:System.Int16> <xref:System.UInt64>, ,,<xref:System.UInt16>,,,,, i. <xref:System.UInt32> <xref:System.Int64>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LengthConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertTo (typeDescriptorContext As ITypeDescriptorContext, destinationType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertTo(System::ComponentModel::ITypeDescriptorContext ^ typeDescriptorContext, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="override this.CanConvertTo : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool" Usage="lengthConverter.CanConvertTo (typeDescriptorContext, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDescriptorContext" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeDescriptorContext">Zawiera informacje kontekstowe dotyczące składnika.</param>
        <param name="destinationType">Identyfikuje typ danych do obliczenia dla konwersji.</param>
        <summary>Określa <see cref="T:System.Double" /> , czy konwersja jest możliwa do określonego typu z klasy, która reprezentuje długość obiektu.</summary>
        <returns><see langword="true" />Jeśli konwersja <paramref name="destinationType" /> jest możliwa; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.LengthConverter>obsługuje konwersję następujących typów: <xref:System.String>, <xref:System.Int16> <xref:System.Single> <xref:System.Decimal> <xref:System.Double> ,<xref:System.Int32> ,,<xref:System.UInt64>,,,, ,i.<xref:System.UInt32> <xref:System.Int64> <xref:System.UInt16>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, class System.Globalization.CultureInfo cultureInfo, object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LengthConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ typeDescriptorContext, System::Globalization::CultureInfo ^ cultureInfo, System::Object ^ source);" />
      <MemberSignature Language="F#" Value="override this.ConvertFrom : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj -&gt; obj" Usage="lengthConverter.ConvertFrom (typeDescriptorContext, cultureInfo, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDescriptorContext" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="cultureInfo" Type="System.Globalization.CultureInfo" />
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="typeDescriptorContext">Zawiera informacje kontekstowe dotyczące składnika.</param>
        <param name="cultureInfo">Przedstawia informacje specyficzne dla kultury, które są utrzymywane podczas konwersji.</param>
        <param name="source">Identyfikuje obiekt, który jest konwertowany na <see cref="T:System.Double" />.</param>
        <summary>Konwertuje wystąpienia innych typów danych na wystąpienia <see cref="T:System.Double" /> , które reprezentują długość obiektu.</summary>
        <returns>Wystąpienie <see cref="T:System.Double" /> , które jest wartością konwersji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.LengthConverter>obsługuje konwersję następujących typów: <xref:System.String>, <xref:System.Int16> <xref:System.Single> <xref:System.Decimal> <xref:System.Double> ,<xref:System.UInt16> ,,<xref:System.UInt64>,,,, ,.<xref:System.UInt32> <xref:System.Int32> <xref:System.Int64>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Występuje, <paramref name="source" /> gdy ma <see langword="null" />wartość.</exception>
        <exception cref="T:System.ArgumentException">Występuje, jeśli <paramref name="source" /> nie <see langword="null" /> jest i nie jest prawidłowym typem na potrzeby konwersji.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, class System.Globalization.CultureInfo cultureInfo, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LengthConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertTo(System::ComponentModel::ITypeDescriptorContext ^ typeDescriptorContext, System::Globalization::CultureInfo ^ cultureInfo, System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="override this.ConvertTo : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj * Type -&gt; obj" Usage="lengthConverter.ConvertTo (typeDescriptorContext, cultureInfo, value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDescriptorContext" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="cultureInfo" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeDescriptorContext">Opisuje informacje kontekstowe składnika, takie jak jego kontener i <see cref="T:System.ComponentModel.PropertyDescriptor" />.</param>
        <param name="cultureInfo">Identyfikuje informacje specyficzne dla kultury, w tym system pisania i kalendarz, który jest używany.</param>
        <param name="value"><see cref="T:System.Object" /> Określa, że jest konwertowany.</param>
        <param name="destinationType">Typ danych, do którego to wystąpienie <see cref="T:System.Double" /> jest konwertowane.</param>
        <summary>Konwertuje inne typy na wystąpienia <see cref="T:System.Double" /> , które reprezentują długość obiektu.</summary>
        <returns>Nowa <see cref="T:System.Object" /> , która jest wartością konwersji.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Występuje, <paramref name="value" /> gdy ma <see langword="null" />wartość.</exception>
        <exception cref="T:System.ArgumentException">Występuje <see cref="T:System.Windows.Media.Brush" />, jeśli <paramref name="value" /> nie <see langword="null" /> jest i nie jest lub <paramref name="destinationType" /> jest nieprawidłowy.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
