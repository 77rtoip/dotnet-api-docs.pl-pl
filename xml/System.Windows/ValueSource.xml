<Type Name="ValueSource" FullName="System.Windows.ValueSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a9b2f2c569798c43932db9b71677e6a6716103c9" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69443752" /></Metadata><TypeSignature Language="C#" Value="public struct ValueSource" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ValueSource extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ValueSource" />
  <TypeSignature Language="VB.NET" Value="Public Structure ValueSource" />
  <TypeSignature Language="C++ CLI" Value="public value class ValueSource" />
  <TypeSignature Language="F#" Value="type ValueSource = struct" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="207eb-101">Raportuje informacje zwracane z <see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />.</span><span class="sxs-lookup"><span data-stu-id="207eb-101">Reports the information returned from <see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207eb-102">Większość informacji <xref:System.Windows.ValueSource> przesyłanych przez transmisję jest zawartych <xref:System.Windows.ValueSource.BaseValueSource%2A> we właściwości.</span><span class="sxs-lookup"><span data-stu-id="207eb-102">Most of the information that <xref:System.Windows.ValueSource> transmits is contained in the <xref:System.Windows.ValueSource.BaseValueSource%2A> property.</span></span> <span data-ttu-id="207eb-103">Ta właściwość zawiera wartość wyliczenia, która określa dokładnie jeden aspekt ogólnego [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] systemu właściwości, który jest odpowiedzialny za wartość efektywną właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="207eb-103">This property contains an enumeration value that specifies exactly one aspect of the overall [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system that is responsible for the effective value of a dependency property.</span></span>  
  
 <span data-ttu-id="207eb-104">Oprócz wartości bazowej inne informacje, które mogą być interesujące dla wartości właściwości zależności, to czy wartość jest animowana i czy wartość obejmuje wyrażenie (takie jak powiązanie lub odwołanie do zasobu dynamicznego).</span><span class="sxs-lookup"><span data-stu-id="207eb-104">Besides the base value, the other information that might be interesting about a dependency property value is whether the value is being animated, and whether the value involves an expression (such as a binding, or a dynamic resource reference).</span></span> <span data-ttu-id="207eb-105">Te informacje są raportowane <xref:System.Windows.ValueSource.IsAnimated%2A> <xref:System.Windows.ValueSource.IsExpression%2A> odpowiednio przez program.</span><span class="sxs-lookup"><span data-stu-id="207eb-105">This information is reported by <xref:System.Windows.ValueSource.IsAnimated%2A> and <xref:System.Windows.ValueSource.IsExpression%2A> respectively.</span></span> <span data-ttu-id="207eb-106">Ponadto, jeśli przymus działa na wartości właściwości, właściwość zachowuje żądaną wartość, a wartość właściwości podejmie próbę uzyskania dostępu do żądanej wartości, jeśli ograniczenia określonego przekształcenia zostaną zmienione lub zniesione.</span><span class="sxs-lookup"><span data-stu-id="207eb-106">Also, if coercion is acting on a property value, the property retains a desired value, and the property value will attempt to reach that desired value if the constraints of the specific coercion are changed or lifted.</span></span> <span data-ttu-id="207eb-107">Właściwość przymusowa, która nie znajduje się na żądanej wartości, spowoduje zgłoszenie <xref:System.Windows.ValueSource.IsCoerced%2A> , `true`że jest to.</span><span class="sxs-lookup"><span data-stu-id="207eb-107">A coerced property that is not at its desired value will report that <xref:System.Windows.ValueSource.IsCoerced%2A> is `true`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
    <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
  </Docs>
  <Members>
    <Member MemberName="BaseValueSource">
      <MemberSignature Language="C#" Value="public System.Windows.BaseValueSource BaseValueSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.BaseValueSource BaseValueSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.BaseValueSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseValueSource As BaseValueSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::BaseValueSource BaseValueSource { System::Windows::BaseValueSource get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseValueSource : System.Windows.BaseValueSource" Usage="System.Windows.ValueSource.BaseValueSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.BaseValueSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="207eb-108">Pobiera wartość <see cref="T:System.Windows.BaseValueSource" /> wyliczenia, która raportuje źródło, które dostarczyło system właściwości zależności z wartością.</span><span class="sxs-lookup"><span data-stu-id="207eb-108">Gets a value of the <see cref="T:System.Windows.BaseValueSource" /> enumeration, which reports the source that provided the dependency property system with a value.</span></span></summary>
        <value><span data-ttu-id="207eb-109">Wartość wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="207eb-109">A value of the enumeration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207eb-110">Wartość podstawowa nie jest wartością efektywną, jeśli dla właściwości działa wymuszone lub animacje.</span><span class="sxs-lookup"><span data-stu-id="207eb-110">The base value is not the effective value if either coercion or animation is acting on the property.</span></span> <span data-ttu-id="207eb-111">Sprawdź <xref:System.Windows.ValueSource.IsAnimated%2A> ,<xref:System.Windows.ValueSource.IsCoerced%2A> czy chcesz określić, czy wartość podstawowa jest wartością efektywną.</span><span class="sxs-lookup"><span data-stu-id="207eb-111">Check <xref:System.Windows.ValueSource.IsAnimated%2A> and <xref:System.Windows.ValueSource.IsCoerced%2A> if you want to determine whether the base value is the effective value.</span></span>  
  
 <span data-ttu-id="207eb-112">Warto również sprawdzić <xref:System.Windows.ValueSource.IsExpression%2A> , czy wartość podstawowa została oceniona z wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="207eb-112">You might also want to check <xref:System.Windows.ValueSource.IsExpression%2A> to see if the base value was evaluated out of an expression.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueSource.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="207eb-113">Obiekt, który ma zostać porównany z tym <see cref="T:System.Windows.ValueSource" />elementem.</span><span class="sxs-lookup"><span data-stu-id="207eb-113">The object to compare with this <see cref="T:System.Windows.ValueSource" />.</span></span></param>
        <summary><span data-ttu-id="207eb-114">Zwraca wartość wskazującą, czy <see cref="T:System.Windows.ValueSource" /> jest równa określonego obiektu.</span><span class="sxs-lookup"><span data-stu-id="207eb-114">Returns a value indicating whether this <see cref="T:System.Windows.ValueSource" /> is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="207eb-115"><see langword="true" />Jeśli podany obiekt jest równoważny z bieżącym <see cref="T:System.Windows.ValueSource" />; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="207eb-115"><see langword="true" /> if the provided object is equivalent to the current <see cref="T:System.Windows.ValueSource" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207eb-116">Ta implementacja obsługuje równość wartości na podstawie każdej wartości właściwości każdej <xref:System.Windows.ValueSource> struktury.</span><span class="sxs-lookup"><span data-stu-id="207eb-116">This implementation supports value equality, based on each of the property values of each <xref:System.Windows.ValueSource> structure.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueSource.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="207eb-117">Zwraca kod skrótu dla tego <see cref="T:System.Windows.ValueSource" />elementu.</span><span class="sxs-lookup"><span data-stu-id="207eb-117">Returns the hash code for this <see cref="T:System.Windows.ValueSource" />.</span></span></summary>
        <returns><span data-ttu-id="207eb-118">32-bitowy kod skrótu unsigned Integer.</span><span class="sxs-lookup"><span data-stu-id="207eb-118">A 32-bit unsigned integer hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207eb-119">Ten kod skrótu jest określany na <xref:System.Windows.ValueSource.BaseValueSource%2A> podstawie wartości.</span><span class="sxs-lookup"><span data-stu-id="207eb-119">This hash code is based on the <xref:System.Windows.ValueSource.BaseValueSource%2A> value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="IsAnimated">
      <MemberSignature Language="C#" Value="public bool IsAnimated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnimated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsAnimated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnimated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnimated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAnimated : bool" Usage="System.Windows.ValueSource.IsAnimated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="207eb-120">Pobiera wartość, która deklaruje, czy właściwość jest animowana.</span><span class="sxs-lookup"><span data-stu-id="207eb-120">Gets a value that declares whether the property is being animated.</span></span></summary>
        <value><span data-ttu-id="207eb-121"><see langword="true" />Jeśli właściwość jest animowana; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="207eb-121"><see langword="true" /> if the property is animated; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207eb-122">Dla każdej właściwości, która jest aktualnie animowana, Źródło zgłoszone <xref:System.Windows.ValueSource.BaseValueSource%2A> przez nie jest natychmiast istotne, ponieważ animacja działa przy wyższym priorytecie właściwości zależności niż wartość podstawowa.</span><span class="sxs-lookup"><span data-stu-id="207eb-122">For any property that is currently being animated, the source reported by <xref:System.Windows.ValueSource.BaseValueSource%2A> is not immediately relevant, because the animation operates at higher dependency property precedence than the base value.</span></span> <span data-ttu-id="207eb-123">Aby uzyskać więcej informacji na temat pierwszeństwa i animacji, zobacz [pierwszeństwo wartości właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="207eb-123">For more information about precedence and animations, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsCoerced">
      <MemberSignature Language="C#" Value="public bool IsCoerced { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCoerced" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsCoerced" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCoerced As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCoerced { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCoerced : bool" Usage="System.Windows.ValueSource.IsCoerced" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="207eb-124">Pobiera wartość, która deklaruje, czy ta wartość wynika z <see cref="T:System.Windows.CoerceValueCallback" /> implementacji zastosowanej do właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="207eb-124">Gets a value that declares whether this value resulted from a <see cref="T:System.Windows.CoerceValueCallback" /> implementation applied to a dependency property.</span></span></summary>
        <value><span data-ttu-id="207eb-125"><see langword="true" />Jeśli wartość wynika z <see cref="T:System.Windows.CoerceValueCallback" /> implementacji zastosowanej do właściwości zależności; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="207eb-125"><see langword="true" /> if the value resulted from a <see cref="T:System.Windows.CoerceValueCallback" /> implementation applied to a dependency property; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207eb-126">Jeśli przymus działa na wartości właściwości, właściwość zachowuje żądaną wartość, a wartość właściwości podejmie próbę uzyskania dostępu do żądanej wartości, jeśli ograniczenia określonego przekształcenia zostaną zmienione lub zniesione.</span><span class="sxs-lookup"><span data-stu-id="207eb-126">If coercion is acting on a property value, the property retains a desired value, and the property value will attempt to reach that desired value if the constraints of the specific coercion are changed or lifted.</span></span> <span data-ttu-id="207eb-127">Właściwość przymusowa, która nie znajduje się na żądanej wartości, spowoduje zgłoszenie <xref:System.Windows.ValueSource.IsCoerced%2A> , `true`że jest to.</span><span class="sxs-lookup"><span data-stu-id="207eb-127">A coerced property that is not at its desired value will report that <xref:System.Windows.ValueSource.IsCoerced%2A> is `true`.</span></span>  
  
 <span data-ttu-id="207eb-128">Przymus działa przy wyższym priorytecie niż wartość podstawowa i nie jest ściśle mówiący o tym, jak jest ustawiona wartość podstawowa.</span><span class="sxs-lookup"><span data-stu-id="207eb-128">Coercion acts at higher precedence than the base value, and is not strictly speaking a participant in how the base value is set.</span></span> <span data-ttu-id="207eb-129">W związku z tym stan przymusu jest raportowany przez tę właściwość, a nie przez wartość <xref:System.Windows.BaseValueSource> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="207eb-129">Therefore the state of being coerced is reported by this property, rather than by a value of the <xref:System.Windows.BaseValueSource> enumeration.</span></span> <span data-ttu-id="207eb-130">Aby uzyskać więcej informacji na temat przymusu, wartości podstawowych i pierwszeństwa, zobacz [pierwszeństwo wartości właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="207eb-130">For more information about coercion, base values, and precedence, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsCurrent">
      <MemberSignature Language="C#" Value="public bool IsCurrent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsCurrent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCurrent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCurrent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCurrent : bool" Usage="System.Windows.ValueSource.IsCurrent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="207eb-131">Pobiera czy wartość została ustawiona przez <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> metodę.</span><span class="sxs-lookup"><span data-stu-id="207eb-131">Gets whether the value was set by the <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> method.</span></span></summary>
        <value><span data-ttu-id="207eb-132"><see langword="true" />Jeśli wartość została ustawiona przez <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> metodę; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="207eb-132"><see langword="true" /> if the value was set by the <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> method; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExpression">
      <MemberSignature Language="C#" Value="public bool IsExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExpression" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsExpression" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExpression As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExpression { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExpression : bool" Usage="System.Windows.ValueSource.IsExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="207eb-133">Pobiera wartość, która deklaruje, czy ta wartość wynika z obliczanego wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="207eb-133">Gets a value that declares whether this value resulted from an evaluated expression.</span></span> <span data-ttu-id="207eb-134">Może to być <see cref="T:System.Windows.Data.BindingExpression" /> obsługiwane powiązanie lub wewnętrzne wyrażenie, takie jak te, które obsługują [rozszerzenie znacznika DynamicResource —](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md).</span><span class="sxs-lookup"><span data-stu-id="207eb-134">This might be a <see cref="T:System.Windows.Data.BindingExpression" /> supporting a binding, or an internal expression such as those that support the [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md).</span></span></summary>
        <value><span data-ttu-id="207eb-135"><see langword="true" />Jeśli wartość pochodzi z wyrażenia obliczanego; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="207eb-135"><see langword="true" /> if the value came from an evaluated expression; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207eb-136">Obliczane wyrażenie również raportuje określony warunek ustawienia wartości podstawowej, gdzie wyrażenie zostało zastosowane, jako wartość w <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span><span class="sxs-lookup"><span data-stu-id="207eb-136">An evaluated expression will also report the specific base value setting condition where the expression was applied, as a value in <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span></span> <span data-ttu-id="207eb-137">Jest nadal bardzo istotny dla każdej właściwości, <xref:System.Windows.ValueSource.IsExpression%2A> gdzie `true`is. <xref:System.Windows.ValueSource.BaseValueSource%2A></span><span class="sxs-lookup"><span data-stu-id="207eb-137">The <xref:System.Windows.ValueSource.BaseValueSource%2A> is still very relevant for any property where <xref:System.Windows.ValueSource.IsExpression%2A> is `true`.</span></span> <span data-ttu-id="207eb-138">Wiadomo, czy wartość dołączona przez wyrażenie może być szczególnie przydatna, jeśli wartość została ustawiona pośrednio, na przykład za pomocą szablonu lub dziedziczonej wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="207eb-138">Knowing whether a value came through an expression can be particularly useful if the value was set indirectly, such as through a template or an inherited property value.</span></span>  
  
 <span data-ttu-id="207eb-139">Jeśli wyrażenie nie zostanie oszacowane (powiązanie nie powiodło się; nie znaleziono zasobu o tej nazwie), wartość będzie pochodzić z innego uczestnika w systemie właściwości, najprawdopodobniej z wartością domyślną.</span><span class="sxs-lookup"><span data-stu-id="207eb-139">If an expression fails to evaluate (the binding failed; no resource of that name was found), then the value will come from some other participant in the property system, most likely the default value.</span></span> <span data-ttu-id="207eb-140">To źródło zostanie następnie zgłoszone <xref:System.Windows.ValueSource.BaseValueSource%2A>w programie.</span><span class="sxs-lookup"><span data-stu-id="207eb-140">That source is then reported in <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span></span> <span data-ttu-id="207eb-141">Obliczenia wyrażeń zakończonych niepowodzeniem `false` zostaną <xref:System.Windows.ValueSource.IsExpression%2A>zwrócone.</span><span class="sxs-lookup"><span data-stu-id="207eb-141">Failed expression evaluations will return `false` for <xref:System.Windows.ValueSource.IsExpression%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.ValueSource vs1, valuetype System.Windows.ValueSource vs2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.op_Equality(System.Windows.ValueSource,System.Windows.ValueSource)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (vs1 As ValueSource, vs2 As ValueSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::ValueSource vs1, System::Windows::ValueSource vs2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.ValueSource * System.Windows.ValueSource -&gt; bool" Usage="vs1 = vs2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vs1" Type="System.Windows.ValueSource" />
        <Parameter Name="vs2" Type="System.Windows.ValueSource" />
      </Parameters>
      <Docs>
        <param name="vs1"><span data-ttu-id="207eb-142">Pierwszy <see cref="T:System.Windows.ValueSource" /> do porównania.</span><span class="sxs-lookup"><span data-stu-id="207eb-142">The first <see cref="T:System.Windows.ValueSource" /> to compare.</span></span></param>
        <param name="vs2"><span data-ttu-id="207eb-143">Sekunda <see cref="T:System.Windows.ValueSource" /> do porównania.</span><span class="sxs-lookup"><span data-stu-id="207eb-143">The second <see cref="T:System.Windows.ValueSource" /> to compare.</span></span></param>
        <summary><span data-ttu-id="207eb-144">Określa, czy <see cref="T:System.Windows.ValueSource" /> dwa wystąpienia mają tę samą wartość.</span><span class="sxs-lookup"><span data-stu-id="207eb-144">Determines whether two <see cref="T:System.Windows.ValueSource" /> instances have the same value.</span></span></summary>
        <returns><span data-ttu-id="207eb-145"><see langword="true" />Jeśli dwa <see cref="T:System.Windows.ValueSource" /> wystąpienia są równoważne; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="207eb-145"><see langword="true" /> if the two <see cref="T:System.Windows.ValueSource" /> instances are equivalent; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207eb-146">Ta implementacja wywołuje <xref:System.Windows.ValueSource.Equals%2A>i obsługuje równość wartości na podstawie wszystkich <xref:System.Windows.ValueSource>właściwości.</span><span class="sxs-lookup"><span data-stu-id="207eb-146">This implementation calls <xref:System.Windows.ValueSource.Equals%2A>, and supports value equality based on all properties of <xref:System.Windows.ValueSource>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.ValueSource vs1, valuetype System.Windows.ValueSource vs2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.op_Inequality(System.Windows.ValueSource,System.Windows.ValueSource)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (vs1 As ValueSource, vs2 As ValueSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::ValueSource vs1, System::Windows::ValueSource vs2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.ValueSource * System.Windows.ValueSource -&gt; bool" Usage="System.Windows.ValueSource.op_Inequality (vs1, vs2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vs1" Type="System.Windows.ValueSource" />
        <Parameter Name="vs2" Type="System.Windows.ValueSource" />
      </Parameters>
      <Docs>
        <param name="vs1"><span data-ttu-id="207eb-147">Pierwszy <see cref="T:System.Windows.ValueSource" /> do porównania.</span><span class="sxs-lookup"><span data-stu-id="207eb-147">The first <see cref="T:System.Windows.ValueSource" /> to compare.</span></span></param>
        <param name="vs2"><span data-ttu-id="207eb-148">Sekunda <see cref="T:System.Windows.ValueSource" /> do porównania.</span><span class="sxs-lookup"><span data-stu-id="207eb-148">The second <see cref="T:System.Windows.ValueSource" /> to compare.</span></span></param>
        <summary><span data-ttu-id="207eb-149">Określa, czy <see cref="T:System.Windows.ValueSource" /> dwa wystąpienia nie mają tej samej wartości.</span><span class="sxs-lookup"><span data-stu-id="207eb-149">Determines whether two <see cref="T:System.Windows.ValueSource" /> instances do not have the same value.</span></span></summary>
        <returns><span data-ttu-id="207eb-150"><see langword="true" />Jeśli dwa <see cref="T:System.Windows.ValueSource" /> wystąpienia nie są równoważne; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="207eb-150"><see langword="true" /> if the two <see cref="T:System.Windows.ValueSource" /> instances are not equivalent; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="207eb-151">Ta implementacja wywołuje <xref:System.Windows.ValueSource.Equals%2A>, zwracając swoją negację i obsługuje równość wartości na podstawie wszystkich <xref:System.Windows.ValueSource>właściwości.</span><span class="sxs-lookup"><span data-stu-id="207eb-151">This implementation calls <xref:System.Windows.ValueSource.Equals%2A>, returning its negation, and supports value equality based on all properties of <xref:System.Windows.ValueSource>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
  </Members>
</Type>
