<Type Name="ValueSource" FullName="System.Windows.ValueSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6119fac408e8c90eb4747951d7347b56f62009b1" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36456100" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct ValueSource" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ValueSource extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ValueSource" />
  <TypeSignature Language="VB.NET" Value="Public Structure ValueSource" />
  <TypeSignature Language="C++ CLI" Value="public value class ValueSource" />
  <TypeSignature Language="F#" Value="type ValueSource = struct" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="16f4a-101">Raportuje informacje zwrócone z <see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="16f4a-101">Reports the information returned from <see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16f4a-102">Większość informacji, które <xref:System.Windows.ValueSource> przesyła znajduje się w <xref:System.Windows.ValueSource.BaseValueSource%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="16f4a-102">Most of the information that <xref:System.Windows.ValueSource> transmits is contained in the <xref:System.Windows.ValueSource.BaseValueSource%2A> property.</span></span> <span data-ttu-id="16f4a-103">Ta właściwość zawiera wartość wyliczenia, która określa dokładnie jeden aspekt ogólnych [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] właściwości systemu, który jest odpowiedzialny za efektywna wartość właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="16f4a-103">This property contains an enumeration value that specifies exactly one aspect of the overall [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system that is responsible for the effective value of a dependency property.</span></span>  
  
 <span data-ttu-id="16f4a-104">Oprócz wartości podstawowej inne informacje, które mogą być interesujące o wartość właściwości zależności jest Określa, czy wartość jest animowanej i określa, czy wartość zawiera wyrażenie (na przykład powiązanie, lub odwołanie do zasobu dynamicznego).</span><span class="sxs-lookup"><span data-stu-id="16f4a-104">Besides the base value, the other information that might be interesting about a dependency property value is whether the value is being animated, and whether the value involves an expression (such as a binding, or a dynamic resource reference).</span></span> <span data-ttu-id="16f4a-105">Te informacje są zgłaszane przez <xref:System.Windows.ValueSource.IsAnimated%2A> i <xref:System.Windows.ValueSource.IsExpression%2A> odpowiednio.</span><span class="sxs-lookup"><span data-stu-id="16f4a-105">This information is reported by <xref:System.Windows.ValueSource.IsAnimated%2A> and <xref:System.Windows.ValueSource.IsExpression%2A> respectively.</span></span> <span data-ttu-id="16f4a-106">Ponadto jeśli koercja działa na wartość właściwości, właściwość zachowuje żądaną wartość i wartość właściwości będzie próbują uzyskać dostęp tego żądaną wartość, jeśli ograniczenia określonych koercja zostaną zmienione lub unosiło.</span><span class="sxs-lookup"><span data-stu-id="16f4a-106">Also, if coercion is acting on a property value, the property retains a desired value, and the property value will attempt to reach that desired value if the constraints of the specific coercion are changed or lifted.</span></span> <span data-ttu-id="16f4a-107">Coerced właściwość, która nie znajduje się na jego żądaną wartość zgłasza, że <xref:System.Windows.ValueSource.IsCoerced%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="16f4a-107">A coerced property that is not at its desired value will report that <xref:System.Windows.ValueSource.IsCoerced%2A> is `true`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
    <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
  </Docs>
  <Members>
    <Member MemberName="BaseValueSource">
      <MemberSignature Language="C#" Value="public System.Windows.BaseValueSource BaseValueSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.BaseValueSource BaseValueSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.BaseValueSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseValueSource As BaseValueSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::BaseValueSource BaseValueSource { System::Windows::BaseValueSource get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseValueSource : System.Windows.BaseValueSource" Usage="System.Windows.ValueSource.BaseValueSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.BaseValueSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16f4a-108">Pobiera wartość <see cref="T:System.Windows.BaseValueSource" /> wyliczenia, która źródle pod warunkiem system właściwości zależności o wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-108">Gets a value of the <see cref="T:System.Windows.BaseValueSource" /> enumeration, which reports the source that provided the dependency property system with a value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16f4a-109">Wartość wyliczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-109">A value of the enumeration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16f4a-110">Wartości podstawowej nie jest wartością efektywną, jeśli przekształcenie lub animacji działa we właściwości.</span><span class="sxs-lookup"><span data-stu-id="16f4a-110">The base value is not the effective value if either coercion or animation is acting on the property.</span></span> <span data-ttu-id="16f4a-111">Sprawdź <xref:System.Windows.ValueSource.IsAnimated%2A> i <xref:System.Windows.ValueSource.IsCoerced%2A> Jeśli chcesz określić, czy wartości podstawowej jest wartość.</span><span class="sxs-lookup"><span data-stu-id="16f4a-111">Check <xref:System.Windows.ValueSource.IsAnimated%2A> and <xref:System.Windows.ValueSource.IsCoerced%2A> if you want to determine whether the base value is the effective value.</span></span>  
  
 <span data-ttu-id="16f4a-112">Można także sprawdzić <xref:System.Windows.ValueSource.IsExpression%2A> aby zobaczyć, czy wartości podstawowej obliczeniem poza wyrażenie.</span><span class="sxs-lookup"><span data-stu-id="16f4a-112">You might also want to check <xref:System.Windows.ValueSource.IsExpression%2A> to see if the base value was evaluated out of an expression.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueSource.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="16f4a-113">Obiekt do porównania z tym <see cref="T:System.Windows.ValueSource" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-113">The object to compare with this <see cref="T:System.Windows.ValueSource" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16f4a-114">Zwraca wartość wskazującą czy to <see cref="T:System.Windows.ValueSource" /> jest taki sam jak określony obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-114">Returns a value indicating whether this <see cref="T:System.Windows.ValueSource" /> is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16f4a-115">
            <see langword="true" /> Jeśli podany obiekt jest odpowiednikiem bieżącego <see cref="T:System.Windows.ValueSource" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-115">
              <see langword="true" /> if the provided object is equivalent to the current <see cref="T:System.Windows.ValueSource" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16f4a-116">Ta implementacja obsługuje równości wartości, oparte na każdym z wartości właściwości każdego <xref:System.Windows.ValueSource> struktury.</span><span class="sxs-lookup"><span data-stu-id="16f4a-116">This implementation supports value equality, based on each of the property values of each <xref:System.Windows.ValueSource> structure.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueSource.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="16f4a-117">Zwraca wartość skrótu dla tego <see cref="T:System.Windows.ValueSource" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-117">Returns the hash code for this <see cref="T:System.Windows.ValueSource" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16f4a-118">Wartość skrótu 32-bitowej liczby całkowitej bez znaku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-118">A 32-bit unsigned integer hash code.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16f4a-119">Ta wartość skrótu jest oparta na <xref:System.Windows.ValueSource.BaseValueSource%2A> wartość.</span><span class="sxs-lookup"><span data-stu-id="16f4a-119">This hash code is based on the <xref:System.Windows.ValueSource.BaseValueSource%2A> value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="IsAnimated">
      <MemberSignature Language="C#" Value="public bool IsAnimated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnimated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsAnimated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnimated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnimated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAnimated : bool" Usage="System.Windows.ValueSource.IsAnimated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16f4a-120">Pobiera wartość, która deklaruje, czy właściwość jest animowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-120">Gets a value that declares whether the property is being animated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16f4a-121">
            <see langword="true" /> Jeśli właściwość jest animowany; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-121">
              <see langword="true" /> if the property is animated; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16f4a-122">Dla właściwości, która jest obecnie animowany, źródło zgłoszone przez <xref:System.Windows.ValueSource.BaseValueSource%2A> nie jest od razu istotne, ponieważ animacji operuje na wyższy priorytet właściwości zależności od wartości podstawowej.</span><span class="sxs-lookup"><span data-stu-id="16f4a-122">For any property that is currently being animated, the source reported by <xref:System.Windows.ValueSource.BaseValueSource%2A> is not immediately relevant, because the animation operates at higher dependency property precedence than the base value.</span></span> <span data-ttu-id="16f4a-123">Aby uzyskać więcej informacji na temat priorytet i animacji, zobacz [pierwszeństwo wartość właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="16f4a-123">For more information about precedence and animations, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsCoerced">
      <MemberSignature Language="C#" Value="public bool IsCoerced { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCoerced" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsCoerced" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCoerced As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCoerced { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCoerced : bool" Usage="System.Windows.ValueSource.IsCoerced" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16f4a-124">Pobiera wartość, która deklaruje, czy ta wartość jest wynikiem <see cref="T:System.Windows.CoerceValueCallback" /> implementacji stosowany do właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-124">Gets a value that declares whether this value resulted from a <see cref="T:System.Windows.CoerceValueCallback" /> implementation applied to a dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16f4a-125">
            <see langword="true" /> Jeśli wartość jest wynikiem <see cref="T:System.Windows.CoerceValueCallback" /> implementacji stosowany do właściwości zależności; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-125">
              <see langword="true" /> if the value resulted from a <see cref="T:System.Windows.CoerceValueCallback" /> implementation applied to a dependency property; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16f4a-126">Jeśli koercja działa na wartość właściwości, właściwość zachowuje żądaną wartość i wartość właściwości będzie próbują uzyskać dostęp tego żądaną wartość, jeśli ograniczenia określonych koercja zostaną zmienione lub unosiło.</span><span class="sxs-lookup"><span data-stu-id="16f4a-126">If coercion is acting on a property value, the property retains a desired value, and the property value will attempt to reach that desired value if the constraints of the specific coercion are changed or lifted.</span></span> <span data-ttu-id="16f4a-127">Coerced właściwość, która nie znajduje się na jego żądaną wartość zgłasza, że <xref:System.Windows.ValueSource.IsCoerced%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="16f4a-127">A coerced property that is not at its desired value will report that <xref:System.Windows.ValueSource.IsCoerced%2A> is `true`.</span></span>  
  
 <span data-ttu-id="16f4a-128">Koercja zachowuje się na wyższy priorytet niż wartość podstawową i nie jest mówiąc ściślej uczestnika konfiguracji wartości podstawowej.</span><span class="sxs-lookup"><span data-stu-id="16f4a-128">Coercion acts at higher precedence than the base value, and is not strictly speaking a participant in how the base value is set.</span></span> <span data-ttu-id="16f4a-129">W związku z tym wykorzystaną stan jest zgłaszany przez tę właściwość, a nie przez wartość <xref:System.Windows.BaseValueSource> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="16f4a-129">Therefore the state of being coerced is reported by this property, rather than by a value of the <xref:System.Windows.BaseValueSource> enumeration.</span></span> <span data-ttu-id="16f4a-130">Aby uzyskać więcej informacji na temat koercja, wartości podstawowe i pierwszeństwo zobacz [pierwszeństwo wartość właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="16f4a-130">For more information about coercion, base values, and precedence, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsCurrent">
      <MemberSignature Language="C#" Value="public bool IsCurrent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsCurrent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCurrent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCurrent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCurrent : bool" Usage="System.Windows.ValueSource.IsCurrent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16f4a-131">Pobiera informację, czy wartość została ustawiona przez <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-131">Gets whether the value was set by the <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16f4a-132">
            <see langword="true" /> Jeśli wartość została ustawiona <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> metody; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-132">
              <see langword="true" /> if the value was set by the <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> method; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExpression">
      <MemberSignature Language="C#" Value="public bool IsExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExpression" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsExpression" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExpression As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExpression { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExpression : bool" Usage="System.Windows.ValueSource.IsExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="16f4a-133">Pobiera wartość, która deklaruje, czy ta wartość jest wynikiem obliczane wyrażenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-133">Gets a value that declares whether this value resulted from an evaluated expression.</span>
          </span>
          <span data-ttu-id="16f4a-134">Może to być <see cref="T:System.Windows.Data.BindingExpression" /> obsługi powiązanie lub wyrażenie wewnętrznego, takich jak te, które obsługują [DynamicResource Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) znaczników.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-134">This might be a <see cref="T:System.Windows.Data.BindingExpression" /> supporting a binding, or an internal expression such as those that support the [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="16f4a-135">
            <see langword="true" /> Jeśli wartość pochodzi z obliczane wyrażenie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-135">
              <see langword="true" /> if the value came from an evaluated expression; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16f4a-136">Obliczane wyrażenie będzie zgłaszać także określonej wartości podstawowej ustawienie warunku, w którym wyrażenie została zastosowana, jako wartość <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span><span class="sxs-lookup"><span data-stu-id="16f4a-136">An evaluated expression will also report the specific base value setting condition where the expression was applied, as a value in <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span></span> <span data-ttu-id="16f4a-137"><xref:System.Windows.ValueSource.BaseValueSource%2A> Nadal jest bardzo istotny dla każdej właściwości, których <xref:System.Windows.ValueSource.IsExpression%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="16f4a-137">The <xref:System.Windows.ValueSource.BaseValueSource%2A> is still very relevant for any property where <xref:System.Windows.ValueSource.IsExpression%2A> is `true`.</span></span> <span data-ttu-id="16f4a-138">Znajomość, czy wartość pochodzi za pomocą wyrażenia może być szczególnie przydatne, jeśli wartość została ustawiona pośrednio, takie jak za pomocą szablonu lub wartość właściwości dziedziczone.</span><span class="sxs-lookup"><span data-stu-id="16f4a-138">Knowing whether a value came through an expression can be particularly useful if the value was set indirectly, such as through a template or an inherited property value.</span></span>  
  
 <span data-ttu-id="16f4a-139">Jeśli nie zostanie obliczone wyrażenie (powiązania nie powiodła się; nie znaleziono zasobów o tej nazwie), a następnie wartość będą pobierane z niektórych uczestnika, w systemie właściwości najbardziej prawdopodobną wartość domyślną.</span><span class="sxs-lookup"><span data-stu-id="16f4a-139">If an expression fails to evaluate (the binding failed; no resource of that name was found), then the value will come from some other participant in the property system, most likely the default value.</span></span> <span data-ttu-id="16f4a-140">To źródło jest następnie zgłoszone w <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span><span class="sxs-lookup"><span data-stu-id="16f4a-140">That source is then reported in <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span></span> <span data-ttu-id="16f4a-141">Obliczanie wyrażenia nie powiodło się, którą będzie zwracać `false` dla <xref:System.Windows.ValueSource.IsExpression%2A>.</span><span class="sxs-lookup"><span data-stu-id="16f4a-141">Failed expression evaluations will return `false` for <xref:System.Windows.ValueSource.IsExpression%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.ValueSource vs1, valuetype System.Windows.ValueSource vs2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.op_Equality(System.Windows.ValueSource,System.Windows.ValueSource)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (vs1 As ValueSource, vs2 As ValueSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::ValueSource vs1, System::Windows::ValueSource vs2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.ValueSource * System.Windows.ValueSource -&gt; bool" Usage="vs1 = vs2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vs1" Type="System.Windows.ValueSource" />
        <Parameter Name="vs2" Type="System.Windows.ValueSource" />
      </Parameters>
      <Docs>
        <param name="vs1">
          <span data-ttu-id="16f4a-142">Pierwszy <see cref="T:System.Windows.ValueSource" /> do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-142">The first <see cref="T:System.Windows.ValueSource" /> to compare.</span>
          </span>
        </param>
        <param name="vs2">
          <span data-ttu-id="16f4a-143">Drugi <see cref="T:System.Windows.ValueSource" /> do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-143">The second <see cref="T:System.Windows.ValueSource" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16f4a-144">Określa, czy dwa <see cref="T:System.Windows.ValueSource" /> wystąpienia mają taką samą wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-144">Determines whether two <see cref="T:System.Windows.ValueSource" /> instances have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16f4a-145">
            <see langword="true" /> Jeśli dwa <see cref="T:System.Windows.ValueSource" /> wystąpienia są równoważne; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-145">
              <see langword="true" /> if the two <see cref="T:System.Windows.ValueSource" /> instances are equivalent; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16f4a-146">Ta implementacja wywołuje <xref:System.Windows.ValueSource.Equals%2A>, i obsługuje wartość równości oparte na wszystkie właściwości <xref:System.Windows.ValueSource>.</span><span class="sxs-lookup"><span data-stu-id="16f4a-146">This implementation calls <xref:System.Windows.ValueSource.Equals%2A>, and supports value equality based on all properties of <xref:System.Windows.ValueSource>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.ValueSource vs1, valuetype System.Windows.ValueSource vs2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.op_Inequality(System.Windows.ValueSource,System.Windows.ValueSource)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (vs1 As ValueSource, vs2 As ValueSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::ValueSource vs1, System::Windows::ValueSource vs2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.ValueSource * System.Windows.ValueSource -&gt; bool" Usage="System.Windows.ValueSource.op_Inequality (vs1, vs2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vs1" Type="System.Windows.ValueSource" />
        <Parameter Name="vs2" Type="System.Windows.ValueSource" />
      </Parameters>
      <Docs>
        <param name="vs1">
          <span data-ttu-id="16f4a-147">Pierwszy <see cref="T:System.Windows.ValueSource" /> do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-147">The first <see cref="T:System.Windows.ValueSource" /> to compare.</span>
          </span>
        </param>
        <param name="vs2">
          <span data-ttu-id="16f4a-148">Drugi <see cref="T:System.Windows.ValueSource" /> do porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-148">The second <see cref="T:System.Windows.ValueSource" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="16f4a-149">Określa, czy dwa <see cref="T:System.Windows.ValueSource" /> wystąpień nie mają tej samej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-149">Determines whether two <see cref="T:System.Windows.ValueSource" /> instances do not have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="16f4a-150">
            <see langword="true" /> Jeśli dwa <see cref="T:System.Windows.ValueSource" /> wystąpień nie są równoważne; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="16f4a-150">
              <see langword="true" /> if the two <see cref="T:System.Windows.ValueSource" /> instances are not equivalent; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="16f4a-151">Ta implementacja wywołuje <xref:System.Windows.ValueSource.Equals%2A>, zwracanie negacji i obsługuje równości wartości na podstawie wszystkich właściwości <xref:System.Windows.ValueSource>.</span><span class="sxs-lookup"><span data-stu-id="16f4a-151">This implementation calls <xref:System.Windows.ValueSource.Equals%2A>, returning its negation, and supports value equality based on all properties of <xref:System.Windows.ValueSource>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
  </Members>
</Type>