<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="61f0be29cf151e08d249cb070c9ffec96ecb1f41" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69434709" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="92b09-101">Udostępnia identyfikator właściwości zależności dla ograniczonego dostępu do zapisu dla właściwości zależności tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="92b09-101">Provides a dependency property identifier for limited write access to a read-only dependency property.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92b09-102"><xref:System.Windows.DependencyPropertyKey>wystąpienia są uzyskiwane jako wartość zwracana wywołania rejestracji właściwości zależności przy użyciu metod <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> lub. <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A></span><span class="sxs-lookup"><span data-stu-id="92b09-102"><xref:System.Windows.DependencyPropertyKey> instances are obtained as the return value of a dependency property registration call using the methods <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> or <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="92b09-103">Typy, które rejestrują właściwość zależności, mogą używać <xref:System.Windows.DependencyPropertyKey> <xref:System.Windows.DependencyObject.SetValue%2A> wywołań in i <xref:System.Windows.DependencyObject.ClearValue%2A> , które dostosowują wartość właściwości jako część logiki klasy.</span><span class="sxs-lookup"><span data-stu-id="92b09-103">The types that register a dependency property can use the <xref:System.Windows.DependencyPropertyKey> in calls to <xref:System.Windows.DependencyObject.SetValue%2A> and <xref:System.Windows.DependencyObject.ClearValue%2A> that adjust the property's value as part of class logic.</span></span> <span data-ttu-id="92b09-104">Jeśli jest to dozwolone przez poziom dostępu klucza, klasy pokrewne mogą również używać klucza i właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="92b09-104">If permitted by the access level of the key, related classes can use the key and the dependency property also.</span></span> <span data-ttu-id="92b09-105">Na przykład można zadeklarować klucz jako wewnętrzny, a inne typy w tym samym zestawie mogą również ustawić tę właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="92b09-105">For instance, you can declare the key as internal, and other types within the same assembly can also set that dependency property.</span></span>  
  
 <span data-ttu-id="92b09-106">Wartość <xref:System.Windows.DependencyPropertyKey> zwrócona przez rejestrację właściwości zależności tylko do odczytu nie powinna być publiczna, ponieważ udostępnienie klucza powoduje, że właściwość settable, w ten sposób obniżając punkt rejestracji jako właściwość zależności tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="92b09-106">The <xref:System.Windows.DependencyPropertyKey> returned by read-only dependency property registration should not be made public, because exposing the key makes the property settable, thus defeating the point of registering it as a read-only dependency property.</span></span> <span data-ttu-id="92b09-107">Ponadto ujawnienie klucza powoduje niezgodność pomiędzy dostępnymi zachowaniami właściwości zależności a jego [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] implementacjami otoki właściwości, które jest niewłaściwym projektem klasy.</span><span class="sxs-lookup"><span data-stu-id="92b09-107">Also, exposing the key causes a mismatch between the available dependency property behaviors and its [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property wrapper implementations, which is bad class design.</span></span>  
  
 <span data-ttu-id="92b09-108">Zamiast ujawniać sam klucz, należy zamiast tego <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> ujawniać wartość <xref:System.Windows.DependencyPropertyKey> jako `public static readonly` <xref:System.Windows.DependencyProperty> w klasie.</span><span class="sxs-lookup"><span data-stu-id="92b09-108">Instead of exposing the key itself, you should instead expose the <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> value of the <xref:System.Windows.DependencyPropertyKey> as a `public static readonly`<xref:System.Windows.DependencyProperty> on your class.</span></span> <span data-ttu-id="92b09-109">Dzięki temu Właściwość zwraca prawidłowy identyfikator właściwości zależności dla niektórych operacji systemu właściwości, takich jak Wyliczenie lokalnie ustawione wartości.</span><span class="sxs-lookup"><span data-stu-id="92b09-109">This enables the property to return a valid dependency property identifier for certain property system operations such as enumerating locally set values.</span></span> <span data-ttu-id="92b09-110">Jednak identyfikator uzyskany w ten sposób nie ma pełnych możliwości <xref:System.Windows.DependencyProperty> dla wielu operacji systemu właściwości.</span><span class="sxs-lookup"><span data-stu-id="92b09-110">However, the identifier thus obtained does not have the full capabilities of a <xref:System.Windows.DependencyProperty> for many property system operations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92b09-111">Poniższy przykład rejestruje właściwość zależności tylko do odczytu, a także używa klucza do dwóch celów w innych składowych klasy: implementowanie otoki "Get" i jako identyfikator chronionej operacji wyznaczania, która ustawia wartość na podstawie obliczeń innych wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="92b09-111">The following example registers a read-only dependency property, and also uses the key for two purposes in other class members: implementing the get "wrapper", and as the identifier for a protected determination operation that sets the value based on calculations of other property values.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92b09-112">Pobiera identyfikator właściwości zależności skojarzony z tym wyspecjalizowanym identyfikatorem właściwości zależności tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="92b09-112">Gets the dependency property identifier associated with this specialized read-only dependency property identifier.</span></span></summary>
        <value><span data-ttu-id="92b09-113">Odpowiedni identyfikator właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="92b09-113">The relevant dependency property identifier.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92b09-114"><xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> Wartość umożliwia identyfikatorowi właściwości tylko do odczytu uczestnictwo we wspólnych operacjach w systemie właściwości przy użyciu niektórych z tych samych interfejsów, które są używane dla właściwości zależności odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="92b09-114">The <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> value enables a read-only property's identifier to participate in common property system operations using some of the same interfaces as used for read-write dependency properties.</span></span>  
  
 <span data-ttu-id="92b09-115">Aby zaimplementować metodę dostępu get właściwości dla właściwości zależności tylko do odczytu, należy utworzyć i uwidocznić <xref:System.Windows.DependencyProperty> identyfikator klasy.</span><span class="sxs-lookup"><span data-stu-id="92b09-115">In order to implement the get property accessor for a read-only dependency property, you should create and expose a <xref:System.Windows.DependencyProperty> identifier on your class.</span></span> <span data-ttu-id="92b09-116">Służy do tego dwa cele:</span><span class="sxs-lookup"><span data-stu-id="92b09-116">This serves two purposes:</span></span>  
  
-   <span data-ttu-id="92b09-117">Twoja własna Klasa wymaga <xref:System.Windows.DependencyProperty> identyfikatora, aby zaimplementować metodę dostępu get dla otoki właściwości.</span><span class="sxs-lookup"><span data-stu-id="92b09-117">Your own class needs the <xref:System.Windows.DependencyProperty> identifier in order to implement the get accessor for the property wrapper.</span></span> <span data-ttu-id="92b09-118">Używasz jako parametru <xref:System.Windows.DependencyObject.GetValue%2A> wywołania implementującego metodę dostępu get. <xref:System.Windows.DependencyProperty></span><span class="sxs-lookup"><span data-stu-id="92b09-118">You use the <xref:System.Windows.DependencyProperty> as a parameter for the <xref:System.Windows.DependencyObject.GetValue%2A> call that implements the get accessor.</span></span>  
  
-   <span data-ttu-id="92b09-119"><xref:System.Windows.DependencyProperty>identyfikatory uwidaczniają właściwość zależności w systemie właściwości, tak aby inne metody, które opierają się na metadanych, mogły uzyskać do nich dostęp w standardowym formularzu.</span><span class="sxs-lookup"><span data-stu-id="92b09-119"><xref:System.Windows.DependencyProperty> identifiers expose your dependency property to the property system such that other methods that rely on metadata can access it in a standard form.</span></span> <span data-ttu-id="92b09-120">Na przykład w przypadku wywołania <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> na niektórych <xref:System.Windows.DependencyObject> i uzyskaniu wyliczenia lokalnie ustawionych właściwości (wartości i identyfikatory) Identyfikator zwrócony dla właściwości <xref:System.Windows.DependencyProperty> zależności tylko do odczytu będzie wartością, a nie kluczem.</span><span class="sxs-lookup"><span data-stu-id="92b09-120">For instance, if you called <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> on some <xref:System.Windows.DependencyObject> and obtained an enumeration of locally set properties (values and identifiers) the identifier returned for a read-only dependency property would be your <xref:System.Windows.DependencyProperty> value rather than the key.</span></span> <span data-ttu-id="92b09-121">Nieujawnianie <xref:System.Windows.DependencyProperty> identyfikatora nie zwiększa zabezpieczeń właściwości zależności tylko do odczytu w jakikolwiek sposób, tylko wykonuje operacje, które obejmują Właściwość niewygodna obie klasy pochodne i wystąpienia klas.</span><span class="sxs-lookup"><span data-stu-id="92b09-121">Not exposing a <xref:System.Windows.DependencyProperty> identifier does not increase the security of your read-only dependency property in any way, it just makes operations that involve your property more awkward both for subsequent derived classes and class instances.</span></span>  
  
 <span data-ttu-id="92b09-122">Aby uwidocznić <xref:System.Windows.DependencyProperty> identyfikator klasy, należy wywołać <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> bezpośrednio w kluczu.</span><span class="sxs-lookup"><span data-stu-id="92b09-122">To expose the  <xref:System.Windows.DependencyProperty> identifier on your class, you call <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> directly on your key.</span></span> <span data-ttu-id="92b09-123">Użyj tej wartości, aby utworzyć `public static readonly` <xref:System.Windows.DependencyProperty> identyfikator klasy, która jest <xref:System.Windows.DependencyPropertyKey>równoległa.</span><span class="sxs-lookup"><span data-stu-id="92b09-123">Use this value to create a `public static readonly`<xref:System.Windows.DependencyProperty> identifier on the class, which parallels the <xref:System.Windows.DependencyPropertyKey>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92b09-124">Poniższy przykład wywołuje <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> , aby <xref:System.Windows.DependencyProperty> uwidocznić `AquariumGraphic` identyfikator (`AquariumGraphicProperty`) dla właściwości zależności tylko do odczytu w klasie.</span><span class="sxs-lookup"><span data-stu-id="92b09-124">The following example calls <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> to expose the <xref:System.Windows.DependencyProperty> identifier (`AquariumGraphicProperty`) for the `AquariumGraphic` read-only dependency property on a class.</span></span> <span data-ttu-id="92b09-125">W przykładzie pokazano również, <xref:System.Windows.DependencyPropertyKey> jak utworzyć (jako wewnętrzny element członkowski) i metodę dostępu get `AquariumGraphic`dla.</span><span class="sxs-lookup"><span data-stu-id="92b09-125">The example also shows the <xref:System.Windows.DependencyPropertyKey> creation (as an internal member) and the get accessor for `AquariumGraphic`.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="92b09-126">Typ, w którym ta właściwość zależności istnieje, a metadane powinny zostać zastąpione.</span><span class="sxs-lookup"><span data-stu-id="92b09-126">The type on which this dependency property exists and metadata should be overridden.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="92b09-127">Metadane podane dla tego typu.</span><span class="sxs-lookup"><span data-stu-id="92b09-127">Metadata supplied for this type.</span></span></param>
        <summary><span data-ttu-id="92b09-128">Przesłania metadane właściwości zależności tylko do odczytu reprezentowanej przez ten identyfikator właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="92b09-128">Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92b09-129">Zastępowanie metadanych właściwości zależności tylko do odczytu jest wykonywane z przyczyn podobnych do zastępowania metadanych we właściwości zależności odczytu i zapisu i jest ograniczone do dostępu na poziomie klucza, ponieważ zachowania określone w metadanych mogą zmienić zachowanie zestawu ( wartość domyślna (na przykład).</span><span class="sxs-lookup"><span data-stu-id="92b09-129">Overriding metadata on a read-only dependency property is done for similar reasons as overriding metadata on a read-write dependency property, and is restricted to access at the key level because behaviors specified in the metadata can change the set behavior (the default value, for instance).</span></span>  
  
 <span data-ttu-id="92b09-130">Podobnie jak w przypadku właściwości zależności odczytu i zapisu, zastępowanie metadanych właściwości zależności tylko do odczytu powinno odbywać się tylko przed tą właściwością, która jest używana przez system właściwości (jest to równe czasowi określonemu wystąpieniu obiektów, które rejestrują Właściwość jest tworzona jako wystąpienie).</span><span class="sxs-lookup"><span data-stu-id="92b09-130">As with read-write dependency properties, overriding metadata on a read-only dependency property should only be done prior to that property being placed in use by the property system (this equates to the time that specific instances of objects that register the property are instantiated).</span></span> <span data-ttu-id="92b09-131">Wywołania powinny być wykonywane tylko w konstruktorach statycznych typu, który dostarcza siebie `forType` jako parametr tej metody lub równoważnej inicjacji dla tej klasy. <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A></span><span class="sxs-lookup"><span data-stu-id="92b09-131">Calls to <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or equivalent initialization for that class.</span></span>  
  
 <span data-ttu-id="92b09-132">Ta metoda efektywnie przekazuje do <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> metody, <xref:System.Windows.DependencyPropertyKey> przekazując wystąpienie jako parametr klucza.</span><span class="sxs-lookup"><span data-stu-id="92b09-132">This method effectively forwards to the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method, passing the <xref:System.Windows.DependencyPropertyKey> instance as the key parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92b09-133">Poniższy przykład zastępuje metadane istniejącej właściwości zależności tylko do odczytu, którą dziedziczy Klasa.</span><span class="sxs-lookup"><span data-stu-id="92b09-133">The following example overrides metadata for an existing read-only dependency property that a class inherits.</span></span> <span data-ttu-id="92b09-134">W tym przypadku celem scenariusza było dodanie wywołania zwrotnego wartości wymuszonej, że metadane właściwości podstawowych nie zostały wykonane.</span><span class="sxs-lookup"><span data-stu-id="92b09-134">In this case, the scenario goal was to add a coerce value callback that the base property metadata did not have.</span></span> <span data-ttu-id="92b09-135">Można również zastąpić metadane z dowolnego z innych powodów przesłaniania metadanych jest zwykle odpowiednie (zmiana wartości domyślnej, dodanie <xref:System.Windows.FrameworkPropertyMetadataOptions> wartości itp.)</span><span class="sxs-lookup"><span data-stu-id="92b09-135">You could also override metadata for any of the other reasons that overriding metadata is typically appropriate (changing default value, adding <xref:System.Windows.FrameworkPropertyMetadataOptions> values, etc.)</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92b09-136">Podjęto próbę zastąpienia metadanych dla właściwości zależności odczytu i zapisu (nie można wykonać za pomocą tej sygnatury).</span><span class="sxs-lookup"><span data-stu-id="92b09-136">Attempted metadata override on a read-write dependency property (cannot be done using this signature).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="92b09-137">Metadane zostały już ustanowione dla właściwości, która istnieje w podanym typie.</span><span class="sxs-lookup"><span data-stu-id="92b09-137">Metadata was already established for the property as it exists on the provided type.</span></span></exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>
