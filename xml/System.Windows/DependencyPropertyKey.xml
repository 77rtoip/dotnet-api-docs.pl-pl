<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3cd6fbb925314b32cf6f09ce204f5374db64928c" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39765183" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera identyfikator właściwości zależności ograniczone do zapisu właściwości zależności tylko do odczytu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey> wystąpienia są uzyskiwane jako wartość zwracaną przez wywołanie rejestracji właściwość zależności za pomocą metod <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> lub <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.  
  
 Typy, które Zarejestruj właściwości zależności można użyć <xref:System.Windows.DependencyPropertyKey> w wywołaniach <xref:System.Windows.DependencyObject.SetValue%2A> i <xref:System.Windows.DependencyObject.ClearValue%2A> , Dostosuj wartość właściwości jako część logiki klasy. Jeśli dozwolone przez poziom dostępu do klucza, powiązanymi klasami też używać klucza i właściwości zależności. Na przykład można zadeklarować klucza jako wewnętrzne, a inne typy w obrębie tego samego zestawu można również ustawić tę właściwość zależności.  
  
 <xref:System.Windows.DependencyPropertyKey> Zwrócony przez zależności tylko do odczytu właściwości rejestracji nie należy publiczne, ponieważ udostępnianie klucz sprawia, że właściwość można ustawić, udaremniając tym samym punktem rejestrując go jako właściwości zależności tylko do odczytu. Ponadto ujawnienie klucza powoduje, że niezgodność między zależności dostępne właściwości zachowania i jego [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] właściwość otoki implementacji, czyli zła projektowania.  
  
 Zamiast uwidaczniania sam klucz, zamiast tego powinny ujawniać <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> wartość <xref:System.Windows.DependencyPropertyKey> jako `public static readonly` <xref:System.Windows.DependencyProperty> na klasie. Dzięki temu właściwości do zwrócenia identyfikatora właściwości zależności prawidłowe w przypadku niektórych operacji systemu właściwości, takich jak wyliczanie lokalnie Ustawianie wartości. Jednak identyfikator uzyskane w związku z tym nie ma w pełni możliwości <xref:System.Windows.DependencyProperty> wielu operacjach system właściwości.  
  
   
  
## Examples  
 Poniższy przykład rejestruje właściwości zależności tylko do odczytu, a także korzysta z klucza do dwóch celów w innych składowych klasy: Implementowanie get "otoki" i jako identyfikatory operacji chronionych określenie, która ustawia wartość na podstawie obliczeń inne wartości właściwości.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator właściwości zależności, które są skojarzone z identyfikatorem właściwości specjalne zależności tylko do odczytu.</summary>
        <value>Identyfikator właściwości odpowiednich zależności.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> Wartość włącza identyfikator właściwości tylko do odczytu do wzięcia udziału w typowych operacji systemu właściwości przy użyciu niektóre z tych samych interfejsów jako używane dla właściwości zależności odczytu i zapisu.  
  
 Aby można było implementować metody dostępu właściwości get dla właściwości zależności tylko do odczytu, należy utworzyć i uwidocznić <xref:System.Windows.DependencyProperty> identyfikator swojej klasy. Służy do dwóch celów:  
  
-   Twoje potrzeby klasy <xref:System.Windows.DependencyProperty> identyfikator, aby można było implementować metody dostępu get dla otoki właściwości. Możesz użyć <xref:System.Windows.DependencyProperty> jako parametru dla <xref:System.Windows.DependencyObject.GetValue%2A> wywołań, który implementuje metody dostępu get.  
  
-   <xref:System.Windows.DependencyProperty> identyfikatory uwidocznić swoje właściwości zależności systemu właściwość taki sposób, że inne metody, które zależą od metadanych do niego dostęp w postaci standardowych. Na przykład jeśli wywołujesz <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> niektórych <xref:System.Windows.DependencyObject> i uzyskać identyfikator wyliczenia właściwości ustawione lokalnie (wartości i identyfikatory) zwrócona dla właściwości zależności tylko do odczytu będzie swoje <xref:System.Windows.DependencyProperty> wartości zamiast klucza. Udostępnianie nie <xref:System.Windows.DependencyProperty> identyfikator nie zwiększa zabezpieczenia właściwości zależności tylko do odczytu w jakikolwiek sposób, to po prostu sprawia, że operacje obejmujące Twoja własność bardziej niewygodna kolejnych klas pochodnych i wystąpienia klasy.  
  
 Aby udostępnić <xref:System.Windows.DependencyProperty> identyfikator w swojej klasie, należy wywołać <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> bezpośrednio na klucz. Ta wartość służy do tworzenia `public static readonly` <xref:System.Windows.DependencyProperty> identyfikator klasy, która równoleżnikami <xref:System.Windows.DependencyPropertyKey>.  
  
   
  
## Examples  
 Poniższy przykład wywołuje <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> do udostępnienia <xref:System.Windows.DependencyProperty> identyfikator (`AquariumGraphicProperty`) dla `AquariumGraphic` właściwości zależności tylko do odczytu w klasie. W przykładzie pokazano również <xref:System.Windows.DependencyPropertyKey> tworzenie (jako wewnętrzny element członkowski) i metody dostępu get dla `AquariumGraphic`.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">Typ, ta właściwość zależności istnieje i, w którym powinna zostać zastąpiona w metadanych.</param>
        <param name="typeMetadata">Metadane podane dla tego typu.</param>
        <summary>Zastępuje metadanych właściwości zależności tylko do odczytu, który jest reprezentowany przez ten identyfikator właściwości zależności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zastępowanie metadanych właściwości zależności tylko do odczytu jest wykonywane ze względów podobnie jak zastępowanie metadanych właściwości zależności odczytu / zapisu i jest ograniczony do dostępu na poziomie klucza, ponieważ określony w metadanych zachowania można zmienić zachowanie zestawu ( Wartość domyślna, na przykład).  
  
 Jak przy użyciu właściwości zależności odczytu i zapisu, zastępowanie metadanych właściwości zależności tylko do odczytu należy to robić tylko przed tej właściwości zostanie umieszczona w użyciu przez system właściwości (to jest równa czas tego określone wystąpienia obiektów, które rejestrują właściwości są tworzone). Wywołania <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> powinny zostać wykonane tylko w konstruktorach statycznych typu, który zapewnia siebie jako `forType` parametru tej metody, lub równoważne inicjowanie tej klasy.  
  
 Ta metoda skutecznie przekazuje do <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> jest metoda <xref:System.Windows.DependencyPropertyKey> wystąpienia jako parametr klucza.  
  
   
  
## Examples  
 Poniższy przykład zastępuje metadanych właściwości zależności tylko do odczytu, która dziedziczy z klasy. W tym przypadku celem scenariuszu było dodać coerce wartość wywołanie zwrotne nie miał metadane właściwości podstawowej. Można także zastąpić metadane dla odpowiednich z innych powodów, które Zastępowanie metadanych jest zwykle (zmiana wartości domyślnej, dodając <xref:System.Windows.FrameworkPropertyMetadataOptions> wartości itp.)  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Metadane próba zastąpienia dla właściwości zależności odczytu i zapisu (nie można wykonać przy użyciu tej sygnatury).</exception>
        <exception cref="T:System.ArgumentException">Metadane już została włączona dla właściwości, zgodnie z jego lokalizacją dla podanego typu.</exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>