<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="61f0be29cf151e08d249cb070c9ffec96ecb1f41" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69434709" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia identyfikator właściwości zależności dla ograniczonego dostępu do zapisu dla właściwości zależności tylko do odczytu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey>wystąpienia są uzyskiwane jako wartość zwracana wywołania rejestracji właściwości zależności przy użyciu metod <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> lub. <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>  
  
 Typy, które rejestrują właściwość zależności, mogą używać <xref:System.Windows.DependencyPropertyKey> <xref:System.Windows.DependencyObject.SetValue%2A> wywołań in i <xref:System.Windows.DependencyObject.ClearValue%2A> , które dostosowują wartość właściwości jako część logiki klasy. Jeśli jest to dozwolone przez poziom dostępu klucza, klasy pokrewne mogą również używać klucza i właściwości zależności. Na przykład można zadeklarować klucz jako wewnętrzny, a inne typy w tym samym zestawie mogą również ustawić tę właściwość zależności.  
  
 Wartość <xref:System.Windows.DependencyPropertyKey> zwrócona przez rejestrację właściwości zależności tylko do odczytu nie powinna być publiczna, ponieważ udostępnienie klucza powoduje, że właściwość settable, w ten sposób obniżając punkt rejestracji jako właściwość zależności tylko do odczytu. Ponadto ujawnienie klucza powoduje niezgodność pomiędzy dostępnymi zachowaniami właściwości zależności a jego [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] implementacjami otoki właściwości, które jest niewłaściwym projektem klasy.  
  
 Zamiast ujawniać sam klucz, należy zamiast tego <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> ujawniać wartość <xref:System.Windows.DependencyPropertyKey> jako `public static readonly` <xref:System.Windows.DependencyProperty> w klasie. Dzięki temu Właściwość zwraca prawidłowy identyfikator właściwości zależności dla niektórych operacji systemu właściwości, takich jak Wyliczenie lokalnie ustawione wartości. Jednak identyfikator uzyskany w ten sposób nie ma pełnych możliwości <xref:System.Windows.DependencyProperty> dla wielu operacji systemu właściwości.  
  
   
  
## Examples  
 Poniższy przykład rejestruje właściwość zależności tylko do odczytu, a także używa klucza do dwóch celów w innych składowych klasy: implementowanie otoki "Get" i jako identyfikator chronionej operacji wyznaczania, która ustawia wartość na podstawie obliczeń innych wartości właściwości.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator właściwości zależności skojarzony z tym wyspecjalizowanym identyfikatorem właściwości zależności tylko do odczytu.</summary>
        <value>Odpowiedni identyfikator właściwości zależności.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> Wartość umożliwia identyfikatorowi właściwości tylko do odczytu uczestnictwo we wspólnych operacjach w systemie właściwości przy użyciu niektórych z tych samych interfejsów, które są używane dla właściwości zależności odczytu i zapisu.  
  
 Aby zaimplementować metodę dostępu get właściwości dla właściwości zależności tylko do odczytu, należy utworzyć i uwidocznić <xref:System.Windows.DependencyProperty> identyfikator klasy. Służy do tego dwa cele:  
  
-   Twoja własna Klasa wymaga <xref:System.Windows.DependencyProperty> identyfikatora, aby zaimplementować metodę dostępu get dla otoki właściwości. Używasz jako parametru <xref:System.Windows.DependencyObject.GetValue%2A> wywołania implementującego metodę dostępu get. <xref:System.Windows.DependencyProperty>  
  
-   <xref:System.Windows.DependencyProperty>identyfikatory uwidaczniają właściwość zależności w systemie właściwości, tak aby inne metody, które opierają się na metadanych, mogły uzyskać do nich dostęp w standardowym formularzu. Na przykład w przypadku wywołania <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> na niektórych <xref:System.Windows.DependencyObject> i uzyskaniu wyliczenia lokalnie ustawionych właściwości (wartości i identyfikatory) Identyfikator zwrócony dla właściwości <xref:System.Windows.DependencyProperty> zależności tylko do odczytu będzie wartością, a nie kluczem. Nieujawnianie <xref:System.Windows.DependencyProperty> identyfikatora nie zwiększa zabezpieczeń właściwości zależności tylko do odczytu w jakikolwiek sposób, tylko wykonuje operacje, które obejmują Właściwość niewygodna obie klasy pochodne i wystąpienia klas.  
  
 Aby uwidocznić <xref:System.Windows.DependencyProperty> identyfikator klasy, należy wywołać <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> bezpośrednio w kluczu. Użyj tej wartości, aby utworzyć `public static readonly` <xref:System.Windows.DependencyProperty> identyfikator klasy, która jest <xref:System.Windows.DependencyPropertyKey>równoległa.  
  
   
  
## Examples  
 Poniższy przykład wywołuje <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> , aby <xref:System.Windows.DependencyProperty> uwidocznić `AquariumGraphic` identyfikator (`AquariumGraphicProperty`) dla właściwości zależności tylko do odczytu w klasie. W przykładzie pokazano również, <xref:System.Windows.DependencyPropertyKey> jak utworzyć (jako wewnętrzny element członkowski) i metodę dostępu get `AquariumGraphic`dla.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">Typ, w którym ta właściwość zależności istnieje, a metadane powinny zostać zastąpione.</param>
        <param name="typeMetadata">Metadane podane dla tego typu.</param>
        <summary>Przesłania metadane właściwości zależności tylko do odczytu reprezentowanej przez ten identyfikator właściwości zależności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zastępowanie metadanych właściwości zależności tylko do odczytu jest wykonywane z przyczyn podobnych do zastępowania metadanych we właściwości zależności odczytu i zapisu i jest ograniczone do dostępu na poziomie klucza, ponieważ zachowania określone w metadanych mogą zmienić zachowanie zestawu ( wartość domyślna (na przykład).  
  
 Podobnie jak w przypadku właściwości zależności odczytu i zapisu, zastępowanie metadanych właściwości zależności tylko do odczytu powinno odbywać się tylko przed tą właściwością, która jest używana przez system właściwości (jest to równe czasowi określonemu wystąpieniu obiektów, które rejestrują Właściwość jest tworzona jako wystąpienie). Wywołania powinny być wykonywane tylko w konstruktorach statycznych typu, który dostarcza siebie `forType` jako parametr tej metody lub równoważnej inicjacji dla tej klasy. <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>  
  
 Ta metoda efektywnie przekazuje do <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> metody, <xref:System.Windows.DependencyPropertyKey> przekazując wystąpienie jako parametr klucza.  
  
   
  
## Examples  
 Poniższy przykład zastępuje metadane istniejącej właściwości zależności tylko do odczytu, którą dziedziczy Klasa. W tym przypadku celem scenariusza było dodanie wywołania zwrotnego wartości wymuszonej, że metadane właściwości podstawowych nie zostały wykonane. Można również zastąpić metadane z dowolnego z innych powodów przesłaniania metadanych jest zwykle odpowiednie (zmiana wartości domyślnej, dodanie <xref:System.Windows.FrameworkPropertyMetadataOptions> wartości itp.)  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Podjęto próbę zastąpienia metadanych dla właściwości zależności odczytu i zapisu (nie można wykonać za pomocą tej sygnatury).</exception>
        <exception cref="T:System.ArgumentException">Metadane zostały już ustanowione dla właściwości, która istnieje w podanym typie.</exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>
