<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="620ca50d7b7841b0be3d9ebb860f452ea6667928" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69444890" /></Metadata><TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <TypeSignature Language="F#" Value="type EventManager = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia metody narzędziowe związane z zdarzeniami, które rejestrują zdarzenia kierowane dla właścicieli klas i dodają obsługę klas.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa jest najczęściej używana do rejestrowania nowego zdarzenia trasowanego za pomocą <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.  
  
 Drugim najbardziej typowym [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] użyciem jest <xref:System.Windows.EventManager.RegisterClassHandler%2A>. Ta metoda służy do włączania obsługi klasy dla zdarzenia kierowanego w klasie lub dołączonego zdarzenia. Aby uzyskać szczegółowe informacje, zobacz [oznaczanie zdarzeń kierowanych jako obsłużone i obsługa klas](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak za pomocą tej klasy zarejestrować nowe zdarzenie kierowane jako element członkowski klasy, oraz technikę "otoki" z rozesłanym zdarzeniem, która przesłania implementacje dodawania i [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] usuwania dla zdarzenia.  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberSignature Language="F#" Value="static member GetRoutedEvents : unit -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca identyfikatory dla zdarzeń kierowanych zarejestrowanych w systemie zdarzeń.</summary>
        <returns>Tablica typu <see cref="T:System.Windows.RoutedEvent" /> zawierającego zarejestrowane obiekty.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Więcej <xref:System.Windows.RoutedEvent> obiektów można zarejestrować w późniejszym czasie. Ta metoda pobiera migawkę, a zbieranie zdarzeń kierowanych jest zapisywalne w okresie istnienia aplikacji. Zwracana kolekcja może być dość duża. Nawet po prostu zliczanie zdarzeń, które są częścią [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], liczba kolekcji jest w dużej liczbie setek.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member GetRoutedEventsForOwner : Type -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEventsForOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">Typ, za pomocą którego ma zostać rozpoczęte wyszukiwanie. Klasy bazowe są uwzględniane w wyszukiwaniu.</param>
        <summary>Znajduje wszystkie rozesłane identyfikatory zdarzeń dla zdarzeń zarejestrowanych przy użyciu podanego typu właściciela.</summary>
        <returns>Tablica pasujących identyfikatorów zdarzeń kierowanych w przypadku znalezienia dowolnego dopasowania; w przeciwnym razie. <see langword="null" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rejestruje procedurę obsługi klasy dla określonego zdarzenia kierowanego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">Typ klasy, która deklaruje obsługę klas.</param>
        <param name="routedEvent">Identyfikator rozesłanego zdarzenia do obsłużenia.</param>
        <param name="handler">Odwołanie do implementacji procedury obsługi klas.</param>
        <summary>Rejestruje procedurę obsługi klasy dla określonego zdarzenia kierowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa klas to funkcja, która jest dostępna dla zdarzeń kierowanych, łącznie z dołączonymi zdarzeniami, które są implementowane za pomocą przekierowywania zdarzeń. Procedura obsługi klas jest taka jak statyczna procedura obsługi, która istnieje dla wszystkich wystąpień klasy. Ponieważ procedura obsługi jest statyczna, nie można zmienić właściwości wystąpienia bezpośrednio z obsługą klasy, ale można uzyskać dostęp do wystąpień `sender` za pomocą parametru i/lub danych zdarzenia.  
  
 Procedury obsługi klas są wywoływane przed obsługą wystąpień. Można zaimplementować procedurę obsługi klasy, która ma zachowanie podczas oznaczania zdarzenia jako obsługiwane. W związku z tym programy obsługi wystąpień dla zdarzenia obsługiwanego przez klasę nie są wywoływane, chyba że programy obsługi wystąpień rejestrują się w odniesieniu do obsłużonych zdarzeń.  
  
 Wiele zdarzeń elementu podstawowego zapewnia klasy obsługujące metody wirtualne. [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Zastępując te metody w klasach, które dziedziczą klasy bazowe, można zaimplementować obsługę klas bez wywoływania <xref:System.Windows.EventManager.RegisterClassHandler%2A> w konstruktorach statycznych. Te metody obsługi klas zazwyczaj istnieją dla zdarzeń wejściowych i mają nazwy rozpoczynające się od "on" i kończą się nazwą zdarzenia, które są obsługiwane przez klasę.  
  
 Aby uzyskać więcej informacji na temat obsługi klas, zobacz [oznaczanie zdarzeń kierowanych jako obsłużone i obsługa klas](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Za pomocą tej sygnatury, programy obsługi klas zostaną zarejestrowane do wywołania tylko w odpowiedzi na nieobsłużone zdarzenia. Można również zarejestrować procedury obsługi klasy do wywołania nawet wtedy, gdy argumenty zdarzeń są oznaczone jako obsługiwane, przy użyciu <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> podpisu z `handledEventsToo` ustawioną na `true`.  
  
   
  
## Examples  
 Poniższy przykład dodaje procedurę obsługi dla <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, wywołując. <xref:System.Windows.EventManager.RegisterClassHandler%2A>  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">Typ klasy, która deklaruje obsługę klas.</param>
        <param name="routedEvent">Identyfikator rozesłanego zdarzenia do obsłużenia.</param>
        <param name="handler">Odwołanie do implementacji procedury obsługi klas.</param>
        <param name="handledEventsToo"><see langword="true" />Aby wywołać tę procedurę obsługi klasy, nawet jeśli argumenty zdarzenia kierowanego zostały oznaczone jako obsługiwane; <see langword="false" /> zachowanie domyślnego zachowania niewywoływania programu obsługi dla dowolnego oznaczonego zdarzenia obsługiwanego.</param>
        <summary>Rejestruje procedurę obsługi dla konkretnego zdarzenia kierowanego z opcją obsługi zdarzeń, w przypadku których dane zdarzenia są już oznaczone jako obsługiwane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa klas to funkcja, która jest dostępna dla zdarzeń kierowanych, łącznie z dołączonymi zdarzeniami, które są implementowane za pomocą przekierowywania zdarzeń. Procedura obsługi klas jest taka jak statyczna procedura obsługi, która istnieje dla wszystkich wystąpień klasy. Ponieważ procedura obsługi jest statyczna, nie można zmienić właściwości wystąpienia bezpośrednio z obsługą klasy, ale można uzyskać dostęp do wystąpień `sender` za pomocą parametru i/lub danych zdarzenia.  
  
 Procedury obsługi klas są wywoływane przed obsługą wystąpień. Można zaimplementować procedurę obsługi klasy, która ma zachowanie podczas oznaczania zdarzenia jako obsługiwane. W związku z tym programy obsługi wystąpień dla zdarzenia obsługiwanego przez klasę nie są wywoływane, chyba że programy obsługi wystąpień rejestrują się w odniesieniu do obsłużonych zdarzeń.  
  
 Wiele zdarzeń elementu podstawowego zapewnia klasy obsługujące metody wirtualne. [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Zastępując te metody w klasach, które dziedziczą klasy bazowe, można zaimplementować obsługę klas bez wywoływania <xref:System.Windows.EventManager.RegisterClassHandler%2A> w konstruktorach statycznych. Te metody obsługi klas zazwyczaj istnieją dla zdarzeń wejściowych i mają nazwy rozpoczynające się od "on" i kończą się nazwą zdarzenia, które są obsługiwane przez klasę.  
  
 Aby uzyskać więcej informacji na temat obsługi klas, zobacz [oznaczanie zdarzeń kierowanych jako obsłużone i obsługa klas](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Za pomocą tej sygnatury, programy obsługi klasy mogą być zarejestrowane do wywołania w przypadku obsłużonych `handledEventsToo` zdarzeń przez `true`ustawienie ustawione na. Ogólnie rzecz biorąc, należy to zrobić tylko wtedy, gdy występuje znany problem z obsługą, który próbujesz obejść, taki jak wejściowy system obsługi zdarzeń myszy lub klawiatury.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterRoutedEvent : string * System.Windows.RoutingStrategy * Type * Type -&gt; System.Windows.RoutedEvent" Usage="System.Windows.EventManager.RegisterRoutedEvent (name, routingStrategy, handlerType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa zdarzenia kierowanego. Nazwa musi być unikatowa w obrębie typu właściciela i nie może <see langword="null" /> być ciągiem pustym.</param>
        <param name="routingStrategy">Strategia routingu zdarzenia jako wartość wyliczenia.</param>
        <param name="handlerType">Typ procedury obsługi zdarzeń. Musi to być typ delegata i nie może <see langword="null" />być.</param>
        <param name="ownerType">Typ klasy właściciela zdarzenia kierowanego. Nie może to <see langword="null" />być.</param>
        <summary>Rejestruje nowe zdarzenie kierowane w [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] systemie zdarzeń.</summary>
        <returns>Identyfikator nowo zarejestrowanego zdarzenia kierowanego. Ten obiekt identyfikatora może być teraz przechowywany jako pole statyczne w klasie, a następnie używany jako parametr metod, które dołączają procedury obsługi do zdarzenia. Identyfikator zdarzenia kierowanego jest również używany dla innego systemu [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]zdarzeń.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj wartości zwracanej przez tę metodę, aby utworzyć deklarację statyczną dla <xref:System.Windows.RoutedEvent> pola unikatowego identyfikatora. To pole powinno być przechowywane w obrębie typu właściciela.  
  
 Istnieje znaczna liczba konwencji i najlepszych rozwiązań związanych z sposobem, w jaki zdarzenia kierowane powinny być nazwane, zarejestrowane i udostępniane w klasie. Aby uzyskać więcej informacji, zobacz [Omówienie zdarzeń kierowanych](~/docs/framework/wpf/advanced/routed-events-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
