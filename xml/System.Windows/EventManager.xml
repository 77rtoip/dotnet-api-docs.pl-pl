<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2e0251fbd3d9179e855a3573194cd3b7d5169712" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36460488" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <TypeSignature Language="F#" Value="type EventManager = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia metody narzędziowe związane ze zdarzeniami, które Zarejestruj kierowane zdarzenia dla klasy właścicieli i dodać obsługę klas.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa jest najczęściej używane do rejestrowania nowych kierowanego zdarzenia z <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.  
  
 Drugi najczęściej [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] jest użycie <xref:System.Windows.EventManager.RegisterClassHandler%2A>. Ta metoda umożliwia obsługę klasy kierowanego zdarzenia w klasie lub dołączone zdarzenie. Aby uzyskać więcej informacji, zobacz [oznaczenie kierowane zdarzenia jako Handled i obsługa klasy](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak klasa używana do rejestrowania nowych kierowanego zdarzenia jako element członkowski klasy wraz z techniki "otoki" kierowanego zdarzenia zastępowanie Dodaj i Usuń implementacji dla [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeń.  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberSignature Language="F#" Value="static member GetRoutedEvents : unit -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca identyfikatory kierowane zdarzenia, które zostały zarejestrowane w systemie zdarzeń.</summary>
        <returns>Tablica typu <see cref="T:System.Windows.RoutedEvent" /> zawierający zarejestrowanych obiektów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Więcej <xref:System.Windows.RoutedEvent> obiektów, które mogą być rejestrowane później. Ta metoda pobiera migawkę i kolekcji kierowane zdarzenia jest zapisywalny przez cały okres istnienia aplikacji. Kolekcja zwracana może być dość duży. Nawet po prostu zliczania zdarzeń, które są częścią [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], liczba kolekcji jest w setki wysoki.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member GetRoutedEventsForOwner : Type -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEventsForOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">Typ ma się rozpocząć wyszukiwanie z. Klasy podstawowe są uwzględnione w wyszukiwaniu.</param>
        <summary>Znajduje wszystkie identyfikatory kierowanego zdarzenia dla zdarzeń, które są zarejestrowane w usłudze typ podanego właściciela.</summary>
        <returns>Tablica zgodnych identyfikatorów kierowanego zdarzenia, gdy wszystkie dopasowania zostanie odnaleziony; w przeciwnym razie <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rejestruje obsługi klasy dla konkretnego kierowanego zdarzenia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">Typ klasy, która jest deklarowanie klasy obsługi.</param>
        <param name="routedEvent">Identyfikator zdarzenia w celu obsługi kierowanego zdarzenia.</param>
        <param name="handler">Odwołanie do implementacji klasy obsługi.</param>
        <summary>Rejestruje obsługi klasy dla konkretnego kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa klasy to funkcja, która jest dostępna dla kierowane zdarzenia, w tym dołączone zdarzenia, które są wykonywane z kierowanego zdarzenia kopii. Klasy obsługi przypomina obsługi statyczne, czy istnieje dla wszystkich wystąpień klasy. Ponieważ program obsługi jest statyczna, nie można zmienić właściwości wystąpienia bezpośrednio z programu obsługi klasy, ale można uzyskać dostępu do wystąpienia za pomocą `sender` parametru i/lub dane zdarzenia.  
  
 Klasy obsługi są wywoływane przed wystąpieniem obsługi. Można zaimplementować obsługi klasy, która ma oznaczenie zdarzenie, ponieważ obsługiwane zachowanie. W związku z tym wystąpienie obsługi dla zdarzenia obsługiwane klasy nie są wywoływane, chyba że obsługi wystąpienia zarejestrować specjalnie z myślą o obsłużone zdarzenia.  
  
 Duża liczba [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] zdarzenia base element udostępniają klasy obsługi metodach wirtualnych. Zastępowanie tych metod w klasach, które dziedziczą z klasy podstawowej, można zaimplementować klasy obsługi bez wywoływania elementu <xref:System.Windows.EventManager.RegisterClassHandler%2A> w konstruktorach statycznych. Te metody obsługi klasy zwykle istnieją zdarzenia wejściowe i mają nazwy zaczynające "On" i kończyć się nazwa zdarzenia jest klasa obsługiwane.  
  
 Aby uzyskać więcej informacji na temat klasy obsługi zobacz [oznaczenie kierowane zdarzenia jako Handled i obsługa klasy](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Za pomocą tego podpisu, obsługę klas zostanie zarejestrowany można wywołać tylko w odpowiedzi na zdarzenia nieobsługiwany. Można również zarejestrować obsługę klas można wywołać, nawet jeśli argumenty zdarzeń są oznaczone jako obsługiwany, za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> podpisu, z `handledEventsToo` ustawioną `true`.  
  
   
  
## Examples  
 Poniższy przykład umożliwia dodanie obsługi dla <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, wywoływania <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">Typ klasy, która jest deklarowanie klasy obsługi.</param>
        <param name="routedEvent">Identyfikator zdarzenia w celu obsługi kierowanego zdarzenia.</param>
        <param name="handler">Odwołanie do implementacji klasy obsługi.</param>
        <param name="handledEventsToo">
          <see langword="true" /> Wywołaj obsługę tej klasy, nawet jeśli została oznaczona jako argumenty kierowanego zdarzenia przetwarzanych; <see langword="false" /> zachowania domyślnego zachowania nie wywołuje program obsługi na wszystkie zdarzenia oznaczone obsługiwane.</param>
        <summary>Rejestruje obsługi klasy dla określonego zdarzenia routingiem, z możliwością obsługi zdarzeń, w którym dane zdarzeń jest oznaczona jako obsługiwane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa klasy to funkcja, która jest dostępna dla kierowane zdarzenia, w tym dołączone zdarzenia, które są wykonywane z kierowanego zdarzenia kopii. Klasy obsługi przypomina obsługi statyczne, czy istnieje dla wszystkich wystąpień klasy. Ponieważ program obsługi jest statyczna, nie można zmienić właściwości wystąpienia bezpośrednio z programu obsługi klasy, ale można uzyskać dostępu do wystąpienia za pomocą `sender` parametru i/lub dane zdarzenia.  
  
 Klasy obsługi są wywoływane przed wystąpieniem obsługi. Można zaimplementować obsługi klasy, która ma oznaczenie zdarzenie, ponieważ obsługiwane zachowanie. W związku z tym wystąpienie obsługi dla zdarzenia obsługiwane klasy nie są wywoływane, chyba że obsługi wystąpienia zarejestrować specjalnie z myślą o obsłużone zdarzenia.  
  
 Duża liczba [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] zdarzenia base element udostępniają klasy obsługi metodach wirtualnych. Zastępowanie tych metod w klasach, które dziedziczą z klasy podstawowej, można zaimplementować klasy obsługi bez wywoływania elementu <xref:System.Windows.EventManager.RegisterClassHandler%2A> w konstruktorach statycznych. Te metody obsługi klasy zwykle istnieją zdarzenia wejściowe i mają nazwy zaczynające "On" i kończyć się nazwa zdarzenia jest klasa obsługiwane.  
  
 Aby uzyskać więcej informacji na temat klasy obsługi zobacz [oznaczenie kierowane zdarzenia jako Handled i obsługa klasy](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Za pomocą tego podpisu, obsługę klas można zarejestrować do wywołania po obsłużone zdarzenia, ustawiając `handledEventsToo` ustawioną `true`. Ogólnie rzecz biorąc należy to zrobić tylko, jeśli wystąpi problem znane obsługi, który chcesz obejść, takich jak system wejściowy obsługi zdarzeń za pomocą klawiatury lub myszy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterRoutedEvent : string * System.Windows.RoutingStrategy * Type * Type -&gt; System.Windows.RoutedEvent" Usage="System.Windows.EventManager.RegisterRoutedEvent (name, routingStrategy, handlerType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa kierowanego zdarzenia. Nazwa musi być unikatowa w obrębie typu właściciela i nie może być <see langword="null" /> lub ciąg pusty.</param>
        <param name="routingStrategy">Strategii routingu zdarzenia jako wartość wyliczenia.</param>
        <param name="handlerType">Typem obsługi zdarzeń. To musi być typem obiektu delegowanego i nie może być <see langword="null" />.</param>
        <param name="ownerType">Typ klasy właściciela kierowanego zdarzenia. Nie może to być <see langword="null" />.</param>
        <summary>Rejestruje nowy kierowanego zdarzenia z [! System zdarzeń include[TLA#tla_winclient](~/includes/tlasharptla-winclient-MD.MD)].</summary>
        <returns>Identyfikator nowo zarejestrowanych kierowanego zdarzenia. Ten obiekt identyfikator może być teraz przechowywane jako pola statycznego w klasie, a następnie użyć jako parametru dla metod, które załączyć obsługi zdarzenia. Identyfikator kierowanego zdarzenia służy także do innego systemu zdarzeń [! INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-MD.MD)].</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwracana wartość ta metoda umożliwia utworzenie deklaracja statycznej unikatowego <xref:System.Windows.RoutedEvent> pole identyfikatora. W tym polu powinny być przechowywane w ramach typu właściciela.  
  
 Brak znaczną liczbę konwencje, a najlepsze rozwiązania związane z jak kierowane zdarzenia powinna być o nazwie, zarejestrowane oraz widoczne w klasie. Aby uzyskać więcej informacji, zobacz [kierowane Przegląd zdarzeń](~/docs/framework/wpf/advanced/routed-events-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>