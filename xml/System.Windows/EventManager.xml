<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c07ba11c7438326eddb5331a443033c7ee73acb9" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39844486" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <TypeSignature Language="F#" Value="type EventManager = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia metody narzędziowe związane ze zdarzeniami, które zarejestrować zdarzenia trasowane dla właścicieli klasy i dodać funkcje obsługi klas.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa jest najczęściej używane do zarejestrować nowe zdarzenie trasowane <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.  
  
 Drugi najczęściej występujące [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] użycie jest <xref:System.Windows.EventManager.RegisterClassHandler%2A>. Ta metoda umożliwia obsługę klasy zdarzenia trasowanego w klasie lub dołączone zdarzenie. Aby uzyskać więcej informacji, zobacz [oznaczanie zdarzeń trasowanych jako Handled oraz obsługa klasy](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
   
  
## Examples  
 Poniższy przykład pokazują, jak użyć tej klasy, aby zarejestrować nowe zdarzenia trasowanego jako członek klasy wraz z technika "otoki" zdarzenia trasowanego zastępowanie dodawania i usuwania niedotyczące [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeń.  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberSignature Language="F#" Value="static member GetRoutedEvents : unit -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca identyfikatory zdarzeń trasowanych, które zostały zarejestrowane systemu zdarzeń.</summary>
        <returns>Tablica typu <see cref="T:System.Windows.RoutedEvent" /> zawiera zarejestrowane obiekty.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Więcej <xref:System.Windows.RoutedEvent> obiektów, które mogą być rejestrowane później. Ta metoda pobiera migawkę i zbierania zdarzeń trasowanych jest zapisywalny w okresie istnienia aplikacji. Zwracanej kolekcji może być dość duży. Nawet po prostu zliczania zdarzeń, które są częścią [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], liczba kolekcji znajduje się w kilkuset wysokiej.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member GetRoutedEventsForOwner : Type -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEventsForOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">Typ, który ma zostać rozpoczęte wyszukiwanie za pomocą. Klasy bazowe są uwzględnione w wyszukiwaniu.</param>
        <summary>Znajduje wszystkie identyfikatory zdarzeń trasowanych dla zdarzenia, które są zarejestrowane w usłudze typ właściciela podana.</summary>
        <returns>Tablica identyfikatorów zdarzenia trasowanego dopasowania, gdy jakiegokolwiek dopasowania zostanie odnaleziony; w przeciwnym razie <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rejestruje klasę procedury obsługi dla określonego zdarzenia trasowanego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">Typ klasy, która jest deklarowanie klas obsługi.</param>
        <param name="routedEvent">Identyfikator zdarzenia trasowanego zdarzenia w celu obsługi.</param>
        <param name="handler">Odwołanie do implementacji klasy programu obsługi.</param>
        <summary>Rejestruje klasę procedury obsługi dla określonego zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa klasy jest funkcją, która jest dostępna dla zdarzenia trasowanego, w tym dołączone zdarzenia, które są implementowane za pomocą zdarzenia trasowanego tworzenia kopii. Obsługa klasy przypomina statyczne program obsługi, który istnieje dla wszystkich wystąpień klasy. Ponieważ program obsługi jest statyczna, nie można zmienić właściwości wystąpienia bezpośrednio z programu obsługi dla klasy, ale możesz uzyskać dostęp wystąpień za pośrednictwem `sender` parametru i/lub dane zdarzenia.  
  
 Klasa procedury obsługi są wywoływane przed wystąpieniem obsługi. Możesz zaimplementować klasy programu obsługi, zawierającej zachowanie oznaczanie zdarzenia jako obsługiwane. W związku z tym obsługi wystąpienia zdarzenia obsługiwane przez klasy nie są wywoływane, chyba że obsługi wystąpienia rejestru pod kątem zdarzeń obsługiwane.  
  
 Wiele [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] elementu podstawowego zdarzenia zapewniają obsługę metody wirtualne klasy. Zastępowanie tych metod w klasach, które dziedziczą z klasy podstawowej, można zaimplementować obsługę bez wywoływania klasy <xref:System.Windows.EventManager.RegisterClassHandler%2A> w konstruktorach statycznych. Metody obsługi tych klas zwykle istnieją dla zdarzenia wejściowe i mają nazwy zaczynające "Włączone", i kończy się nazwę zdarzenia, są obsługiwane klasy.  
  
 Aby uzyskać więcej informacji na temat obsługi klasy, zobacz [oznaczanie zdarzeń trasowanych jako Handled oraz obsługa klasy](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Za pomocą podpisu, funkcje obsługi klas zostanie zarejestrowana do wywołania tylko w odpowiedzi na zdarzenia nieobsługiwany. Możesz także zarejestrować funkcje obsługi klas do wywołania, nawet wtedy, gdy argumenty zdarzeń są obsługiwane, oznaczony za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> podpisu, za pomocą `handledEventsToo` równa `true`.  
  
   
  
## Examples  
 Poniższy przykład dodaje program obsługi <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, wywoływania <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">Typ klasy, która jest deklarowanie klas obsługi.</param>
        <param name="routedEvent">Identyfikator zdarzenia trasowanego zdarzenia w celu obsługi.</param>
        <param name="handler">Odwołanie do implementacji klasy programu obsługi.</param>
        <param name="handledEventsToo">
          <see langword="true" /> Aby wywołać ten program obsługi klasy, nawet wtedy, gdy argumenty zdarzenia trasowanego zostały oznaczone jako obsłużony; <see langword="false" /> zachowania domyślne zachowanie nie wywoływanie procedury obsługi na dowolne zdarzenie, oznaczone jako obsługiwane.</param>
        <summary>Rejestruje klasę procedury obsługi dla określonego zdarzenia trasowane, przy użyciu opcji do obsługi zdarzeń, w którym dane zdarzeń jest oznaczona jako obsługiwane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa klasy jest funkcją, która jest dostępna dla zdarzenia trasowanego, w tym dołączone zdarzenia, które są implementowane za pomocą zdarzenia trasowanego tworzenia kopii. Obsługa klasy przypomina statyczne program obsługi, który istnieje dla wszystkich wystąpień klasy. Ponieważ program obsługi jest statyczna, nie można zmienić właściwości wystąpienia bezpośrednio z programu obsługi dla klasy, ale możesz uzyskać dostęp wystąpień za pośrednictwem `sender` parametru i/lub dane zdarzenia.  
  
 Klasa procedury obsługi są wywoływane przed wystąpieniem obsługi. Możesz zaimplementować klasy programu obsługi, zawierającej zachowanie oznaczanie zdarzenia jako obsługiwane. W związku z tym obsługi wystąpienia zdarzenia obsługiwane przez klasy nie są wywoływane, chyba że obsługi wystąpienia rejestru pod kątem zdarzeń obsługiwane.  
  
 Wiele [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] elementu podstawowego zdarzenia zapewniają obsługę metody wirtualne klasy. Zastępowanie tych metod w klasach, które dziedziczą z klasy podstawowej, można zaimplementować obsługę bez wywoływania klasy <xref:System.Windows.EventManager.RegisterClassHandler%2A> w konstruktorach statycznych. Metody obsługi tych klas zwykle istnieją dla zdarzenia wejściowe i mają nazwy zaczynające "Włączone", i kończy się nazwę zdarzenia, są obsługiwane klasy.  
  
 Aby uzyskać więcej informacji na temat obsługi klasy, zobacz [oznaczanie zdarzeń trasowanych jako Handled oraz obsługa klasy](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Korzystając z tą sygnaturą, funkcje obsługi klas można zarejestrować do wywołania po obsługuje zdarzenia, ustawiając `handledEventsToo` równa `true`. Ogólnie rzecz biorąc należy w tym tylko wtedy, gdy problem znanych obsługi, który chcesz obejść, takich jak system wejściowy obsługi zdarzeń myszy lub klawiatury.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterRoutedEvent : string * System.Windows.RoutingStrategy * Type * Type -&gt; System.Windows.RoutedEvent" Usage="System.Windows.EventManager.RegisterRoutedEvent (name, routingStrategy, handlerType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa zdarzenia trasowanego. Nazwa musi być unikatowa w obrębie typu właściciela i nie może być <see langword="null" /> ani być pustym ciągiem.</param>
        <param name="routingStrategy">Strategia routingu zdarzeń jako wartość wyliczenia.</param>
        <param name="handlerType">Typem obsługi zdarzeń. To musi być typem obiektu delegowanego i nie może być <see langword="null" />.</param>
        <param name="ownerType">Typ klasy właściciela zdarzenia trasowanego. Nie może to być <see langword="null" />.</param>
        <summary>Rejestruje nowe zdarzenia trasowanego z [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] system zdarzeń.</summary>
        <returns>Identyfikator nowo zarejestrowanego zdarzenia trasowanego. Tego identyfikatora obiektu można teraz przechowywane jako pole statyczne w klasie, a następnie użyć jako parametru dla metod, które Dołącz obsługi do zdarzenia. Identyfikator zdarzenia trasowanego jest także używana dla innego systemu zdarzeń [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Umożliwia tworzenie statycznej deklaracji pod kątem unikatową wartość zwracana przez tę metodę <xref:System.Windows.RoutedEvent> pole identyfikatora. W tym polu powinny być przechowywane w ramach typu właściciela.  
  
 Istnieją znaczną liczbę konwencje i najlepsze rozwiązania związane ze zdarzeniami trasowanymi jak powinna być o nazwie zainstalowanie i zarejestrowanie ujawnione w klasie. Aby uzyskać więcej informacji, zobacz [Przegląd zdarzeń kierowane](~/docs/framework/wpf/advanced/routed-events-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>