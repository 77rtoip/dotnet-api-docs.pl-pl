<Type Name="LogicalTreeHelper" FullName="System.Windows.LogicalTreeHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3794828e1dd9f6d221f59f069553788f01bde108" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37491981" /></Metadata><TypeSignature Language="C#" Value="public static class LogicalTreeHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LogicalTreeHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LogicalTreeHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class LogicalTreeHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogicalTreeHelper abstract sealed" />
  <TypeSignature Language="F#" Value="type LogicalTreeHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia metody statyczne pomocnicze do tworzenia zapytań o obiekty w drzewie logicznym.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.LogicalTreeHelper> Klasa dostarcza metody, które można użyć do zwrócenia kolekcje elementów podrzędnych obiektów lub określonych obiekty w podwęzłach drzewo logiczne. Jednak większość operacji drzewa obiektów, które zwykle wykonują są również dostępne przez podobne metody lub właściwości w <xref:System.Windows.FrameworkElement> lub <xref:System.Windows.FrameworkContentElement>. Na przykład spróbuj wykonać następujące czynności:  
  
-   Zamiast wywoływania statycznej <xref:System.Windows.LogicalTreeHelper.GetChildren%2A> metody, która zwraca moduł wyliczający dla podrzędnych logicznego obiektów, użyj dedykowany kolekcji ujawnione w modelu zawartości dla tego obiektu. Prawie wszystkie obiekty, które obsługują model zawartości ujawniać niektórych właściwości, która zawiera kolekcję obiektów podrzędnych i obsługuje kolekcji interfejs bezpośrednio w tej kolekcji.  
  
-   Zamiast wywoływania statycznej <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> metodę, aby uzyskać obiekt podrzędny, określając jej nazwę, wywołanie <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> lub <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> metody w określonych obiektach.  
  
 <xref:System.Windows.LogicalTreeHelper> jest najbardziej użyteczne dla scenariuszy analizy, w którym podróży w górę lub dół rekursywnie drzewo logiczne na wielu poziomach, a chcesz użyć spójnego podejścia do badania różnych obiektów nadrzędnych i podrzędnych. W takim przypadku dostęp kombinację modele zawartości, a za pomocą więcej model zawartości określonych interfejsów API byłoby zbyt złożony.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public static void BringIntoView (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BringIntoView(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BringIntoView (current As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BringIntoView(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member BringIntoView : System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.LogicalTreeHelper.BringIntoView current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Element interfejsu użytkownika, aby przełączyć do widoku.</param>
        <summary>Podejmuje próbę wprowadzenia żądanego elementu interfejsu użytkownika w widoku i zgłasza <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> zdarzeń w elemencie docelowym w celu raportowania wyników.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to zazwyczaj bardziej wygodne do wywołania metody wystąpienia <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType> lub <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType> zamiast tej metody statyczne narzędzia. Zachowanie metody wystąpienia jest równoważna z zachowaniem metody statycznej.  
  
 Nawet wtedy, gdy `current` został dostarczony element interfejsu użytkownika <xref:System.Windows.FrameworkContentElement>, wynikowy zdarzeń jest taka sama <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> zdarzenia ze źródłowym <xref:System.Windows.FrameworkContentElement> zidentyfikować, sprawdzając dane zdarzenia, które zdarzenia.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      </Docs>
    </Member>
    <Member MemberName="FindLogicalNode">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject FindLogicalNode (System.Windows.DependencyObject logicalTreeNode, string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject FindLogicalNode(class System.Windows.DependencyObject logicalTreeNode, string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLogicalNode (logicalTreeNode As DependencyObject, elementName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ FindLogicalNode(System::Windows::DependencyObject ^ logicalTreeNode, System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="static member FindLogicalNode : System.Windows.DependencyObject * string -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.FindLogicalNode (logicalTreeNode, elementName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalTreeNode" Type="System.Windows.DependencyObject" />
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logicalTreeNode">Obiekt, aby rozpocząć wyszukiwanie od. Ten obiekt musi być albo <see cref="T:System.Windows.FrameworkElement" /> lub <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <param name="elementName">Nazwa obiektu do znalezienia.</param>
        <summary>Próbuje odnajdujący i zwracający obiekt, który ma określoną nazwę. Wyszukiwanie rozpoczyna się od określonego obiektu i jest kontynuowane na węzły podrzędne drzewa logicznego.</summary>
        <returns>Obiekt o pasującej nazwie, jeśli został znaleziony; Zwraca <see langword="null" /> Jeśli nie pasującej nazwie została odnaleziona w drzewie logicznym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metody <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> i <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> przypominają pozornie <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>, ale działają przez inną logikę:  
  
-   Kierunek wyszukiwania dla <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> ku obiektów podrzędnych (niżej na drzewie); kierunek wyszukiwania dla `FindName` metody się w kierunku obiektów nadrzędnych (w górę drzewa).  
  
-   `FindName` Metody podlegają koncepcji XAML namescope. Za pomocą `FindName` ma gwarancji, że tylko jeden obiekt o tej nazwie istnieje, ponieważ zakresy nazw XAML wymuszają unikatowości. Z kolei <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> ignoruje XAML namescope i może między granicami namescope XAML podczas wyszukiwania. W efekcie nie ma żadnej gwarancji unikatowości z `elementName` nazwy po przekroczenie granic. Aby uzyskać więcej informacji na temat zakresy nazw XAML, zobacz [zakresy WPF XAML nazw](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildren">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca kolekcję obiektów bezpośrednie podrzędne określonego obiektu przez przetwarzanie drzewo logiczne.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As DependencyObject) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.DependencyObject -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Obiekt, w którym zacznie przetwarzać drzewo logiczne. To powinien być <see cref="T:System.Windows.FrameworkElement" /> lub <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <summary>Zwraca kolekcję obiektów bezpośrednie podrzędne określonego obiektu przez przetwarzanie drzewo logiczne.</summary>
        <returns>Wyliczalne kolekcja obiektów bezpośrednie podrzędne z drzewa logicznego określonego obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda podpisu i pomocnika głównie w przypadku, gdy wiesz, czy `current` jest <xref:System.Windows.FrameworkElement> lub <xref:System.Windows.FrameworkContentElement> a. są one również pewności, czy ten obiekt klasy obsługuje swoją własną kolekcję modelu zawartości. Jeśli można określić typu obiektu, który jest wykonywane zapytanie, sprawdź, czy określone właściwości zawartości, której wiadomo, że istnieje dla tego typu. Na przykład, jeśli wiesz, że obiekt jest wykonywane zapytanie jest <xref:System.Windows.Controls.ItemsControl>, sprawdź <xref:System.Windows.Controls.ItemsControl.Items%2A> właściwości do pobrania silnie typizowaną kolekcją, która kolekcji interfejs obsługuje i jest prawdopodobnie bardziej przydatne niż moduł wyliczający.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkContentElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkContentElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkContentElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkContentElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkContentElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="current">Obiekt, w którym zacznie przetwarzać drzewo logiczne.</param>
        <summary>Zwraca kolekcję obiektów bezpośrednie podrzędne o określonym <see cref="T:System.Windows.FrameworkContentElement" /> przez przetwarzanie drzewo logiczne.</summary>
        <returns>Wyliczalne zbiór obiektów bezpośrednie podrzędne, zaczynając od <paramref name="current" /> w drzewie logicznym.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="current">Obiekt, w którym zacznie przetwarzać drzewo logiczne.</param>
        <summary>Zwraca kolekcję obiektów bezpośrednie podrzędne o określonym <see cref="T:System.Windows.FrameworkElement" /> przez przetwarzanie drzewo logiczne.</summary>
        <returns>Wyliczalne zbiór obiektów bezpośrednie podrzędne, zaczynając od <paramref name="current" /> w drzewie logicznym.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetParent(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParent (current As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetParent(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetParent : System.Windows.DependencyObject -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.GetParent current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Obiekt, który można znaleźć obiektu nadrzędnego dla. To powinien być <see cref="T:System.Windows.FrameworkElement" /> lub <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <summary>Zwraca obiekt nadrzędny obiektu określonego przez przetwarzanie drzewo logiczne.</summary>
        <returns>Obiekt nadrzędny żądanej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest jedynie otok, który pobiera wersję odpowiedniego typu (<xref:System.Windows.FrameworkElement> lub <xref:System.Windows.FrameworkContentElement>) z <xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType> lub <xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType> właściwości; tak, chyba że nie można określić `current` typu, możesz chcieć sprawdzić do odpowiednich Zamiast tego wystąpienia właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>