<Type Name="LogicalTreeHelper" FullName="System.Windows.LogicalTreeHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c0ea4471d2a29b70a6214ef483c4841369c1364f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69433936" /></Metadata><TypeSignature Language="C#" Value="public static class LogicalTreeHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LogicalTreeHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LogicalTreeHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class LogicalTreeHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogicalTreeHelper abstract sealed" />
  <TypeSignature Language="F#" Value="type LogicalTreeHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia statyczne metody pomocnika do wykonywania zapytań względem obiektów w drzewie logicznym.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.LogicalTreeHelper> Klasa zawiera metody, których można użyć do zwracania podrzędnych kolekcji obiektów lub określonych obiektów z podwęzłów drzewa logicznego. Jednak większość operacji drzewa obiektów, które są zwykle wykonywane są również udostępniane przez podobne metody lub właściwości w <xref:System.Windows.FrameworkElement> lub. <xref:System.Windows.FrameworkContentElement> Na przykład spróbuj wykonać następujące czynności:  
  
-   Zamiast wywoływania metody statycznej <xref:System.Windows.LogicalTreeHelper.GetChildren%2A> , która zwraca moduł wyliczający dla logicznych obiektów podrzędnych, użyj dedykowanej kolekcji uwidocznionej w modelu zawartości dla tego obiektu. Niemal wszystkie obiekty, które obsługują model zawartości uwidaczniają pewne właściwości, które zawierają kolekcję obiektów podrzędnych, i udostępniają obsługę interfejsu kolekcji bezpośrednio w tej kolekcji.  
  
-   Zamiast wywoływania metody statycznej <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> w celu uzyskania obiektu podrzędnego przez określenie jego nazwy, <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> Wywołaj metodę <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> lub dla konkretnych obiektów.  
  
 <xref:System.Windows.LogicalTreeHelper>jest najbardziej przydatne w scenariuszach analitycznych, w których są podnoszone lub w dół logicznego drzewa cyklicznie przez wiele poziomów, i chcesz użyć spójnego podejścia do badania różnych obiektów nadrzędnych lub podrzędnych. W takim przypadku użytkownik może uzyskać dostęp do kombinacji modeli zawartości, a korzystanie z interfejsów API bardziej charakterystycznych dla modelu zawartości byłoby zbyt skomplikowane.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public static void BringIntoView (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BringIntoView(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BringIntoView (current As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BringIntoView(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member BringIntoView : System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.LogicalTreeHelper.BringIntoView current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Element interfejsu użytkownika do dołączenia do widoku.</param>
        <summary>Podejmuje próbę przełączenia żądanego elementu interfejsu użytkownika <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> do widoku i wywołuje zdarzenie w miejscu docelowym, aby zgłosić wyniki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj wygodniejsze jest wywoływanie metod <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType> wystąpienia lub <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType> zamiast tej metody statycznego narzędzia. Zachowanie metod wystąpienia jest równoważne z zachowaniem metody statycznej.  
  
 Nawet jeśli `current` udostępniony element interfejsu użytkownika to a <xref:System.Windows.FrameworkContentElement>, zdarzenie powstałe nadal jest tym samym <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> zdarzeniem, z <xref:System.Windows.FrameworkContentElement> możliwością zidentyfikowania, sprawdzając dane zdarzenia zdarzenia.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      </Docs>
    </Member>
    <Member MemberName="FindLogicalNode">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject FindLogicalNode (System.Windows.DependencyObject logicalTreeNode, string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject FindLogicalNode(class System.Windows.DependencyObject logicalTreeNode, string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLogicalNode (logicalTreeNode As DependencyObject, elementName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ FindLogicalNode(System::Windows::DependencyObject ^ logicalTreeNode, System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="static member FindLogicalNode : System.Windows.DependencyObject * string -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.FindLogicalNode (logicalTreeNode, elementName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalTreeNode" Type="System.Windows.DependencyObject" />
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logicalTreeNode">Obiekt, od którego ma zostać rozpoczęte wyszukiwanie. Ten obiekt musi być <see cref="T:System.Windows.FrameworkElement" /> albo <see cref="T:System.Windows.FrameworkContentElement" />lub.</param>
        <param name="elementName">Nazwa obiektu do znalezienia.</param>
        <summary>Próbuje znaleźć i zwrócić obiekt o określonej nazwie. Wyszukiwanie zaczyna się od określonego obiektu i przechodzi do podwęzłów drzewa logicznego.</summary>
        <returns>Obiekt o pasującej nazwie, jeśli został znaleziony. zwraca <see langword="null" /> wartość, jeśli w drzewie logicznym nie znaleziono pasującej nazwy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metody <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>i <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> są mniej podobne do, ale działają według różnych logiki:  
  
-   Kierunek wyszukiwania jest skierowany <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> do obiektów podrzędnych (w dół drzewa); kierunek wyszukiwania `FindName` dla metod jest skierowany do obiektów nadrzędnych (w górę drzewa).  
  
-   `FindName` Metody podlegają koncepcji namescope języka XAML. Przy `FindName` użyciu użytkownika masz gwarancję, że istnieje tylko jeden obiekt o tej nazwie, ponieważ język XAML Zakresy nazw WPF Wymusza unikatowość. Natomiast program <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> ignoruje namescope języka XAML i może przekroczyć granice namescope XAML podczas wyszukiwania. W związku z tym nie ma gwarancji unikatowości `elementName` nazwy po przekroczeniu granic. Aby uzyskać więcej informacji na temat języka XAML Zakresy nazw WPF, zobacz [WPF XAML Zakresy nazw WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildren">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca kolekcję bezpośrednich obiektów podrzędnych określonego obiektu przez przetworzenie drzewa logicznego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As DependencyObject) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.DependencyObject -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Obiekt, z którego ma zostać rozpoczęte przetwarzanie drzewa logicznego. Powinien to być <see cref="T:System.Windows.FrameworkElement" /> albo albo <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <summary>Zwraca kolekcję bezpośrednich obiektów podrzędnych określonego obiektu przez przetworzenie drzewa logicznego.</summary>
        <returns>Wyliczalna kolekcja bezpośrednich obiektów podrzędnych z drzewa logicznego określonego obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej sygnatury i metody pomocnika przede wszystkim wtedy, `current` gdy <xref:System.Windows.FrameworkElement> nie masz <xref:System.Windows.FrameworkContentElement> pewności, czy jest lub i czy też nie masz pewności, czy Klasa tego obiektu obsługuje własną kolekcję modelu zawartości. Jeśli można określić typ obiektu, który jest wysyłany do zapytania, sprawdź, czy dana właściwość zawartości istnieje dla tego typu. Na przykład, Jeśli wiesz, że obiekt <xref:System.Windows.Controls.ItemsControl>, którego dotyczy zapytanie, należy <xref:System.Windows.Controls.ItemsControl.Items%2A> sprawdzić właściwość w celu uzyskania kolekcji o jednoznacznie określonym typie, która ma obsługę interfejsu kolekcji i jest prawdopodobnie bardziej użyteczna niż moduł wyliczający.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkContentElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkContentElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkContentElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkContentElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkContentElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="current">Obiekt, z którego ma zostać rozpoczęte przetwarzanie drzewa logicznego.</param>
        <summary>Zwraca kolekcję bezpośrednich obiektów podrzędnych określonego <see cref="T:System.Windows.FrameworkContentElement" /> przez przetworzenie drzewa logicznego.</summary>
        <returns>Wyliczalna kolekcja bezpośrednich obiektów podrzędnych rozpoczynająca <paramref name="current" /> się od w drzewie logicznym.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="current">Obiekt, z którego ma zostać rozpoczęte przetwarzanie drzewa logicznego.</param>
        <summary>Zwraca kolekcję bezpośrednich obiektów podrzędnych określonego <see cref="T:System.Windows.FrameworkElement" /> przez przetworzenie drzewa logicznego.</summary>
        <returns>Wyliczalna kolekcja bezpośrednich obiektów podrzędnych rozpoczynająca <paramref name="current" /> się od w drzewie logicznym.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetParent(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParent (current As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetParent(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetParent : System.Windows.DependencyObject -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.GetParent current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Obiekt, dla którego ma zostać znaleziony obiekt nadrzędny. Powinien to być <see cref="T:System.Windows.FrameworkElement" /> albo <see cref="T:System.Windows.FrameworkContentElement" />lub.</param>
        <summary>Zwraca obiekt nadrzędny określonego obiektu przez przetworzenie drzewa logicznego.</summary>
        <returns>Żądany obiekt nadrzędny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest tylko otoką, która pobiera odpowiednią wersję typu (<xref:System.Windows.FrameworkElement> lub <xref:System.Windows.FrameworkContentElement>) <xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType> właściwości lub <xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType> ; tak, chyba że nie można określić `current` typu, można sprawdzić odpowiednie Zamiast tego właściwości wystąpienia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
