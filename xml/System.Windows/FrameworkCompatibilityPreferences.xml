<Type Name="FrameworkCompatibilityPreferences" FullName="System.Windows.FrameworkCompatibilityPreferences">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="96b5f6d223d27a9319e881d0801ffc1c99a5100a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30714254" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class FrameworkCompatibilityPreferences" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed FrameworkCompatibilityPreferences extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkCompatibilityPreferences" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkCompatibilityPreferences" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkCompatibilityPreferences abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zawiera właściwości określające sposób aplikacji zachowania w przypadku względem funkcji WPF, które znajdują się w zestawie PresentationFramework.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AreInactiveSelectionHighlightBrushKeysSupported">
      <MemberSignature Language="C#" Value="public static bool AreInactiveSelectionHighlightBrushKeysSupported { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AreInactiveSelectionHighlightBrushKeysSupported" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkCompatibilityPreferences.AreInactiveSelectionHighlightBrushKeysSupported" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AreInactiveSelectionHighlightBrushKeysSupported As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool AreInactiveSelectionHighlightBrushKeysSupported { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy aplikacja powinna używać <see cref="P:System.Windows.SystemColors.InactiveSelectionHighlightBrush" /> i <see cref="P:System.Windows.SystemColors.InactiveSelectionHighlightTextBrush" /> właściwości kolorów nieaktywne wybrane elementy.</summary>
        <value>
          <see langword="true" /> Jeśli aplikacja powinna używać <see cref="P:System.Windows.SystemColors.InactiveSelectionHighlightBrush" /> i <see cref="P:System.Windows.SystemColors.InactiveSelectionHighlightTextBrush" /> właściwości kolorów nieaktywne wybranych elementów; w przeciwnym razie wartość <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna tej właściwości zależy od wersji programu WPF który celów aplikacji.  Jeśli WPF 4.0 jest przeznaczony dla twojej aplikacji lub wcześniej, wartość domyślna to `false`.  Jeśli WPF 4.5 jest przeznaczony dla aplikacji, wartością domyślną jest `true`.  Jeśli ta właściwość umożliwia zmianę zachowania WPF, należy zmienić wartość właściwości wczesnym etapie istnienia aplikacji, takie w konstruktorze klasy, która dziedziczy aplikacji.  Po wartości jest do odczytu, nie można zmienić go ponownie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepTextBoxDisplaySynchronizedWithTextProperty">
      <MemberSignature Language="C#" Value="public static bool KeepTextBoxDisplaySynchronizedWithTextProperty { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool KeepTextBoxDisplaySynchronizedWithTextProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkCompatibilityPreferences.KeepTextBoxDisplaySynchronizedWithTextProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property KeepTextBoxDisplaySynchronizedWithTextProperty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool KeepTextBoxDisplaySynchronizedWithTextProperty { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy z danymi <see cref="T:System.Windows.Controls.TextBox" /> powinien być wyświetlany ciąg, który jest taka sama jak wartość źródła jego <see cref="P:System.Windows.Controls.TextBox.Text" /> właściwości</summary>
        <value>
          <see langword="true" /> Jeśli dane powiązane z <see cref="T:System.Windows.Controls.TextBox" /> powinien być wyświetlany ciąg, który jest taka sama jak wartość źródła jego <see cref="P:System.Windows.Controls.TextBox.Text" /> właściwość; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna tej właściwości zależy od wersji programu WPF który celów aplikacji.  Jeśli WPF 4.0 jest przeznaczony dla twojej aplikacji lub wcześniej, wartość domyślna to `false`.  Jeśli WPF 4.5 jest przeznaczony dla aplikacji, wartością domyślną jest `true`.  Jeśli ta właściwość umożliwia zmianę zachowania WPF, należy zmienić wartość właściwości wczesnym etapie istnienia aplikacji, takie w konstruktorze klasy, która dziedziczy aplikacji.  Po wartości jest do odczytu, nie można zmienić go ponownie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldThrowOnCopyOrCutFailure">
      <MemberSignature Language="C#" Value="public static bool ShouldThrowOnCopyOrCutFailure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool ShouldThrowOnCopyOrCutFailure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkCompatibilityPreferences.ShouldThrowOnCopyOrCutFailure" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ShouldThrowOnCopyOrCutFailure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool ShouldThrowOnCopyOrCutFailure { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy kopiowanie nie powiodło się i wycięte operacji <see cref="T:System.Windows.Controls.Primitives.TextBoxBase" /> powoduje wystąpienie <see cref="T:System.Runtime.InteropServices.ExternalException" />.</summary>
        <value>
          <see langword="true" /> Jeśli kopiowanie nie powiodło się lub wycięte operacji w <see cref="T:System.Windows.Controls.Primitives.TextBoxBase" /> powoduje wystąpienie <see cref="T:System.Runtime.InteropServices.ExternalException" />; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli operacja Schowka nie powiedzie się, takich jak z **HRESULT 0x800401D0 (CLIPBRD_E_CANT_OPEN)** błąd, odpowiadający jej <xref:System.Runtime.InteropServices.ExternalException> (który jest typem externalexception —) zostanie zgłoszony.  
  
 Ponieważ Win32 `OpenClipboard` działania interfejsu API globalnie, dobrze napisanych aplikacji powinny wywoływać odpowiadającego `CloseClipboard` interfejsu API zaraz po zakończeniu ich operacje schowka. W przeciwnym razie inne aplikacje uruchomione w tej samej sesji nie będzie można uzyskać dostępu do funkcji Schowka.  
  
 Na platformie WPF odmowę dostępu do Schowka zwykle jest ignorowana trybie dyskretnym. Jednak aplikacje można wybrać opcję `ExternalException` w przypadku awarii, ustawiając <xref:System.Windows.FrameworkCompatibilityPreferences.ShouldThrowOnCopyOrCutFailure%2A> flaga `true`. Jednak aby odbierać wyjątków wymaga również aplikacji do obsługi <xref:System.Windows.Input.ApplicationCommands.Cut%2A> i <xref:System.Windows.Input.ApplicationCommands.Copy%2A> RoutedUICommands za pośrednictwem <xref:System.Windows.Input.CommandBinding>, a następnie zastosować tego powiązania wszystkich kontrolek TextBoxBase (<xref:System.Windows.Controls.TextBox> i <xref:System.Windows.Controls.RichTextBox>) w aplikacja. Aplikacja powinien zapewnić obsługi ExternalExceptions wynikające z operacji kopiowania i wycinania w obsłudze EXECUTE CommandBinding.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>