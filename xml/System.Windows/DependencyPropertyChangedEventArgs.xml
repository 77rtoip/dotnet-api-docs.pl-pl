<Type Name="DependencyPropertyChangedEventArgs" FullName="System.Windows.DependencyPropertyChangedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="44dae90db53c61a42de2b5d8e5d4008eda981196" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39964411" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DependencyPropertyChangedEventArgs extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Structure DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public value class DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="F#" Value="type DependencyPropertyChangedEventArgs = struct" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia dane dla różne zdarzenia zmiany właściwości. Zazwyczaj te zdarzenia raportu skuteczność zmian wartości właściwości zależności tylko do odczytu. Użycie innego jest częścią <see cref="T:System.Windows.PropertyChangedCallback" /> implementacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia, które używają <xref:System.Windows.DependencyPropertyChangedEventArgs> klasy danych zdarzenia i <xref:System.Windows.DependencyPropertyChangedEventHandler> implementacje metod dla programów obsługi, należy wykonać wzorca nazewnictwa `Is*Changed`i są zwykle implementowane jako [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] zdarzeń bez <xref:System.Windows.RoutedEvent> zapasowy (nie są one zdarzenia trasowane). Niektóre klasy obsługi metod z "handle" w przeciwnym razie nienaświetlony zdarzenia, które zgłaszanie zmianą stanu przez zmianę właściwości, takie jak <xref:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged%2A?displayProperty=nameWithType>, również użyć <xref:System.Windows.DependencyPropertyChangedEventArgs> klasę danych zdarzenia.  
  
 Scenariusz <xref:System.Windows.PropertyChangedCallback> jest użycie argumentów do raportu starej i nowej wartości, które pochodzą z wersji ewaluacyjnej systemu właściwość właściwości. Wywołanie zwrotne, które przetwarza starej i nowej wartości wybrać specjalnej obsługi, w zależności od tych wartości, takich jak wybranie braku odpowiedzi na zmiany wartości, które zostaną uznane za nieistotne.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Windows.DependencyPropertyChangedEventArgs> klasy w kontekście <xref:System.Windows.PropertyChangedCallback> dla określonej właściwości klasy niestandardowej, która definiuje również zdarzenia. Wywołanie zwrotne podejmuje wyniki starych i nowych wartości z systemu właściwości, gdy przekazywane przez <xref:System.Windows.DependencyPropertyChangedEventArgs>i je do różnych zdarzeń klasy argumenty przepakowuje <xref:System.Windows.RoutedPropertyChangedEventArgs%601>. Nowe argumenty są następnie używane jako dane dla zdarzenia "ValueChanged" zdefiniowany przez i zgłaszanych przez klasy niestandardowej.  
  
 [!code-csharp[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/CSharp/NumericUpDown.cs#dependencypropertychangedeventargs)]
 [!code-vb[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/visualbasic/numericupdown.vb#dependencypropertychangedeventargs)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyPropertyChangedEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyPropertyChangedEventArgs (System.Windows.DependencyProperty property, object oldValue, object newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.DependencyProperty property, object oldValue, object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (property As DependencyProperty, oldValue As Object, newValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyPropertyChangedEventArgs(System::Windows::DependencyProperty ^ property, System::Object ^ oldValue, System::Object ^ newValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.DependencyPropertyChangedEventArgs : System.Windows.DependencyProperty * obj * obj -&gt; System.Windows.DependencyPropertyChangedEventArgs" Usage="new System.Windows.DependencyPropertyChangedEventArgs (property, oldValue, newValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="property" Type="System.Windows.DependencyProperty" />
        <Parameter Name="oldValue" Type="System.Object" />
        <Parameter Name="newValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="property">Identyfikator właściwości zależności, która się zmieniła.</param>
        <param name="oldValue">Wartość właściwości przed zmianą zgłoszone przez odpowiednie zdarzenie lub zmiany stanu.</param>
        <param name="newValue">Wartość właściwości po zmianie zgłoszone przez odpowiednie zdarzenie lub zmiany stanu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacje zdarzenia niestandardowe, które raportują zmiany właściwości zależności należy używać tego konstruktora wypełnianie danych zdarzeń za pomocą szczegółowych informacji o zmianie, gdy zdarzenie jest wywoływane.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca, czy podany obiekt jest odpowiednikiem bieżącego <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dependencyPropertyChangedEventArgs.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do porównania z bieżącą <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</param>
        <summary>Określa, czy podany obiekt jest odpowiednikiem bieżącego <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</summary>
        <returns>
          <see langword="true" /> Jeśli podany obiekt jest odpowiednikiem bieżącego <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja opiera się na równoważność wartości wszystkich właściwości, w tym właściwości wewnętrznego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.DependencyPropertyChangedEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.DependencyPropertyChangedEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (args As DependencyPropertyChangedEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Windows::DependencyPropertyChangedEventArgs args);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Windows.DependencyPropertyChangedEventArgs -&gt; bool" Usage="dependencyPropertyChangedEventArgs.Equals args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">
          <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Do porównania z bieżącą <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /></param>
        <summary>Określa, czy podany <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> jest odpowiednikiem bieżącego <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</summary>
        <returns>
          <see langword="true" /> Jeśli podane <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> jest odpowiednikiem bieżącego <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja opiera się na równoważność wartości wszystkich właściwości, w tym właściwości wewnętrznego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyPropertyChangedEventArgs.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera wartość skrótu dla tego <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</summary>
        <returns>Całkowita 32-bitowa wartość skrótu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewValue">
      <MemberSignature Language="C#" Value="public object NewValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NewValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NewValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NewValue { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NewValue : obj" Usage="System.Windows.DependencyPropertyChangedEventArgs.NewValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość właściwości po zmianie.</summary>
        <value>Wartość właściwości po zmianie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typ wartości, podane powinny zawsze być castable typowi zgłaszane właściwości zależności.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Windows.DependencyPropertyChangedEventArgs> klasy w kontekście <xref:System.Windows.PropertyChangedCallback> dla określonej właściwości klasy niestandardowej, która definiuje również zdarzenia. Wywołanie zwrotne podejmuje wyniki starych i nowych wartości z systemu właściwości, gdy przekazywane przez <xref:System.Windows.DependencyPropertyChangedEventArgs>i je do różnych zdarzeń klasy argumenty przepakowuje <xref:System.Windows.RoutedPropertyChangedEventArgs%601>. Nowe argumenty są następnie używane jako dane dla zdarzenia "ValueChanged" zdefiniowany przez i zgłaszanych przez klasy niestandardowej.  
  
 [!code-csharp[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/CSharp/NumericUpDown.cs#dependencypropertychangedeventargs)]
 [!code-vb[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/visualbasic/numericupdown.vb#dependencypropertychangedeventargs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OldValue">
      <MemberSignature Language="C#" Value="public object OldValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OldValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OldValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OldValue { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OldValue : obj" Usage="System.Windows.DependencyPropertyChangedEventArgs.OldValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość właściwości przed zmianą.</summary>
        <value>Wartość właściwości przed zmianą.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typ wartości, podane powinny zawsze być castable typowi zgłaszane właściwości zależności.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Windows.DependencyPropertyChangedEventArgs> klasy w kontekście <xref:System.Windows.PropertyChangedCallback> dla określonej właściwości klasy niestandardowej, która definiuje również zdarzenia. Wywołanie zwrotne podejmuje wyniki starych i nowych wartości z systemu właściwości, gdy przekazywane przez <xref:System.Windows.DependencyPropertyChangedEventArgs>i je do różnych zdarzeń klasy argumenty przepakowuje <xref:System.Windows.RoutedPropertyChangedEventArgs%601>. Nowe argumenty są następnie używane jako dane dla zdarzenia "ValueChanged" zdefiniowany przez i zgłaszanych przez klasy niestandardowej.  
  
 [!code-csharp[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/CSharp/NumericUpDown.cs#dependencypropertychangedeventargs)]
 [!code-vb[CustomControlNumericUpDownOneProject#DependencyPropertyChangedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/visualbasic/numericupdown.vb#dependencypropertychangedeventargs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.DependencyPropertyChangedEventArgs left, System.Windows.DependencyPropertyChangedEventArgs right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.DependencyPropertyChangedEventArgs left, valuetype System.Windows.DependencyPropertyChangedEventArgs right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DependencyPropertyChangedEventArgs, right As DependencyPropertyChangedEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::DependencyPropertyChangedEventArgs left, System::Windows::DependencyPropertyChangedEventArgs right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.DependencyPropertyChangedEventArgs * System.Windows.DependencyPropertyChangedEventArgs -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.DependencyPropertyChangedEventArgs" />
        <Parameter Name="right" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="left">Pierwszy <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> do porównania.</param>
        <param name="right">Drugi <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> do porównania.</param>
        <summary>Określa, czy dwa określone <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> obiekty mają taką samą wartość.</summary>
        <returns>
          <see langword="true" /> Jeśli dwa <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> wystąpienia są równoważne; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W implementacji jest używana ta sama logika co <xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.DependencyPropertyChangedEventArgs left, System.Windows.DependencyPropertyChangedEventArgs right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.DependencyPropertyChangedEventArgs left, valuetype System.Windows.DependencyPropertyChangedEventArgs right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DependencyPropertyChangedEventArgs, right As DependencyPropertyChangedEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::DependencyPropertyChangedEventArgs left, System::Windows::DependencyPropertyChangedEventArgs right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.DependencyPropertyChangedEventArgs * System.Windows.DependencyPropertyChangedEventArgs -&gt; bool" Usage="System.Windows.DependencyPropertyChangedEventArgs.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.DependencyPropertyChangedEventArgs" />
        <Parameter Name="right" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="left">Pierwszy <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> do porównania.</param>
        <param name="right">Drugi <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> do porównania.</param>
        <summary>Określa, czy dwa określone <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> obiekty są różne.</summary>
        <returns>
          <see langword="true" /> Jeśli dwa <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> wystąpienia są różne; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacja zwraca negację tę samą logikę jako <xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty Property { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty Property" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyChangedEventArgs.Property" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Property As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ Property { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Property : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyChangedEventArgs.Property" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator dla właściwości zależności, w których wystąpiła zmiana wartości.</summary>
        <value>Pole identyfikatora właściwości zależności, których wystąpiła zmiana wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest istotne, jeśli używane w ramach wspólnego <xref:System.Windows.PropertyChangedCallback> która jest zarejestrowana dla kilka właściwości i konieczne jest odróżnić ze zmianą właściwości wywoływane wywołania zwrotnego. <xref:System.Windows.DependencyPropertyChangedEventArgs.Property%2A> nie jest zazwyczaj odpowiedni dla podnoszonego zdarzenia, ponieważ jest zwykle połączenie 1:1 między właściwości i zdarzenia tego raportu o zmianie właściwości. Zdarzenia, które zostało podniesione jest oznaczenie, które zmienić właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>