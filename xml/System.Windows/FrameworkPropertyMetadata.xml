<Type Name="FrameworkPropertyMetadata" FullName="System.Windows.FrameworkPropertyMetadata">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ba99bda134572e938946c434092cc0e4d72af0a5" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69434241" /></Metadata><TypeSignature Language="C#" Value="public class FrameworkPropertyMetadata : System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FrameworkPropertyMetadata extends System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkPropertyMetadata" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkPropertyMetadata&#xA;Inherits UIPropertyMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkPropertyMetadata : System::Windows::UIPropertyMetadata" />
  <TypeSignature Language="F#" Value="type FrameworkPropertyMetadata = class&#xA;    inherit UIPropertyMetadata" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIPropertyMetadata</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a4700-101">Raportuje lub stosuje metadane dla właściwości zależności, w tym w celu dodania charakterystyk systemu właściwości specyficznych dla platformy.</span><span class="sxs-lookup"><span data-stu-id="a4700-101">Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-102">Ta klasa pochodzi od <xref:System.Windows.PropertyMetadata> (do <xref:System.Windows.UIPropertyMetadata>).</span><span class="sxs-lookup"><span data-stu-id="a4700-102">This class derives from <xref:System.Windows.PropertyMetadata> (through <xref:System.Windows.UIPropertyMetadata>) .</span></span> <span data-ttu-id="a4700-103">W przypadku większości aplikacji <xref:System.Windows.FrameworkPropertyMetadata> na poziomie platformy WPF Framework jest typem używanym dla metadanych właściwości zależności, a nie podstawowych typów <xref:System.Windows.PropertyMetadata> metadanych lub <xref:System.Windows.UIPropertyMetadata>.</span><span class="sxs-lookup"><span data-stu-id="a4700-103">For most WPF framework-level application development purposes, <xref:System.Windows.FrameworkPropertyMetadata> is the type used for dependency property metadata, rather than the base metadata types <xref:System.Windows.PropertyMetadata> or <xref:System.Windows.UIPropertyMetadata>.</span></span> <span data-ttu-id="a4700-104">Dotyczy to zarówno istniejących właściwości zależności, jak i dla większości scenariuszy niestandardowych właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="a4700-104">This is true both for existing dependency properties and for most custom dependency property scenarios.</span></span>  
  
 <span data-ttu-id="a4700-105">Elementy członkowskie zadeklarowane przez tę klasę, które <xref:System.Windows.PropertyMetadata> uzupełniają klasę bazową, obejmują różne właściwości logiczne, które określają lub raportują zachowanie systemu właściwości na poziomie platformy WPF, takie jak dziedziczenie właściwości, powiązanie danych i układ.</span><span class="sxs-lookup"><span data-stu-id="a4700-105">The members declared by this class that supplement the <xref:System.Windows.PropertyMetadata> base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.</span></span>  
  
 <span data-ttu-id="a4700-106">Kilka sygnatur konstruktorów do tworzenia <xref:System.Windows.FrameworkPropertyMetadata> wystąpienia <xref:System.Windows.FrameworkPropertyMetadataOptions> przyjmuje parametr.</span><span class="sxs-lookup"><span data-stu-id="a4700-106">Several constructor signatures for creating a <xref:System.Windows.FrameworkPropertyMetadata> instance take a <xref:System.Windows.FrameworkPropertyMetadataOptions> parameter.</span></span> <span data-ttu-id="a4700-107">Wyliczenie jest używane tylko do określenia początkowego zachowania w konstruktorze i nie jest ujawniane w inny sposób <xref:System.Windows.FrameworkPropertyMetadata> po utworzeniu. <xref:System.Windows.FrameworkPropertyMetadataOptions></span><span class="sxs-lookup"><span data-stu-id="a4700-107">The <xref:System.Windows.FrameworkPropertyMetadataOptions> enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after <xref:System.Windows.FrameworkPropertyMetadata> is constructed.</span></span> <span data-ttu-id="a4700-108">Z skonstruowanego wystąpienia można pobrać lub ustawić odpowiednie informacje za pośrednictwem różnych właściwości, które współużytkują nazwę wartości wyliczenia używanych w wywołaniu konstruktora.</span><span class="sxs-lookup"><span data-stu-id="a4700-108">From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.</span></span>  
  
<a name="xamlTextUsage_FrameworkPropertyMetadata"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="a4700-109">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="a4700-109">XAML Text Usage</span></span>  
 <span data-ttu-id="a4700-110">Ta klasa nie jest zwykle używana w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="a4700-110">This class is not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4700-111">Poniższy przykład pobiera metadane dla właściwości zależności określonego właściciela jako początkowy typ podstawowy <xref:System.Windows.PropertyMetadata> .</span><span class="sxs-lookup"><span data-stu-id="a4700-111">The following example gets metadata for a dependency property on a particular owner as the initial base <xref:System.Windows.PropertyMetadata> type.</span></span> <span data-ttu-id="a4700-112">Metadane są rzutowane na <xref:System.Windows.FrameworkPropertyMetadata>.</span><span class="sxs-lookup"><span data-stu-id="a4700-112">That metadata is cast to <xref:System.Windows.FrameworkPropertyMetadata>.</span></span> <span data-ttu-id="a4700-113">Jeśli rzutowanie zwróciło prawidłowy <xref:System.Windows.FrameworkPropertyMetadata>, różne <xref:System.Windows.FrameworkPropertyMetadata> wartości właściwości są raportowane za pomocą prostego interfejsu użytkownika (nie pokazano).</span><span class="sxs-lookup"><span data-stu-id="a4700-113">If the cast returned a valid <xref:System.Windows.FrameworkPropertyMetadata>, then various <xref:System.Windows.FrameworkPropertyMetadata> property values are reported through a simple UI (not shown).</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.PropertyMetadata" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a4700-114">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="a4700-114">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span></span></summary>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a4700-115">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="a4700-115">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-116">Ten podpis inicjuje wszystkie wartości <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> do ich wartości domyślnych właściwości.</span><span class="sxs-lookup"><span data-stu-id="a4700-116">This signature initializes all values of <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> to their property defaults.</span></span> <span data-ttu-id="a4700-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A>i różne <xref:System.Windows.FrameworkPropertyMetadata> właściwości`false`logicznebędą. `null`</span><span class="sxs-lookup"><span data-stu-id="a4700-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> will be `null`, and the various <xref:System.Windows.FrameworkPropertyMetadata> Boolean properties will be `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata defaultValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="a4700-118">Wartość domyślna właściwości zależności, zazwyczaj określona jako wartość określonego typu.</span><span class="sxs-lookup"><span data-stu-id="a4700-118">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <summary><span data-ttu-id="a4700-119">Inicjuje nowe wystąpienie <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy z określoną wartością domyślną.</span><span class="sxs-lookup"><span data-stu-id="a4700-119">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-120">Typ wartości podanej dla `defaultValue` musi być zgodny lub powiązany z typem określonym w oryginalnej rejestracji właściwości zależności, do której zostaną zastosowane te metadane.</span><span class="sxs-lookup"><span data-stu-id="a4700-120">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="a4700-121">Niezgodność między domyślnym typem wartości metadanych a typem właściwości zależności, która jest stosowana, może być trudna do debugowania, ponieważ nie jest wykrywalna podczas kompilacji.</span><span class="sxs-lookup"><span data-stu-id="a4700-121">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="a4700-122">System właściwości nie szacuje wartości efektywnej właściwości do momentu uruchomienia, dlatego wynik domyślnego typu wartości/niezgodności typów właściwości jest błędem czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="a4700-122">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="a4700-123">Wartość <xref:System.Windows.DependencyProperty.UnsetValue> ma specjalne znaczenie w systemie właściwości i nie może być używana jako wartość domyślna właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="a4700-123">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4700-124">Poniższy przykład wywołuje ten podpis konstruktora:</span><span class="sxs-lookup"><span data-stu-id="a4700-124">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4700-125"><paramref name="defaultValue" />jest ustawiony na <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-125"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata propertyChangedCallback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback"><span data-ttu-id="a4700-126">Odwołanie do implementacji programu obsługi, którą system właściwości wywoła po każdej zmianie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="a4700-126">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <summary><span data-ttu-id="a4700-127">Inicjuje nowe wystąpienie <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy z określonym <see cref="T:System.Windows.PropertyChangedCallback" /> wywołaniem zwrotnym.</span><span class="sxs-lookup"><span data-stu-id="a4700-127">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a4700-128">Poniższy przykład wywołuje ten podpis konstruktora:</span><span class="sxs-lookup"><span data-stu-id="a4700-128">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1paramcallback](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1paramcallback)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object, flags As FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="a4700-129">Wartość domyślna właściwości zależności, zazwyczaj określona jako wartość określonego typu.</span><span class="sxs-lookup"><span data-stu-id="a4700-129">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="a4700-130">Flagi opcji metadanych (kombinacja <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> wartości).</span><span class="sxs-lookup"><span data-stu-id="a4700-130">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="a4700-131">Te opcje określają właściwości zależności, które współpracują z systemami, takimi jak układ lub powiązanie danych.</span><span class="sxs-lookup"><span data-stu-id="a4700-131">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <summary><span data-ttu-id="a4700-132">Inicjuje nowe wystąpienie <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy z podaną wartością domyślną i opcjami metadanych poziomu platformy.</span><span class="sxs-lookup"><span data-stu-id="a4700-132">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework-level metadata options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-133">Typ wartości podanej dla `defaultValue` musi być zgodny lub powiązany z typem określonym w oryginalnej rejestracji właściwości zależności, do której zostaną zastosowane te metadane.</span><span class="sxs-lookup"><span data-stu-id="a4700-133">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="a4700-134">Niezgodność między domyślnym typem wartości metadanych a typem właściwości zależności, która jest stosowana, może być trudna do debugowania, ponieważ nie jest wykrywalna podczas kompilacji.</span><span class="sxs-lookup"><span data-stu-id="a4700-134">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="a4700-135">System właściwości nie szacuje wartości efektywnej właściwości do momentu uruchomienia, dlatego wynik domyślnego typu wartości/niezgodności typów właściwości jest błędem czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="a4700-135">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="a4700-136">Wartość <xref:System.Windows.DependencyProperty.UnsetValue> ma specjalne znaczenie w systemie właściwości i nie może być używana jako wartość domyślna właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="a4700-136">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="a4700-137">Wartości oznaczone `flags` jako flagi zestawu w parametrze spowodują ustawienie <xref:System.Windows.FrameworkPropertyMetadata> wartości logicznej właściwości, które pasują <xref:System.Windows.FrameworkPropertyMetadataOptions> do nazwy tej flagi `true`do.</span><span class="sxs-lookup"><span data-stu-id="a4700-137">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="a4700-138">Następnie można zmienić wartości właściwości w metadanych, o ile metadane nie zostały jeszcze zastosowane do określonej operacji systemu właściwości.</span><span class="sxs-lookup"><span data-stu-id="a4700-138">You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4700-139">Poniższy przykład wywołuje ten podpis konstruktora:</span><span class="sxs-lookup"><span data-stu-id="a4700-139">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4700-140"><paramref name="defaultValue" />jest ustawiony na <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-140"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="a4700-141">Wartość domyślna właściwości zależności, zazwyczaj określona jako wartość określonego typu.</span><span class="sxs-lookup"><span data-stu-id="a4700-141">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="a4700-142">Odwołanie do implementacji programu obsługi, którą system właściwości wywoła po każdej zmianie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="a4700-142">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <summary><span data-ttu-id="a4700-143">Inicjuje nowe wystąpienie <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy za pomocą podanej wartości domyślnej i określonego <see cref="T:System.Windows.PropertyChangedCallback" /> wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="a4700-143">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-144">Typ wartości podanej dla `defaultValue` musi być zgodny lub powiązany z typem określonym w oryginalnej rejestracji właściwości zależności, do której zostaną zastosowane te metadane.</span><span class="sxs-lookup"><span data-stu-id="a4700-144">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="a4700-145">Niezgodność między domyślnym typem wartości metadanych a typem właściwości zależności, która jest stosowana, może być trudna do debugowania, ponieważ nie jest wykrywalna podczas kompilacji.</span><span class="sxs-lookup"><span data-stu-id="a4700-145">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="a4700-146">System właściwości nie szacuje wartości efektywnej właściwości do momentu uruchomienia, dlatego wynik domyślnego typu wartości/niezgodności typów właściwości jest błędem czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="a4700-146">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="a4700-147">Wartość <xref:System.Windows.DependencyProperty.UnsetValue> ma specjalne znaczenie w systemie właściwości i nie może być używana jako wartość domyślna właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="a4700-147">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4700-148">Poniższy przykład wywołuje ten podpis konstruktora:</span><span class="sxs-lookup"><span data-stu-id="a4700-148">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor2param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor2param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4700-149"><paramref name="defaultValue" />jest ustawiony na <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-149"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback"><span data-ttu-id="a4700-150">Odwołanie do implementacji programu obsługi, którą system właściwości wywoła po każdej zmianie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="a4700-150">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="a4700-151">Odwołanie do implementacji programu obsługi zostanie wywołane za każdym razem, gdy system <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> właściwości wywoła tę właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="a4700-151">A reference to a handler implementation will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span></span></param>
        <summary><span data-ttu-id="a4700-152">Inicjuje nowe wystąpienie <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy z określonymi wywołaniami zwrotnymi.</span><span class="sxs-lookup"><span data-stu-id="a4700-152">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified callbacks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-153">Ta implementacja wywołuje inicjatora podstawowego, a następnie dodaje `coerceValueCallback` przez ustawienie właściwości w wystąpieniu podstawowym.</span><span class="sxs-lookup"><span data-stu-id="a4700-153">This implementation calls a base initializer and then adds the `coerceValueCallback` by setting the property on the base instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4700-154">Poniższy przykład wywołuje ten podpis konstruktora:</span><span class="sxs-lookup"><span data-stu-id="a4700-154">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="a4700-155">Wartość domyślna właściwości zależności, zazwyczaj określona jako wartość określonego typu.</span><span class="sxs-lookup"><span data-stu-id="a4700-155">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="a4700-156">Flagi opcji metadanych (kombinacja <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> wartości).</span><span class="sxs-lookup"><span data-stu-id="a4700-156">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="a4700-157">Te opcje określają właściwości zależności, które współpracują z systemami, takimi jak układ lub powiązanie danych.</span><span class="sxs-lookup"><span data-stu-id="a4700-157">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="a4700-158">Odwołanie do implementacji programu obsługi, którą system właściwości wywoła po każdej zmianie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="a4700-158">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <summary><span data-ttu-id="a4700-159">Inicjuje nowe wystąpienie <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy za pomocą podanej wartości domyślnej i opcji metadanych struktury i określonego <see cref="T:System.Windows.PropertyChangedCallback" /> wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="a4700-159">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-160">Typ wartości podanej dla `defaultValue` musi być zgodny lub powiązany z typem określonym w oryginalnej rejestracji właściwości zależności, do której zostaną zastosowane te metadane.</span><span class="sxs-lookup"><span data-stu-id="a4700-160">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="a4700-161">Niezgodność między domyślnym typem wartości metadanych a typem właściwości zależności, która jest stosowana, może być trudna do debugowania, ponieważ nie jest wykrywalna podczas kompilacji.</span><span class="sxs-lookup"><span data-stu-id="a4700-161">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="a4700-162">System właściwości nie szacuje wartości efektywnej właściwości do momentu uruchomienia, dlatego wynik domyślnego typu wartości/niezgodności typów właściwości jest błędem czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="a4700-162">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="a4700-163">Wartość <xref:System.Windows.DependencyProperty.UnsetValue> ma specjalne znaczenie w systemie właściwości i nie może być używana jako wartość domyślna właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="a4700-163">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="a4700-164">Wartości oznaczone `flags` jako flagi zestawu w parametrze spowodują ustawienie <xref:System.Windows.FrameworkPropertyMetadata> wartości logicznej właściwości, które pasują <xref:System.Windows.FrameworkPropertyMetadataOptions> do nazwy tej flagi `true`do.</span><span class="sxs-lookup"><span data-stu-id="a4700-164">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="a4700-165">Można nadal zmieniać wartości właściwości w metadanych, o ile metadane nie zostały jeszcze zastosowane do określonej operacji systemu właściwości.</span><span class="sxs-lookup"><span data-stu-id="a4700-165">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4700-166">Poniższy przykład wywołuje ten podpis konstruktora:</span><span class="sxs-lookup"><span data-stu-id="a4700-166">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4700-167"><paramref name="defaultValue" />jest ustawiony na <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-167"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="a4700-168">Wartość domyślna właściwości zależności, zazwyczaj określona jako określony typ.</span><span class="sxs-lookup"><span data-stu-id="a4700-168">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="a4700-169">Odwołanie do implementacji programu obsługi, którą system właściwości wywoła po każdej zmianie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="a4700-169">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="a4700-170">Odwołanie do implementacji programu obsługi, która będzie wywoływana za każdym razem, gdy system <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> właściwości wywoła tę właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="a4700-170">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span></span></param>
        <summary><span data-ttu-id="a4700-171">Inicjuje nowe wystąpienie <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy z podaną wartością domyślną i określonymi wywołaniami zwrotnymi.</span><span class="sxs-lookup"><span data-stu-id="a4700-171">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified callbacks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-172">Typ wartości podanej dla `defaultValue` musi być zgodny lub powiązany z typem określonym w oryginalnej rejestracji właściwości zależności, do której zostaną zastosowane te metadane.</span><span class="sxs-lookup"><span data-stu-id="a4700-172">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="a4700-173">Niezgodność między domyślnym typem wartości metadanych a typem właściwości zależności, która jest stosowana, może być trudna do debugowania, ponieważ nie jest wykrywalna podczas kompilacji.</span><span class="sxs-lookup"><span data-stu-id="a4700-173">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="a4700-174">System właściwości nie szacuje wartości efektywnej właściwości do momentu uruchomienia, dlatego wynik domyślnego typu wartości/niezgodności typów właściwości jest błędem czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="a4700-174">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="a4700-175">Wartość <xref:System.Windows.DependencyProperty.UnsetValue> ma specjalne znaczenie w systemie właściwości i nie może być używana jako wartość domyślna właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="a4700-175">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4700-176">Poniższy przykład wywołuje ten podpis konstruktora:</span><span class="sxs-lookup"><span data-stu-id="a4700-176">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor3param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor3param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4700-177"><paramref name="defaultValue" />jest ustawiony na <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-177"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="a4700-178">Wartość domyślna właściwości zależności, zazwyczaj określona jako określony typ.</span><span class="sxs-lookup"><span data-stu-id="a4700-178">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="a4700-179">Flagi opcji metadanych (kombinacja <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> wartości).</span><span class="sxs-lookup"><span data-stu-id="a4700-179">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="a4700-180">Te opcje określają właściwości zależności, które współpracują z systemami, takimi jak układ lub powiązanie danych.</span><span class="sxs-lookup"><span data-stu-id="a4700-180">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="a4700-181">Odwołanie do implementacji programu obsługi, którą system właściwości wywoła po każdej zmianie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="a4700-181">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="a4700-182">Odwołanie do implementacji programu obsługi, która będzie wywoływana za każdym razem, gdy system <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> właściwości wywoła tę właściwość.</span><span class="sxs-lookup"><span data-stu-id="a4700-182">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span></span></param>
        <summary><span data-ttu-id="a4700-183">Inicjuje nowe wystąpienie <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy z podaną wartością domyślną i opcjami metadanych struktury oraz określonymi wywołaniami zwrotnymi.</span><span class="sxs-lookup"><span data-stu-id="a4700-183">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified callbacks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-184">Typ wartości podanej dla `defaultValue` musi być zgodny lub powiązany z typem określonym w oryginalnej rejestracji właściwości zależności, do której zostaną zastosowane te metadane.</span><span class="sxs-lookup"><span data-stu-id="a4700-184">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="a4700-185">Niezgodność między domyślnym typem wartości metadanych a typem właściwości zależności, która jest stosowana, może być trudna do debugowania, ponieważ nie jest wykrywalna podczas kompilacji.</span><span class="sxs-lookup"><span data-stu-id="a4700-185">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="a4700-186">System właściwości nie szacuje wartości efektywnej właściwości do momentu uruchomienia, dlatego wynik domyślnego typu wartości/niezgodności typów właściwości jest błędem czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="a4700-186">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="a4700-187">Wartość <xref:System.Windows.DependencyProperty.UnsetValue> ma specjalne znaczenie w systemie właściwości i nie może być używana jako wartość domyślna właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="a4700-187">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="a4700-188">Wartości oznaczone `flags` jako flagi zestawu w parametrze spowodują ustawienie <xref:System.Windows.FrameworkPropertyMetadata> wartości logicznej właściwości, które pasują <xref:System.Windows.FrameworkPropertyMetadataOptions> do nazwy tej flagi `true`do.</span><span class="sxs-lookup"><span data-stu-id="a4700-188">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="a4700-189">Można nadal zmieniać wartości właściwości w metadanych, o ile metadane nie zostały jeszcze zastosowane do określonej operacji systemu właściwości.</span><span class="sxs-lookup"><span data-stu-id="a4700-189">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4700-190">Poniższy przykład wywołuje ten podpis konstruktora:</span><span class="sxs-lookup"><span data-stu-id="a4700-190">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4700-191"><paramref name="defaultValue" />jest ustawiony na <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-191"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback * bool -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="a4700-192">Wartość domyślna właściwości zależności, zazwyczaj określona jako określony typ.</span><span class="sxs-lookup"><span data-stu-id="a4700-192">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="a4700-193">Flagi opcji metadanych (kombinacja <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> wartości).</span><span class="sxs-lookup"><span data-stu-id="a4700-193">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="a4700-194">Te opcje określają właściwości zależności, które współpracują z systemami, takimi jak układ lub powiązanie danych.</span><span class="sxs-lookup"><span data-stu-id="a4700-194">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="a4700-195">Odwołanie do implementacji programu obsługi, którą system właściwości wywoła po każdej zmianie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="a4700-195">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="a4700-196">Odwołanie do implementacji programu obsługi, która będzie wywoływana za każdym razem, gdy system <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> właściwości wywoła tę właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="a4700-196">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> on this dependency property.</span></span></param>
        <param name="isAnimationProhibited"><span data-ttu-id="a4700-197"><see langword="true" />Aby zapobiec animowaniu przez system właściwości właściwości, do której zastosowano te metadane.</span><span class="sxs-lookup"><span data-stu-id="a4700-197"><see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span></span> <span data-ttu-id="a4700-198">Takie właściwości spowodują wygenerowanie wyjątku czasu wykonywania pochodzącego z systemu właściwości, jeśli są podejmowane próby wykonania animacji.</span><span class="sxs-lookup"><span data-stu-id="a4700-198">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span></span> <span data-ttu-id="a4700-199"><see langword="false" />, aby zezwolić na animację właściwości.</span><span class="sxs-lookup"><span data-stu-id="a4700-199"><see langword="false" /> to permit animating the property.</span></span> <span data-ttu-id="a4700-200">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-200">The default is <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a4700-201">Inicjuje nowe wystąpienie <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy z podaną wartością domyślną i opcjami metadanych struktury, określonymi wywołaniami zwrotnymi i wartością logiczną, która może być używana do zapobiegania animacji właściwości.</span><span class="sxs-lookup"><span data-stu-id="a4700-201">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-202">Typ wartości podanej dla `defaultValue` musi być zgodny lub powiązany z typem określonym w oryginalnej rejestracji właściwości zależności, do której zostaną zastosowane te metadane.</span><span class="sxs-lookup"><span data-stu-id="a4700-202">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="a4700-203">Niezgodność między domyślnym typem wartości metadanych a typem właściwości zależności, która jest stosowana, może być trudna do debugowania, ponieważ nie jest wykrywalna podczas kompilacji.</span><span class="sxs-lookup"><span data-stu-id="a4700-203">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="a4700-204">System właściwości nie szacuje wartości efektywnej właściwości do momentu uruchomienia, dlatego wynik domyślnego typu wartości/niezgodności typów właściwości jest błędem czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="a4700-204">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="a4700-205">Wartość <xref:System.Windows.DependencyProperty.UnsetValue> ma specjalne znaczenie w systemie właściwości i nie może być używana jako wartość domyślna właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="a4700-205">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="a4700-206">Parametr ustawia początkową wartość <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> właściwości zadeklarowanej przez bezpośrednią klasę bazową <xref:System.Windows.UIPropertyMetadata>. `isAnimationProhibited`</span><span class="sxs-lookup"><span data-stu-id="a4700-206">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="a4700-207">Wartości oznaczone `flags` jako flagi zestawu w parametrze spowodują ustawienie <xref:System.Windows.FrameworkPropertyMetadata> wartości logicznej właściwości, które pasują <xref:System.Windows.FrameworkPropertyMetadataOptions> do nazwy tej flagi `true`do.</span><span class="sxs-lookup"><span data-stu-id="a4700-207">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="a4700-208">Można nadal zmieniać wartości właściwości w metadanych, o ile metadane nie zostały jeszcze zastosowane do określonej operacji systemu właściwości.</span><span class="sxs-lookup"><span data-stu-id="a4700-208">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4700-209">Poniższy przykład wywołuje ten podpis konstruktora:</span><span class="sxs-lookup"><span data-stu-id="a4700-209">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4700-210"><paramref name="defaultValue" />jest ustawiony na <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-210"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, valuetype System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited, System::Windows::Data::UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback * bool * System.Windows.Data.UpdateSourceTrigger -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited, defaultUpdateSourceTrigger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
        <Parameter Name="defaultUpdateSourceTrigger" Type="System.Windows.Data.UpdateSourceTrigger" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="a4700-211">Wartość domyślna właściwości zależności, zazwyczaj określona jako określony typ.</span><span class="sxs-lookup"><span data-stu-id="a4700-211">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="a4700-212">Flagi opcji metadanych (kombinacja <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> wartości).</span><span class="sxs-lookup"><span data-stu-id="a4700-212">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="a4700-213">Te opcje określają właściwości zależności, które współpracują z systemami, takimi jak układ lub powiązanie danych.</span><span class="sxs-lookup"><span data-stu-id="a4700-213">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="a4700-214">Odwołanie do implementacji programu obsługi, którą system właściwości wywoła po każdej zmianie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="a4700-214">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="a4700-215">Odwołanie do implementacji programu obsługi, która będzie wywoływana za każdym razem, gdy system <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> właściwości wywoła tę właściwość.</span><span class="sxs-lookup"><span data-stu-id="a4700-215">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span></span></param>
        <param name="isAnimationProhibited"><span data-ttu-id="a4700-216"><see langword="true" />Aby zapobiec animowaniu przez system właściwości właściwości, do której zastosowano te metadane.</span><span class="sxs-lookup"><span data-stu-id="a4700-216"><see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span></span> <span data-ttu-id="a4700-217">Takie właściwości spowodują wygenerowanie wyjątku czasu wykonywania pochodzącego z systemu właściwości, jeśli są podejmowane próby wykonania animacji.</span><span class="sxs-lookup"><span data-stu-id="a4700-217">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span></span> <span data-ttu-id="a4700-218">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-218">The default is <see langword="false" />.</span></span></param>
        <param name="defaultUpdateSourceTrigger"><span data-ttu-id="a4700-219">Używane, gdy są stosowane powiązania dla tej właściwości, które <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> mają ustawioną wartość <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />. <see cref="T:System.Windows.Data.UpdateSourceTrigger" /></span><span class="sxs-lookup"><span data-stu-id="a4700-219">The <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for this property are applied that have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span></span></param>
        <summary><span data-ttu-id="a4700-220">Inicjuje nowe wystąpienie <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy z podaną wartością domyślną i opcjami metadanych struktury, określonymi wywołaniami zwrotnymi, wartością logiczną, która może służyć do zapobiegania animacji właściwości oraz domyślnego wyzwalacza aktualizacji powiązania danych.</span><span class="sxs-lookup"><span data-stu-id="a4700-220">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-221">Typ wartości podanej dla `defaultValue` musi być zgodny lub powiązany z typem określonym w oryginalnej rejestracji właściwości zależności, do której zostaną zastosowane te metadane.</span><span class="sxs-lookup"><span data-stu-id="a4700-221">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="a4700-222">Niezgodność między domyślnym typem wartości metadanych a typem właściwości zależności, która jest stosowana, może być trudna do debugowania, ponieważ nie jest wykrywalna podczas kompilacji.</span><span class="sxs-lookup"><span data-stu-id="a4700-222">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="a4700-223">System właściwości nie szacuje wartości efektywnej właściwości do momentu uruchomienia, dlatego wynik domyślnego typu wartości/niezgodności typów właściwości jest błędem czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="a4700-223">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="a4700-224">Wartość <xref:System.Windows.DependencyProperty.UnsetValue> ma specjalne znaczenie w systemie właściwości i nie może być używana jako wartość domyślna właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="a4700-224">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="a4700-225">Parametr ustawia początkową wartość <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> właściwości zadeklarowanej przez bezpośrednią klasę bazową <xref:System.Windows.UIPropertyMetadata>. `isAnimationProhibited`</span><span class="sxs-lookup"><span data-stu-id="a4700-225">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="a4700-226">Aby uzyskać więcej informacji na temat zachowania źródła aktualizacji dla powiązań, zobacz temat [powiązanie danych — omówienie](~/docs/framework/wpf/data/data-binding-overview.md).</span><span class="sxs-lookup"><span data-stu-id="a4700-226">For more information about the update source behavior for bindings, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
 <span data-ttu-id="a4700-227">Wartości oznaczone `flags` jako flagi zestawu w parametrze spowodują ustawienie <xref:System.Windows.FrameworkPropertyMetadata> wartości logicznej właściwości, które pasują <xref:System.Windows.FrameworkPropertyMetadataOptions> do nazwy tej flagi `true`do.</span><span class="sxs-lookup"><span data-stu-id="a4700-227">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="a4700-228">Można nadal zmieniać wartości właściwości w metadanych, o ile metadane nie zostały jeszcze zastosowane do określonej operacji systemu właściwości.</span><span class="sxs-lookup"><span data-stu-id="a4700-228">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP_DUST](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap_dust)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4700-229"><paramref name="defaultValue" />jest ustawiony na <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-229"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName="AffectsArrange">
      <MemberSignature Language="C#" Value="public bool AffectsArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsArrange : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4700-230">Pobiera lub ustawia wartość wskazującą, czy właściwość zależności może mieć wpływ na przebieg rozmieszczenia podczas operacji aparatu układu.</span><span class="sxs-lookup"><span data-stu-id="a4700-230">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="a4700-231"><see langword="true" />Jeśli właściwość zależności, na której istnieją metadane, prawdopodobnie ma wpływ na przebieg rozmieszczenia; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="a4700-231"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a4700-232">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-232">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-233"><xref:System.Windows.FrameworkElement>i <xref:System.Windows.FrameworkContentElement> obejmują<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> implementację, która monitoruje zmiany wartości efektywnej we wszystkich właściwościach zależności istniejących w elemencie.</span><span class="sxs-lookup"><span data-stu-id="a4700-233"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="a4700-234">W ramach tej logiki właściwości zależności, które zmieniają wartość skuteczną i mają metadane z <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> ustawionym `true` na zainicjują odroczone żądanie unieważnienia wizualizacji tego elementu (wywołanie do <xref:System.Windows.UIElement.InvalidateArrange%2A>).</span><span class="sxs-lookup"><span data-stu-id="a4700-234">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element (a call to <xref:System.Windows.UIElement.InvalidateArrange%2A>).</span></span> <span data-ttu-id="a4700-235">Ponieważ ta implementacja na poziomie platformy WPF jest już na miejscu, zazwyczaj nie trzeba szukać właściwości <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> zależności, chyba że istotnie zastąpi lub zmodyfikujesz zachowanie układu platformy WPF.</span><span class="sxs-lookup"><span data-stu-id="a4700-235">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="a4700-236">Implementacje niestandardowe <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> mogą mieć podobne zachowanie w przypadku zmian właściwości zależności, <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> gdzie `true`is.</span><span class="sxs-lookup"><span data-stu-id="a4700-236">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="a4700-237">Właściwości klas <xref:System.Windows.PropertyMetadata> pochodnych są zwykle zdefiniowane w modelu obiektów jako do odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="a4700-237">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="a4700-238">Jest to tak więc, aby można je było dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="a4700-238">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="a4700-239">Jednak po wykorzystaniu metadanych jako części wywołania metody <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości spowoduje, że wystąpienie metadanych i właściwości, które przekażą określone metadane, są teraz traktowane jako niezmienne.</span><span class="sxs-lookup"><span data-stu-id="a4700-239">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="a4700-240">Próba ustawienia tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> znajduje się `true` w tym wystąpieniu metadanych spowoduje wystąpienie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="a4700-240">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="a4700-241">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="a4700-241">XAML Text Usage</span></span>  
 <span data-ttu-id="a4700-242">Elementy członkowskie tej klasy nie są zwykle używane w programie [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="a4700-242">Members of this class are either not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4700-243">Poniższy przykład pobiera domyślne metadane z różnych pól właściwości zależności, wysyła zapytanie do wartości różnych <xref:System.Windows.FrameworkPropertyMetadata> właściwości, a następnie używa informacji do wypełniania tabeli w celu zaimplementowania "przeglądarki metadanych".</span><span class="sxs-lookup"><span data-stu-id="a4700-243">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4700-244">Metadane zostały już zastosowane do operacji właściwości zależności, dlatego metadane są zapieczętowane i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="a4700-244">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsMeasure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsMeasure : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4700-245">Pobiera lub ustawia wartość wskazującą, czy właściwość zależności może wpływać na przebieg pomiaru podczas operacji aparatu układu.</span><span class="sxs-lookup"><span data-stu-id="a4700-245">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="a4700-246"><see langword="true" />Jeśli właściwość zależności, na której istnieją metadane, może mieć wpływ na przebieg pomiaru; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="a4700-246"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a4700-247">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-247">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-248"><xref:System.Windows.FrameworkElement>i <xref:System.Windows.FrameworkContentElement> obejmują<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> implementację, która monitoruje zmiany wartości efektywnej we wszystkich właściwościach zależności istniejących w elemencie.</span><span class="sxs-lookup"><span data-stu-id="a4700-248"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="a4700-249">W ramach tej logiki właściwości zależności, które zmieniają wartość skuteczną i mają metadane z <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> ustawionym `true` na zainicjują odroczone żądanie unieważnienia wizualizacji dla tego elementu.</span><span class="sxs-lookup"><span data-stu-id="a4700-249">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="a4700-250">Ponieważ ta implementacja na poziomie platformy WPF jest już na miejscu, zazwyczaj nie trzeba szukać właściwości <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> zależności, chyba że istotnie zastąpi lub zmodyfikujesz zachowanie układu platformy WPF.</span><span class="sxs-lookup"><span data-stu-id="a4700-250">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="a4700-251">Implementacje niestandardowe <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> mogą mieć podobne zachowanie w przypadku zmian właściwości zależności, <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> gdzie `true`is.</span><span class="sxs-lookup"><span data-stu-id="a4700-251">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="a4700-252">Właściwości klas <xref:System.Windows.PropertyMetadata> pochodnych są zwykle zdefiniowane w modelu obiektów jako do odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="a4700-252">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="a4700-253">Jest to tak więc, aby można je było dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="a4700-253">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="a4700-254">Jednak po wykorzystaniu metadanych jako części wywołania metody <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości spowoduje, że wystąpienie metadanych i właściwości, które przekażą określone metadane, są teraz traktowane jako niezmienne.</span><span class="sxs-lookup"><span data-stu-id="a4700-254">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="a4700-255">Próba ustawienia tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> znajduje się `true` w tym wystąpieniu metadanych spowoduje wystąpienie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="a4700-255">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="a4700-256">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="a4700-256">XAML Text Usage</span></span>  
 <span data-ttu-id="a4700-257">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]programie.</span><span class="sxs-lookup"><span data-stu-id="a4700-257">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4700-258">Poniższy przykład pobiera domyślne metadane z różnych pól właściwości zależności, wysyła zapytanie do wartości różnych <xref:System.Windows.FrameworkPropertyMetadata> właściwości, a następnie używa informacji do wypełniania tabeli w celu zaimplementowania "przeglądarki metadanych".</span><span class="sxs-lookup"><span data-stu-id="a4700-258">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4700-259">Metadane zostały już zastosowane do operacji właściwości zależności, dlatego metadane są zapieczętowane i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="a4700-259">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentArrange">
      <MemberSignature Language="C#" Value="public bool AffectsParentArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsParentArrange : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4700-260">Pobiera lub ustawia wartość wskazującą, czy właściwość zależności może wpływać na przebieg układu elementu nadrzędnego w trakcie operacji aparatu układu.</span><span class="sxs-lookup"><span data-stu-id="a4700-260">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="a4700-261"><see langword="true" />Jeśli właściwość zależności, na której istnieją metadane, prawdopodobnie ma wpływ na przebieg uporządkowany w odniesieniu do jego elementu nadrzędnego; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="a4700-261"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a4700-262">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-262">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-263"><xref:System.Windows.FrameworkElement>i <xref:System.Windows.FrameworkContentElement> obejmują<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> implementację, która monitoruje zmiany wartości efektywnej we wszystkich właściwościach zależności istniejących w elemencie.</span><span class="sxs-lookup"><span data-stu-id="a4700-263"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="a4700-264">W ramach tej logiki właściwości zależności, które zmieniają wartość skuteczną i mają metadane z <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> ustawionym `true` na zainicjują odroczone żądanie unieważnienia wizualizacji dla elementu nadrzędnego.</span><span class="sxs-lookup"><span data-stu-id="a4700-264">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span>  
  
 <span data-ttu-id="a4700-265">Ogólnie rzecz biorąc, <xref:System.Windows.FrameworkElement> nie trzeba raportować zmian właściwości do elementu nadrzędnego przy użyciu <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> , ponieważ sam element byłby `true`już własny <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> .</span><span class="sxs-lookup"><span data-stu-id="a4700-265">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> as `true`.</span></span> <span data-ttu-id="a4700-266">Jest to zwykle wystarczające, ponieważ zmiany w elemencie podrzędnym zwykle inicjują rozmieszczenie obiektów nadrzędnych, gdy jest to konieczne.</span><span class="sxs-lookup"><span data-stu-id="a4700-266">That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate.</span></span> <span data-ttu-id="a4700-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>jest czasami używany dla <xref:System.Windows.FrameworkContentElement> klasy pochodnej.</span><span class="sxs-lookup"><span data-stu-id="a4700-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="a4700-268">W tym przypadku element podrzędny ustawia właściwość, ale <xref:System.Windows.FrameworkContentElement> Klasa pochodna nie kontroluje własnego renderowania.</span><span class="sxs-lookup"><span data-stu-id="a4700-268">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="a4700-269">Renderowanie jest obsługiwane przez <xref:System.Windows.FrameworkElement> element nadrzędny, który służy jako host zawartości.</span><span class="sxs-lookup"><span data-stu-id="a4700-269">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="a4700-270">Na przykład zmiana wartości <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> właściwości dołączonej przez element podrzędny unieważnia kolejność elementu nadrzędnego, ponieważ należy zmienić położenie elementu podrzędnego w elemencie nadrzędnym.</span><span class="sxs-lookup"><span data-stu-id="a4700-270">For instance, a change to the value of the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed.</span></span> <span data-ttu-id="a4700-271">W związku z <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> tym dołączona właściwość zawiera <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> metadane `true`, gdzie is.</span><span class="sxs-lookup"><span data-stu-id="a4700-271">Therefore, the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span> <span data-ttu-id="a4700-272">Innym przykładem <xref:System.Windows.Controls.Control.Padding%2A>jest; w przypadku zmiany tej właściwości element nadrzędny może zmienić położenie elementu podrzędnego, w zależności od dostępnego miejsca.</span><span class="sxs-lookup"><span data-stu-id="a4700-272">Another example is <xref:System.Windows.Controls.Control.Padding%2A>; when this property changes, the parent might change the positioning of the child, depending on available space.</span></span>  
  
 <span data-ttu-id="a4700-273">Ponieważ ta implementacja na poziomie platformy WPF jest już na miejscu, zazwyczaj nie trzeba szukać właściwości <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> zależności, chyba że istotnie zastąpi lub zmodyfikujesz zachowanie układu platformy WPF.</span><span class="sxs-lookup"><span data-stu-id="a4700-273">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="a4700-274">Implementacje niestandardowe <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> mogą mieć podobne zachowanie w przypadku zmian właściwości zależności, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> gdzie `true`is.</span><span class="sxs-lookup"><span data-stu-id="a4700-274">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="a4700-275">Właściwości dla wszystkich klas <xref:System.Windows.PropertyMetadata> pochodnych są zwykle zdefiniowane w modelu obiektów jako do odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="a4700-275">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="a4700-276">Jest to tak więc, aby można je było dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="a4700-276">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="a4700-277">Jednak po wykorzystaniu metadanych jako części wywołania metody <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości spowoduje, że wystąpienie metadanych i właściwości, które przekażą określone metadane, są teraz traktowane jako niezmienne.</span><span class="sxs-lookup"><span data-stu-id="a4700-277">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="a4700-278">Próba ustawienia tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> znajduje się `true` w tym wystąpieniu metadanych spowoduje wystąpienie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="a4700-278">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="a4700-279">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="a4700-279">XAML Text Usage</span></span>  
 <span data-ttu-id="a4700-280">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]programie.</span><span class="sxs-lookup"><span data-stu-id="a4700-280">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4700-281">Metadane zostały już zastosowane do operacji właściwości zależności, dlatego metadane są zapieczętowane i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="a4700-281">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsParentMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentMeasure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsParentMeasure : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4700-282">Pobiera lub ustawia wartość wskazującą, czy właściwość zależności może wpływać na przebieg pomiaru układu elementu nadrzędnego w trakcie operacji aparatu układu.</span><span class="sxs-lookup"><span data-stu-id="a4700-282">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="a4700-283"><see langword="true" />Jeśli właściwość zależności, na której istnieją metadane, prawdopodobnie ma wpływ na przebieg pomiaru w odniesieniu do jego elementu nadrzędnego; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-283"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <see langword="false" />.The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-284"><xref:System.Windows.FrameworkElement>i <xref:System.Windows.FrameworkContentElement> obejmują<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> implementację, która monitoruje zmiany wartości efektywnej we wszystkich właściwościach zależności istniejących w elemencie.</span><span class="sxs-lookup"><span data-stu-id="a4700-284"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="a4700-285">W ramach tej logiki właściwości zależności, które zmieniają wartość skuteczną i mają metadane z <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> ustawionym `true` na zainicjują odroczone żądanie unieważnienia wizualizacji dla elementu nadrzędnego.</span><span class="sxs-lookup"><span data-stu-id="a4700-285">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span> <span data-ttu-id="a4700-286">Ponieważ ta implementacja na poziomie platformy WPF jest już na miejscu, zazwyczaj nie trzeba szukać właściwości <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> zależności, chyba że istotnie zastąpi lub zmodyfikujesz zachowanie układu platformy WPF.</span><span class="sxs-lookup"><span data-stu-id="a4700-286">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="a4700-287">Ogólnie rzecz biorąc, <xref:System.Windows.FrameworkElement> nie trzeba raportować zmian właściwości do elementu nadrzędnego przy użyciu <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> , ponieważ sam element byłby `true`już własny <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> .</span><span class="sxs-lookup"><span data-stu-id="a4700-287">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> as `true`.</span></span> <span data-ttu-id="a4700-288">Jest to zwykle wystarczające, ponieważ zmiany w elemencie podrzędnym zwykle inicjują w razie potrzeby miarę nadrzędne.</span><span class="sxs-lookup"><span data-stu-id="a4700-288">That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate.</span></span> <span data-ttu-id="a4700-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>jest czasami używany dla <xref:System.Windows.FrameworkContentElement> klasy pochodnej.</span><span class="sxs-lookup"><span data-stu-id="a4700-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="a4700-290">W tym przypadku element podrzędny ustawia właściwość, ale <xref:System.Windows.FrameworkContentElement> Klasa pochodna nie kontroluje własnego renderowania.</span><span class="sxs-lookup"><span data-stu-id="a4700-290">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="a4700-291">Renderowanie jest obsługiwane przez <xref:System.Windows.FrameworkElement> element nadrzędny, który służy jako host zawartości.</span><span class="sxs-lookup"><span data-stu-id="a4700-291">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="a4700-292">Na przykład zmiana wartości <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> właściwości przez element podrzędny unieważnia miarę elementu nadrzędnego, ponieważ względne Odstępy akapitu mogą ulec zmianie i mogą zwiększyć lub zmniejszyć rozmiar hosta zawartości.</span><span class="sxs-lookup"><span data-stu-id="a4700-292">For instance, a change to the value of the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size.</span></span> <span data-ttu-id="a4700-293">W związku z <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> tym Właściwość zawiera metadane <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> , `true`gdzie is.</span><span class="sxs-lookup"><span data-stu-id="a4700-293">Therefore, the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="a4700-294">Elementy hosta zawartości często wyszukują zmiany we właściwościach zależności, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> gdzie `true`is jest częścią logiki renderowania hosta zawartości.</span><span class="sxs-lookup"><span data-stu-id="a4700-294">Content host elements also frequently look for changes in dependency properties where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`, as part of content host rendering logic.</span></span> <span data-ttu-id="a4700-295">Na przykład <xref:System.Windows.Controls.TextBox> element musi odpowiedzieć na pewne zmiany w tekście, które mogą wymagać zmiany pola <xref:System.Windows.Controls.TextBox> ograniczenia samego siebie.</span><span class="sxs-lookup"><span data-stu-id="a4700-295">For instance, the <xref:System.Windows.Controls.TextBox> element must respond to certain changes within text that might require that the bounding box of the <xref:System.Windows.Controls.TextBox> itself be changed.</span></span>  
  
 <span data-ttu-id="a4700-296">Implementacje niestandardowe <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> mogą mieć podobne zachowanie w przypadku zmian właściwości zależności, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> gdzie `true`is.</span><span class="sxs-lookup"><span data-stu-id="a4700-296">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="a4700-297">Właściwości dla wszystkich klas <xref:System.Windows.PropertyMetadata> pochodnych są zwykle zdefiniowane w modelu obiektów jako do odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="a4700-297">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="a4700-298">Jest to tak więc, aby można je było dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="a4700-298">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="a4700-299">Jednak po wykorzystaniu metadanych jako części wywołania metody <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości spowoduje, że wystąpienie metadanych i właściwości, które przekażą określone metadane, są teraz traktowane jako niezmienne.</span><span class="sxs-lookup"><span data-stu-id="a4700-299">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="a4700-300">Próba ustawienia tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> znajduje się `true` w tym wystąpieniu metadanych spowoduje wystąpienie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="a4700-300">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="a4700-301">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="a4700-301">XAML Text Usage</span></span>  
 <span data-ttu-id="a4700-302">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]programie.</span><span class="sxs-lookup"><span data-stu-id="a4700-302">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4700-303">Metadane zostały już zastosowane do operacji właściwości zależności, dlatego metadane są zapieczętowane i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="a4700-303">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsRender">
      <MemberSignature Language="C#" Value="public bool AffectsRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsRender { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsRender : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4700-304">Pobiera lub ustawia wartość wskazującą, czy właściwość zależności może wpływać na układ ogólny w jakiś sposób, który nie wpływa na porozumienie lub pomiar, ale wymaga ponownego rysowania.</span><span class="sxs-lookup"><span data-stu-id="a4700-304">Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.</span></span></summary>
        <value><span data-ttu-id="a4700-305"><see langword="true" />Jeśli właściwość zależności, na której istnieją metadane, ma wpływ na renderowanie; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="a4700-305"><see langword="true" /> if the dependency property on which this metadata exists affects rendering; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a4700-306">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-306">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-307"><xref:System.Windows.FrameworkElement>i <xref:System.Windows.FrameworkContentElement> obejmują<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> implementację, która monitoruje zmiany wartości efektywnej we wszystkich właściwościach zależności istniejących w elemencie.</span><span class="sxs-lookup"><span data-stu-id="a4700-307"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="a4700-308">W ramach tej logiki właściwości zależności, które zmieniają wartość skuteczną i mają metadane z <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> ustawionym `true` na zainicjują odroczone żądanie unieważnienia wizualizacji dla tego elementu.</span><span class="sxs-lookup"><span data-stu-id="a4700-308">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="a4700-309">Ponieważ ta implementacja na poziomie platformy WPF jest już na miejscu, zazwyczaj nie trzeba szukać właściwości <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> zależności, chyba że istotnie zastąpi lub zmodyfikujesz zachowanie układu platformy WPF.</span><span class="sxs-lookup"><span data-stu-id="a4700-309">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="a4700-310">Implementacje niestandardowe <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> mogą mieć podobne zachowanie w przypadku zmian właściwości zależności, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> gdzie `true`is.</span><span class="sxs-lookup"><span data-stu-id="a4700-310">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> is `true`.</span></span>  
  
 <span data-ttu-id="a4700-311">Właściwości dla wszystkich klas <xref:System.Windows.PropertyMetadata> pochodnych są zwykle zdefiniowane w modelu obiektów jako do odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="a4700-311">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="a4700-312">Jest to tak więc, aby można je było dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="a4700-312">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="a4700-313">Jednak po wykorzystaniu metadanych jako części wywołania metody <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości spowoduje, że wystąpienie metadanych i właściwości, które przekażą określone metadane, są teraz traktowane jako niezmienne.</span><span class="sxs-lookup"><span data-stu-id="a4700-313">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="a4700-314">Próba ustawienia tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> znajduje się `true` w tym wystąpieniu metadanych spowoduje wystąpienie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="a4700-314">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="a4700-315">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="a4700-315">XAML Text Usage</span></span>  
 <span data-ttu-id="a4700-316">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]programie.</span><span class="sxs-lookup"><span data-stu-id="a4700-316">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4700-317">Poniższy przykład pobiera domyślne metadane z różnych pól właściwości zależności, wysyła zapytanie do wartości różnych <xref:System.Windows.FrameworkPropertyMetadata> właściwości, a następnie używa informacji do wypełniania tabeli w celu zaimplementowania "przeglądarki metadanych".</span><span class="sxs-lookup"><span data-stu-id="a4700-317">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4700-318">Metadane zostały już zastosowane do operacji właściwości zależności, dlatego metadane są zapieczętowane i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="a4700-318">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="BindsTwoWayByDefault">
      <MemberSignature Language="C#" Value="public bool BindsTwoWayByDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BindsTwoWayByDefault" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberSignature Language="VB.NET" Value="Public Property BindsTwoWayByDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BindsTwoWayByDefault { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BindsTwoWayByDefault : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4700-319">Pobiera lub ustawia wartość wskazującą, czy właściwość domyślnie wiąże się z dwukierunkową.</span><span class="sxs-lookup"><span data-stu-id="a4700-319">Gets or sets a value that indicates whether the property binds two-way by default.</span></span></summary>
        <value><span data-ttu-id="a4700-320"><see langword="true" />Jeśli właściwość zależności, w której te metadane istnieje, domyślnie tworzy powiązanie dwukierunkowe; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="a4700-320"><see langword="true" /> if the dependency property on which this metadata exists binds two-way by default; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a4700-321">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-321">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-322">W przypadku braku tej właściwości `true`, aktualizacje powiązań są domyślnie jednokierunkowe, na podstawie domyślnego zachowania <xref:System.Windows.Data.Binding> konstruktorów lub równoważnej [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] składni.</span><span class="sxs-lookup"><span data-stu-id="a4700-322">In absence of this property being `true`, binding updates are one-way by default, based on the default behavior of the <xref:System.Windows.Data.Binding> constructors or equivalent [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="a4700-323">W istniejących elementach zwykle ta właściwość jest ustawiana na wartość `true` w metadanych dla właściwości zależności, których stan raportu i można modyfikować za pomocą akcji użytkownika, na <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>przykład.</span><span class="sxs-lookup"><span data-stu-id="a4700-323">In existing elements, you will usually find this property set to `true` in metadata for dependency properties that both report state and are modifiable by user action, for example <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="a4700-324">Ta właściwość tylko raportuje domyślną charakterystykę aktualizacji powiązań właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="a4700-324">This property only reports the default binding update characteristics of the dependency property in general.</span></span> <span data-ttu-id="a4700-325">Wszystkie powiązania ustawione na tę właściwość w wystąpieniu mogą lokalnie ustawić <xref:System.Windows.Data.Binding.Mode%2A> właściwość powiązania i zmienić to ustawienie domyślne.</span><span class="sxs-lookup"><span data-stu-id="a4700-325">Any binding set to this property on an instance can locally set the <xref:System.Windows.Data.Binding.Mode%2A> property of the binding and change this default.</span></span>  
  
 <span data-ttu-id="a4700-326">Właściwości dla wszystkich klas <xref:System.Windows.PropertyMetadata> pochodnych są zwykle zdefiniowane w modelu obiektów jako do odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="a4700-326">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="a4700-327">Jest to tak więc, aby można je było dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="a4700-327">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="a4700-328">Jednak po wykorzystaniu metadanych jako części wywołania metody <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości spowoduje, że wystąpienie metadanych i właściwości, które przekażą określone metadane, są teraz traktowane jako niezmienne.</span><span class="sxs-lookup"><span data-stu-id="a4700-328">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="a4700-329">Próba ustawienia tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> znajduje się `true` w tym wystąpieniu metadanych spowoduje wystąpienie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="a4700-329">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_BindsTwoWayByDefault"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="a4700-330">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="a4700-330">XAML Text Usage</span></span>  
 <span data-ttu-id="a4700-331">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]programie.</span><span class="sxs-lookup"><span data-stu-id="a4700-331">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4700-332">Poniższy przykład pobiera domyślne metadane z różnych pól właściwości zależności, wysyła zapytanie do wartości różnych <xref:System.Windows.FrameworkPropertyMetadata> właściwości, a następnie używa informacji do wypełniania tabeli w celu zaimplementowania "przeglądarki metadanych".</span><span class="sxs-lookup"><span data-stu-id="a4700-332">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4700-333">Metadane zostały już zastosowane do operacji właściwości zależności, dlatego metadane są zapieczętowane i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="a4700-333">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="DefaultUpdateSourceTrigger">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultUpdateSourceTrigger As UpdateSourceTrigger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceTrigger DefaultUpdateSourceTrigger { System::Windows::Data::UpdateSourceTrigger get(); void set(System::Windows::Data::UpdateSourceTrigger value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultUpdateSourceTrigger : System.Windows.Data.UpdateSourceTrigger with get, set" Usage="System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceTrigger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4700-334">Pobiera lub ustawia domyślną <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> wartość, która ma być używana podczas stosowania powiązań dla właściwości z tymi metadanymi, które <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> mają ustawioną wartość <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-334">Gets or sets the default for <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for the property with this metadata are applied, which have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span></span></summary>
        <value><span data-ttu-id="a4700-335">Wartość wyliczenia, inna niż <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-335">A value of the enumeration, other than <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-336">Właściwości klas <xref:System.Windows.PropertyMetadata> pochodnych są zwykle zdefiniowane w modelu obiektów jako do odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="a4700-336">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="a4700-337">Jest to tak więc, aby można je było dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="a4700-337">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="a4700-338">Jednak po wykorzystaniu metadanych jako części wywołania metody <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości spowoduje, że wystąpienie metadanych i właściwości, które przekażą określone metadane, są teraz traktowane jako niezmienne.</span><span class="sxs-lookup"><span data-stu-id="a4700-338">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="a4700-339">Próba ustawienia tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> znajduje się `true` w tym wystąpieniu metadanych spowoduje wystąpienie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="a4700-339">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_DefaultUpdateSourceTrigger"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="a4700-340">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="a4700-340">XAML Text Usage</span></span>  
 <span data-ttu-id="a4700-341">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]programie.</span><span class="sxs-lookup"><span data-stu-id="a4700-341">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a4700-342">Ta właściwość jest ustawiona na <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />wartość; Przypuśćmy, że ustawianą wartością domyślną będzie żądana przez powiązania.</span><span class="sxs-lookup"><span data-stu-id="a4700-342">This property is set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />; the value you set is supposed to become the default when requested by bindings.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4700-343">Metadane zostały już zastosowane do operacji właściwości zależności, dlatego metadane są zapieczętowane i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="a4700-343">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Inherits">
      <MemberSignature Language="C#" Value="public bool Inherits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Inherits" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberSignature Language="VB.NET" Value="Public Property Inherits As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Inherits { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Inherits : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4700-344">Pobiera lub ustawia wartość wskazującą, czy wartość właściwości zależności jest dziedziczenia.</span><span class="sxs-lookup"><span data-stu-id="a4700-344">Gets or sets a value that indicates whether the value of the dependency property is inheritable.</span></span></summary>
        <value><span data-ttu-id="a4700-345"><see langword="true" />Jeśli wartość właściwości jest dziedziczenia; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="a4700-345"><see langword="true" /> if the property value is inheritable; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a4700-346">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-346">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-347">Dziedziczenie wartości właściwości jest funkcją [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] systemu właściwości na poziomie platformy WPF, zgodnie z którym niektóre właściwości zależności mogą być ustawiane lokalnie dla elementu w katalogu głównym [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] drzewa elementu, a następnie mieć wartość dziedziczoną przez wszystkie elementy w drzewie logicznym elementów podrzędnych, które również posiadają tę właściwość.</span><span class="sxs-lookup"><span data-stu-id="a4700-347">Property value inheritance is a feature of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property.</span></span> <span data-ttu-id="a4700-348">Dziedziczenie wartości właściwości nie jest domyślnie włączone i włączenie jej ma wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="a4700-348">Property value inheritance is not enabled by default, and enabling it does have some performance implications.</span></span> <span data-ttu-id="a4700-349">Aby uzyskać szczegółowe informacje, zobacz [dziedziczenie wartości właściwości](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="a4700-349">For details, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a4700-350">Chociaż dziedziczenie wartości właściwości może wydawać się niedołączonymi właściwościami zależności, zachowanie dziedziczenia dla niedołączonej właściwości przy użyciu określonych oddziałów obiektów obiektu w drzewie środowiska uruchomieniowego jest niezdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="a4700-350">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined.</span></span> <span data-ttu-id="a4700-351">Zawsze używaj <xref:System.Windows.DependencyProperty.RegisterAttached%2A> do rejestrowania właściwości, które są <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> określone w metadanych.</span><span class="sxs-lookup"><span data-stu-id="a4700-351">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span>  
  
 <span data-ttu-id="a4700-352">Właściwości klas <xref:System.Windows.PropertyMetadata> pochodnych są zwykle zdefiniowane w modelu obiektów jako do odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="a4700-352">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="a4700-353">Jest to tak więc, aby można je było dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="a4700-353">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="a4700-354">Jednak po wykorzystaniu metadanych jako części wywołania metody <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości spowoduje, że wystąpienie metadanych i właściwości, które przekażą określone metadane, są teraz traktowane jako niezmienne.</span><span class="sxs-lookup"><span data-stu-id="a4700-354">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="a4700-355">Próba ustawienia tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> znajduje się `true` w tym wystąpieniu metadanych spowoduje wystąpienie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="a4700-355">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Inherits"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="a4700-356">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="a4700-356">XAML Text Usage</span></span>  
 <span data-ttu-id="a4700-357">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]programie.</span><span class="sxs-lookup"><span data-stu-id="a4700-357">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4700-358">Poniższy przykład pobiera domyślne metadane z różnych pól właściwości zależności, wysyła zapytanie do wartości różnych <xref:System.Windows.FrameworkPropertyMetadata> właściwości, a następnie używa informacji do wypełniania tabeli w celu zaimplementowania "przeglądarki metadanych".</span><span class="sxs-lookup"><span data-stu-id="a4700-358">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4700-359">Metadane zostały już zastosowane do operacji właściwości zależności, dlatego metadane są zapieczętowane i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="a4700-359">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsDataBindingAllowed">
      <MemberSignature Language="C#" Value="public bool IsDataBindingAllowed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDataBindingAllowed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDataBindingAllowed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDataBindingAllowed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDataBindingAllowed : bool" Usage="System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4700-360">Pobiera wartość wskazującą, czy wiązanie danych jest obsługiwane dla właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="a4700-360">Gets a value that indicates whether data binding is supported for the dependency property.</span></span></summary>
        <value><span data-ttu-id="a4700-361"><see langword="true" />Jeśli powiązanie danych jest obsługiwane we właściwości zależności, której dotyczą te metadane; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="a4700-361"><see langword="true" /> if data binding is supported on the dependency property to which this metadata applies; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a4700-362">Wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-362">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-363">Ta właściwość zgłasza `false` jeden z dwóch możliwych warunków: powiązanie danych z właściwością zależności jest niedozwolone, ponieważ właściwość zależności jest tylko do odczytu (zgodnie z identyfikatorem właściwości zależności, a nie z metadanymi) lub wartością inna Właściwość metadanych, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, jest ustawiona na `true` wartość w tych metadanych.</span><span class="sxs-lookup"><span data-stu-id="a4700-363">This property reports `false` for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, is set to `true` in this metadata.</span></span> <span data-ttu-id="a4700-364">Ta właściwość jest narażona na wygodę, aby wywołujący nie musieli sprawdzać jednocześnie <xref:System.Windows.DependencyProperty.ReadOnly%2A> i <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span><span class="sxs-lookup"><span data-stu-id="a4700-364">This property is exposed as a convenience so that callers do not have to check both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span>  
  
 <span data-ttu-id="a4700-365">Jeśli podjęto próbę utworzenia metadanych, które określają, że właściwość odczytu/zapisu nie powinna obsługiwać powiązania danych, należy określić flagę <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> (należy zwrócić uwagę na niewielką różnicę <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>konwencji nazewnictwa a).</span><span class="sxs-lookup"><span data-stu-id="a4700-365">If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> (note the slight naming convention difference versus <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</span></span>  
  
<a name="xamlTextUsage_IsDataBindingAllowed"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="a4700-366">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="a4700-366">XAML Text Usage</span></span>  
 <span data-ttu-id="a4700-367">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]programie.</span><span class="sxs-lookup"><span data-stu-id="a4700-367">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4700-368">Poniższy przykład pobiera domyślne metadane z różnych pól właściwości zależności, wysyła zapytanie do wartości różnych <xref:System.Windows.FrameworkPropertyMetadata> właściwości, a następnie używa informacji do wypełniania tabeli w celu zaimplementowania "przeglądarki metadanych".</span><span class="sxs-lookup"><span data-stu-id="a4700-368">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsNotDataBindable">
      <MemberSignature Language="C#" Value="public bool IsNotDataBindable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotDataBindable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNotDataBindable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotDataBindable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNotDataBindable : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4700-369">Pobiera lub ustawia wartość wskazującą, czy właściwość zależności obsługuje powiązanie danych.</span><span class="sxs-lookup"><span data-stu-id="a4700-369">Gets or sets a value that indicates whether the dependency property supports data binding.</span></span></summary>
        <value><span data-ttu-id="a4700-370"><see langword="true" />Jeśli właściwość nie obsługuje powiązania danych; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="a4700-370"><see langword="true" /> if the property does not support data binding; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a4700-371">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-371">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-372">Należy pamiętać, że ta właściwość metadanych jest `true` ustawiona na wartość specyficzną dla właściwości, które nie powinny obsługiwać powiązań danych, mimo że nie są właściwościami odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="a4700-372">Note that this metadata property is set to `true` specifically for properties that should not support data binding, despite being read-write properties.</span></span> <span data-ttu-id="a4700-373">Oczekuje się, że w większości przypadków, gdy właściwość zależności jest zadeklarowana, powiązanie danych jest odpowiednie, ponieważ powiązanie danych jest jednym z kluczowych scenariuszy, w których właściwość zależności jest przydatna.</span><span class="sxs-lookup"><span data-stu-id="a4700-373">The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful.</span></span> <span data-ttu-id="a4700-374">W przeciwieństwie do <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>nie powoduje to jedynie zmiany domyślnego, który można później zmienić dla określonego powiązania.</span><span class="sxs-lookup"><span data-stu-id="a4700-374">Unlike <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, this does not merely change a default that can later be changed on a specific binding.</span></span> <span data-ttu-id="a4700-375">Ustawienie tej właściwości `true` w metadanych metadanych właściwości zależności spowoduje wyłączenie wszystkich powiązań z zastosowaniem ich wartości za pośrednictwem wyrażeń do tej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="a4700-375">Setting this property `true` in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.</span></span>  
  
 <span data-ttu-id="a4700-376">Właściwości zależności tylko do odczytu nie obsługują powiązań danych (ponieważ nie mają metody ustawiającej, która może stosować zmienione wartości), ale nadal będzie `false` zgłaszać <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span><span class="sxs-lookup"><span data-stu-id="a4700-376">Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report `false` for <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span> <span data-ttu-id="a4700-377">Wynika to z faktu, że właściwości <xref:System.Windows.FrameworkPropertyMetadataOptions> , które odpowiadają wartości, będą raportować parzystość z zachowaniem metadanych, zamiast zawsze zgłaszać wynik końcowy, który może oznaczać, że nazwa właściwości.</span><span class="sxs-lookup"><span data-stu-id="a4700-377">This is because properties that correspond to a <xref:System.Windows.FrameworkPropertyMetadataOptions> values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply.</span></span> <span data-ttu-id="a4700-378">Aby określić, czy dana właściwość zależności zezwala na powiązanie danych, zamiast tego należy <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> zawsze sprawdzać.</span><span class="sxs-lookup"><span data-stu-id="a4700-378">To determine whether a given dependency property permits data binding, you should usually check <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> instead.</span></span> <span data-ttu-id="a4700-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A>jest wygodą do sprawdzania obu <xref:System.Windows.DependencyProperty.ReadOnly%2A> i <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> jako jednej operacji, co daje oczekiwany wynik.</span><span class="sxs-lookup"><span data-stu-id="a4700-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> is a convenience for checking both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> as a single operation, yielding the expected result.</span></span>  
  
 <span data-ttu-id="a4700-380">Właściwości klas <xref:System.Windows.PropertyMetadata> pochodnych są zwykle zdefiniowane w modelu obiektów jako do odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="a4700-380">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="a4700-381">Jest to tak więc, aby można je było dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="a4700-381">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="a4700-382">Jednak po wykorzystaniu metadanych jako części wywołania metody <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości spowoduje, że wystąpienie metadanych i właściwości, które przekażą określone metadane, są teraz traktowane jako niezmienne.</span><span class="sxs-lookup"><span data-stu-id="a4700-382">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="a4700-383">Próba ustawienia tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> znajduje się `true` w tym wystąpieniu metadanych spowoduje wystąpienie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="a4700-383">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_IsNotDataBindable"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="a4700-384">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="a4700-384">XAML Text Usage</span></span>  
 <span data-ttu-id="a4700-385">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]programie.</span><span class="sxs-lookup"><span data-stu-id="a4700-385">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4700-386">Metadane zostały już zastosowane do operacji właściwości zależności, dlatego metadane są zapieczętowane i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="a4700-386">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="Journal">
      <MemberSignature Language="C#" Value="public bool Journal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Journal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberSignature Language="VB.NET" Value="Public Property Journal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Journal { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Journal : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4700-387">Pobiera lub ustawia wartość wskazującą, czy ta właściwość zawiera informacje dotyczące rejestrowania, które aplikacje mogą lub powinny być przechowywane w ramach implementacji rejestrowania.</span><span class="sxs-lookup"><span data-stu-id="a4700-387">Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.</span></span></summary>
        <value><span data-ttu-id="a4700-388"><see langword="true" />Jeśli należy wykonać dziennik na właściwości zależności, do której zastosowano te metadane; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="a4700-388"><see langword="true" /> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a4700-389">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-389">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-390">Właściwości klas <xref:System.Windows.PropertyMetadata> pochodnych są zwykle zdefiniowane w modelu obiektów jako do odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="a4700-390">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="a4700-391">Jest to tak więc, aby można je było dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="a4700-391">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="a4700-392">Jednak po wykorzystaniu metadanych jako części wywołania metody <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości spowoduje, że wystąpienie metadanych i właściwości, które przekażą określone metadane, są teraz traktowane jako niezmienne.</span><span class="sxs-lookup"><span data-stu-id="a4700-392">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="a4700-393">Próba ustawienia tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> znajduje się `true` w tym wystąpieniu metadanych spowoduje wystąpienie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="a4700-393">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Journal"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="a4700-394">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="a4700-394">XAML Text Usage</span></span>  
 <span data-ttu-id="a4700-395">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]programie.</span><span class="sxs-lookup"><span data-stu-id="a4700-395">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4700-396">Metadane zostały już zastosowane do operacji właściwości zależności, dlatego metadane są zapieczętowane i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="a4700-396">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="T:System.Windows.Navigation.JournalEntry" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="protected override void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Merge(class System.Windows.PropertyMetadata baseMetadata, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Merge (baseMetadata As PropertyMetadata, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Merge(System::Windows::PropertyMetadata ^ baseMetadata, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="override this.Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit" Usage="frameworkPropertyMetadata.Merge (baseMetadata, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="baseMetadata"><span data-ttu-id="a4700-397">Podstawowe metadane do scalenia.</span><span class="sxs-lookup"><span data-stu-id="a4700-397">The base metadata to merge.</span></span></param>
        <param name="dp"><span data-ttu-id="a4700-398">Właściwość zależności, do której są stosowane metadane.</span><span class="sxs-lookup"><span data-stu-id="a4700-398">The dependency property this metadata is being applied to.</span></span></param>
        <summary><span data-ttu-id="a4700-399">Włącza scalanie metadanych źródłowych z podstawowymi metadanymi.</span><span class="sxs-lookup"><span data-stu-id="a4700-399">Enables a merge of the source metadata with base metadata.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-400">Ta metoda jest używana wewnętrznie w przypadku przesłaniania metadanych.</span><span class="sxs-lookup"><span data-stu-id="a4700-400">This method is used internally when metadata is being overridden.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a4700-401">Klasy, które pochodzą <see cref="T:System.Windows.PropertyMetadata" /> z (lub klasy szczególnie), powinny zastąpić tę metodę w celu uwzględnienia wszelkich właściwości metadanych, które zostały dodane do ich implementacji.</span><span class="sxs-lookup"><span data-stu-id="a4700-401">Classes that derive from <see cref="T:System.Windows.PropertyMetadata" /> (or this class particularly) should override this method to account for any metadata properties they have added in their implementations.</span></span> <span data-ttu-id="a4700-402">Na przykład Twoja implementacja mogła dodać nową wartość wyliczenia flagwise, a <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementacja powinna mieć możliwość poprawnego łączenia tych flag.</span><span class="sxs-lookup"><span data-stu-id="a4700-402">For instance, your implementation might have added a new flagwise enumeration value, and the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation should then be able to combine those flags correctly.</span></span>  
  
<span data-ttu-id="a4700-403">Zawsze należy wywoływać implementację podstawową przed własną implementacją, ponieważ podstawowa implementacja ma na celu scalanie wszystkich właściwości, które są już zdefiniowane w poprzednich typach w hierarchii.</span><span class="sxs-lookup"><span data-stu-id="a4700-403">Always call the base implementation prior to your own implementation, because the base implementation takes care of merging all the properties already defined on previous types in the hierarchy.</span></span>  
  
<span data-ttu-id="a4700-404">Zachowanie dodane przez <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementację w programie <see cref="T:System.Windows.FrameworkPropertyMetadata" /> polega na tym, że określone właściwości na poziomie platformy WPF w metadanych <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> , takie jak są łączone w operacji bitowej lub.</span><span class="sxs-lookup"><span data-stu-id="a4700-404">The behavior added by the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation in <see cref="T:System.Windows.FrameworkPropertyMetadata" /> is that specific WPF framework-level properties in the metadata such as <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> are combined in a bitwise or operation.</span></span>  
  
<span data-ttu-id="a4700-405">Zachowanie implementuje również zachowanie podczas przesłonięcia metadanych właściwości we właściwości zależności istniejącej przez wywołanie <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />, <see cref="T:System.Windows.FrameworkPropertyMetadata" />przy użyciu zastąpień metadanych. <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /></span><span class="sxs-lookup"><span data-stu-id="a4700-405">The <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> behavior also implements the behavior when you override the property metadata on an existing dependency property by calling <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />, using override metadata that is <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span></span></para></block>
        <altmember cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="OnApply">
      <MemberSignature Language="C#" Value="protected override void OnApply (System.Windows.DependencyProperty dp, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnApply(class System.Windows.DependencyProperty dp, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnApply (dp As DependencyProperty, targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnApply(System::Windows::DependencyProperty ^ dp, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="override this.OnApply : System.Windows.DependencyProperty * Type -&gt; unit" Usage="frameworkPropertyMetadata.OnApply (dp, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="a4700-406">Właściwość zależności, do której zastosowano metadane.</span><span class="sxs-lookup"><span data-stu-id="a4700-406">The dependency property to which the metadata has been applied.</span></span></param>
        <param name="targetType"><span data-ttu-id="a4700-407">Typ skojarzony z tymi metadanymi, jeśli jest to metadane specyficzne dla określonego typu.</span><span class="sxs-lookup"><span data-stu-id="a4700-407">The type associated with this metadata if this is type-specific metadata.</span></span> <span data-ttu-id="a4700-408">Jeśli jest to metadane domyślne, ta wartość może być <see langword="null" />równa.</span><span class="sxs-lookup"><span data-stu-id="a4700-408">If this is default metadata, this value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="a4700-409">Wywoływana, gdy te metadane zostały zastosowane do właściwości, co oznacza, że metadane są zapieczętowane.</span><span class="sxs-lookup"><span data-stu-id="a4700-409">Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-410">Wszystkie zmienność struktury <xref:System.Windows.FrameworkPropertyMetadata> danych wystąpienia powinny być oznaczone jako niezmienne w przypadku wywołania tej metody.</span><span class="sxs-lookup"><span data-stu-id="a4700-410">Any mutability of the data structure of a <xref:System.Windows.FrameworkPropertyMetadata> instance should be marked as immutable when this method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a4700-411"><see cref="T:System.Windows.FrameworkPropertyMetadata" /> Implementacja tej metody nie wykonuje żadnych operacji poza wywołaniem podstawowej implementacji.</span><span class="sxs-lookup"><span data-stu-id="a4700-411">The <see cref="T:System.Windows.FrameworkPropertyMetadata" /> implementation of this method does nothing beyond calling the base implementation.</span></span></para></block>
        <altmember cref="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesInheritanceBehavior">
      <MemberSignature Language="C#" Value="public bool OverridesInheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesInheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesInheritanceBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesInheritanceBehavior { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesInheritanceBehavior : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4700-412">Pobiera lub ustawia wartość wskazującą, czy Ocena dziedziczenia wartości właściwości powinna obejmować między określonymi granicami zawartości w drzewie logicznym elementów.</span><span class="sxs-lookup"><span data-stu-id="a4700-412">Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.</span></span></summary>
        <value><span data-ttu-id="a4700-413"><see langword="true" />Jeśli dziedziczenie wartości właściwości powinno obejmować między pewnymi granicami zawartości; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="a4700-413"><see langword="true" /> if the property value inheritance should span across certain content boundaries; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a4700-414">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-414">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-415">Te metadane raportują rzadko stosowane modyfikacje zachowania dziedziczenia wartości właściwości między specjalnym elementem nadrzędnym — granic elementów podrzędnych.</span><span class="sxs-lookup"><span data-stu-id="a4700-415">This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries.</span></span> <span data-ttu-id="a4700-416">Przykładem kanonicznym takiej granicy jest zawartość <xref:System.Windows.Controls.Frame>, w <xref:System.Windows.Controls.Frame> której zawartość może zostać załadowana ponownie niezależnie <xref:System.Windows.Controls.Frame>od istnienia.</span><span class="sxs-lookup"><span data-stu-id="a4700-416">The canonical example of such a boundary is the contents of a <xref:System.Windows.Controls.Frame>, where the <xref:System.Windows.Controls.Frame> content might get reloaded independently of the existence of the <xref:System.Windows.Controls.Frame>.</span></span> <span data-ttu-id="a4700-417">Żądane zachowanie systemu właściwości polega na tym, że dziedziczenie wartości właściwości nie powinno przechodzić do zawartości <xref:System.Windows.Controls.Frame>, ponieważ mogą to być elementy, które aplikacja obsługująca ramkę nie jest właścicielem ani nie kontroluje.</span><span class="sxs-lookup"><span data-stu-id="a4700-417">The desired property system behavior is that property value inheritance should not traverse into the contents of the <xref:System.Windows.Controls.Frame>, because these contents might be elements that the application hosting the frame does not own or control.</span></span> <span data-ttu-id="a4700-418">Określenie <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> metadanych mających <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> `true`ustawioną wartość, a także określenie `true`jako, spowoduje, że właściwość, w której zastosowano metadane, ma być dziedziczenia nawet <xref:System.Windows.Controls.Frame> przez granicę lub podobne granice.</span><span class="sxs-lookup"><span data-stu-id="a4700-418">Specifying metadata with <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> set to `true`, as well as specifying <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> as `true`, will cause the property on which the metadata is applied to be inheritable even across the <xref:System.Windows.Controls.Frame> boundary or similar boundaries.</span></span>  
  
 <span data-ttu-id="a4700-419">Właściwości klas <xref:System.Windows.PropertyMetadata> pochodnych są zwykle zdefiniowane w modelu obiektów jako do odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="a4700-419">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="a4700-420">Jest to tak więc, aby można je było dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="a4700-420">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="a4700-421">Jednak po wykorzystaniu metadanych jako części wywołania metody <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości spowoduje, że wystąpienie metadanych i właściwości, które przekażą określone metadane, są teraz traktowane jako niezmienne.</span><span class="sxs-lookup"><span data-stu-id="a4700-421">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="a4700-422">Próba ustawienia tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> znajduje się `true` w tym wystąpieniu metadanych spowoduje wystąpienie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="a4700-422">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_OverridesInheritanceBehavior"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="a4700-423">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="a4700-423">XAML Text Usage</span></span>  
 <span data-ttu-id="a4700-424">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]programie.</span><span class="sxs-lookup"><span data-stu-id="a4700-424">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4700-425">Metadane zostały już zastosowane do operacji właściwości zależności, dlatego metadane są zapieczętowane i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="a4700-425">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="SubPropertiesDoNotAffectRender">
      <MemberSignature Language="C#" Value="public bool SubPropertiesDoNotAffectRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="VB.NET" Value="Public Property SubPropertiesDoNotAffectRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SubPropertiesDoNotAffectRender { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SubPropertiesDoNotAffectRender : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4700-426">Pobiera lub ustawia wartość wskazującą, czy właściwości podrzędne właściwości Dependency nie wpływają na renderowanie zawierającego go obiektu.</span><span class="sxs-lookup"><span data-stu-id="a4700-426">Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.</span></span></summary>
        <value><span data-ttu-id="a4700-427"><see langword="true" />Jeśli zmiany wartości właściwości podrzędnych nie wpływają na renderowanie, Jeśli zmieniono; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="a4700-427"><see langword="true" /> if changes to sub-property values do not affect rendering if changed; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a4700-428">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a4700-428">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4700-429">Ta opcja metadanych jest przydatna dla właściwości zależności, które są typami odwołań, w których ten typ ma własne wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="a4700-429">This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own.</span></span> <span data-ttu-id="a4700-430">Zazwyczaj logika systemu układu polega na założeniu, że każda właściwość zależności z właściwościami podrzędnymi potencjalnie wpłynie na układ, ponieważ sprawdzanie wszystkich właściwości podrzędnych dla zmian jest czasochłonne niż w przypadku rzeczywistego uruchamiania innego przebiegu renderowania.</span><span class="sxs-lookup"><span data-stu-id="a4700-430">Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass.</span></span> <span data-ttu-id="a4700-431">Ustawienie tej opcji na `true` jest przydatne w celu optymalizacji wydajności implementacji systemu układu platformy WPF Framework.</span><span class="sxs-lookup"><span data-stu-id="a4700-431">Setting this option to `true` is useful for optimizing performance of the WPF framework level layout system implementation.</span></span>  
  
 <span data-ttu-id="a4700-432">Właściwości klas <xref:System.Windows.PropertyMetadata> pochodnych są zwykle zdefiniowane w modelu obiektów jako do odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="a4700-432">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="a4700-433">Jest to tak więc, aby można je było dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="a4700-433">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="a4700-434">Jednak po wykorzystaniu metadanych jako części wywołania metody <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości spowoduje, że wystąpienie metadanych i właściwości, które przekażą określone metadane, są teraz traktowane jako niezmienne.</span><span class="sxs-lookup"><span data-stu-id="a4700-434">However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="a4700-435">Próba ustawienia tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> znajduje się `true` w tym wystąpieniu metadanych spowoduje wystąpienie wyjątku.</span><span class="sxs-lookup"><span data-stu-id="a4700-435">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_SubPropertiesDoNotAffectRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="a4700-436">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="a4700-436">XAML Text Usage</span></span>  
 <span data-ttu-id="a4700-437">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]programie.</span><span class="sxs-lookup"><span data-stu-id="a4700-437">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a4700-438">Metadane zostały już zastosowane do operacji właściwości zależności, dlatego metadane są zapieczętowane i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="a4700-438">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.Freezable" />
      </Docs>
    </Member>
  </Members>
</Type>
