<Type Name="FrameworkPropertyMetadata" FullName="System.Windows.FrameworkPropertyMetadata">
  <Metadata><Meta Name="ms.openlocfilehash" Value="346b263b0e22fb800ba4b1fdb296032637c17b7c" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52737246" /></Metadata><TypeSignature Language="C#" Value="public class FrameworkPropertyMetadata : System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FrameworkPropertyMetadata extends System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkPropertyMetadata" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkPropertyMetadata&#xA;Inherits UIPropertyMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkPropertyMetadata : System::Windows::UIPropertyMetadata" />
  <TypeSignature Language="F#" Value="type FrameworkPropertyMetadata = class&#xA;    inherit UIPropertyMetadata" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIPropertyMetadata</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0e03a-101">Raporty lub stosuje metadane dla właściwości zależności, specjalnie dodanie właściwości właściwości określonej platformy.</span><span class="sxs-lookup"><span data-stu-id="0e03a-101">Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-102">Ta klasa jest pochodną <xref:System.Windows.PropertyMetadata> (za pośrednictwem <xref:System.Windows.UIPropertyMetadata>).</span><span class="sxs-lookup"><span data-stu-id="0e03a-102">This class derives from <xref:System.Windows.PropertyMetadata> (through <xref:System.Windows.UIPropertyMetadata>) .</span></span> <span data-ttu-id="0e03a-103">W większości przypadków rozwoju poziomie struktury aplikacji WPF <xref:System.Windows.FrameworkPropertyMetadata> jest typ używany do metadane zależności właściwości, a nie typy podstawowej metadanych <xref:System.Windows.PropertyMetadata> lub <xref:System.Windows.UIPropertyMetadata>.</span><span class="sxs-lookup"><span data-stu-id="0e03a-103">For most WPF framework-level application development purposes, <xref:System.Windows.FrameworkPropertyMetadata> is the type used for dependency property metadata, rather than the base metadata types <xref:System.Windows.PropertyMetadata> or <xref:System.Windows.UIPropertyMetadata>.</span></span> <span data-ttu-id="0e03a-104">Dotyczy to zarówno istniejących właściwości zależności, jak i w większości przypadków właściwość zależności niestandardowej.</span><span class="sxs-lookup"><span data-stu-id="0e03a-104">This is true both for existing dependency properties and for most custom dependency property scenarios.</span></span>  
  
 <span data-ttu-id="0e03a-105">Elementów członkowskich zadeklarowanych to klasy tego dodatku <xref:System.Windows.PropertyMetadata> klasy bazowej obejmują różne właściwości logiczna określić lub zachowanie systemu właściwości na poziomie struktury WPF, takie jak dziedziczenie właściwości, powiązań danych i układ raportu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-105">The members declared by this class that supplement the <xref:System.Windows.PropertyMetadata> base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.</span></span>  
  
 <span data-ttu-id="0e03a-106">Wiele podpisów Konstruktor do tworzenia <xref:System.Windows.FrameworkPropertyMetadata> take wystąpienia <xref:System.Windows.FrameworkPropertyMetadataOptions> parametru.</span><span class="sxs-lookup"><span data-stu-id="0e03a-106">Several constructor signatures for creating a <xref:System.Windows.FrameworkPropertyMetadata> instance take a <xref:System.Windows.FrameworkPropertyMetadataOptions> parameter.</span></span> <span data-ttu-id="0e03a-107"><xref:System.Windows.FrameworkPropertyMetadataOptions> Wyliczenie służy tylko do określenia początkowe zachowanie w konstruktorze, a w przeciwnym razie nie jest widoczne po <xref:System.Windows.FrameworkPropertyMetadata> jest konstruowany.</span><span class="sxs-lookup"><span data-stu-id="0e03a-107">The <xref:System.Windows.FrameworkPropertyMetadataOptions> enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after <xref:System.Windows.FrameworkPropertyMetadata> is constructed.</span></span> <span data-ttu-id="0e03a-108">Z wystąpienia skonstruowany można uzyskać lub ustawić odpowiednie informacje przy użyciu różnych właściwości, które mają taką nazwę wartości wyliczenia używane w wywołaniu konstruktora.</span><span class="sxs-lookup"><span data-stu-id="0e03a-108">From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.</span></span>  
  
<a name="xamlTextUsage_FrameworkPropertyMetadata"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0e03a-109">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="0e03a-109">XAML Text Usage</span></span>  
 <span data-ttu-id="0e03a-110">Ta klasa nie jest zazwyczaj używany w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0e03a-110">This class is not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e03a-111">Poniższy przykład pobiera metadane dla właściwości zależności na określoną właściciela jako początkowej podstawowy <xref:System.Windows.PropertyMetadata> typu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-111">The following example gets metadata for a dependency property on a particular owner as the initial base <xref:System.Windows.PropertyMetadata> type.</span></span> <span data-ttu-id="0e03a-112">Metadane są rzutowane na <xref:System.Windows.FrameworkPropertyMetadata>.</span><span class="sxs-lookup"><span data-stu-id="0e03a-112">That metadata is cast to <xref:System.Windows.FrameworkPropertyMetadata>.</span></span> <span data-ttu-id="0e03a-113">Jeśli rzutowanie zwrócił nieprawidłowy <xref:System.Windows.FrameworkPropertyMetadata>, a następnie różnych <xref:System.Windows.FrameworkPropertyMetadata> są zgłaszane wartości właściwości, za pomocą prostego interfejsu użytkownika (niewyświetlany).</span><span class="sxs-lookup"><span data-stu-id="0e03a-113">If the cast returned a valid <xref:System.Windows.FrameworkPropertyMetadata>, then various <xref:System.Windows.FrameworkPropertyMetadata> property values are reported through a simple UI (not shown).</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.PropertyMetadata" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0e03a-114">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="0e03a-114">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span></span></summary>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0e03a-115">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="0e03a-115">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-116">Ta sygnatura inicjuje wszystkie wartości <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> domyślne właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-116">This signature initializes all values of <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> to their property defaults.</span></span> <span data-ttu-id="0e03a-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> będzie `null`i różnych <xref:System.Windows.FrameworkPropertyMetadata> będzie właściwości logiczne `false`.</span><span class="sxs-lookup"><span data-stu-id="0e03a-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> will be `null`, and the various <xref:System.Windows.FrameworkPropertyMetadata> Boolean properties will be `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata defaultValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="0e03a-118">Wartość domyślna właściwości zależności, zwykle podane jako wartość określonego typu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-118">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <summary><span data-ttu-id="0e03a-119">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy z określoną wartość domyślną.</span><span class="sxs-lookup"><span data-stu-id="0e03a-119">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-120">Typ wartości parametru `defaultValue` musi odpowiadać lub być one związane z typem określonym w oryginalnej rejestrację właściwości zależności, które te metadane zostaną zastosowane do.</span><span class="sxs-lookup"><span data-stu-id="0e03a-120">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="0e03a-121">Niezgodności między metadanych domyślny typ wartości i typ właściwości zależności, które są stosowane do może być trudne do debugowania, ponieważ ta niezgodność występuje wykrywalny podczas kompilacji.</span><span class="sxs-lookup"><span data-stu-id="0e03a-121">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="0e03a-122">System właściwości nie może oszacować efektywne wartości właściwości do czasu wykonywania, więc wynik niezgodność typów typu/właściwości wartość domyślna to błąd czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="0e03a-122">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="0e03a-123">Wartość <xref:System.Windows.DependencyProperty.UnsetValue> ma specjalne znaczenie w systemie właściwości i nie można użyć jako wartości domyślnej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0e03a-123">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e03a-124">Poniższy przykład wywołuje ten podpis konstruktora:</span><span class="sxs-lookup"><span data-stu-id="0e03a-124">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0e03a-125"><paramref name="defaultValue" /> ustawiono <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-125"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata propertyChangedCallback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback"><span data-ttu-id="0e03a-126">Odwołanie do implementacji programu obsługi, który system właściwości będzie wybierany w każdym przypadku, gdy zmienia się od wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-126">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <summary><span data-ttu-id="0e03a-127">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy z określonym <see cref="T:System.Windows.PropertyChangedCallback" /> wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="0e03a-127">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0e03a-128">Poniższy przykład wywołuje ten podpis konstruktora:</span><span class="sxs-lookup"><span data-stu-id="0e03a-128">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1paramcallback](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1paramcallback)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object, flags As FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="0e03a-129">Wartość domyślna właściwości zależności, zwykle podane jako wartość określonego typu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-129">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="0e03a-130">Flagi opcji metadane (kombinację <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> wartości).</span><span class="sxs-lookup"><span data-stu-id="0e03a-130">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="0e03a-131">Te opcje określają właściwości właściwości zależności, które współdziałają z systemów takich jak układ i powiązanie danych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-131">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <summary><span data-ttu-id="0e03a-132">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy przy użyciu wartości domyślnej podana i opcje metadanych na poziomie framework.</span><span class="sxs-lookup"><span data-stu-id="0e03a-132">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework-level metadata options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-133">Typ wartości parametru `defaultValue` musi odpowiadać lub być one związane z typem określonym w oryginalnej rejestrację właściwości zależności, które te metadane zostaną zastosowane do.</span><span class="sxs-lookup"><span data-stu-id="0e03a-133">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="0e03a-134">Niezgodności między metadanych domyślny typ wartości i typ właściwości zależności, które są stosowane do może być trudne do debugowania, ponieważ ta niezgodność występuje wykrywalny podczas kompilacji.</span><span class="sxs-lookup"><span data-stu-id="0e03a-134">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="0e03a-135">System właściwości nie może oszacować efektywne wartości właściwości do czasu wykonywania, więc wynik niezgodność typów typu/właściwości wartość domyślna to błąd czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="0e03a-135">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="0e03a-136">Wartość <xref:System.Windows.DependencyProperty.UnsetValue> ma specjalne znaczenie w systemie właściwości i nie można użyć jako wartości domyślnej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0e03a-136">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="0e03a-137">Wartości oznaczone jako zestaw flag `flags` parametr zostanie ustawiony na wartość logiczną <xref:System.Windows.FrameworkPropertyMetadata> właściwości, które odpowiadają, które <xref:System.Windows.FrameworkPropertyMetadataOptions> Nazwa flagi do `true`.</span><span class="sxs-lookup"><span data-stu-id="0e03a-137">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="0e03a-138">Następnie można zmienić wartości właściwości w metadanych, tak długo, jak metadanych nie została jeszcze zastosowana dla działania systemu określoną właściwość.</span><span class="sxs-lookup"><span data-stu-id="0e03a-138">You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e03a-139">Poniższy przykład wywołuje ten podpis konstruktora:</span><span class="sxs-lookup"><span data-stu-id="0e03a-139">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0e03a-140"><paramref name="defaultValue" /> ustawiono <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-140"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="0e03a-141">Wartość domyślna właściwości zależności, zwykle podane jako wartość określonego typu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-141">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="0e03a-142">Odwołanie do implementacji programu obsługi, który system właściwości będzie wybierany w każdym przypadku, gdy zmienia się od wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-142">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <summary><span data-ttu-id="0e03a-143">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy z wartością domyślną podana i określić <see cref="T:System.Windows.PropertyChangedCallback" /> wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="0e03a-143">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-144">Typ wartości parametru `defaultValue` musi odpowiadać lub być one związane z typem określonym w oryginalnej rejestrację właściwości zależności, które te metadane zostaną zastosowane do.</span><span class="sxs-lookup"><span data-stu-id="0e03a-144">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="0e03a-145">Niezgodności między metadanych domyślny typ wartości i typ właściwości zależności, które są stosowane do może być trudne do debugowania, ponieważ ta niezgodność występuje wykrywalny podczas kompilacji.</span><span class="sxs-lookup"><span data-stu-id="0e03a-145">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="0e03a-146">System właściwości nie może oszacować efektywne wartości właściwości do czasu wykonywania, więc wynik niezgodność typów typu/właściwości wartość domyślna to błąd czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="0e03a-146">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="0e03a-147">Wartość <xref:System.Windows.DependencyProperty.UnsetValue> ma specjalne znaczenie w systemie właściwości i nie można użyć jako wartości domyślnej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0e03a-147">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e03a-148">Poniższy przykład wywołuje ten podpis konstruktora:</span><span class="sxs-lookup"><span data-stu-id="0e03a-148">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor2param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor2param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0e03a-149"><paramref name="defaultValue" /> ustawiono <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-149"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback"><span data-ttu-id="0e03a-150">Odwołanie do implementacji programu obsługi, który system właściwości będzie wybierany w każdym przypadku, gdy zmienia się od wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-150">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="0e03a-151">Odwołanie do implementacji programu obsługi będzie wywoływana zawsze wtedy, gdy system właściwość wywołuje <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> dla tej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0e03a-151">A reference to a handler implementation will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span></span></param>
        <summary><span data-ttu-id="0e03a-152">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy przy użyciu określonego wywołania zwrotne.</span><span class="sxs-lookup"><span data-stu-id="0e03a-152">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified callbacks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-153">Ta implementacja wywołuje inicjatora bazowej, a następnie dodaje `coerceValueCallback` przez ustawienie właściwości wystąpienia podstawowego.</span><span class="sxs-lookup"><span data-stu-id="0e03a-153">This implementation calls a base initializer and then adds the `coerceValueCallback` by setting the property on the base instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e03a-154">Poniższy przykład wywołuje ten podpis konstruktora:</span><span class="sxs-lookup"><span data-stu-id="0e03a-154">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="0e03a-155">Wartość domyślna właściwości zależności, zwykle podane jako wartość określonego typu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-155">The default value of the dependency property, usually provided as a value of a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="0e03a-156">Flagi opcji metadane (kombinację <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> wartości).</span><span class="sxs-lookup"><span data-stu-id="0e03a-156">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="0e03a-157">Te opcje określają właściwości właściwości zależności, które współdziałają z systemów takich jak układ i powiązanie danych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-157">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="0e03a-158">Odwołanie do implementacji programu obsługi, który system właściwości będzie wybierany w każdym przypadku, gdy zmienia się od wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-158">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <summary><span data-ttu-id="0e03a-159">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy z opcjami domyślnymi podana wartość i struktury metadanych, a określone <see cref="T:System.Windows.PropertyChangedCallback" /> wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="0e03a-159">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-160">Typ wartości parametru `defaultValue` musi odpowiadać lub być one związane z typem określonym w oryginalnej rejestrację właściwości zależności, które te metadane zostaną zastosowane do.</span><span class="sxs-lookup"><span data-stu-id="0e03a-160">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="0e03a-161">Niezgodności między metadanych domyślny typ wartości i typ właściwości zależności, które są stosowane do może być trudne do debugowania, ponieważ ta niezgodność występuje wykrywalny podczas kompilacji.</span><span class="sxs-lookup"><span data-stu-id="0e03a-161">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="0e03a-162">System właściwości nie może oszacować efektywne wartości właściwości do czasu wykonywania, więc wynik niezgodność typów typu/właściwości wartość domyślna to błąd czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="0e03a-162">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="0e03a-163">Wartość <xref:System.Windows.DependencyProperty.UnsetValue> ma specjalne znaczenie w systemie właściwości i nie można użyć jako wartości domyślnej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0e03a-163">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="0e03a-164">Wartości oznaczone jako zestaw flag `flags` parametr zostanie ustawiony na wartość logiczną <xref:System.Windows.FrameworkPropertyMetadata> właściwości, które odpowiadają, które <xref:System.Windows.FrameworkPropertyMetadataOptions> Nazwa flagi do `true`.</span><span class="sxs-lookup"><span data-stu-id="0e03a-164">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="0e03a-165">Nadal można zmienić wartości właściwości w metadanych, tak długo, jak metadanych nie została jeszcze zastosowana dla działania systemu określoną właściwość.</span><span class="sxs-lookup"><span data-stu-id="0e03a-165">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e03a-166">Poniższy przykład wywołuje ten podpis konstruktora:</span><span class="sxs-lookup"><span data-stu-id="0e03a-166">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0e03a-167"><paramref name="defaultValue" /> ustawiono <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-167"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="0e03a-168">Wartość domyślna właściwości zależności, zwykle są dostarczane jako określonego typu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-168">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="0e03a-169">Odwołanie do implementacji programu obsługi, który system właściwości będzie wybierany w każdym przypadku, gdy zmienia się od wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-169">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="0e03a-170">Odwołanie do implementacji programu obsługi, która będzie wywoływana zawsze wtedy, gdy system właściwość wywołuje <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> dla tej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0e03a-170">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span></span></param>
        <summary><span data-ttu-id="0e03a-171">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy przy użyciu wartości domyślnej podana i określonego wywołania zwrotne.</span><span class="sxs-lookup"><span data-stu-id="0e03a-171">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified callbacks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-172">Typ wartości parametru `defaultValue` musi odpowiadać lub być one związane z typem określonym w oryginalnej rejestrację właściwości zależności, które te metadane zostaną zastosowane do.</span><span class="sxs-lookup"><span data-stu-id="0e03a-172">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="0e03a-173">Niezgodności między metadanych domyślny typ wartości i typ właściwości zależności, które są stosowane do może być trudne do debugowania, ponieważ ta niezgodność występuje wykrywalny podczas kompilacji.</span><span class="sxs-lookup"><span data-stu-id="0e03a-173">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="0e03a-174">System właściwości nie może oszacować efektywne wartości właściwości do czasu wykonywania, więc wynik niezgodność typów typu/właściwości wartość domyślna to błąd czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="0e03a-174">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="0e03a-175">Wartość <xref:System.Windows.DependencyProperty.UnsetValue> ma specjalne znaczenie w systemie właściwości i nie można użyć jako wartości domyślnej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0e03a-175">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e03a-176">Poniższy przykład wywołuje ten podpis konstruktora:</span><span class="sxs-lookup"><span data-stu-id="0e03a-176">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor3param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor3param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0e03a-177"><paramref name="defaultValue" /> ustawiono <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-177"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="0e03a-178">Wartość domyślna właściwości zależności, zwykle są dostarczane jako określonego typu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-178">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="0e03a-179">Flagi opcji metadane (kombinację <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> wartości).</span><span class="sxs-lookup"><span data-stu-id="0e03a-179">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="0e03a-180">Te opcje określają właściwości właściwości zależności, które współdziałają z systemów takich jak układ i powiązanie danych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-180">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="0e03a-181">Odwołanie do implementacji programu obsługi, który system właściwości będzie wybierany w każdym przypadku, gdy zmienia się od wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-181">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="0e03a-182">Odwołanie do implementacji programu obsługi, która będzie wywoływana zawsze wtedy, gdy system właściwość wywołuje <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> względem tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-182">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span></span></param>
        <summary><span data-ttu-id="0e03a-183">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy z podanej wartości domyślnej i opcje metadane struktury i określonego wywołania zwrotne.</span><span class="sxs-lookup"><span data-stu-id="0e03a-183">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified callbacks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-184">Typ wartości parametru `defaultValue` musi odpowiadać lub być one związane z typem określonym w oryginalnej rejestrację właściwości zależności, które te metadane zostaną zastosowane do.</span><span class="sxs-lookup"><span data-stu-id="0e03a-184">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="0e03a-185">Niezgodności między metadanych domyślny typ wartości i typ właściwości zależności, które są stosowane do może być trudne do debugowania, ponieważ ta niezgodność występuje wykrywalny podczas kompilacji.</span><span class="sxs-lookup"><span data-stu-id="0e03a-185">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="0e03a-186">System właściwości nie może oszacować efektywne wartości właściwości do czasu wykonywania, więc wynik niezgodność typów typu/właściwości wartość domyślna to błąd czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="0e03a-186">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="0e03a-187">Wartość <xref:System.Windows.DependencyProperty.UnsetValue> ma specjalne znaczenie w systemie właściwości i nie można użyć jako wartości domyślnej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0e03a-187">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="0e03a-188">Wartości oznaczone jako zestaw flag `flags` parametr zostanie ustawiony na wartość logiczną <xref:System.Windows.FrameworkPropertyMetadata> właściwości, które odpowiadają, które <xref:System.Windows.FrameworkPropertyMetadataOptions> Nazwa flagi do `true`.</span><span class="sxs-lookup"><span data-stu-id="0e03a-188">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="0e03a-189">Nadal można zmienić wartości właściwości w metadanych, tak długo, jak metadanych nie została jeszcze zastosowana dla działania systemu określoną właściwość.</span><span class="sxs-lookup"><span data-stu-id="0e03a-189">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e03a-190">Poniższy przykład wywołuje ten podpis konstruktora:</span><span class="sxs-lookup"><span data-stu-id="0e03a-190">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0e03a-191"><paramref name="defaultValue" /> ustawiono <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-191"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback * bool -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="0e03a-192">Wartość domyślna właściwości zależności, zwykle są dostarczane jako określonego typu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-192">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="0e03a-193">Flagi opcji metadane (kombinację <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> wartości).</span><span class="sxs-lookup"><span data-stu-id="0e03a-193">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="0e03a-194">Te opcje określają właściwości właściwości zależności, które współdziałają z systemów takich jak układ i powiązanie danych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-194">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="0e03a-195">Odwołanie do implementacji programu obsługi, który system właściwości będzie wybierany w każdym przypadku, gdy zmienia się od wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-195">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="0e03a-196">Odwołanie do implementacji programu obsługi, która będzie wywoływana zawsze wtedy, gdy system właściwość wywołuje <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> dla tej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0e03a-196">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> on this dependency property.</span></span></param>
        <param name="isAnimationProhibited"><span data-ttu-id="0e03a-197"><see langword="true" /> Aby zapobiec animowanie właściwość, która te metadane są stosowane do systemu właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-197"><see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span></span> <span data-ttu-id="0e03a-198">Takie właściwości zgłosi wyjątek czasu wykonywania, pochodzące z systemu właściwości, jeśli animacji z nich są próby.</span><span class="sxs-lookup"><span data-stu-id="0e03a-198">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span></span> <span data-ttu-id="0e03a-199"><see langword="false" /> Aby zezwolić na animowanie właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-199"><see langword="false" /> to permit animating the property.</span></span> <span data-ttu-id="0e03a-200">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-200">The default is <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="0e03a-201">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasie z atrybutem opcje domyślne podana wartość i struktury metadanych, określonego wywołania zwrotne i atrybut typu wartość logiczna, która może służyć do uniemożliwić animacji właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-201">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-202">Typ wartości parametru `defaultValue` musi odpowiadać lub być one związane z typem określonym w oryginalnej rejestrację właściwości zależności, które te metadane zostaną zastosowane do.</span><span class="sxs-lookup"><span data-stu-id="0e03a-202">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="0e03a-203">Niezgodności między metadanych domyślny typ wartości i typ właściwości zależności, które są stosowane do może być trudne do debugowania, ponieważ ta niezgodność występuje wykrywalny podczas kompilacji.</span><span class="sxs-lookup"><span data-stu-id="0e03a-203">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="0e03a-204">System właściwości nie może oszacować efektywne wartości właściwości do czasu wykonywania, więc wynik niezgodność typów typu/właściwości wartość domyślna to błąd czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="0e03a-204">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="0e03a-205">Wartość <xref:System.Windows.DependencyProperty.UnsetValue> ma specjalne znaczenie w systemie właściwości i nie można użyć jako wartości domyślnej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0e03a-205">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="0e03a-206">`isAnimationProhibited` Parametr ustawia wartość początkową <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> właściwość deklarowana przez natychmiastowe base <xref:System.Windows.UIPropertyMetadata> klasy.</span><span class="sxs-lookup"><span data-stu-id="0e03a-206">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="0e03a-207">Wartości oznaczone jako zestaw flag `flags` parametr zostanie ustawiony na wartość logiczną <xref:System.Windows.FrameworkPropertyMetadata> właściwości, które odpowiadają, które <xref:System.Windows.FrameworkPropertyMetadataOptions> Nazwa flagi do `true`.</span><span class="sxs-lookup"><span data-stu-id="0e03a-207">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="0e03a-208">Nadal można zmienić wartości właściwości w metadanych, tak długo, jak metadanych nie została jeszcze zastosowana dla działania systemu określoną właściwość.</span><span class="sxs-lookup"><span data-stu-id="0e03a-208">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e03a-209">Poniższy przykład wywołuje ten podpis konstruktora:</span><span class="sxs-lookup"><span data-stu-id="0e03a-209">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0e03a-210"><paramref name="defaultValue" /> ustawiono <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-210"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, valuetype System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited, System::Windows::Data::UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback * bool * System.Windows.Data.UpdateSourceTrigger -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited, defaultUpdateSourceTrigger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
        <Parameter Name="defaultUpdateSourceTrigger" Type="System.Windows.Data.UpdateSourceTrigger" />
      </Parameters>
      <Docs>
        <param name="defaultValue"><span data-ttu-id="0e03a-211">Wartość domyślna właściwości zależności, zwykle są dostarczane jako określonego typu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-211">The default value of the dependency property, usually provided as a specific type.</span></span></param>
        <param name="flags"><span data-ttu-id="0e03a-212">Flagi opcji metadane (kombinację <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> wartości).</span><span class="sxs-lookup"><span data-stu-id="0e03a-212">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span></span> <span data-ttu-id="0e03a-213">Te opcje określają właściwości właściwości zależności, które współdziałają z systemów takich jak układ i powiązanie danych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-213">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span></span></param>
        <param name="propertyChangedCallback"><span data-ttu-id="0e03a-214">Odwołanie do implementacji programu obsługi, który system właściwości będzie wybierany w każdym przypadku, gdy zmienia się od wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-214">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span></span></param>
        <param name="coerceValueCallback"><span data-ttu-id="0e03a-215">Odwołanie do implementacji programu obsługi, która będzie wywoływana zawsze wtedy, gdy system właściwość wywołuje <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> względem tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-215">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span></span></param>
        <param name="isAnimationProhibited"><span data-ttu-id="0e03a-216"><see langword="true" /> Aby zapobiec animowanie właściwość, która te metadane są stosowane do systemu właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-216"><see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span></span> <span data-ttu-id="0e03a-217">Takie właściwości zgłosi wyjątek czasu wykonywania, pochodzące z systemu właściwości, jeśli animacji z nich są próby.</span><span class="sxs-lookup"><span data-stu-id="0e03a-217">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span></span> <span data-ttu-id="0e03a-218">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-218">The default is <see langword="false" />.</span></span></param>
        <param name="defaultUpdateSourceTrigger"><span data-ttu-id="0e03a-219"><see cref="T:System.Windows.Data.UpdateSourceTrigger" /> Do użycia po zastosowaniu powiązania dla tej właściwości, które mają ich <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> równa <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-219">The <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for this property are applied that have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span></span></param>
        <summary><span data-ttu-id="0e03a-220">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.FrameworkPropertyMetadata" /> klasy przy użyciu podanego domyślne wartości i framework metadanych opcji określonego wywołania zwrotne, atrybut typu wartość logiczna, która może służyć do uniemożliwić animacji właściwości i domyślny wyzwalacz aktualizacji powiązanie danych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-220">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-221">Typ wartości parametru `defaultValue` musi odpowiadać lub być one związane z typem określonym w oryginalnej rejestrację właściwości zależności, które te metadane zostaną zastosowane do.</span><span class="sxs-lookup"><span data-stu-id="0e03a-221">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="0e03a-222">Niezgodności między metadanych domyślny typ wartości i typ właściwości zależności, które są stosowane do może być trudne do debugowania, ponieważ ta niezgodność występuje wykrywalny podczas kompilacji.</span><span class="sxs-lookup"><span data-stu-id="0e03a-222">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="0e03a-223">System właściwości nie może oszacować efektywne wartości właściwości do czasu wykonywania, więc wynik niezgodność typów typu/właściwości wartość domyślna to błąd czasu wykonywania.</span><span class="sxs-lookup"><span data-stu-id="0e03a-223">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="0e03a-224">Wartość <xref:System.Windows.DependencyProperty.UnsetValue> ma specjalne znaczenie w systemie właściwości i nie można użyć jako wartości domyślnej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0e03a-224">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="0e03a-225">`isAnimationProhibited` Parametr ustawia wartość początkową <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> właściwość deklarowana przez natychmiastowe base <xref:System.Windows.UIPropertyMetadata> klasy.</span><span class="sxs-lookup"><span data-stu-id="0e03a-225">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="0e03a-226">Aby uzyskać więcej informacji o zachowaniu źródło aktualizacji dla powiązań, zobacz [Przegląd wiązanie danych](~/docs/framework/wpf/data/data-binding-overview.md).</span><span class="sxs-lookup"><span data-stu-id="0e03a-226">For more information about the update source behavior for bindings, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
 <span data-ttu-id="0e03a-227">Wartości oznaczone jako zestaw flag `flags` parametr zostanie ustawiony na wartość logiczną <xref:System.Windows.FrameworkPropertyMetadata> właściwości, które odpowiadają, które <xref:System.Windows.FrameworkPropertyMetadataOptions> Nazwa flagi do `true`.</span><span class="sxs-lookup"><span data-stu-id="0e03a-227">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="0e03a-228">Nadal można zmienić wartości właściwości w metadanych, tak długo, jak metadanych nie została jeszcze zastosowana dla działania systemu określoną właściwość.</span><span class="sxs-lookup"><span data-stu-id="0e03a-228">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP_DUST](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap_dust)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0e03a-229"><paramref name="defaultValue" /> ustawiono <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-229"><paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span></span></exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName="AffectsArrange">
      <MemberSignature Language="C#" Value="public bool AffectsArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsArrange : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e03a-230">Pobiera lub ustawia wartość wskazującą, czy właściwość zależności może mieć wpływ na przebieg Rozmieść podczas operacji aparatu układu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-230">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="0e03a-231"><see langword="true" /> Jeśli właściwość zależności, w którym te metadane istnieje potencjalnie ma wpływ na przebieg Rozmieść; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-231"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e03a-232">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-232">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-233"><xref:System.Windows.FrameworkElement> i <xref:System.Windows.FrameworkContentElement> zawierać implementację <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> monitorująca efektywną wartość zmiany do wszystkich właściwości zależności, które istnieją w elemencie.</span><span class="sxs-lookup"><span data-stu-id="0e03a-233"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="0e03a-234">W ramach tej logiki, właściwości zależności, które zmieniają zacznie obowiązywać od wartości i ma metadanych z <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> równa `true` zainicjuje odroczonego żądanie unieważnienia wizualizacji dla tego elementu (wywołanie <xref:System.Windows.UIElement.InvalidateArrange%2A>).</span><span class="sxs-lookup"><span data-stu-id="0e03a-234">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element (a call to <xref:System.Windows.UIElement.InvalidateArrange%2A>).</span></span> <span data-ttu-id="0e03a-235">Ponieważ ta implementacja poziomie struktury WPF jest już w miejscu, zazwyczaj nie należy do wyszukania właściwości zależności za pomocą <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> chyba że znacznie zastępowanie lub modyfikowanie zachowania poziomie struktury układu WPF.</span><span class="sxs-lookup"><span data-stu-id="0e03a-235">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="0e03a-236">Niestandardowe <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementacje warto zachowują się podobnie dla zmiany właściwości zależności gdzie <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="0e03a-236">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="0e03a-237">Właściwości klasy pochodne <xref:System.Windows.PropertyMetadata> zwykle są zdefiniowane w modelu obiektu jako odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-237">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0e03a-238">Jest to, dzięki czemu można je dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="0e03a-238">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0e03a-239">Jednak po metadanych jest używany jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości zostanie zapieczętowania to wystąpienie metadanych i właściwości, które obejmują szczegółowe informacje na temat metadanych teraz jest uważany za niezmienialny.</span><span class="sxs-lookup"><span data-stu-id="0e03a-239">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0e03a-240">Trwa próba skonfigurowania tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> jest `true` na te metadane wystąpienia zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0e03a-240">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0e03a-241">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="0e03a-241">XAML Text Usage</span></span>  
 <span data-ttu-id="0e03a-242">Elementy członkowskie tej klasy nie są to zazwyczaj nie używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0e03a-242">Members of this class are either not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e03a-243">Poniższy przykład uzyskuje dostęp do metadanych domyślne z różnych zależności pola właściwości, odpytuje wartości różnych <xref:System.Windows.FrameworkPropertyMetadata> właściwości, a informacje są używane do wypełniania tabeli, aby zaimplementować "Przeglądarka metadanych".</span><span class="sxs-lookup"><span data-stu-id="0e03a-243">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0e03a-244">Metadane już zastosowano do operacji właściwości zależności, tak aby metadanych jest zapieczętowany i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-244">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsMeasure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsMeasure : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e03a-245">Pobiera lub ustawia wartość wskazującą, czy właściwość zależności może mieć wpływ na miary — dostęp próbny podczas operacji aparatu układu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-245">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="0e03a-246"><see langword="true" /> Jeśli właściwość zależności, w którym te metadane istnieje potencjalnie wpływa na miarę — dostęp próbny; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-246"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e03a-247">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-247">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-248"><xref:System.Windows.FrameworkElement> i <xref:System.Windows.FrameworkContentElement> zawierać implementację <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> monitorująca efektywną wartość zmiany do wszystkich właściwości zależności, które istnieją w elemencie.</span><span class="sxs-lookup"><span data-stu-id="0e03a-248"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="0e03a-249">W ramach tej logiki, właściwości zależności, które zmieniają zacznie obowiązywać od wartości i ma metadanych z <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> równa `true` zainicjuje odroczonego żądanie unieważnienia wizualizacji dla tego elementu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-249">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="0e03a-250">Ponieważ ta implementacja poziomie struktury WPF jest już w miejscu, zazwyczaj nie należy do wyszukania właściwości zależności za pomocą <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> chyba że znacznie zastępowanie lub modyfikowanie zachowania poziomie struktury układu WPF.</span><span class="sxs-lookup"><span data-stu-id="0e03a-250">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="0e03a-251">Niestandardowe <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementacje warto zachowują się podobnie dla zmiany właściwości zależności gdzie <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="0e03a-251">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="0e03a-252">Właściwości klasy pochodne <xref:System.Windows.PropertyMetadata> zwykle są zdefiniowane w modelu obiektu jako odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-252">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0e03a-253">Jest to, dzięki czemu można je dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="0e03a-253">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0e03a-254">Jednak po metadanych jest używany jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości zostanie zapieczętowania to wystąpienie metadanych i właściwości, które obejmują szczegółowe informacje na temat metadanych teraz jest uważany za niezmienialny.</span><span class="sxs-lookup"><span data-stu-id="0e03a-254">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0e03a-255">Trwa próba skonfigurowania tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> jest `true` na te metadane wystąpienia zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0e03a-255">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0e03a-256">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="0e03a-256">XAML Text Usage</span></span>  
 <span data-ttu-id="0e03a-257">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0e03a-257">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e03a-258">Poniższy przykład uzyskuje dostęp do metadanych domyślne z różnych zależności pola właściwości, odpytuje wartości różnych <xref:System.Windows.FrameworkPropertyMetadata> właściwości, a informacje są używane do wypełniania tabeli, aby zaimplementować "Przeglądarka metadanych".</span><span class="sxs-lookup"><span data-stu-id="0e03a-258">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0e03a-259">Metadane już zastosowano do operacji właściwości zależności, tak aby metadanych jest zapieczętowany i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-259">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentArrange">
      <MemberSignature Language="C#" Value="public bool AffectsParentArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsParentArrange : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e03a-260">Pobiera lub ustawia wartość wskazującą, czy właściwość zależności może mieć wpływ na przebieg rozmieszczanie układu z elementem nadrzędnym elementu podczas operacji aparatu układu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-260">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="0e03a-261"><see langword="true" /> Jeśli właściwość zależności, w którym te metadane istnieje potencjalnie ma wpływ na przebieg Rozmieść szczegółowe informacje dotyczące odpowiedniego elementu nadrzędnego; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-261"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e03a-262">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-262">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-263"><xref:System.Windows.FrameworkElement> i <xref:System.Windows.FrameworkContentElement> zawierać implementację <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> monitorująca efektywną wartość zmiany do wszystkich właściwości zależności, które istnieją w elemencie.</span><span class="sxs-lookup"><span data-stu-id="0e03a-263"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="0e03a-264">W ramach tej logiki, właściwości zależności, które zmieniają zacznie obowiązywać od wartości i ma metadanych z <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> równa `true` zainicjuje odroczonego żądanie unieważnienia wizualizacji dla elementu nadrzędnego.</span><span class="sxs-lookup"><span data-stu-id="0e03a-264">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span>  
  
 <span data-ttu-id="0e03a-265">Ogólnie rzecz biorąc, nie trzeba zmiany w raporcie <xref:System.Windows.FrameworkElement> właściwości elementu nadrzędnego za pomocą <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> ponieważ sam element będzie już mieć własny <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> jako `true`.</span><span class="sxs-lookup"><span data-stu-id="0e03a-265">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> as `true`.</span></span> <span data-ttu-id="0e03a-266">Zwykle wystarczające, ponieważ zmiany w elemencie podrzędnym ogólnie inicjuje element nadrzędny Rozmieść w odpowiednich przypadkach.</span><span class="sxs-lookup"><span data-stu-id="0e03a-266">That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate.</span></span> <span data-ttu-id="0e03a-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> Czasami służy <xref:System.Windows.FrameworkContentElement> klasy pochodnej.</span><span class="sxs-lookup"><span data-stu-id="0e03a-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="0e03a-268">W tym przypadku element podrzędne zestawy, a właściwość, ale w <xref:System.Windows.FrameworkContentElement> klasy pochodnej nie jest kontrolowane przez własny renderowania.</span><span class="sxs-lookup"><span data-stu-id="0e03a-268">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="0e03a-269">Renderowanie jest obsługiwany przez <xref:System.Windows.FrameworkElement> elementu nadrzędnego, który służy jako host zawartości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-269">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="0e03a-270">Na przykład zmień wartość <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> unieważnia dołączonej właściwości przez element podrzędny Rozmieść obiektu nadrzędnego, ponieważ musi zostać zmieniona pozycja elementu podrzędnego w obiekcie nadrzędnym.</span><span class="sxs-lookup"><span data-stu-id="0e03a-270">For instance, a change to the value of the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed.</span></span> <span data-ttu-id="0e03a-271">W związku z tym <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> dołączoną właściwość ma metadane gdzie <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="0e03a-271">Therefore, the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span> <span data-ttu-id="0e03a-272">Innym przykładem jest <xref:System.Windows.Controls.Control.Padding%2A>; po tej zmiany właściwości nadrzędnego może zmienić położenie podrzędne, w zależności od dostępnego miejsca.</span><span class="sxs-lookup"><span data-stu-id="0e03a-272">Another example is <xref:System.Windows.Controls.Control.Padding%2A>; when this property changes, the parent might change the positioning of the child, depending on available space.</span></span>  
  
 <span data-ttu-id="0e03a-273">Ponieważ ta implementacja poziomie struktury WPF jest już w miejscu, zazwyczaj nie należy do wyszukania właściwości zależności za pomocą <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> chyba że znacznie zastępowanie lub modyfikowanie zachowania poziomie struktury układu WPF.</span><span class="sxs-lookup"><span data-stu-id="0e03a-273">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="0e03a-274">Niestandardowe <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementacje warto zachowują się podobnie dla zmiany właściwości zależności gdzie <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="0e03a-274">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="0e03a-275">Właściwości w dowolnej pochodne klasy <xref:System.Windows.PropertyMetadata> zwykle są zdefiniowane w modelu obiektu jako odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-275">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0e03a-276">Jest to, dzięki czemu można je dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="0e03a-276">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0e03a-277">Jednak po metadanych jest używany jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości zostanie zapieczętowania to wystąpienie metadanych i właściwości, które obejmują szczegółowe informacje na temat metadanych teraz jest uważany za niezmienialny.</span><span class="sxs-lookup"><span data-stu-id="0e03a-277">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0e03a-278">Trwa próba skonfigurowania tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> jest `true` na te metadane wystąpienia zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0e03a-278">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0e03a-279">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="0e03a-279">XAML Text Usage</span></span>  
 <span data-ttu-id="0e03a-280">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0e03a-280">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0e03a-281">Metadane już zastosowano do operacji właściwości zależności, tak aby metadanych jest zapieczętowany i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-281">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsParentMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentMeasure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsParentMeasure : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e03a-282">Pobiera lub ustawia wartość wskazującą, czy właściwość zależności może mieć wpływ na przebieg miary układu z elementem nadrzędnym elementu podczas operacji aparatu układu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-282">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.</span></span></summary>
        <value><span data-ttu-id="0e03a-283"><see langword="true" /> Jeśli właściwość zależności, w którym te metadane istnieje potencjalnie ma wpływ na przebieg miary w dalszej części przedstawiono elementem nadrzędnym elementu; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-283"><see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <see langword="false" />.The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-284"><xref:System.Windows.FrameworkElement> i <xref:System.Windows.FrameworkContentElement> zawierać implementację <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> monitorująca efektywną wartość zmiany do wszystkich właściwości zależności, które istnieją w elemencie.</span><span class="sxs-lookup"><span data-stu-id="0e03a-284"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="0e03a-285">W ramach tej logiki, właściwości zależności, które zmieniają zacznie obowiązywać od wartości i ma metadanych z <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> równa `true` zainicjuje odroczonego żądanie unieważnienia wizualizacji dla elementu nadrzędnego.</span><span class="sxs-lookup"><span data-stu-id="0e03a-285">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span> <span data-ttu-id="0e03a-286">Ponieważ ta implementacja poziomie struktury WPF jest już w miejscu, zazwyczaj nie należy do wyszukania właściwości zależności za pomocą <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> chyba że znacznie zastępowanie lub modyfikowanie zachowania poziomie struktury układu WPF.</span><span class="sxs-lookup"><span data-stu-id="0e03a-286">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="0e03a-287">Ogólnie rzecz biorąc, nie trzeba zmiany w raporcie <xref:System.Windows.FrameworkElement> właściwości elementu nadrzędnego za pomocą <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> ponieważ sam element będzie już mieć własny <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> jako `true`.</span><span class="sxs-lookup"><span data-stu-id="0e03a-287">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> as `true`.</span></span> <span data-ttu-id="0e03a-288">Może to być zwykle wystarczające, ponieważ zmiany w elemencie podrzędnym ogólnie inicjuje przebieg miary nadrzędnego w odpowiednich przypadkach.</span><span class="sxs-lookup"><span data-stu-id="0e03a-288">That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate.</span></span> <span data-ttu-id="0e03a-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> Czasami służy <xref:System.Windows.FrameworkContentElement> klasy pochodnej.</span><span class="sxs-lookup"><span data-stu-id="0e03a-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="0e03a-290">W tym przypadku element podrzędne zestawy, a właściwość, ale w <xref:System.Windows.FrameworkContentElement> klasy pochodnej nie jest kontrolowane przez własny renderowania.</span><span class="sxs-lookup"><span data-stu-id="0e03a-290">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="0e03a-291">Renderowanie jest obsługiwany przez <xref:System.Windows.FrameworkElement> elementu nadrzędnego, który służy jako host zawartości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-291">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="0e03a-292">Na przykład zmień wartość <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> właściwość, według elementu podrzędnego unieważnia miary obiektu nadrzędnego, ponieważ względne odstępy między akapitami może zmienić i może zwiększyć lub zmniejszyć rozmiar hosta zawartości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-292">For instance, a change to the value of the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size.</span></span> <span data-ttu-id="0e03a-293">W związku z tym <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> właściwość ma metadanych gdzie <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="0e03a-293">Therefore, the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="0e03a-294">Host zawartości elementów również często Szukaj zmian w właściwości zależności gdzie <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> jest `true`, jako część logiki renderowania hosta zawartości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-294">Content host elements also frequently look for changes in dependency properties where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`, as part of content host rendering logic.</span></span> <span data-ttu-id="0e03a-295">Na przykład <xref:System.Windows.Controls.TextBox> element musi odpowiedzieć na pewne zmiany w tekście, który może wymagać, aby pole <xref:System.Windows.Controls.TextBox> sam można zmienić.</span><span class="sxs-lookup"><span data-stu-id="0e03a-295">For instance, the <xref:System.Windows.Controls.TextBox> element must respond to certain changes within text that might require that the bounding box of the <xref:System.Windows.Controls.TextBox> itself be changed.</span></span>  
  
 <span data-ttu-id="0e03a-296">Niestandardowe <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementacje warto zachowują się podobnie dla zmiany właściwości zależności gdzie <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="0e03a-296">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="0e03a-297">Właściwości w dowolnej pochodne klasy <xref:System.Windows.PropertyMetadata> zwykle są zdefiniowane w modelu obiektu jako odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-297">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0e03a-298">Jest to, dzięki czemu można je dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="0e03a-298">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0e03a-299">Jednak po metadanych jest używany jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości zostanie zapieczętowania to wystąpienie metadanych i właściwości, które obejmują szczegółowe informacje na temat metadanych teraz jest uważany za niezmienialny.</span><span class="sxs-lookup"><span data-stu-id="0e03a-299">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0e03a-300">Trwa próba skonfigurowania tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> jest `true` na te metadane wystąpienia zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0e03a-300">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0e03a-301">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="0e03a-301">XAML Text Usage</span></span>  
 <span data-ttu-id="0e03a-302">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0e03a-302">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0e03a-303">Metadane już zastosowano do operacji właściwości zależności, tak aby metadanych jest zapieczętowany i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-303">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsRender">
      <MemberSignature Language="C#" Value="public bool AffectsRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsRender { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsRender : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e03a-304">Pobiera lub ustawia wartość wskazującą, czy właściwość zależności może mieć wpływ na ogólny układ w jakiś sposób wpływają na specjalnie rozmieszczenie lub miary, ale wymaga ponownego wystawienia.</span><span class="sxs-lookup"><span data-stu-id="0e03a-304">Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.</span></span></summary>
        <value><span data-ttu-id="0e03a-305"><see langword="true" /> Jeśli właściwość zależności, na którym znajduje się te metadane wpływa na renderowanie; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-305"><see langword="true" /> if the dependency property on which this metadata exists affects rendering; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e03a-306">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-306">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-307"><xref:System.Windows.FrameworkElement> i <xref:System.Windows.FrameworkContentElement> zawierać implementację <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> monitorująca efektywną wartość zmiany do wszystkich właściwości zależności, które istnieją w elemencie.</span><span class="sxs-lookup"><span data-stu-id="0e03a-307"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="0e03a-308">W ramach tej logiki, właściwości zależności, które zmieniają zacznie obowiązywać od wartości i ma metadanych z <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> równa `true` zainicjuje odroczonego żądanie unieważnienia wizualizacji dla tego elementu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-308">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="0e03a-309">Ponieważ ta implementacja poziomie struktury WPF jest już w miejscu, zazwyczaj nie należy do wyszukania właściwości zależności za pomocą <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> chyba że znacznie zastępowanie lub modyfikowanie zachowania poziomie struktury układu WPF.</span><span class="sxs-lookup"><span data-stu-id="0e03a-309">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="0e03a-310">Niestandardowe <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementacje warto zachowują się podobnie dla zmiany właściwości zależności gdzie <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> jest `true`.</span><span class="sxs-lookup"><span data-stu-id="0e03a-310">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> is `true`.</span></span>  
  
 <span data-ttu-id="0e03a-311">Właściwości w dowolnej pochodne klasy <xref:System.Windows.PropertyMetadata> zwykle są zdefiniowane w modelu obiektu jako odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-311">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0e03a-312">Jest to, dzięki czemu można je dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="0e03a-312">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0e03a-313">Jednak po metadanych jest używany jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości zostanie zapieczętowania to wystąpienie metadanych i właściwości, które obejmują szczegółowe informacje na temat metadanych teraz jest uważany za niezmienialny.</span><span class="sxs-lookup"><span data-stu-id="0e03a-313">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0e03a-314">Trwa próba skonfigurowania tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> jest `true` na te metadane wystąpienia zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0e03a-314">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0e03a-315">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="0e03a-315">XAML Text Usage</span></span>  
 <span data-ttu-id="0e03a-316">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0e03a-316">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e03a-317">Poniższy przykład uzyskuje dostęp do metadanych domyślne z różnych zależności pola właściwości, odpytuje wartości różnych <xref:System.Windows.FrameworkPropertyMetadata> właściwości, a informacje są używane do wypełniania tabeli, aby zaimplementować "Przeglądarka metadanych".</span><span class="sxs-lookup"><span data-stu-id="0e03a-317">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0e03a-318">Metadane już zastosowano do operacji właściwości zależności, tak aby metadanych jest zapieczętowany i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-318">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="BindsTwoWayByDefault">
      <MemberSignature Language="C#" Value="public bool BindsTwoWayByDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BindsTwoWayByDefault" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberSignature Language="VB.NET" Value="Public Property BindsTwoWayByDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BindsTwoWayByDefault { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BindsTwoWayByDefault : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e03a-319">Pobiera lub ustawia wartość wskazującą, czy właściwość powiązanie dwukierunkowe domyślnie.</span><span class="sxs-lookup"><span data-stu-id="0e03a-319">Gets or sets a value that indicates whether the property binds two-way by default.</span></span></summary>
        <value><span data-ttu-id="0e03a-320"><see langword="true" /> Jeśli właściwość zależności, na którym znajduje się te metadane powiązanie dwukierunkowe domyślnie; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-320"><see langword="true" /> if the dependency property on which this metadata exists binds two-way by default; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e03a-321">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-321">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-322">W przypadku braku tej właściwości jest `true`, powiązanie aktualizacji są jednokierunkowe domyślnie w oparciu o zachowanie domyślne <xref:System.Windows.Data.Binding> konstruktorów lub równoważnej [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] składni.</span><span class="sxs-lookup"><span data-stu-id="0e03a-322">In absence of this property being `true`, binding updates are one-way by default, based on the default behavior of the <xref:System.Windows.Data.Binding> constructors or equivalent [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="0e03a-323">Istniejące elementy zazwyczaj zawiera tę właściwość ustawioną na `true` metadanych dla właściwości zależności, zarówno raport stanu i są na przykład można modyfikować wyniku akcji użytkownika <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0e03a-323">In existing elements, you will usually find this property set to `true` in metadata for dependency properties that both report state and are modifiable by user action, for example <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="0e03a-324">Ta właściwość tylko domyślnych parametrów aktualizacji powiązania właściwości zależności ogólnie raportów.</span><span class="sxs-lookup"><span data-stu-id="0e03a-324">This property only reports the default binding update characteristics of the dependency property in general.</span></span> <span data-ttu-id="0e03a-325">Wszystkie powiązania zestawu do tej właściwości w wystąpieniu lokalnie można ustawić <xref:System.Windows.Data.Binding.Mode%2A> właściwości powiązania i zmienić to ustawienie domyślne.</span><span class="sxs-lookup"><span data-stu-id="0e03a-325">Any binding set to this property on an instance can locally set the <xref:System.Windows.Data.Binding.Mode%2A> property of the binding and change this default.</span></span>  
  
 <span data-ttu-id="0e03a-326">Właściwości w dowolnej pochodne klasy <xref:System.Windows.PropertyMetadata> zwykle są zdefiniowane w modelu obiektu jako odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-326">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0e03a-327">Jest to, dzięki czemu można je dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="0e03a-327">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0e03a-328">Jednak po metadanych jest używany jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości zostanie zapieczętowania to wystąpienie metadanych i właściwości, które obejmują szczegółowe informacje na temat metadanych teraz jest uważany za niezmienialny.</span><span class="sxs-lookup"><span data-stu-id="0e03a-328">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0e03a-329">Trwa próba skonfigurowania tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> jest `true` na te metadane wystąpienia zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0e03a-329">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_BindsTwoWayByDefault"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0e03a-330">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="0e03a-330">XAML Text Usage</span></span>  
 <span data-ttu-id="0e03a-331">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0e03a-331">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e03a-332">Poniższy przykład uzyskuje dostęp do metadanych domyślne z różnych zależności pola właściwości, odpytuje wartości różnych <xref:System.Windows.FrameworkPropertyMetadata> właściwości, a informacje są używane do wypełniania tabeli, aby zaimplementować "Przeglądarka metadanych".</span><span class="sxs-lookup"><span data-stu-id="0e03a-332">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0e03a-333">Metadane już zastosowano do operacji właściwości zależności, tak aby metadanych jest zapieczętowany i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-333">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="DefaultUpdateSourceTrigger">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultUpdateSourceTrigger As UpdateSourceTrigger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceTrigger DefaultUpdateSourceTrigger { System::Windows::Data::UpdateSourceTrigger get(); void set(System::Windows::Data::UpdateSourceTrigger value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultUpdateSourceTrigger : System.Windows.Data.UpdateSourceTrigger with get, set" Usage="System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceTrigger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e03a-334">Pobiera lub ustawia domyślną <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> można użyć, gdy są stosowane powiązania dla właściwości o tym metadanych, które mają ich <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> równa <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-334">Gets or sets the default for <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for the property with this metadata are applied, which have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span></span></summary>
        <value><span data-ttu-id="0e03a-335">Wartość wyliczenia inną niż <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-335">A value of the enumeration, other than <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-336">Właściwości klasy pochodne <xref:System.Windows.PropertyMetadata> zwykle są zdefiniowane w modelu obiektu jako odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-336">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0e03a-337">Jest to, dzięki czemu można je dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="0e03a-337">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0e03a-338">Jednak po metadanych jest używany jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości zostanie zapieczętowania to wystąpienie metadanych i właściwości, które obejmują szczegółowe informacje na temat metadanych teraz jest uważany za niezmienialny.</span><span class="sxs-lookup"><span data-stu-id="0e03a-338">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0e03a-339">Trwa próba skonfigurowania tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> jest `true` na te metadane wystąpienia zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0e03a-339">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_DefaultUpdateSourceTrigger"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0e03a-340">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="0e03a-340">XAML Text Usage</span></span>  
 <span data-ttu-id="0e03a-341">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0e03a-341">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0e03a-342">Ta właściwość jest ustawiona <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />; wartość ustawiona w powinien stać się domyślne powiązania na żądanie.</span><span class="sxs-lookup"><span data-stu-id="0e03a-342">This property is set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />; the value you set is supposed to become the default when requested by bindings.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0e03a-343">Metadane już zastosowano do operacji właściwości zależności, tak aby metadanych jest zapieczętowany i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-343">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Inherits">
      <MemberSignature Language="C#" Value="public bool Inherits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Inherits" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberSignature Language="VB.NET" Value="Public Property Inherits As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Inherits { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Inherits : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e03a-344">Pobiera lub ustawia wartość wskazującą, czy wartość właściwości zależności jest dziedziczone.</span><span class="sxs-lookup"><span data-stu-id="0e03a-344">Gets or sets a value that indicates whether the value of the dependency property is inheritable.</span></span></summary>
        <value><span data-ttu-id="0e03a-345"><see langword="true" /> Jeśli wartość właściwości jest dziedziczona; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-345"><see langword="true" /> if the property value is inheritable; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e03a-346">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-346">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-347">Dziedziczenie wartości właściwości jest funkcją [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] system właściwości na poziomie framework WPF, według której niektórych właściwości zależności lokalnie na można ustawić elementu po lub w pobliżu głównym [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element drzewa, a następnie ich wartości dziedziczone przez wszystkie elementy w obrębie drzewa logicznego elementy podrzędne, które posiadają również tej właściwości.</span><span class="sxs-lookup"><span data-stu-id="0e03a-347">Property value inheritance is a feature of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property.</span></span> <span data-ttu-id="0e03a-348">Dziedziczenie wartości właściwości nie jest domyślnie włączona i włączanie go mieć wpływ na wydajność.</span><span class="sxs-lookup"><span data-stu-id="0e03a-348">Property value inheritance is not enabled by default, and enabling it does have some performance implications.</span></span> <span data-ttu-id="0e03a-349">Aby uzyskać więcej informacji, zobacz [dziedziczenie wartości właściwości](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="0e03a-349">For details, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0e03a-350">Mimo że dziedziczenie wartości właściwości może pojawić się działać w przypadku właściwości zależności nie dołączony, zachowanie dziedziczenia właściwości nie dołączony przez niektóre działy obiektu obiektu w drzewie środowiska uruchomieniowego jest niezdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="0e03a-350">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined.</span></span> <span data-ttu-id="0e03a-351">Zawsze używaj <xref:System.Windows.DependencyProperty.RegisterAttached%2A> można zarejestrować właściwości, w którym można określić <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> w metadanych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-351">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span>  
  
 <span data-ttu-id="0e03a-352">Właściwości klasy pochodne <xref:System.Windows.PropertyMetadata> zwykle są zdefiniowane w modelu obiektu jako odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-352">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0e03a-353">Jest to, dzięki czemu można je dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="0e03a-353">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0e03a-354">Jednak po metadanych jest używany jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości zostanie zapieczętowania to wystąpienie metadanych i właściwości, które obejmują szczegółowe informacje na temat metadanych teraz jest uważany za niezmienialny.</span><span class="sxs-lookup"><span data-stu-id="0e03a-354">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0e03a-355">Trwa próba skonfigurowania tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> jest `true` na te metadane wystąpienia zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0e03a-355">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Inherits"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0e03a-356">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="0e03a-356">XAML Text Usage</span></span>  
 <span data-ttu-id="0e03a-357">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0e03a-357">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e03a-358">Poniższy przykład uzyskuje dostęp do metadanych domyślne z różnych zależności pola właściwości, odpytuje wartości różnych <xref:System.Windows.FrameworkPropertyMetadata> właściwości, a informacje są używane do wypełniania tabeli, aby zaimplementować "Przeglądarka metadanych".</span><span class="sxs-lookup"><span data-stu-id="0e03a-358">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0e03a-359">Metadane już zastosowano do operacji właściwości zależności, tak aby metadanych jest zapieczętowany i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-359">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsDataBindingAllowed">
      <MemberSignature Language="C#" Value="public bool IsDataBindingAllowed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDataBindingAllowed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDataBindingAllowed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDataBindingAllowed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDataBindingAllowed : bool" Usage="System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e03a-360">Pobiera wartość wskazującą, czy powiązanie danych jest obsługiwana dla właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0e03a-360">Gets a value that indicates whether data binding is supported for the dependency property.</span></span></summary>
        <value><span data-ttu-id="0e03a-361"><see langword="true" /> Jeśli wiązanie danych jest obsługiwana przez właściwości zależności, do którego stosuje się te metadane; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-361"><see langword="true" /> if data binding is supported on the dependency property to which this metadata applies; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e03a-362">Wartość domyślna to <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-362">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-363">Ta właściwość raporty `false` dla jednej z dwóch warunków możliwe: albo powiązania danych właściwości zależności nie jest dozwolona, ponieważ właściwość zależności jest tylko do odczytu (zgodnie z raportem identyfikator właściwości zależności nie metadanych), lub wartość inna właściwość metadanych, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, jest równa `true` w metadanych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-363">This property reports `false` for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, is set to `true` in this metadata.</span></span> <span data-ttu-id="0e03a-364">Ta właściwość jest uwidaczniana jako udogodnienie, tak aby obiekty wywołujące nie trzeba sprawdzić zarówno <xref:System.Windows.DependencyProperty.ReadOnly%2A> i <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span><span class="sxs-lookup"><span data-stu-id="0e03a-364">This property is exposed as a convenience so that callers do not have to check both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span>  
  
 <span data-ttu-id="0e03a-365">Jeśli próbujesz utworzyć metadanych, który określa, w przeciwnym razie właściwości odczytu/zapisu powinien obsługuje powiązanie danych, należy określić flagę <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> (należy pamiętać, niewielka różnica konwencji nazewnictwa i <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</span><span class="sxs-lookup"><span data-stu-id="0e03a-365">If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> (note the slight naming convention difference versus <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</span></span>  
  
<a name="xamlTextUsage_IsDataBindingAllowed"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0e03a-366">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="0e03a-366">XAML Text Usage</span></span>  
 <span data-ttu-id="0e03a-367">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0e03a-367">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e03a-368">Poniższy przykład uzyskuje dostęp do metadanych domyślne z różnych zależności pola właściwości, odpytuje wartości różnych <xref:System.Windows.FrameworkPropertyMetadata> właściwości, a informacje są używane do wypełniania tabeli, aby zaimplementować "Przeglądarka metadanych".</span><span class="sxs-lookup"><span data-stu-id="0e03a-368">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsNotDataBindable">
      <MemberSignature Language="C#" Value="public bool IsNotDataBindable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotDataBindable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNotDataBindable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotDataBindable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNotDataBindable : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e03a-369">Pobiera lub ustawia wartość wskazującą, czy właściwość zależności obsługuje powiązanie danych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-369">Gets or sets a value that indicates whether the dependency property supports data binding.</span></span></summary>
        <value><span data-ttu-id="0e03a-370"><see langword="true" /> Jeśli właściwość nie obsługuje powiązanie danych; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-370"><see langword="true" /> if the property does not support data binding; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e03a-371">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-371">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-372">Należy zauważyć, że ta właściwość metadanych jest równa `true` specjalnie dla właściwości, które nie powinny obsługiwać powiązania danych, mimo iż właściwości odczytu / zapisu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-372">Note that this metadata property is set to `true` specifically for properties that should not support data binding, despite being read-write properties.</span></span> <span data-ttu-id="0e03a-373">Oczekuje się, że w większości przypadków, w którym zadeklarowano właściwości zależności, wiązanie danych jest pożądane, wiązanie danych jest jednym z kluczowych scenariuszy, w których jest użyteczny właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0e03a-373">The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful.</span></span> <span data-ttu-id="0e03a-374">W odróżnieniu od <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, to nie zmienia jedynie domyślna, która może ulec zmianie w określonym powiązaniu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-374">Unlike <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, this does not merely change a default that can later be changed on a specific binding.</span></span> <span data-ttu-id="0e03a-375">Ustawienie tej właściwości `true` w metadanych dla właściwości zależności metadanych spowoduje wyłączenie wszystkie powiązania przed zastosowaniem ich wartości za pomocą wyrażenia do tej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0e03a-375">Setting this property `true` in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.</span></span>  
  
 <span data-ttu-id="0e03a-376">Powiązanie danych (ponieważ mają one nie setter, który można zastosować zmienionymi wartościami) nie obsługują właściwości zależności tylko do odczytu, ale nadal będzie raportu `false` dla <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span><span class="sxs-lookup"><span data-stu-id="0e03a-376">Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report `false` for <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span> <span data-ttu-id="0e03a-377">Jest to spowodowane właściwości, które odpowiadają <xref:System.Windows.FrameworkPropertyMetadataOptions> wartości informację o parzystości z jak metadane rzeczywistości ustalono, zamiast zawsze raportowanie nazw właściwości może oznaczać zachowanie wynik końcowy.</span><span class="sxs-lookup"><span data-stu-id="0e03a-377">This is because properties that correspond to a <xref:System.Windows.FrameworkPropertyMetadataOptions> values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply.</span></span> <span data-ttu-id="0e03a-378">Aby ustalić, czy danej właściwości zależności pozwala na powiązanie danych, zazwyczaj należy sprawdzić <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="0e03a-378">To determine whether a given dependency property permits data binding, you should usually check <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> instead.</span></span> <span data-ttu-id="0e03a-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> To udogodnienie sprawdzania zarówno <xref:System.Windows.DependencyProperty.ReadOnly%2A> i <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> jako pojedyncza operacja reaguje oczekiwany wynik.</span><span class="sxs-lookup"><span data-stu-id="0e03a-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> is a convenience for checking both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> as a single operation, yielding the expected result.</span></span>  
  
 <span data-ttu-id="0e03a-380">Właściwości klasy pochodne <xref:System.Windows.PropertyMetadata> zwykle są zdefiniowane w modelu obiektu jako odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-380">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0e03a-381">Jest to, dzięki czemu można je dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="0e03a-381">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0e03a-382">Jednak po metadanych jest używany jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości zostanie zapieczętowania to wystąpienie metadanych i właściwości, które obejmują szczegółowe informacje na temat metadanych teraz jest uważany za niezmienialny.</span><span class="sxs-lookup"><span data-stu-id="0e03a-382">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0e03a-383">Trwa próba skonfigurowania tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> jest `true` na te metadane wystąpienia zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0e03a-383">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_IsNotDataBindable"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0e03a-384">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="0e03a-384">XAML Text Usage</span></span>  
 <span data-ttu-id="0e03a-385">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0e03a-385">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0e03a-386">Metadane już zastosowano do operacji właściwości zależności, tak aby metadanych jest zapieczętowany i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-386">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="Journal">
      <MemberSignature Language="C#" Value="public bool Journal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Journal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberSignature Language="VB.NET" Value="Public Property Journal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Journal { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Journal : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e03a-387">Pobiera lub ustawia wartość wskazującą, czy ta właściwość zawiera informacje rejestrowania, który aplikacji lub powinny być przechowywane jako część wykonania rejestrowanie.</span><span class="sxs-lookup"><span data-stu-id="0e03a-387">Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.</span></span></summary>
        <value><span data-ttu-id="0e03a-388"><see langword="true" /> Jeśli rejestrowanie powinna być wykonywana na właściwość zależności te metadane są stosowane do; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-388"><see langword="true" /> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e03a-389">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-389">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-390">Właściwości klasy pochodne <xref:System.Windows.PropertyMetadata> zwykle są zdefiniowane w modelu obiektu jako odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-390">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0e03a-391">Jest to, dzięki czemu można je dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="0e03a-391">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0e03a-392">Jednak po metadanych jest używany jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości zostanie zapieczętowania to wystąpienie metadanych i właściwości, które obejmują szczegółowe informacje na temat metadanych teraz jest uważany za niezmienialny.</span><span class="sxs-lookup"><span data-stu-id="0e03a-392">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0e03a-393">Trwa próba skonfigurowania tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> jest `true` na te metadane wystąpienia zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0e03a-393">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Journal"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0e03a-394">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="0e03a-394">XAML Text Usage</span></span>  
 <span data-ttu-id="0e03a-395">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0e03a-395">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0e03a-396">Metadane już zastosowano do operacji właściwości zależności, tak aby metadanych jest zapieczętowany i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-396">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="T:System.Windows.Navigation.JournalEntry" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="protected override void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Merge(class System.Windows.PropertyMetadata baseMetadata, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Merge (baseMetadata As PropertyMetadata, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Merge(System::Windows::PropertyMetadata ^ baseMetadata, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit&#xA;override this.Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit" Usage="frameworkPropertyMetadata.Merge (baseMetadata, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="baseMetadata"><span data-ttu-id="0e03a-397">Podstawowy metadanych scalania.</span><span class="sxs-lookup"><span data-stu-id="0e03a-397">The base metadata to merge.</span></span></param>
        <param name="dp"><span data-ttu-id="0e03a-398">Właściwości zależności te metadane są stosowane do.</span><span class="sxs-lookup"><span data-stu-id="0e03a-398">The dependency property this metadata is being applied to.</span></span></param>
        <summary><span data-ttu-id="0e03a-399">Umożliwia scalanie metadanych źródła za pomocą podstawowej metadanych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-399">Enables a merge of the source metadata with base metadata.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-400">Ta metoda jest używana wewnętrznie, gdy metadane są zastępowane.</span><span class="sxs-lookup"><span data-stu-id="0e03a-400">This method is used internally when metadata is being overridden.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="0e03a-401">Klasy, które wynikają z <see cref="T:System.Windows.PropertyMetadata" /> (lub ta klasa szczególnie) powinny przesłaniać tę metodę, aby uwzględnić wszystkie właściwości metadanych dodali w implementacji.</span><span class="sxs-lookup"><span data-stu-id="0e03a-401">Classes that derive from <see cref="T:System.Windows.PropertyMetadata" /> (or this class particularly) should override this method to account for any metadata properties they have added in their implementations.</span></span> <span data-ttu-id="0e03a-402">Na przykład implementacji, że dodano nową wartość wyliczenia flagwise i <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementacji następnie powinien mieć możliwość łączenia tych flag poprawnie.</span><span class="sxs-lookup"><span data-stu-id="0e03a-402">For instance, your implementation might have added a new flagwise enumeration value, and the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation should then be able to combine those flags correctly.</span></span>  
  
<span data-ttu-id="0e03a-403">Zawsze należy wywoływać implementację podstawową przed Twojej własnej implementacji, ponieważ Podstawowa implementacja zajmuje się scalanie wszystkich właściwości, które są już zdefiniowane na poprzednich typów w hierarchii.</span><span class="sxs-lookup"><span data-stu-id="0e03a-403">Always call the base implementation prior to your own implementation, because the base implementation takes care of merging all the properties already defined on previous types in the hierarchy.</span></span>  
  
<span data-ttu-id="0e03a-404">Zachowanie dodane przez <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementacji <see cref="T:System.Windows.FrameworkPropertyMetadata" /> jest fakt, że określone właściwości poziomie struktury WPF w metadanych, takich jak <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> są łączone w logiczny lub operacji.</span><span class="sxs-lookup"><span data-stu-id="0e03a-404">The behavior added by the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation in <see cref="T:System.Windows.FrameworkPropertyMetadata" /> is that specific WPF framework-level properties in the metadata such as <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> are combined in a bitwise or operation.</span></span>  
  
<span data-ttu-id="0e03a-405"><see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> Zachowanie implementuje również zachowanie podczas zastąpienia metadanych właściwości modelu na istniejącej właściwości zależności, wywołując <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />, przy użyciu metadanych zastąpienia, który jest <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-405">The <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> behavior also implements the behavior when you override the property metadata on an existing dependency property by calling <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />, using override metadata that is <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</span></span></para></block>
        <altmember cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="OnApply">
      <MemberSignature Language="C#" Value="protected override void OnApply (System.Windows.DependencyProperty dp, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnApply(class System.Windows.DependencyProperty dp, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnApply (dp As DependencyProperty, targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnApply(System::Windows::DependencyProperty ^ dp, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member OnApply : System.Windows.DependencyProperty * Type -&gt; unit&#xA;override this.OnApply : System.Windows.DependencyProperty * Type -&gt; unit" Usage="frameworkPropertyMetadata.OnApply (dp, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="0e03a-406">Właściwości zależności, do którego zastosowano metadanych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-406">The dependency property to which the metadata has been applied.</span></span></param>
        <param name="targetType"><span data-ttu-id="0e03a-407">Typ skojarzony z metadanych, jeśli jest to metadane specyficzne dla danego typu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-407">The type associated with this metadata if this is type-specific metadata.</span></span> <span data-ttu-id="0e03a-408">Jeśli jest to domyślny metadanych, ta wartość może być <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-408">If this is default metadata, this value can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="0e03a-409">Wywołuje się, gdy metadane zostały doliczone do właściwości, co oznacza, że metadane jest zapieczętowany.</span><span class="sxs-lookup"><span data-stu-id="0e03a-409">Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-410">Wszelkie zmienność struktury danych <xref:System.Windows.FrameworkPropertyMetadata> wystąpienia powinien być oznaczony jako niezmienialny. gdy ta metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="0e03a-410">Any mutability of the data structure of a <xref:System.Windows.FrameworkPropertyMetadata> instance should be marked as immutable when this method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="0e03a-411"><see cref="T:System.Windows.FrameworkPropertyMetadata" /> Implementacja tej metody nie działa poza wywołanie implementację podstawową.</span><span class="sxs-lookup"><span data-stu-id="0e03a-411">The <see cref="T:System.Windows.FrameworkPropertyMetadata" /> implementation of this method does nothing beyond calling the base implementation.</span></span></para></block>
        <altmember cref="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesInheritanceBehavior">
      <MemberSignature Language="C#" Value="public bool OverridesInheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesInheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesInheritanceBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesInheritanceBehavior { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesInheritanceBehavior : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e03a-412">Pobiera lub ustawia wartość wskazującą, czy oceny dziedziczenie wartości właściwości powinien obejmować niektórych zawartości granice, w drzewie logicznym elementów.</span><span class="sxs-lookup"><span data-stu-id="0e03a-412">Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.</span></span></summary>
        <value><span data-ttu-id="0e03a-413"><see langword="true" /> Jeśli dziedziczenie wartości właściwości powinny obejmować niektórych granice zawartości; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-413"><see langword="true" /> if the property value inheritance should span across certain content boundaries; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e03a-414">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-414">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-415">Te metadane raporty rzadko stosowana modyfikacji zachowanie dziedziczenie wartości właściwości granice elementu nadrzędnego specjalne element podrzędny.</span><span class="sxs-lookup"><span data-stu-id="0e03a-415">This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries.</span></span> <span data-ttu-id="0e03a-416">Canonical Przykładem takich granic znajduje się zawartość <xref:System.Windows.Controls.Frame>, gdzie <xref:System.Windows.Controls.Frame> zawartości może uzyskać załadowany ponownie, niezależnie od istnienia <xref:System.Windows.Controls.Frame>.</span><span class="sxs-lookup"><span data-stu-id="0e03a-416">The canonical example of such a boundary is the contents of a <xref:System.Windows.Controls.Frame>, where the <xref:System.Windows.Controls.Frame> content might get reloaded independently of the existence of the <xref:System.Windows.Controls.Frame>.</span></span> <span data-ttu-id="0e03a-417">Zachowanie systemu żądaną właściwość jest, że dziedziczenie wartości właściwości nie powinny przechodzą przez zawartości <xref:System.Windows.Controls.Frame>, ponieważ te zawartość może być elementy, które hosting ramki aplikacji lub przez kontrolowanie.</span><span class="sxs-lookup"><span data-stu-id="0e03a-417">The desired property system behavior is that property value inheritance should not traverse into the contents of the <xref:System.Windows.Controls.Frame>, because these contents might be elements that the application hosting the frame does not own or control.</span></span> <span data-ttu-id="0e03a-418">Określanie metadanych za pomocą <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> równa `true`, a także jak określanie <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> jako `true`, spowoduje, że właściwość, dla którego stosowana jest metadanych jako dziedziczne nawet na <xref:System.Windows.Controls.Frame> granic lub podobne granic.</span><span class="sxs-lookup"><span data-stu-id="0e03a-418">Specifying metadata with <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> set to `true`, as well as specifying <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> as `true`, will cause the property on which the metadata is applied to be inheritable even across the <xref:System.Windows.Controls.Frame> boundary or similar boundaries.</span></span>  
  
 <span data-ttu-id="0e03a-419">Właściwości klasy pochodne <xref:System.Windows.PropertyMetadata> zwykle są zdefiniowane w modelu obiektu jako odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-419">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0e03a-420">Jest to, dzięki czemu można je dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="0e03a-420">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0e03a-421">Jednak po metadanych jest używany jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości zostanie zapieczętowania to wystąpienie metadanych i właściwości, które obejmują szczegółowe informacje na temat metadanych teraz jest uważany za niezmienialny.</span><span class="sxs-lookup"><span data-stu-id="0e03a-421">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0e03a-422">Trwa próba skonfigurowania tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> jest `true` na te metadane wystąpienia zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0e03a-422">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_OverridesInheritanceBehavior"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0e03a-423">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="0e03a-423">XAML Text Usage</span></span>  
 <span data-ttu-id="0e03a-424">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0e03a-424">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0e03a-425">Metadane już zastosowano do operacji właściwości zależności, tak aby metadanych jest zapieczętowany i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-425">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="SubPropertiesDoNotAffectRender">
      <MemberSignature Language="C#" Value="public bool SubPropertiesDoNotAffectRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="VB.NET" Value="Public Property SubPropertiesDoNotAffectRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SubPropertiesDoNotAffectRender { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SubPropertiesDoNotAffectRender : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0e03a-426">Pobiera lub ustawia wartość wskazującą, czy właściwości podrzędnych właściwości zależności nie wpływają na renderowanie krawędzi zawierającego go obiektu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-426">Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.</span></span></summary>
        <value><span data-ttu-id="0e03a-427"><see langword="true" /> w przypadku zmiany wartości właściwości podrzędnych nie wpływają na renderowanie, jeśli zostały zmienione; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-427"><see langword="true" /> if changes to sub-property values do not affect rendering if changed; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="0e03a-428">Wartość domyślna to <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0e03a-428">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e03a-429">Ta opcja metadanych jest odpowiednie dla właściwości zależności, które są typami odwołań, gdzie ten typ ma wartości właściwości swój własny.</span><span class="sxs-lookup"><span data-stu-id="0e03a-429">This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own.</span></span> <span data-ttu-id="0e03a-430">Zazwyczaj logiki systemu układ jest przyjęto założenie, że wszystkie właściwości zależności za pomocą właściwości podrzędnych potencjalnie wpłynie na układ, ponieważ sprawdzanie wszystkich właściwości podrzędnych zmian jest bardziej czasochłonne niż rzeczywiście uruchamianie innego renderowania — dostęp próbny.</span><span class="sxs-lookup"><span data-stu-id="0e03a-430">Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass.</span></span> <span data-ttu-id="0e03a-431">Ustawienie tej opcji na `true` przydaje się do optymalizacji wydajności implementacji systemu uzyskiwania informacji na temat poziomu układ framework WPF.</span><span class="sxs-lookup"><span data-stu-id="0e03a-431">Setting this option to `true` is useful for optimizing performance of the WPF framework level layout system implementation.</span></span>  
  
 <span data-ttu-id="0e03a-432">Właściwości klasy pochodne <xref:System.Windows.PropertyMetadata> zwykle są zdefiniowane w modelu obiektu jako odczytu i zapisu.</span><span class="sxs-lookup"><span data-stu-id="0e03a-432">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0e03a-433">Jest to, dzięki czemu można je dostosować po zainicjowaniu wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="0e03a-433">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0e03a-434">Jednak po zużyciu metadanych jako część wywołania <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, system właściwości zostanie zapieczętowania to wystąpienie metadanych i właściwości, które obejmują szczegółowe informacje na temat metadanych teraz jest uważany za niezmienialny.</span><span class="sxs-lookup"><span data-stu-id="0e03a-434">However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0e03a-435">Trwa próba skonfigurowania tej właściwości po <xref:System.Windows.PropertyMetadata.IsSealed%2A> jest `true` na te metadane wystąpienia zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0e03a-435">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_SubPropertiesDoNotAffectRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0e03a-436">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="0e03a-436">XAML Text Usage</span></span>  
 <span data-ttu-id="0e03a-437">Elementy członkowskie tej klasy nie są zwykle używane w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0e03a-437">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0e03a-438">Metadane już zastosowano do operacji właściwości zależności, tak aby metadanych jest zapieczętowany i nie można ustawić właściwości metadanych.</span><span class="sxs-lookup"><span data-stu-id="0e03a-438">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span></span></exception>
        <altmember cref="T:System.Windows.Freezable" />
      </Docs>
    </Member>
  </Members>
</Type>