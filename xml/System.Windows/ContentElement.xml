<Type Name="ContentElement" FullName="System.Windows.ContentElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e8917d97a28d7c82456fcb8eecf3e5ca2abdfc54" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69434808" /></Metadata><TypeSignature Language="C#" Value="public class ContentElement : System.Windows.DependencyObject, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ContentElement extends System.Windows.DependencyObject implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ContentElement" />
  <TypeSignature Language="VB.NET" Value="Public Class ContentElement&#xA;Inherits DependencyObject&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContentElement : System::Windows::DependencyObject, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <TypeSignature Language="F#" Value="type ContentElement = class&#xA;    inherit DependencyObject&#xA;    interface IInputElement&#xA;    interface IAnimatable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Udostępnia klasę bazową na poziomie rdzenia WPF dla elementów zawartości. Elementy zawartości są przeznaczone do prezentacji w stylu przepływu przy użyciu intuicyjnego modelu układu zorientowanego na oznakowanie i skomplikowanego modelu obiektów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement>definiuje następujące typowe cechy zawartości:  
  
-   Klawiatur Wszystkie <xref:System.Windows.ContentElement> klasy pochodne zapewniają obsługę podstawowego przechwytywania danych wejściowych z klawiatury, myszy, operacji przeciągania i upuszczania, kontrolek pióra i akceleratorów.  
  
-   Fokus Wszystkie <xref:System.Windows.ContentElement> klasy pochodne mogą być możliwe do skoncentrowania. (Jednak domyślny stan skoncentrowany dla <xref:System.Windows.ContentElement> klasy bazowej to. `false` Aby uzyskać szczegółowe informacje na temat sposobu <xref:System.Windows.ContentElement> skoncentrowania, zobacz <xref:System.Windows.ContentElement.Focusable%2A>.) Ponadto ta klasa zawiera [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] , że można użyć do przechodzenia fokusu między powiązanymi elementami.  
  
-   Zdarzenia: <xref:System.Windows.ContentElement> zawiera zdarzenia powiązane z danymi wejściowymi i fokusem; zawiera również zdarzenia dotyczące zmian stanu. W wielu przypadkach zdarzenia są <xref:System.Windows.ContentElement> kierowane do zdarzeń. W niektórych przypadkach zdarzenia kierowane mają zarówno tunelowanie, jak i Propagacja strategii routingu, wywoływane jako oddzielne zdarzenia w odpowiedzi na ten sam stan lub warunek. Ponadto definiuje <xref:System.Windows.ContentElement> [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] , które mogą zgłaszać zdarzenia kierowane i które mogą dodawać lub usuwać programy obsługi zdarzeń.  
  
 <xref:System.Windows.ContentElement>udostępnia wiele wspólnych [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] z <xref:System.Windows.UIElement>. Te typowe [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] nie pochodzą z dziedziczenia klasy udostępnionej. Jednak współużytkują wspólne nazewnictwo, podobne zachowanie i podobną wewnętrzną [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] implementację w każdej klasie. Podobieństwo wynika z <xref:System.Windows.ContentElement> faktu <xref:System.Windows.UIElement> , że są to wszystkie klasy, które są elementami podstawowymi, chociaż każdy z nich ma różne intencje związane z zachowaniem modelu obiektu znaczników.  
  
 W szczególności, <xref:System.Windows.UIElement> od <xref:System.Windows.Media.Visual>, który zapewnia obsługę <xref:System.Windows.ContentElement> grafiki na niższym poziomie na potrzeby renderowania w prostokątnym regionie w ramach okna złożonego, podczas gdy <xref:System.Windows.ContentElement> jest to wynikiem renderowania, aby zwiększyć koncepcję często obsługiwane są scenariusze dotyczące dokumentów, takie jak przepływ i Zawijanie. Te dwie pokrewne klasy również implementują typowe interfejsy <xref:System.Windows.IInputElement> i <xref:System.Windows.Media.Animation.IAnimatable>.  

 ## <a name="notes-to-inheritors"></a>Uwagi dotyczące dziedziczenia

 <xref:System.Windows.ContentElement> Klasa nie definiuje jeszcze wszystkich aspektów kompletnego elementu zawartości dla prezentacji w stylu przepływu. <xref:System.Windows.FrameworkContentElement>jest bezpośrednio pochodną klasą <xref:System.Windows.ContentElement>. <xref:System.Windows.FrameworkContentElement>zawiera pełniejszy zbiór dodatkowych elementów członkowskich, które obsługują renderowanie <xref:System.Windows.FrameworkContentElement> w obrębie hosta zawartości i korzystanie z systemu układu platformy WPF Framework.

 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.UIElement" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContentElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.ContentElement" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje procedurę obsługi zdarzeń kierowanych dla określonego zdarzenia kierowanego, dodając procedurę obsługi do kolekcji programu obsługi w bieżącym elemencie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="contentElement.AddHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identyfikator dla zdarzenia kierowanego, które ma być obsłużone.</param>
        <param name="handler">Odwołanie do implementacji programu obsługi.</param>
        <summary>Dodaje procedurę obsługi zdarzeń kierowanych dla określonego zdarzenia kierowanego, dodając procedurę obsługi do kolekcji programu obsługi w bieżącym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można dodać tę samą procedurę obsługi dla tego samego zdarzenia wiele razy, nie wywołując wyjątku. Jednakże procedura obsługi jest wywoływana wielokrotnie, gdy zdarzenie jest obsługiwane. W związku z tym należy wziąć pod uwagę, jak takie zachowanie może mieć skutki uboczne, które należy uwzględnić w implementacji programu obsługi.  
  
 Ta metoda służy zwykle do zapewnienia implementacji metody dostępu "Add" dla [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] wzorca dostępu do zdarzenia niestandardowego zdarzenia kierowanego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="contentElement.AddHandler (routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identyfikator dla zdarzenia kierowanego, które ma być obsłużone.</param>
        <param name="handler">Odwołanie do implementacji programu obsługi.</param>
        <param name="handledEventsToo"><see langword="true" />zarejestrowanie procedury obsługi w taki sposób, aby była wywoływana nawet wtedy, gdy zdarzenie trasowane jest oznaczone jako obsługiwane w danych zdarzenia. <see langword="false" /> w celu zarejestrowania programu obsługi z domyślnym warunkiem, że nie będzie on wywoływany, jeśli zdarzenie trasowane zostało już oznaczone jako obsługiwane.  
  
Wartość domyślna to <see langword="false" />.  
  
Nie należy rutynowo monitować o obsługę zdarzenia kierowanego.</param>
        <summary>Dodaje procedurę obsługi zdarzeń kierowanych dla określonego zdarzenia kierowanego, dodając procedurę obsługi do kolekcji programu obsługi w bieżącym elemencie. Określ <paramref name="handledEventsToo" /> ,<see langword="true" /> że mają być wywoływane dostarczone procedury obsługi dla zdarzenia kierowanego, które zostało już oznaczone jako obsługiwane przez inny element wzdłuż trasy zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przetwarzanie zdarzeń wejściowych niskiego poziomu w praktyce jest złożonym zadaniem. Wiele formantów implementuje zachowanie w przypadku, gdy określone zdarzenie jest oznaczone jako obsłużone i jest zastępowane przez inne bardziej intuicyjne zdarzenie. Ogólnie rzecz biorąc, kontrolka spowoduje oznaczenie zdarzenia wejściowego platformy jako obsługiwanego, jeśli istnieje pewien zamiar projektu. W niektórych scenariuszach te operacje związane z projektowaniem mogą nie być określone w wymaganiu dla zdarzenia wejściowego. Jest to konieczne w przypadku takich scenariuszy, które rejestrują `true` programy obsługi zgodnie z `handledEventsToo` oczekiwaniami. Nie należy jednak wykonywać tej procedury. Wywoływanie programów obsługi w odpowiedzi na wszystkie zdarzenia, nawet jeśli są obsługiwane, będzie komplikuje swoją logikę przetwarzania zdarzeń aplikacji. Jeśli logika obsługi jest istotna, może pojawić się spadek wydajności. Należy zastrzec użycie dołączanych programów obsługi dla już obsłużonych zdarzeń, które są już wykryte podczas procesu tworzenia, które niektóre kontrolki obsługują zdarzenia, które nadal mają być obsługiwane przez logikę aplikacji.  
  
 Inną techniką w celu uniknięcia zachowania klas dla niektórych kombinacji kontroli zdarzeń jest użycie wersji zapoznawczej tego zdarzenia. Na przykład jeśli <xref:System.Windows.ContentElement.MouseLeftButtonDown> jest oznaczone jako obsługiwane przez obsługę klasy, można <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> zamiast tego dodać procedury obsługi.  
  
 Można dodać tę samą procedurę obsługi dla tego samego zdarzenia wiele razy, nie wywołując wyjątku. Jednakże procedura obsługi jest wywoływana wielokrotnie, gdy zdarzenie jest obsługiwane. W związku z tym należy wziąć pod uwagę, jak takie zachowanie może mieć skutki uboczne, które należy uwzględnić w implementacji programu obsługi.  
  
 Ta metoda służy zwykle do zapewnienia implementacji metody dostępu "Add" dla [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] wzorca dostępu do zdarzenia niestandardowego zdarzenia kierowanego.  
  
   
  
## Examples  
 Poniższy przykład implementuje procedurę obsługi wywołaną na <xref:System.Windows.FrameworkElement.Initialized> zdarzeniu na stronie, która dołącza zdefiniowany program obsługi do jednego z nazwanych elementów na stronie przy użyciu. `handledEventsToo` `true` Ta procedura obsługi zostanie wywołana nawet wtedy, gdy inny element wzdłuż trasy oznaczył dane zdarzenia udostępnionego jako obsłużone przed osiągnięciem elementu obsługi w marszrucie.  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AddToEventRoute : System.Windows.EventRoute * System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.AddToEventRoute (route, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route">Trasa zdarzenia, do której są dodawane programy obsługi.</param>
        <param name="e">Dane zdarzenia, które są używane do dodawania programów obsługi. Ta metoda używa <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> Właściwości argumentów do tworzenia programów obsługi.</param>
        <summary>Dodaje programy obsługi do określonego <see cref="T:System.Windows.EventRoute" /> dla bieżącej <see cref="T:System.Windows.ContentElement" /> kolekcji programu obsługi zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody dla elementów hosta zawartości (niezależnie od tego, czy <xref:System.Windows.IContentHost>implementują), aby dodać programy obsługi dla elementów podrzędnych hosta zawartości do hosta <xref:System.Windows.EventRoute>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.ContentElement.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy ten element może być używany jako element docelowy operacji przeciągania i upuszczania.</summary>
        <value><see langword="true" />Jeśli ten element może być używany jako element docelowy operacji przeciągania i upuszczania; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacje przeciągania i upuszczania nie są domyślnie włączone i muszą być obsługiwane celowo przez ustawienie <xref:System.Windows.ContentElement.AllowDrop%2A>. `true` Poza tym ustawieniem podstawowym zachowanie funkcji przeciągania i upuszczania jest całkowicie specyficzne dla implementacji i nie jest zdefiniowane przez <xref:System.Windows.ContentElement> ani w żadnej innej klasie elementu podstawowego. Niektóre kontrolki, na przykład <xref:System.Windows.Controls.RichTextBox>, mają zachowanie domyślne, ale żadna <xref:System.Windows.ContentElement> Klasa pochodna nie ma takiego zachowania. Aby uzyskać więcej informacji na temat przeciągania i upuszczania, zobacz [Omówienie przeciągania i upuszczania](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).  
  
 <xref:System.Windows.FrameworkContentElement>przesłania metadane dla tej właściwości zależności w implementacji. W celu <xref:System.Windows.FrameworkContentElement> wyznaczenia, że ta właściwość zezwala na dziedziczenie<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> wartości `true` właściwości (jest w metadanych). Dziedziczenie wartości właściwości w tym kontekście oznacza, że jeśli istnieją elementy podrzędne bez żadnej innej wartości <xref:System.Windows.ContentElement.AllowDrop%2A> dla przypisanych za pośrednictwem wartości lokalnych lub stylów, wartość najbliższego nadrzędnego elementu z tą wartością przypisaną (ponownie w stylach domyślnie wartości lub wartość lokalna), a następnie wartość z tego elementu nadrzędnego jest przypisywana do wszystkich nieprzypisanych elementów podrzędnych przez system właściwości. Oznacza to, że można określić, czy zezwolić na upuszczanie operacji w elemencie głównym, a następnie propagować wartość do <xref:System.Windows.FrameworkContentElement> wszystkich elementów podrzędnych, które nie przypisały do nich `false`wartości.  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.AllowDropProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład ustawia <xref:System.Windows.ContentElement.AllowDrop%2A> w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 [!code-xaml[ContentElementsSmorgasbord#AllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#allowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowDropProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AllowDropProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.ContentElement.AllowDrop" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Stosuje animację do określonej właściwości zależności w tym elemencie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit" Usage="contentElement.ApplyAnimationClock (dp, clock)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">Identyfikator właściwości do animacji.</param>
        <param name="clock">Zegar animacji, który kontroluje i deklaruje animację.</param>
        <summary>Stosuje animację do określonej właściwości zależności w tym elemencie. Wszystkie istniejące animacje zostaną zatrzymane i zastąpione nową animacją.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby usunąć animację z właściwości, należy określić identyfikator dla tej właściwości `dp` , a następnie określić `clock` jako. `null` Spowoduje to usunięcie animacji, a właściwość animowana ma ustawioną wartość bazową. Pierwotnie skojarzony zegar animacji nie jest jednak zatrzymywany. Wszystkie inne animacje przypisane do tego zegara będą nadal działać.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="contentElement.ApplyAnimationClock (dp, clock, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość do animacji.</param>
        <param name="clock">Zegar animacji, który kontroluje i deklaruje animację.</param>
        <param name="handoffBehavior">Wartość wyliczenia. Wartość domyślna to <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, co spowoduje zatrzymanie wszelkich istniejących animacji i zamienienie na nowe.</param>
        <summary>Stosuje animację do określonej właściwości zależności tego elementu, z możliwością określenia, co się stanie, jeśli właściwość ma już uruchomioną animację.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby usunąć animację z właściwości, należy określić identyfikator dla tej właściwości `dp` , a następnie określić `clock` jako. `null` Spowoduje to usunięcie animacji, a właściwość animowana ma ustawioną wartość bazową. Pierwotnie skojarzony zegar animacji nie jest jednak zatrzymywany. Wszystkie inne animacje przypisane do tego zegara będą nadal działać.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCaptured : bool" Usage="System.Windows.ContentElement.AreAnyTouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy do tego elementu jest przechwytywany co najmniej jeden element dotykowy.</summary>
        <value><see langword="true" />w przypadku przechwycenia co najmniej jednej dotyku do tego elementu; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.ContentElement.AreAnyTouchesCaptured" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCapturedWithin : bool" Usage="System.Windows.ContentElement.AreAnyTouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy co najmniej jedna dotknięcie jest przechwytywana do tego elementu lub do żadnych elementów podrzędnych w jego drzewie wizualnym.</summary>
        <value><see langword="true" />Jeśli co najmniej jedna dotknięcie jest przechwytywana do tego elementu lub dowolnego elementu podrzędnego w jego drzewie wizualnym; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesDirectlyOver : bool" Usage="System.Windows.ContentElement.AreAnyTouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy dla tego elementu zostanie naciśnięta co najmniej jedna dotknięcie.</summary>
        <value><see langword="true" />w przypadku naciśnięcia co najmniej jednego dotknięcia tego elementu; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesOver : bool" Usage="System.Windows.ContentElement.AreAnyTouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy co najmniej jedna dotknięcie jest wciśnięta nad tym elementem lub wszelkimi elementami podrzędnymi w jego drzewie wizualnym.</summary>
        <value><see langword="true" />Jeśli co najmniej jedna dotknięcie jest wciśnięta nad tym elementem lub wszelkimi elementami podrzędnymi w jego drzewie wizualnym; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.AreAnyTouchesOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.ContentElement.AreAnyTouchesOver" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Uruchamia animację dla określonej animowanej właściwości w tym elemencie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit" Usage="contentElement.BeginAnimation (dp, animation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość do animacji, która jest określona jako identyfikator właściwości zależności.</param>
        <param name="animation">Oś czasu animacji, która ma zostać uruchomiona.</param>
        <summary>Uruchamia animację dla określonej animowanej właściwości w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas sprawdzania, czy właściwość jest animowana, należy zauważyć, że animacja zacznie działać i będzie traktowana jako animowana, gdy zostanie wyrenderowana pierwsza ramka poza nieanimowanym punktem początkowym.  
  
 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> Jeśli`animation` jest ,`null`wówczas wszystkie bieżące animacje są usuwane i bieżąca wartość właściwości jest utrzymywana.  
  
 Jeśli cała `animation` wartość to `null`, wszystkie animacje są usuwane z właściwości, a wartość właściwości przywraca jej wartość bazową. Pierwotnie skojarzona oś czasu animacji nie jest jednak zatrzymywana. Wszystkie inne animacje przypisane do tej osi czasu będą nadal działać.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="contentElement.BeginAnimation (dp, animation, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość do animacji, która jest określona jako identyfikator właściwości zależności.</param>
        <param name="animation">Oś czasu animacji, która ma zostać zastosowana.</param>
        <param name="handoffBehavior">Wartość wyliczenia określająca sposób interakcji nowej animacji z dowolnym bieżącym (uruchomionym) animacjami, które mają już wpływ na wartość właściwości.</param>
        <summary>Uruchamia konkretną animację dla określonej animowanej właściwości w tym elemencie z opcją określenia, co się stanie, jeśli właściwość ma już uruchomioną animację.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas sprawdzania, czy właściwość jest animowana, należy zauważyć, że animacja zacznie działać i będzie traktowana jako animowana, gdy zostanie wyrenderowana pierwsza ramka poza nieanimowanym punktem początkowym.  
  
 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> Jeśli`animation` jest ,`null`wówczas wszystkie bieżące animacje są usuwane i bieżąca wartość właściwości jest utrzymywana.  
  
 Jeśli cała `animation` wartość to `null`, wszystkie animacje są usuwane z właściwości, a wartość właściwości przywraca jej wartość bazową. Pierwotnie skojarzona oś czasu animacji nie jest jednak zatrzymywana. Wszystkie inne animacje przypisane do tej osi czasu będą nadal działać.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberSignature Language="F#" Value="abstract member CaptureMouse : unit -&gt; bool&#xA;override this.CaptureMouse : unit -&gt; bool" Usage="contentElement.CaptureMouse " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Próbuje wymusić przechwycenie wskaźnika myszy do tego elementu.</summary>
        <returns><see langword="true" />Jeśli mysz została przechwycona pomyślnie; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby można było przechwycić element, musi on być włączony. Sprawdź, <xref:System.Windows.ContentElement.IsEnabled%2A> czy `true` przed wywołaniem <xref:System.Windows.ContentElement.CaptureMouse%2A>.  
  
 W <xref:System.Windows.ContentElement.CaptureMouse%2A> `true` `true`przypadku wywołania zwrotnego jest również. <xref:System.Windows.ContentElement.IsMouseCaptured%2A>  
  
 Jeśli wywołanie <xref:System.Windows.ContentElement.CaptureMouse%2A> zwrotne zwraca `true`, <xref:System.Windows.ContentElement.GotMouseCapture> zdarzenia <xref:System.Windows.ContentElement.IsMouseCapturedChanged> i są wywoływane, <xref:System.Windows.ContentElement.CaptureMouse%2A> z <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> w przypadku danych zdarzenia raportowanych jako element, w którym wywoływana jest metoda. Jeśli wymusisz przechwytywanie, możesz zakłócać istniejące przechwycenia — szczególnie w przypadku przechwytywania, które odnoszą się do przeciągania i upuszczania za pomocą myszy.  
  
 Aby wyczyścić funkcję przechwytywania myszy ze wszystkich elementów, <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> należy wywołać `element` polecenie z parametrem dostarczonym jako `null`.  
  
   
  
## Examples  
 Poniższy przykład przechwytuje funkcję przechwytywania myszą lub wydaniami, w zależności od tego, czy mysz jest już przechwycona przez element. Należy zauważyć, że w tym przykładzie rzutowanie potencjalnego elementu docelowego przechwytywania <xref:System.Windows.IInputElement> na interfejs i w ten sposób początkowo <xref:System.Windows.IInputElement.CaptureMouse%2A?displayProperty=nameWithType> wywołuje metodę. Rzutowanie <xref:System.Windows.IInputElement> na to technika, która jest przydatna, jeśli nie masz pewności, czy element, który ma być przechwycony, <xref:System.Windows.UIElement> jest myszą lub <xref:System.Windows.ContentElement>. Rzutowanie interfejsu i wywołanie metody interfejsu następnie wywołuje odpowiednią implementację CaptureMouse specyficzną dla określonego typu, bez konieczności rzutowania wersji próbnej <xref:System.Windows.ContentElement>na <xref:System.Windows.UIElement> lub. Ta sama technika rzutowania działa dla innych członków <xref:System.Windows.IInputElement> , którzy definiują wiele zdarzeń związanych z danymi wejściowymi i innych metod związanych z danymi wejściowymi.  
  
 [!code-csharp[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#ismousecaptured)]
 [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberSignature Language="F#" Value="abstract member CaptureStylus : unit -&gt; bool&#xA;override this.CaptureStylus : unit -&gt; bool" Usage="contentElement.CaptureStylus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Próbuje wymusić przechwycenie pióra do tego elementu.</summary>
        <returns><see langword="true" />Jeśli pióro zostało pomyślnie przechwycone; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja oparta na podstawowym domyślnym urządzeniu pisakowym zawsze zwraca wartość `true`. Jeśli jednak rozszerzasz urządzenia wejściowe, które zapewniają implementację urządzenia dla systemu wejściowego, można utworzyć system z alternatywną implementacją urządzenia pióra, która może zwracać różne wyniki.  
  
 Gdy element przechwytuje pióro, otrzymuje dane wejściowe pióra, nawet jeśli pióro znajduje się poza granicami. Pióro jest zazwyczaj przechwytywane tylko podczas operacji przeciągania i upuszczania.  
  
 Wywołanie tej metody wywołuje podstawową metodę <xref:System.Windows.Input.Stylus> <xref:System.Windows.Input.Stylus.Capture%2A>statyczną. Rzeczywiste zachowanie przechwytywania jest implementowane przez aktywną implementację urządzenia pióra.  
  
 Aby można było przechwycić element, musi on być włączony. Sprawdź, <xref:System.Windows.ContentElement.IsEnabled%2A> czy `true` przed wywołaniem <xref:System.Windows.ContentElement.CaptureStylus%2A>zostanie zwrócone.  
  
 Jeśli wywołanie <xref:System.Windows.ContentElement.CaptureStylus%2A> zwrotne `true`, <xref:System.Windows.ContentElement.IsStylusCaptured%2A> jest `true`również.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.CaptureTouch : System.Windows.Input.TouchDevice -&gt; bool" Usage="contentElement.CaptureTouch touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Urządzenie do przechwycenia.</param>
        <summary>Podejmuje próbę wymuszenia przechwycenia dotyku do tego elementu.</summary>
        <returns><see langword="true" />Jeśli określony tryb dotyku jest przechwytywany do tego elementu; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.CaptureTouch%2A>zwraca `false` ,<xref:System.Windows.Input.TouchDevice> jeśli jest aktualnie przechwytywany do innego elementu.  
  
 Jeśli <xref:System.Windows.ContentElement.CaptureTouch%2A> zwraca `true` ,<xref:System.Windows.ContentElement.GotTouchCapture> to zdarzenie jest wywoływane.  
  
 Aby zwolnić przechwycenie jednego dotknięcia z tego elementu, użyj <xref:System.Windows.ContentElement.ReleaseTouchCapture%2A> metody i określ urządzenie dotykowe do wydania. Aby wypróbować wszystkie dotknięcia tego elementu, użyj <xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="touchDevice" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandBindings : System.Windows.Input.CommandBindingCollection" Usage="System.Windows.ContentElement.CommandBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję <see cref="T:System.Windows.Input.CommandBinding" /> obiektów, które są skojarzone z tym elementem.</summary>
        <value>Kolekcja wszystkich <see cref="T:System.Windows.Input.CommandBinding" /> obiektów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Input.CommandBinding> umożliwia obsługę poleceń dla określonego polecenia dla tego elementu i deklaruje połączenie między poleceniem, jego zdarzeniami i procedurami obsługi, które są dołączone do tego elementu.  
  
 Innym typowym sposobem wypełnienia <xref:System.Windows.ContentElement.CommandBindings%2A> kolekcji jest użycie <xref:System.Windows.Input.CommandManager> metod programistycznie.  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *oneOrMoreCommandBindings*  
 Co najmniej jeden element. <xref:System.Windows.Input.CommandBinding> Każdy z tych elementów powinien mieć <xref:System.Windows.Input.CommandBinding.Command%2A> atrybut ustawiony na znane polecenie i atrybuty ustawione <xref:System.Windows.Input.CommandBinding.CanExecute> dla implementacji obsługi i <xref:System.Windows.Input.CommandBinding.Executed> . Aby uzyskać więcej informacji <xref:System.Windows.Input.CommandBinding>, zobacz.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.DragEventHandler " Usage="member this.DragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłosi bazowe zdarzenie przeciągania z tym elementem jako element docelowy przeciągania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.DragEnter?displayProperty=nameWithType> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.DragEnter> zdarzenia są dołączone do <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.DragEnterEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewDragEnter>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnDragEnter%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.DragEnter" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.DragEventHandler " Usage="member this.DragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłosi bazowe zdarzenie przeciągania przy użyciu tego elementu jako punktu początkowego przeciągania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, tak, że <xref:System.Windows.ContentElement.DragLeave?displayProperty=nameWithType> jest częścią listy składowych klasy <xref:System.Windows.ContentElement> , gdy jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.DragLeave> zdarzenia są dołączone do <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.DragLeaveEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.DragDrop.PreviewDragLeave>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnDragLeave%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
        <altmember cref="E:System.Windows.ContentElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.DragLeave" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.DragEventHandler " Usage="member this.DragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłosi bazowe zdarzenie przeciągania z tym elementem jako potencjalną tarczą docelową.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie występuje nawet wtedy, gdy przeciąganie pochodzi z granicy elementu. Jeśli przeciągnięcie rozpocznie się poza granicami, a następnie przenosi wewnątrz, to zdarzenie jest również zgłaszane, <xref:System.Windows.ContentElement.DragEnter> a także powiązane zdarzenia w wersji zapoznawczej.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, tak, że <xref:System.Windows.ContentElement.DragOver?displayProperty=nameWithType> jest częścią listy składowych klasy <xref:System.Windows.ContentElement> , gdy jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.DragOver> zdarzenia są dołączone do <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.DragOverEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.DragDrop.PreviewDragOver>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnDragOver%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
        <altmember cref="E:System.Windows.ContentElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.DragOver" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberSignature Language="F#" Value="member this.Drop : System.Windows.DragEventHandler " Usage="member this.Drop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie upuszczania z tym elementem jako element docelowy upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, tak, że <xref:System.Windows.ContentElement.Drop?displayProperty=nameWithType> jest częścią listy składowych klasy <xref:System.Windows.ContentElement> , gdy jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.Drop> zdarzenia są dołączone do <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.DropEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewDrop>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnDrop%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DropEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.DropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.Drop" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberSignature Language="F#" Value="abstract member Focus : unit -&gt; bool&#xA;override this.Focus : unit -&gt; bool" Usage="contentElement.Focus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Próbuje ustawić fokus na tym elemencie.</summary>
        <returns><see langword="true" />Jeśli fokus klawiatury można ustawić na ten element; <see langword="false" /> Jeśli to wywołanie metody nie wymusi fokusu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby można było skupić <xref:System.Windows.ContentElement.Focusable%2A> się i <xref:System.Windows.ContentElement.IsEnabled%2A> oba muszą być. `true` Należy zauważyć, że <xref:System.Windows.ContentElement> niemal wszystkie klasy pochodne <xref:System.Windows.ContentElement.Focusable%2A> nie są domyślnie.  
  
 Nawet jeśli element jest skoncentrowany i włączony, obsługa zdarzeń w ramach określonego drzewa (na przykład w przypadku kontrolki złożonej) może reagować na zdarzenia fokusu w wersji zapoznawczej, przez co nie pozwala na skoncentrowanie `false`się na tym metodzie.  
  
 Na ogół ukierunkowane są dwie oddzielne koncepcje: fokus klawiatury i fokus logiczny, które nie zawsze są identyczne. Ta metoda ustawia fokus logiczny. Nie ma możliwości programowania, aby ustawić fokus klawiatury w szczególny sposób; fokus klawiatury jest określany przez dane wejściowe użytkownika. Aby uzyskać więcej informacji, zobacz temat [Omówienie koncentracji](~/docs/framework/wpf/advanced/focus-overview.md) i [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
 Jeśli wywołanie <xref:System.Windows.ContentElement.Focus%2A> zwraca `true`, <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> i jest<xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> również .`true`  
  
 Jeśli powiązane właściwości nie `true`są jeszcze, podczas wywołania <xref:System.Windows.ContentElement.Focus%2A>, co najmniej jedno z następujących zdarzeń jest zgłaszane w następującej kolejności: <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>, <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> (Źródło jest nowym obiektem docelowym fokusu) <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>,,, <xref:System.Windows.ContentElement.LostKeyboardFocus> ,<xref:System.Windows.ContentElement.GotKeyboardFocus> (Źródło jest nowym elementem docelowym fokusu).  
  
   
  
## Examples  
 Poniższy przykład to procedura obsługi zdarzeń załadowanej przez stronę, która znajduje określony nazwany akapit w dokumencie i ustawia fokus. Akapity nie mają domyślnego fokusu. w tym konkretnym akapicie zastosowano styl (niepokazywany), który <xref:System.Windows.Setter> używał stylu, aby można było skupić się na nim.  
  
 [!code-csharp[ContentElementsSmorgasbord#Focus](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#focus)]
 [!code-vb[ContentElementsSmorgasbord#Focus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#focus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Focusable : bool with get, set" Usage="System.Windows.ContentElement.Focusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy element może odebrać fokus.</summary>
        <value><see langword="true" />Jeśli element jest skoncentrowany; w <see langword="false" />przeciwnym razie. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko element skoncentrowany otrzymuje dane wejściowe z klawiatury.  
  
 Niektóre klasy pochodne mogą przesłaniać metadane dla tej właściwości zależności, tak aby Klasa pochodna była skoncentrowana domyślnie.  
  
 W przypadku dziedziczenia przez <xref:System.Windows.Documents.Hyperlink> lub jego <xref:System.Windows.Documents.Hyperlink> klas pochodnych zastępuje metadane dla tej właściwości zależności i ponownie `true`definiuje domyślną wartość tej właściwości.  
  
### <a name="dependency-property-information"></a>Informacje o właściwości zależności
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.FocusableProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
## <a name="notes-to-inheritors"></a>Uwagi dotyczące dziedziczenia

Gdy pochodzą z <xref:System.Windows.ContentElement>, rozważ, czy chcesz, aby element miał fokus, ponieważ domyślnie nie będzie można go skupić. Jeśli chcesz, aby element miał fokus, Zastąp metadane tej właściwości w konstruktorze statycznym klasy pochodnej w następujący sposób:  

[!code-csharp[CorePseudocode#UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)]
[!code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]  
  
gdzie `myElement` to nazwa klasy typu, w którym jest zastępowana wartość metadanych.
  
## Examples  
 W poniższym przykładzie tworzony jest styl, który sprawia <xref:System.Windows.Documents.Paragraph> , że domyślnie fokus jest wizualny, gdy odbierze fokus.  
  
 [!code-xaml[ContentElementsSmorgasbord#Focusable](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#focusable)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberSignature Language="F#" Value="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość właściwości zostanie <see cref="P:System.Windows.ContentElement.Focusable" /> zmieniona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusableProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.FocusableProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.ContentElement.Focusable" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj&#xA;override this.GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj" Usage="contentElement.GetAnimationBaseValue dp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość zależności do sprawdzenia.</param>
        <summary>Zwraca wartość właściwości bazowej dla określonej właściwości w tym elemencie, bez uwzględnienia ewentualnej wartości animowanej z działającej lub zatrzymanej animacji.</summary>
        <returns>Wartość właściwości, tak jakby żadne animacje nie są dołączone do określonej właściwości zależności.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli do właściwości nie są dołączone żadne animacje, <xref:System.Windows.ContentElement.GetAnimationBaseValue%2A> wartość zwracana jest zawsze identyczna <xref:System.Windows.DependencyObject.GetValue%2A> z wartością zwracaną. Jeśli są dołączone animacje, wszystkie możliwe wartości pochodne animacji, w tym wartości początkowe i zatrzymania, są ignorowane, a wartość właściwości jest określana na podstawie wszystkich innych możliwych danych wejściowych. Aby uzyskać więcej informacji, zobacz [pierwszeństwo wartości właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="abstract member GetUIParentCore : unit -&gt; System.Windows.DependencyObject&#xA;override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="contentElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gdy jest zastępowany w klasie pochodnej, zwraca alternatywny [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] element nadrzędny dla tego elementu, jeśli element nadrzędny nie istnieje.</summary>
        <returns>Obiekt, jeśli implementacja klasy pochodnej ma alternatywne połączenie nadrzędne z raportem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja wirtualna tej metody zwraca wartość `null`. <xref:System.Windows.FrameworkContentElement>zapewnia praktyczną implementację.  
  
 Alternatywne elementy nadrzędne są używane do routingu zdarzeń, w przypadkach, gdy element tworzy alternatywną strukturę nadrzędną, dzięki czemu jego zdarzenia są kierowane w taki sposób, że są one zgodne ze standardowym wzorcem routingu drzewa wizualnego do standardowego elementu nadrzędnego lub w dół Strategia routingu w wersji zapoznawczej.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie przeciągania i upuszczania, które obejmuje ten element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.GiveFeedback> Zdarzenie umożliwia Źródło zdarzenia przeciągania w celu zmodyfikowania wyglądu wskaźnika myszy w celu przedstawienia wizualnej opinii użytkownika podczas operacji przeciągania i upuszczania. Opinie wizualne wzmocnią, że operacja przeciągania i upuszczania jest w toku.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, tak, że <xref:System.Windows.ContentElement.GiveFeedback> jest częścią listy składowych klasy <xref:System.Windows.ContentElement> , gdy jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.GiveFeedback> zdarzenia są dołączone do <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.GiveFeedbackEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewGiveFeedback>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnGiveFeedback%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.GiveFeedback" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.RoutedEventHandler " Usage="member this.GotFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element pobiera fokus logiczny.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fokus logiczny różni się od fokusu klawiatury, jeśli fokus jest celowo wymuszany przy użyciu wywołania metody, ale poprzedni fokus klawiatury istnieje w innym zakresie. W tym scenariuszu fokus klawiatury pozostaje tam, gdzie jest, a element, <xref:System.Windows.ContentElement.Focus%2A> w którym wywoływana jest metoda nadal pobiera fokus logiczny.  
  
 Bardziej precyzyjna interpretacja tego zdarzenia jest wyzwalana, gdy wartość <xref:System.Windows.ContentElement.IsFocused%2A> właściwości elementu w marszrucie jest zmieniana z `false` na `true`.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który otrzymuje fokus, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który zyskał fokus.  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.GotFocusEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.RoutedEventHandler>|  
  
-   Brak odpowiedniego zdarzenia tunelowania.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnGotFocus%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.GotFocus" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klawiatura ma fokus w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>jest podobnym zdarzeniem, które śledzi zmiany stanu we właściwości, która zachowuje stan fokusu dla elementu; <xref:System.Windows.ContentElement.GotKeyboardFocus> zdarzenie jest zgłaszane w wielu z tych samych okoliczności.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który ma fokus, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który ma fokus.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, tak, że <xref:System.Windows.ContentElement.GotKeyboardFocus> jest częścią listy składowych klasy <xref:System.Windows.ContentElement> , gdy jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.GotKeyboardFocus> zdarzenia są dołączone do <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.GotKeyboardFocusEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.GotKeyboardFocus" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element przechwytuje mysz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy element przechwytuje mysz, odbiera dane wejściowe za pomocą myszy, nawet jeśli wskaźnik myszy znajduje się poza granicami. Mysz jest zwykle przechwytywana tylko podczas operacji przeciągania i upuszczania i pozostaje przechwycona do momentu wykonania akcji przeciągania i upuszczania.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który ma przechwytywanie, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który ma przechwycenie myszą.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, tak, że <xref:System.Windows.ContentElement.GotMouseCapture> jest częścią listy składowych klasy <xref:System.Windows.ContentElement> , gdy jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.GotMouseCapture> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.GotMouseCaptureEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Nie zdefiniowano odpowiedniego zdarzenia tunelowania.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnGotMouseCapture%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.GotMouseCapture" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element przechwytuje pióro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy element przechwytuje pióro, otrzymuje dane wejściowe pióra, nawet jeśli wskaźnik znajduje się poza granicami. Pióro jest zazwyczaj przechwytywane tylko podczas operacji przeciągania i upuszczania i zachowuje przechwytywanie do momentu wykonania akcji przeciągania i upuszczania.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który ma przechwytywanie, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który ma przechwycenie.  
  
 To zdarzenie tworzy alias dla dołączonego zdarzenia dla tej klasy, tak, <xref:System.Windows.ContentElement.GotStylusCapture> że jest częścią listy składowych klasy <xref:System.Windows.ContentElement> , gdy jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.GotStylusCapture> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.GotStylusCaptureEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Nie zdefiniowano odpowiedniego zdarzenia tunelowania.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnGotStylusCapture%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.GotStylusCapture" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.GotTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.GotTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po przechwyceniu dotyku do tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.GotTouchCaptureEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.GotTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAnimatedProperties : bool" Usage="System.Windows.ContentElement.HasAnimatedProperties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy ten element ma wszystkie animowane właściwości.</summary>
        <value><see langword="true" />Jeśli ten element ma animacje dołączone do którejkolwiek z jego właściwości; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca `true` zarówno dla animacji trwałych (niezarejestrowanych, zawsze uruchomionych), jak i dla animacji, które mają określoną oś czasu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBindings : System.Windows.Input.InputBindingCollection" Usage="System.Windows.ContentElement.InputBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję powiązań wejściowych, które są skojarzone z tym elementem.</summary>
        <value>Kolekcja powiązań wejściowych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powiązania wejściowe obsługują powiązania poleceń z urządzeniami wejściowymi. Na przykład <xref:System.Windows.Input.MouseBinding> implementuje powiązania wejściowe, które zawierają właściwości specyficzne dla urządzeń myszy.  
  
 Kolekcja powiązań wejściowych obejmuje zarówno powiązania wejściowe, które odnoszą się do typu, jak i powiązania wejściowe, które są zadeklarowane w wystąpieniu.  
  
 Powiązana właściwość <xref:System.Windows.ContentElement.CommandBindings%2A>,, utrzymuje kolekcję powiązań poleceń. Te powiązania różnią się od powiązań wejściowych w tym, że przedstawiają następny poziom w dół operacji przetwarzania poleceń, które są powiązane z znanymi poleceniami i obsługiwanymi przez nie konkretnymi klasami.  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *oneOrMoreInputBindings*  
 Co najmniej jeden <xref:System.Windows.Input.KeyBinding> <xref:System.Windows.Input.MouseBinding> element (zazwyczaj klasy pochodne lub). <xref:System.Windows.Input.InputBinding> Każdy z tych elementów powinien mieć <xref:System.Windows.Input.InputBinding.Command%2A> ustawiony atrybut i. <xref:System.Windows.Input.InputBinding.Gesture%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.ContentElement.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy ten element jest włączony w [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</summary>
        <value><see langword="true" />Jeśli element jest włączony; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.IsEnabledProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład tworzy styl, który zawiera metodę ustawiającą właściwość, która zapewnia alternatywne zachowanie wizualizacji, <xref:System.Windows.Documents.Hyperlink> gdy właściwość jest <xref:System.Windows.ContentElement.IsEnabled%2A> ustawiona na `false`.  
  
 [!code-xaml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#isenabledismouseover)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.ContentElement.IsEnabled" /> właściwości w tym elemencie zostanie zmieniona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabledCore : bool" Usage="System.Windows.ContentElement.IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która staje się wartością <see cref="P:System.Windows.ContentElement.IsEnabled" /> zwracaną w klasach pochodnych.</summary>
        <value><see langword="true" />Jeśli element jest włączony; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## <a name="notes-to-inheritors"></a>Uwagi dotyczące dziedziczenia

Domyślna implementacja tej właściwości buforuje wartość, a także oblicza, czy element nadrzędny tego elementu jest włączony. Jeśli element nadrzędny nie jest włączony, nie można skutecznie włączyć elementu podrzędnego w praktycznym interfejsie użytkownika. Jeśli zdecydujesz się zastąpić tę implementację, należy wywołać podstawową implementację, aby zachować to zachowanie.
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.ContentElement.IsEnabled" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFocused : bool" Usage="System.Windows.ContentElement.IsFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą, czy ten element ma fokus logiczny.</summary>
        <value><see langword="true" />Jeśli ten element ma fokus logiczny; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fokus logiczny może różnić się od fokusu klawiatury, jeśli aplikacja ma wiele podziałów fokusu, na przykład między zawartością menu a pozostałą częścią aplikacji. W tym scenariuszu fokus klawiatury może znajdować się tylko w jednym elemencie interfejsu użytkownika aplikacji, jednak niektóre elementy w innych punktach widzenia mogą nadal utrzymywać fokus logiczny. Aby uzyskać więcej informacji o koncentracji logicznej, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md) i [Omówienie koncentracji uwagi](~/docs/framework/wpf/advanced/focus-overview.md).  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.IsFocusedProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
   
  
## Examples  
 W poniższym przykładzie tworzony jest styl, który sprawia <xref:System.Windows.Documents.Paragraph> , że domyślnie fokus jest wizualny, gdy odbierze fokus.  
  
 [!code-xaml[ContentElementsSmorgasbord#Focusable](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#focusable)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.ContentElement.IsFocused" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputMethodEnabled : bool" Usage="System.Windows.ContentElement.IsInputMethodEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)], czy system metody wejściowej, taki jak, jest włączony do przetwarzania danych wejściowych do tego elementu.</summary>
        <value><see langword="true" />Jeśli metoda wejściowa jest aktywna; w przeciwnym razie. <see langword="false" /> Wartość domyślna źródłowej dołączonej właściwości to <see langword="true" />, jednak ta wartość ma wpływ na stan metod wejścia w czasie wykonywania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca wartość, która jest zwracana przez załączoną Właściwość <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> dla obecnie włączonych metod wejściowych (klawiatury, mowy i innych urządzeń wejściowych).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocused : bool" Usage="System.Windows.ContentElement.IsKeyboardFocused" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy ten element ma fokus klawiatury.</summary>
        <value><see langword="true" />Jeśli ten element ma fokus klawiatury; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.IsKeyboardFocusedProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotFocus" />
        <altmember cref="E:System.Windows.ContentElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość właściwości zostanie <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> zmieniona w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsKeyboardFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.ContentElement.IsKeyboardFocused" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithin : bool" Usage="System.Windows.ContentElement.IsKeyboardFocusWithin" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy fokus klawiatury jest w dowolnym miejscu elementu, czy elementów podrzędnych.</summary>
        <value><see langword="true" />Jeśli fokus klawiatury znajduje się na elemencie lub jego elementach podrzędnych; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zmiany wartości tej właściwości zwykle powodują wystąpienie <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> zdarzenia, chyba że Klasa pochodna została zastąpiona <xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A> , aby pominąć zdarzenie.  
  
 Ta właściwość nie jest ustawiana bezpośrednio, ale można ustawić fokus na element poprzez wywołanie metody <xref:System.Windows.ContentElement.Focus%2A>lub przez <xref:System.Windows.ContentElement.MoveFocus%2A> wykonanie żądania. Jedno z tych wywołań metod może zmienić tę wartość właściwości.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość właściwości zostanie <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> zmieniona w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsKeyboardFocusWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.ContentElement.IsKeyboardFocusWithin" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptured : bool" Usage="System.Windows.ContentElement.IsMouseCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy mysz jest przechwytywana przez ten element.</summary>
        <value><see langword="true" />Jeśli element ma przechwycenie myszy; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Stan przechwytywania myszy jest związany z operacjami przeciągania i upuszczania w procesie.  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.IsMouseCapturedProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład umożliwia włączenie lub wyłączenie stanu przechwytywania myszy w zależności od tego, czy mysz jest już przechwycona przez element.  
  
 [!code-csharp[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#ismousecaptured)]
 [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
        <altmember cref="E:System.Windows.ContentElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.ContentElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość właściwości zostanie <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> zmieniona w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.ContentElement.IsMouseCaptured" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithin : bool" Usage="System.Windows.ContentElement.IsMouseCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą, czy przechwytywanie myszy jest przechowywane przez ten element, czy przez elementy podrzędne w jego drzewie elementów.</summary>
        <value><see langword="true" />Jeśli ten element lub zawarty element ma funkcję przechwytywania myszy; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.ContentElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" /> zmian w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOver : bool" Usage="System.Windows.ContentElement.IsMouseDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy pozycja wskaźnika myszy odnosi się do wyników testu trafień, które przynoszą do konta.</summary>
        <value><see langword="true" />Jeśli wskaźnik myszy znajduje się nad tym samym elementem, wynik jako test trafień; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przeciwieństwie <xref:System.Windows.ContentElement.IsMouseOver%2A>do, ta właściwość `true` jest tylko wtedy, gdy wskaźnik myszy znajduje się nad elementem literału — jako dla testu trafień. Jeśli wskaźnik myszy znajduje się nad elementem podrzędnym, w szczególności dla elementów, które są częścią bardziej szczegółowego szablonu i przedniego elementu, ta właściwość będzie `false`. Jeśli nie wiesz, jak kontrolka jest złożona (na przykład można użyć tej właściwości w szablonie kontrolki niestandardowej dla zdefiniowanej kontrolki), ta właściwość może zwracać nieoczekiwane wyniki. W przypadku większości scenariuszy, w których nie tworzysz formantów, <xref:System.Windows.ContentElement.IsMouseOver%2A> Użyj zamiast tego.  
  
 Jeśli wskaźnik myszy jest przechwytywany przez ten element i ta właściwość jest `true` w czasie przechwytywania, ta właściwość będzie nadal zwracana `true` , dopóki przechwycenie myszy nie zostanie utracone i wskaźnik nie znajduje się nad jego zakresem.  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość właściwości zostanie <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> zmieniona w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseOver : bool" Usage="System.Windows.ContentElement.IsMouseOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy wskaźnik myszy znajduje się nad tym elementem (w tym elementy potomne elementu wizualnego, czy jego składanie kontrolki).</summary>
        <value><see langword="true" />Jeśli wskaźnik myszy znajduje się nad elementem lub jego elementami podrzędnymi; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż analogiczne zdarzenie "IsMouseOverChanged" nie istnieje, można wykonać kilka podobnych zdarzeń. Można na przykład użyć <xref:System.Windows.ContentElement.MouseEnter>, <xref:System.Windows.ContentElement.MouseMove>, i <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>.  
  
 Jeśli ten element przechwytuje mysz, ta właściwość `true` pozostanie do momentu utraty przechwycenia myszy, a wskaźnik myszy opuszcza granice elementu.  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.IsMouseOverProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład tworzy styl zawierający metodę ustawiającą właściwość, która zapewnia alternatywne zachowanie wizualizacji podczas <xref:System.Windows.Documents.Hyperlink> raportów. <xref:System.Windows.ContentElement.IsMouseOver%2A> `true`  
  
 [!code-xaml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#isenabledismouseover)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsMouseOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.ContentElement.IsMouseOver" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptured : bool" Usage="System.Windows.ContentElement.IsStylusCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy pióro jest przechwytywane do tego elementu.</summary>
        <value><see langword="true" />Jeśli element ma funkcję przechwytywania pióra; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.IsStylusCapturedProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.CaptureStylus" />
        <altmember cref="E:System.Windows.ContentElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.ContentElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość właściwości zostanie <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> zmieniona w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.ContentElement.IsStylusCaptured" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithin : bool" Usage="System.Windows.ContentElement.IsStylusCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą, czy przechwycenie piórem jest utrzymywane przez ten element, łącznie z elementami podrzędnymi i składowymi kontroli.</summary>
        <value><see langword="true" />Jeśli przechwycenie piórem jest przechowywane w tym elemencie; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość właściwości zostanie <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> zmieniona w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.ContentElement.IsStylusCaptureWithin" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOver : bool" Usage="System.Windows.ContentElement.IsStylusDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy pozycja pióra odnosi się do wyników testu trafień, które przyjmują elementy.</summary>
        <value><see langword="true" />Jeśli pióro znajduje się nad tym samym elementem co test trafień; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przeciwieństwie <xref:System.Windows.ContentElement.IsStylusOver%2A>do, ta właściwość `true` jest tylko wtedy, gdy pióro znajduje się nad elementem. Jeśli pióro znajduje się nad elementem podrzędnym lub przez elementy, które są częścią bardziej szczegółowego przenoszonego elementu, ta `false`właściwość będzie.  
  
 Jeśli nie wiesz, jak kontrolka jest złożona (na przykład można użyć tej właściwości w szablonie kontrolki niestandardowej dla zdefiniowanej kontrolki), ta właściwość może zwracać nieoczekiwane wyniki. W przypadku większości scenariuszy, w których nie tworzysz formantów, <xref:System.Windows.ContentElement.IsStylusOver%2A> Użyj zamiast tego.  
  
 Jeśli ten element ma funkcję przechwytywania pióra i ta `true` właściwość jest w czasie przechwytywania, ta właściwość pozostaje `true` do momentu utraty przechwycenia pióra, a pióro nie znajduje się nad jego zakresem.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość właściwości zostanie <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> zmieniona w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.ContentElement.IsStylusDirectlyOver" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusOver : bool" Usage="System.Windows.ContentElement.IsStylusOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy pióro znajduje się nad tym elementem (w tym elementy potomne elementu wizualnego).</summary>
        <value><see langword="true" />Jeśli pióro znajduje się nad elementem lub jego elementami podrzędnymi; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ten element ma funkcję przechwytywania pióra, ta `true` Właściwość pozostaje do momentu utraty przechwycenia pióra, a wskaźnik jest poza granicami.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.IsStylusOverProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.ContentElement.IsStylusOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.ContentElement.IsStylusOver" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu klawisza, gdy fokus znajduje się na tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa kluczowych współdziała z innymi funkcjami platformy, takimi jak tworzenie poleceń i składanie tekstu. <xref:System.Windows.ContentElement.KeyDown> Zdarzenie jest zdarzeniem wprowadzania tekstu niższego poziomu, które może nie zachowywać się zgodnie z oczekiwaniami w niektórych kontrolkach. Wynika to z faktu, że niektóre kontrolki mają założenia kontrolne lub obsługujące klasy, które udostępniają wyższego poziomu obsługę wprowadzania tekstu i powiązane zdarzenia.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, tak, że <xref:System.Windows.ContentElement.KeyDown> jest częścią listy składowych klasy <xref:System.Windows.ContentElement> , gdy jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.KeyDown> zdarzenia są dołączone do <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.KeyDownEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewKeyDown>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnKeyDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.KeyDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klucz zostanie wydzierżawiony, gdy fokus znajduje się na tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, tak, że <xref:System.Windows.ContentElement.KeyUp> jest częścią listy składowych klasy <xref:System.Windows.ContentElement> , gdy jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.KeyUp> zdarzenia są dołączone do <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.KeyUpEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewKeyUp>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnKeyUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.KeyUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.RoutedEventHandler " Usage="member this.LostFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element utraci fokus logiczny.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fokus logiczny różni się od fokusu klawiatury, jeśli fokus jest celowo wymuszany przy użyciu wywołania metody, ale poprzedni fokus klawiatury istnieje w innym zakresie. W tym scenariuszu fokus klawiatury pozostaje tam, gdzie jest, a element, w <xref:System.Windows.ContentElement.Focus%2A> którym wywoływana jest metoda nadal pobiera fokus logiczny.  
  
 Dokładniejsze interpretacja tego zdarzenia jest wywoływane, gdy wartość <xref:System.Windows.ContentElement.IsFocused%2A> właściwości elementu w marszrucie zmieni się z `true` na `false`.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który utraci fokus, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który zyskał fokus.  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.LostFocusEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.RoutedEventHandler>|  
  
-   Brak odpowiedniego zdarzenia tunelowania.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnLostFocus%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.LostFocus" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klawiatura nie ma już fokusu w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ to zdarzenie używa routingu propagacji, element, który utracił fokus, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który utracił fokus.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.LostKeyboardFocus> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.LostKeyboardFocus> zdarzenia są dołączone do <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.LostKeyboardFocusEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.LostKeyboardFocus" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element utraci przechwytywanie myszy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy element przechwytuje mysz, odbiera dane wejściowe za pomocą myszy, nawet jeśli wskaźnik znajduje się poza granicami. Mysz jest zwykle przechwytywana tylko podczas operacji przeciągania i upuszczania.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który utraci przechwytywanie, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który utracił funkcję przechwytywania.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.LostMouseCapture> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.LostMouseCapture> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.LostMouseCaptureEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Nie zdefiniowano odpowiedniego zdarzenia tunelowania.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnLostMouseCapture%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.LostMouseCapture" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element utraci przechwytywanie pióra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy element przechwytuje pióro, otrzymuje dane wejściowe pióra, nawet jeśli wskaźnik znajduje się poza granicami. Pióro jest zazwyczaj przechwytywane tylko podczas operacji przeciągania i upuszczania.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który utraci fokus, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który utracił fokus.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.LostStylusCapture> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.LostStylusCapture> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.LostStylusCaptureEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Nie zdefiniowano odpowiedniego zdarzenia tunelowania.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnLostStylusCapture%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.LostStylusCapture" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.LostTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.LostTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element utraci funkcję przechwytywania dotykowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.LostTouchCaptureEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.LostTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.LostTouchCapture" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu dowolnego przycisku myszy, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.MouseDown> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.MouseDown> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 Zdarzenie jest często wywoływane razem z albo <xref:System.Windows.ContentElement.MouseLeftButtonDown> lub <xref:System.Windows.ContentElement.MouseRightButtonDown>, które odpowiada naciśnięciu jednego z dwóch standardowych przycisków myszy. <xref:System.Windows.ContentElement.MouseDown> <xref:System.Windows.ContentElement.MouseLeftButtonDown>i <xref:System.Windows.ContentElement.MouseRightButtonDown> są także zdarzenia kierowane, ale są to zdarzenia bezpośrednie kierowane, a odpowiednie zdarzenie specyficzne dla przycisku jest zgłaszane, <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> gdy zdarzenie osiągnie ten element wzdłuż trasy zdarzenia. Zobacz uwagi dla <xref:System.Windows.ContentElement.MouseLeftButtonDown> lub <xref:System.Windows.ContentElement.MouseRightButtonDown>.  
  
> [!IMPORTANT]
>  Kilka <xref:System.Windows.ContentElement> klas pochodnych, które mają zachowanie podobne do kontrolki, na <xref:System.Windows.Documents.Hyperlink>przykład, może mieć nieodłączną obsługę klas dla zdarzeń przycisków myszy. Lewe zdarzenie myszy w dół jest najbardziej prawdopodobną przyczyną obsługi klas w formancie. Obsługa klasy często oznacza zdarzenia klasy bazowej <xref:System.Windows.Input.Mouse> jako obsługiwane. Gdy zdarzenie zostanie oznaczone jako obsługiwane, inne programy obsługi wystąpienia dołączone do tego elementu nie są zwykle zgłaszane. Wszystkie inne procedury obsługi klasy lub wystąpienia, które są dołączone do elementów w kierunku propagacji do korzenia w drzewie interfejsu użytkownika, również nie są zwykle zgłaszane.  
  
 Można rozwiązać problem opisany w poprzednich ważnych i nadal odbieranych <xref:System.Windows.ContentElement.MouseDown> zdarzeniach dla lewego przycisku myszy zdarzenia w klasie pochodnej, która ma obsługę klasy, przy użyciu jednego z następujących rozwiązań:  
  
-   Dołącz programy obsługi dla <xref:System.Windows.ContentElement.PreviewMouseDown> zdarzenia, które nie jest oznaczone jako obsługiwane przez kontrolki. Zwróć uwagę, że ponieważ jest to zdarzenie w wersji zapoznawczej, trasa zaczyna się od elementu głównego i tuneluje do formantu.  
  
-   Zarejestrowanie procedury obsługi na formancie w sposób proceduralny przez <xref:System.Windows.ContentElement.AddHandler%2A> wywołanie i wybranie opcji podpisu, która umożliwia programom obsługi nasłuchiwanie zdarzeń nawet wtedy, gdy są one już oznaczone jako obsługiwane w danych zdarzenia kierowanego.  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.MouseDownEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewMouseDown>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnMouseDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.MouseDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Input.MouseEventHandler " Usage="member this.MouseEnter : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wskaźnik myszy zostanie przesunięty w granice tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseEnter>to [Omówienie zdarzeń kierowanych](~/docs/framework/wpf/advanced/routed-events-overview.md) , które korzystają z strategii routingu bezpośredniego obsługi zdarzeń. Zdarzenia kierowane bezpośrednio nie są zgłaszane na trasie; Zamiast tego są obsługiwane w tym samym elemencie, w którym zostały zgłoszone. Jednak umożliwiają one włączenie innych aspektów zachowań zdarzeń kierowanych, takich jak wyzwalacze zdarzeń w stylach.  
  
 Chociaż <xref:System.Windows.ContentElement.MouseEnter> śledzi, gdy wskaźnik myszy wchodzi w zakres elementu, to zdarzenie jest bardziej dosłownie raporty <xref:System.Windows.ContentElement.IsMouseOver%2A> , że wartość właściwości została zmieniona z `false` na `true` na tym elemencie.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.MouseEnter> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.MouseEnter> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.MouseEnterEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnMouseEnter%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.MouseEnter" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Input.MouseEventHandler " Usage="member this.MouseLeave : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wskaźnik myszy opuszcza granice tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseLeave>to [Omówienie zdarzeń kierowanych](~/docs/framework/wpf/advanced/routed-events-overview.md) , które korzystają z strategii routingu bezpośredniego obsługi zdarzeń. Zdarzenia kierowane bezpośrednio nie są zgłaszane na trasie; Zamiast tego są obsługiwane w tym samym elemencie, w którym zostały zgłoszone. Jednak umożliwiają one włączenie innych aspektów zachowań zdarzeń kierowanych, takich jak wyzwalacze zdarzeń w stylach.  
  
 Chociaż <xref:System.Windows.ContentElement.MouseLeave> śledzi, gdy mysz opuszcza element, to zdarzenie jest bardziej dosłownie raporty <xref:System.Windows.ContentElement.IsMouseOver%2A> , że wartość właściwości została zmieniona z `true` na `false` na tego elementu.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.MouseLeave> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.MouseLeave> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.MouseLeaveEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnMouseLeave%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.MouseLeave" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu lewego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mimo że te [routowane zdarzenia](~/docs/framework/wpf/advanced/routed-events-overview.md) są zgodne z trasą propagacji za pośrednictwem drzewa elementów, jest to bezpośrednie kierowane zdarzenie, które jest zgłaszane i ponownie zgłaszane w drzewie <xref:System.Windows.ContentElement>elementów.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportują charakterystyczne dla przycisku myszy zdarzenia bazowego <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> , które jest dołączonym zdarzeniem przetwarzanym przez każdy element wraz z trasą zdarzenia.  
  
 Argumenty tego zdarzenia uwidaczniają argumenty bazowego <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzenia. Jeśli to zdarzenie jest oznaczone jako obsługiwane wzdłuż trasy zdarzenia, są nadal wywoływane zdarzenia dotyczące przycisku myszy. Jednak programy obsługi zdarzeń dla przycisku myszy muszą być dodawane jawnie <xref:System.Windows.ContentElement.AddHandler%2A>, z opcją obsługi zdarzeń, które są już oznaczone jako obsługiwane, aby były detektorami zdarzenia.  
  
 Koncepcyjnie, pomyśl o tym zdarzeniu (i innych zdarzeniach myszy w <xref:System.Windows.ContentElement>systemie) jako myszy "usługi" (z definicją usługi dostarczaną <xref:System.Windows.Input.Mouse> przez klasę). Zdarzenie dodaje wygodę niezbędną do sprawdzania, czy Stany przycisków myszy (w górę i w dół) oryginalnych zdarzeń myszy w danych zdarzenia. W przypadku bardziej zaawansowanych scenariuszy, takich jak sprawdzanie Stanów przycisków niestandardowymi, może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] <xref:System.Windows.Input.Mouse> <xref:System.Windows.ContentElement>klasy w klasie zamiast.  
  
> [!IMPORTANT]
>  Kilka <xref:System.Windows.ContentElement> klas pochodnych, które mają zachowanie podobne do kontrolki, na <xref:System.Windows.Documents.Hyperlink>przykład, może mieć nieodłączną obsługę klas dla zdarzeń przycisków myszy. Lewe zdarzenie myszy w dół jest najbardziej prawdopodobną przyczyną obsługi klas w formancie. Obsługa klasy często oznacza zdarzenia klasy bazowej <xref:System.Windows.Input.Mouse> jako obsługiwane. Gdy zdarzenie zostanie oznaczone jako obsługiwane, inne programy obsługi wystąpienia dołączone do tego elementu nie są zwykle zgłaszane. Wszystkie inne procedury obsługi klasy lub wystąpienia, które są dołączone do elementów w kierunku propagacji do korzenia w drzewie interfejsu użytkownika, również nie są zwykle zgłaszane.  
  
 Można rozwiązać problem opisany w poprzednich ważnych i nadal odbieranych <xref:System.Windows.ContentElement.MouseLeftButtonDown> zdarzeniach dla lewego przycisku myszy zdarzenia w klasie pochodnej, która ma obsługę klasy, przy użyciu jednego z następujących rozwiązań:  
  
-   Dołącz programy obsługi dla <xref:System.Windows.ContentElement.PreviewMouseDown> zdarzenia, które nie jest oznaczone jako obsługiwane przez kontrolki. Zwróć uwagę, że ponieważ jest to zdarzenie w wersji zapoznawczej, trasa zaczyna się od elementu głównego i tuneluje do formantu.  
  
-   Zarejestrowanie procedury obsługi na formancie w sposób proceduralny przez <xref:System.Windows.ContentElement.AddHandler%2A> wywołanie i wybranie opcji podpisu, która umożliwia programom obsługi nasłuchiwanie zdarzeń nawet wtedy, gdy są one już oznaczone jako obsługiwane w danych zdarzenia kierowanego.  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.MouseLeftButtonDownEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po udostępnieniu lewego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mimo że te [routowane zdarzenia](~/docs/framework/wpf/advanced/routed-events-overview.md) są zgodne z trasą propagacji za pośrednictwem drzewa elementów, jest to bezpośrednie kierowane zdarzenie, które jest zgłaszane i ponownie zgłaszane w drzewie <xref:System.Windows.ContentElement>elementów.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportują charakterystyczne dla przycisku myszy zdarzenia bazowego <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> , które jest dołączonym zdarzeniem przetwarzanym przez każdy element wraz z trasą zdarzenia.  
  
 Argumenty tego zdarzenia uwidaczniają argumenty bazowego <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> zdarzenia. Jeśli to zdarzenie jest oznaczone jako obsługiwane wzdłuż trasy zdarzenia, są nadal wywoływane zdarzenia dotyczące przycisku myszy. Jednak programy obsługi zdarzeń dla przycisku myszy muszą być dodawane jawnie <xref:System.Windows.ContentElement.AddHandler%2A>, z opcją obsługi zdarzeń, które są już oznaczone jako obsługiwane, aby były detektorami zdarzenia.  
  
 Koncepcyjnie, pomyśl o tym zdarzeniu (i innych zdarzeniach myszy w <xref:System.Windows.ContentElement>systemie) jako myszy "usługi" (z definicją usługi dostarczaną <xref:System.Windows.Input.Mouse> przez klasę). Zdarzenie dodaje wygodę niezbędną do sprawdzania, czy Stany przycisków myszy (w górę i w dół) oryginalnych zdarzeń myszy w danych zdarzenia. W przypadku bardziej zaawansowanych scenariuszy, takich jak sprawdzanie Stanów przycisków niestandardowymi, może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] <xref:System.Windows.Input.Mouse> <xref:System.Windows.ContentElement>klasy w klasie zamiast.  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.MouseLeftButtonUpEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wskaźnik myszy jest przesuwany nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.MouseMove> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.MouseMove> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.MouseMoveEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewMouseMove>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnMouseMove%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.MouseMove" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu prawego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mimo że te [routowane zdarzenia](~/docs/framework/wpf/advanced/routed-events-overview.md) są zgodne z trasą propagacji za pośrednictwem drzewa elementów, jest to bezpośrednie kierowane zdarzenie, które jest zgłaszane i ponownie zgłaszane w drzewie <xref:System.Windows.ContentElement>elementów.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportują charakterystyczne dla przycisku myszy zdarzenia bazowego <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> , które jest dołączonym zdarzeniem przetwarzanym przez każdy element wraz z trasą zdarzenia.  
  
 Argumenty tego zdarzenia uwidaczniają argumenty bazowego <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzenia. Jeśli to zdarzenie jest oznaczone jako obsługiwane wzdłuż trasy zdarzenia, są nadal wywoływane zdarzenia dotyczące przycisku myszy. Jednak programy obsługi zdarzeń dla przycisku myszy muszą być dodawane jawnie <xref:System.Windows.ContentElement.AddHandler%2A>, z opcją obsługi zdarzeń, które są już oznaczone jako obsługiwane, aby były detektorami zdarzenia.  
  
 Koncepcyjnie, pomyśl o tym zdarzeniu (i innych zdarzeniach myszy w <xref:System.Windows.ContentElement>systemie) jako myszy "usługi" (z definicją usługi dostarczaną <xref:System.Windows.Input.Mouse> przez klasę). Zdarzenie dodaje wygodę niezbędną do sprawdzania, czy Stany przycisków myszy (w górę i w dół) oryginalnych zdarzeń myszy w danych zdarzenia. W przypadku bardziej zaawansowanych scenariuszy, takich jak sprawdzanie Stanów przycisków niestandardowymi, może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] <xref:System.Windows.Input.Mouse> <xref:System.Windows.ContentElement>klasy w klasie zamiast.  
  
 Zdarzenia myszy prawego przycisku często mają natywną obsługę w scenariuszach aplikacji. Na przykład prawy przycisk myszy w dół może wyświetlić menu kontekstowe. Zobacz temat [Przegląd](~/docs/framework/wpf/controls/contextmenu-overview.md).  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.MouseRightButtonDownEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po udostępnieniu prawego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mimo że te [routowane zdarzenia](~/docs/framework/wpf/advanced/routed-events-overview.md) są zgodne z trasą propagacji za pośrednictwem drzewa elementów, jest to bezpośrednie kierowane zdarzenie, które jest zgłaszane i ponownie zgłaszane w drzewie <xref:System.Windows.ContentElement>elementów.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportują charakterystyczne dla przycisku myszy zdarzenia bazowego <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> , które jest dołączonym zdarzeniem przetwarzanym przez każdy element wraz z trasą zdarzenia.  
  
 Argumenty tego zdarzenia uwidaczniają argumenty bazowego <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> zdarzenia. Jeśli to zdarzenie jest oznaczone jako obsługiwane wzdłuż trasy zdarzenia, są nadal wywoływane zdarzenia dotyczące przycisku myszy. Jednak programy obsługi zdarzeń dla przycisku myszy muszą być dodawane jawnie <xref:System.Windows.ContentElement.AddHandler%2A>, z opcją obsługi zdarzeń, które są już oznaczone jako obsługiwane, aby były detektorami zdarzenia.  
  
 Koncepcyjnie, pomyśl o tym zdarzeniu (i innych zdarzeniach myszy w <xref:System.Windows.ContentElement>systemie) jako myszy "usługi" (z definicją usługi dostarczaną <xref:System.Windows.Input.Mouse> przez klasę). Zdarzenie dodaje wygodę niezbędną do sprawdzania, czy Stany przycisków myszy (w górę i w dół) oryginalnych zdarzeń myszy w danych zdarzenia. W przypadku bardziej zaawansowanych scenariuszy, takich jak sprawdzanie Stanów przycisków niestandardowymi, może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] <xref:System.Windows.Input.Mouse> <xref:System.Windows.ContentElement>klasy w klasie zamiast.  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.MouseRightButtonUpEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po wydaniu dowolnego przycisku myszy nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.MouseUp> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.MouseUp> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 Zdarzenie jest często wywoływane razem z albo <xref:System.Windows.ContentElement.MouseLeftButtonUp> lub <xref:System.Windows.ContentElement.MouseRightButtonUp>, co odpowiada wersji jednego z dwóch standardowych przycisków myszy. <xref:System.Windows.ContentElement.MouseUp> <xref:System.Windows.ContentElement.MouseLeftButtonUp>i <xref:System.Windows.ContentElement.MouseRightButtonUp> są także zdarzenia kierowane, ale są to zdarzenia bezpośrednie kierowane, a odpowiednie zdarzenie specyficzne dla przycisku jest zgłaszane, <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> gdy zdarzenie osiągnie ten element wzdłuż trasy zdarzenia. Zobacz uwagi dla <xref:System.Windows.ContentElement.MouseLeftButtonUp> lub <xref:System.Windows.ContentElement.MouseRightButtonUp>.  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.MouseUpEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewMouseUp>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnMouseUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.MouseUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik obraca kółko myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przechwycenie fokusu lub myszy ma pierwszeństwo przed miejscem, gdzie wskaźnik myszy jest; w związku z tym, jeśli <xref:System.Windows.ContentElement.MouseWheel> otrzymasz zdarzenie z elementu skoncentrowane lub przechwyconych, wskaźnik myszy może znajdować się nad innym elementem.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.MouseWheel> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.MouseWheel> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.MouseWheelEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewMouseWheel>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnMouseWheel%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.MouseWheel" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool&#xA;override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="contentElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">Żądanie przechodzenia, które zawiera właściwość wskazującą tryb przechodzenia w istniejącej kolejności tabulacji lub kierunek przechodzenia wizualnie.</param>
        <summary>Próbuje przenieść fokus z tego elementu do innego elementu. Kierunek przesuwania fokusu jest określany przez kierunek wskazówki, który jest interpretowany w organizacji elementu nadrzędnego wizualizacji dla tego elementu.</summary>
        <returns><see langword="true" />Jeśli żądane przechodzenie zostało wykonane; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Upewnij się, że wartość zwracana przez tę metodę jest sprawdzana. Zwracana wartość `false` może zostać zwrócona, jeśli przechodzenie zostanie uruchomione do tabulatora zdefiniowanego przez kompozycję kontrolki, a żądanie przechodzenia nie zażądało zawijania.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer&#xA;override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="contentElement.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca implementacje specyficzne <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> dla klasy dla infrastruktury Windows Presentation Foundation (WPF).</summary>
        <returns>Implementacja specyficzna <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> dla typu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## <a name="notes-to-inheritors"></a>Uwagi dotyczące dziedziczenia

Implementacja tej metody zwykle wywołuje konstruktora określonej <xref:System.Windows.Automation.Peers.AutomationPeer> implementacji i zwraca ją jako wartość zwracaną.  
  
 Wszystkie <xref:System.Windows.ContentElement> klasy pochodne powinny implementować tę metodę w celu zapewnienia własnych konkretnych <xref:System.Windows.Automation.Peers.AutomationPeer> implementacji infrastruktury WPF. Aby uzyskać szczegółowe informacje na temat implementowania <xref:System.Windows.Automation.Peers.AutomationPeer>tego wzorca, zobacz.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.DragEnter" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.DragLeave" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.DragOver" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDrop : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.DragEnter" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="contentElement.OnGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.GiveFeedbackEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.GiveFeedback" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> , który zawiera dane zdarzenia. Dane zdarzenia muszą zawierać identyfikator <see cref="E:System.Windows.ContentElement.GotFocus" /> zdarzenia.</param>
        <summary>Podnosi zdarzenie <see cref="E:System.Windows.ContentElement.GotFocus" /> kierowane przy użyciu dostarczonych danych zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda, chociaż wirtualna, ma domyślną implementację, która wywołuje zdarzenie.  
  
 Ta metoda jest przeznaczona do zgłaszania zdarzenia i ta sama implementacja metody jest wywoływana wewnętrznie w celu podniesienia zdarzenia, <xref:System.Windows.ContentElement.IsFocused%2A> gdy wartość właściwości zostanie zmieniona.\* Implementacja różni się od innych Windows Presentation Foundation (WPF) w\* implementacjach, które zapewniają wygodny sposób dodawania obsługi klasy dla tego zdarzenia. <xref:System.Windows.ContentElement.OnGotFocus%2A>  
  
## <a name="notes-to-inheritors"></a>Uwagi dotyczące dziedziczenia

O ile nie istnieje zamierzone i nietypowe wymaganie, aby nie podnieść poziomu zdarzenia fokusu, upewnij się, że implementacja wywołuje implementację podstawową. W przeciwnym razie zdarzenie nie zostanie zgłoszone podczas typowych operacji użytkownika, które zwykle ustawiają fokus na tym elemencie. <xref:System.Windows.ContentElement.GotFocus> Jeśli nie zamierzasz skupić się na elemencie, możesz uniemożliwić skoncentrowanie się elementu przez ustawienie <xref:System.Windows.ContentElement.Focusable> na. `false`
Należy pamiętać, że domyślnie <xref:System.Windows.ContentElement.Focusable> nie jest możliwe skoncentrowanie się, <xref:System.Windows.ContentElement.Focusable> dlatego ustawienie może być niepotrzebne.

 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.Focusable" />
        <altmember cref="E:System.Windows.ContentElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnGotMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnGotStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnGotTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klas dla <see cref="E:System.Windows.ContentElement.GotTouchCapture" /> zdarzenia kierowanego, które występuje, gdy dotyk jest przechwytywany do tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> w klasie pochodnej, aby <xref:System.Windows.ContentElement.GotTouchCapture> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsKeyboardFocusedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływana, gdy <see cref="E:System.Windows.ContentElement.IsKeyboardFocusedChanged" /> zdarzenie nieobsłużone zostanie zgłoszone dla tego elementu. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wirtualna jest wyzwalana, gdy wartość <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> właściwości zależności zostanie zmieniona. Metoda wirtualna jest najpierw podnoszona i może manipulować danymi zdarzenia w razie potrzeby. <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> Następnie zdarzenie jest zgłaszane z tym samym wystąpieniem danych zdarzenia. Zwróć uwagę, <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> że zdarzenie nie jest zdarzeniem kierowanym. W związku z tym nie można oznaczyć go jako obsługiwanego w obsłudze klas.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsKeyboardFocusWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Wywoływane tuż przed podjęciem <see cref="E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged" /> zdarzenia przez ten element. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wirtualna jest wyzwalana, gdy wartość <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> właściwości Dependency zmieni się jej wartość. Metoda wirtualna jest najpierw podnoszona i może manipulować danymi zdarzenia w razie potrzeby. <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> Następnie zdarzenie jest zgłaszane z tym samym wystąpieniem danych zdarzenia. Zwróć uwagę, <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> że zdarzenie nie jest zdarzeniem kierowanym. W związku z tym nie można oznaczyć go jako obsługiwanego w obsłudze klas.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsMouseCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływana, gdy <see cref="E:System.Windows.ContentElement.IsMouseCapturedChanged" /> zdarzenie nieobsłużone zostanie zgłoszone dla tego elementu. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wirtualna jest wyzwalana, gdy wartość <xref:System.Windows.ContentElement.IsMouseCaptured%2A> właściwości Dependency zmieni się jej wartość. Metoda wirtualna jest najpierw podnoszona i może manipulować danymi zdarzenia w razie potrzeby. <xref:System.Windows.ContentElement.IsMouseCapturedChanged> Następnie zdarzenie jest zgłaszane z tym samym wystąpieniem danych zdarzenia. Zwróć uwagę, <xref:System.Windows.ContentElement.IsMouseCapturedChanged> że zdarzenie nie jest zdarzeniem kierowanym. W związku z tym nie można oznaczyć go jako obsługiwanego w obsłudze klas.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsMouseCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Wywoływana, gdy <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> zdarzenie nieobsłużone zostanie zgłoszone dla tego elementu. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Ta metoda wirtualna jest wyzwalana, gdy wartość <see cref="P:System.Windows.ContentElement.IsMouseCaptureWithin" /> właściwości Dependency zmieni się jej wartość. Metoda wirtualna jest najpierw podnoszona i może manipulować danymi zdarzenia w razie potrzeby. <see cref="E:System.Windows.ContentElement.IsMouseCaptureWithinChanged" /> Następnie zdarzenie jest zgłaszane z tym samym wystąpieniem danych zdarzenia. Zwróć uwagę, że zdarzenie nie jest zdarzeniem kierowanym; W związku z tym nie można oznaczyć go jako obsługiwanego w obsłudze klas.  
  
Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsMouseDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływana, gdy <see cref="E:System.Windows.ContentElement.IsMouseDirectlyOverChanged" /> zdarzenie nieobsłużone zostanie zgłoszone dla tego elementu. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wirtualna jest wyzwalana, gdy wartość <xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A> właściwości Dependency zmieni się jej wartość. Metoda wirtualna jest najpierw podnoszona i może manipulować danymi zdarzenia w razie potrzeby. <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> Następnie zdarzenie jest zgłaszane z tym samym wystąpieniem danych zdarzenia. Zwróć uwagę, <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> że zdarzenie nie jest zdarzeniem kierowanym. W związku z tym nie można oznaczyć go jako obsługiwanego w obsłudze klas.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsStylusCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Wywoływana, gdy <see cref="E:System.Windows.ContentElement.IsStylusCapturedChanged" /> zdarzenie nieobsłużone zostanie zgłoszone dla tego elementu. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wirtualna jest wyzwalana, gdy wartość <xref:System.Windows.ContentElement.IsStylusCaptured%2A> właściwości Dependency zmieni się jej wartość. Metoda wirtualna jest najpierw podnoszona i może manipulować danymi zdarzenia w razie potrzeby. <xref:System.Windows.ContentElement.IsStylusCapturedChanged> Następnie zdarzenie jest zgłaszane z tym samym wystąpieniem danych zdarzenia. Zwróć uwagę, że zdarzenie nie jest zdarzeniem kierowanym. W związku z tym nie można oznaczyć go jako obsługiwanego w obsłudze klas.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsStylusCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływana, gdy <see cref="E:System.Windows.ContentElement.IsStylusCaptureWithinChanged" /> zdarzenie nieobsłużone zostanie zgłoszone dla tego elementu. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wirtualna jest wyzwalana, gdy wartość <xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A> właściwości Dependency zmieni się jej wartość. Metoda wirtualna jest najpierw podnoszona i może manipulować danymi zdarzenia w razie potrzeby. <xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged> Następnie zdarzenie jest zgłaszane z tym samym wystąpieniem danych zdarzenia. Zwróć uwagę, że zdarzenie nie jest zdarzeniem kierowanym. W związku z tym nie można oznaczyć go jako obsługiwanego w obsłudze klas.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="contentElement.OnIsStylusDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływana, gdy <see cref="E:System.Windows.ContentElement.IsStylusDirectlyOverChanged" /> zdarzenie nieobsłużone zostanie zgłoszone dla tego elementu. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wirtualna jest wyzwalana, gdy wartość <xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A> właściwości Dependency zmieni się jej wartość. Metoda wirtualna jest najpierw podnoszona i może manipulować danymi zdarzenia w razie potrzeby. <xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged> Następnie zdarzenie jest zgłaszane z tym samym wystąpieniem danych zdarzenia. Zwróć uwagę, że zdarzenie nie jest zdarzeniem kierowanym. W związku z tym nie można oznaczyć go jako obsługiwanego w obsłudze klas.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Naciśnięcia klawiszy są obsługiwane przez dedykowanego Menedżera wejściowych. Inne funkcje programistyczne korzystające z naciśnięć klawiszy, na przykład powiązania danych wejściowych i poleceń, mogą obsłużyć naciśnięcie klawisza, zanim zostanie uwidocznione jako ogólne naciśnięcie klawisza. Jeśli te funkcje systemu wejścia oznaczają zdarzenie jako obsłużone, a <xref:System.Windows.ContentElement.OnKeyDown%2A> następnie nie są wywoływane.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Naciśnięcia klawiszy są obsługiwane przez dedykowanego Menedżera wejściowych. Inne funkcje programistyczne korzystające z naciśnięć klawiszy, na przykład powiązania danych wejściowych i poleceń, mogą obsłużyć naciśnięcie klawisza, zanim zostanie uwidocznione jako ogólne naciśnięcie klawisza. Jeśli te funkcje systemu wejścia oznaczają zdarzenie jako obsłużone, a <xref:System.Windows.ContentElement.OnKeyUp%2A> następnie nie są wywoływane.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> , który zawiera dane zdarzenia. Dane zdarzenia muszą zawierać identyfikator <see cref="E:System.Windows.ContentElement.LostFocus" /> zdarzenia.</param>
        <summary>Podnosi zdarzenie <see cref="E:System.Windows.ContentElement.LostFocus" /> kierowane przy użyciu dostarczonych danych zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda, chociaż wirtualna, ma domyślną implementację, która wywołuje zdarzenie.  
  
 Ta metoda jest przeznaczona do zgłaszania zdarzenia i ta sama implementacja metody jest wywoływana wewnętrznie w celu podniesienia zdarzenia, <xref:System.Windows.ContentElement.IsFocused%2A> gdy wartość właściwości zostanie zmieniona.\* Ta implementacja różni się od innych Windows Presentation Foundation (WPF) w\* implementacjach, które zapewniają wygodny sposób dodawania obsługi klasy dla tego zdarzenia.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>O ile nie istnieje zamierzone i nietypowe wymaganie, aby nie podnieść poziomu zdarzenia fokusu, upewnij się, że implementacja wywołuje implementację podstawową. W przeciwnym razie zdarzenie nie zostanie zgłoszone podczas typowych operacji użytkownika, które zwykle ustawiają fokus na tym elemencie. <see cref="E:System.Windows.ContentElement.LostFocus" /> Jeśli nie zamierzasz skupić się na elemencie, możesz uniemożliwić skoncentrowanie się elementu przez ustawienie <see cref="P:System.Windows.ContentElement.Focusable" /> na. <see langword="false" /></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> Zawiera dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnLostMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> Zawiera dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnLostStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawiera dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnLostTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.ContentElement.LostTouchCapture" /> zdarzenia trasowanego, gdy ten element utraci funkcję przechwytywania dotykowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> w klasie pochodnej, aby <xref:System.Windows.ContentElement.LostTouchCapture> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. To zdarzenie służy do raportowania szczegółowych informacji o naciśnięciu przycisku myszy i stanie obsługiwanym.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.MouseDown" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Akcje przycisków myszy są również obsługiwane przez dedykowanego Menedżera danych wejściowych. Inne funkcje programistyczne, które opierają się na akcjach przycisku myszy, takie jak powiązania danych wejściowych i poleceń, mogą wywoływać programy obsługi dla akcji, zanim zostanie ono ujawnione jako ogólna akcja przycisku myszy. Jeśli te funkcje systemu wejścia oznaczają <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzenie jako obsłużone, <xref:System.Windows.ContentElement.OnMouseDown%2A> nie są wywoływane.  
  
 Jeśli używasz tej procedury obsługi klasy do oznaczania zdarzenia jako obsługiwanego, może to mieć wpływ na następujące <xref:System.Windows.ContentElement.MouseLeftButtonDown> zdarzenia <xref:System.Windows.ContentElement.MouseRightButtonDown>: i. Każde z tych zdarzeń może zostać zgłoszone w momencie <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> odebrania elementu odbiorczego.  
  
 Po oznaczeniu tego zdarzenia jako obsługiwanego w obsłudze klasy, podzdarzenia nadal są wywoływane; jednak przechodzą stan obsłużony w danych zdarzenia. Jeśli zdarzenie jest obsługiwane w obsłudze klas, programy obsługi wystąpień dla zdarzeń nie są wywoływane, chyba że jawnie użyto <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> `handledEventsToo` `true` programu w celu dołączenia programów obsługi. Procedury obsługi klas również nie są wywoływane, <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> Jeśli te procedury obsługi klas nie zostały zarejestrowane z podpisem za pomocą. `handledEventsToo` `true` Dzięki obsłudze <xref:System.Windows.ContentElement.OnMouseDown%2A>, oznacza to, że obsługa klasy jest uwzględniana dla wszystkich możliwych akcji po kliknięciu przycisku myszy. Takie zachowanie może być niepożądane; w związku z tym należy zachować ostrożność podczas używania tej metody wirtualnej do oznaczania zdarzeń jako obsłużonych.  
  
 Każde zdarzenie bezpośrednie specyficzne dla przycisku ma także wirtualną\* metodę. Rozważ, czy zastąpienie tych programów obsługi klas właściwych dla przycisku może być bardziej odpowiednie.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy w tym elemencie <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> zostanie zgłoszone nieobsłużone zdarzenie. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym z strategią routingu bezpośredniego. Oznaczanie zdarzenia jako obsługiwanego jest nadal przydatne do zapobiegania wywoływaniu typowych programów obsługi wystąpień (tych, które `handledEventsToo`nie są określone).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy w tym elemencie <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> zostanie zgłoszone nieobsłużone zdarzenie. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym z strategią routingu bezpośredniego. Oznaczanie zdarzenia jako obsługiwanego jest nadal przydatne do zapobiegania wywoływaniu typowych programów obsługi wystąpień (tych, które `handledEventsToo`nie są określone).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłaszają naciśnięcie lewego przycisku myszy.</param>
        <summary>Wywoływane, gdy dla tego elementu <see cref="E:System.Windows.ContentElement.MouseLeftButtonDown" /> zgłoszono nieobsłużone zdarzenie. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseLeftButtonDown> Zdarzenie wydaje się podróżować trasą propagacji, ale rzeczywiście podróżuje w sposób pośredni. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>to podstawowe zdarzenie, które jest kierowane przez bąbelki, <xref:System.Windows.ContentElement> a każdy z nich jest używany do wywołania bezpośredniego kierowanego zdarzenia <xref:System.Windows.ContentElement.MouseLeftButtonDown>do trasy zdarzeń. Mimo że można oznaczyć <xref:System.Windows.ContentElement.MouseLeftButtonDown> zdarzenie jako obsługiwane dla celów tego elementu, przewidziany stan nie perpetuate się do innych elementów wzdłuż trasy zdarzenia. Można jednak oznaczyć zdarzenie jako obsłużone w celu uniemożliwienia wywoływania ogólnych programów obsługi wystąpień (tych, które nie zostały określone `handledEventsToo`).  
  
 Domyślna implementacja ogólnej obsługi zdarzeń myszy w programie <xref:System.Windows.ContentElement> nasłuchuje <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenie lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej Zarejestruj procedurę obsługi klasy alternatywnej dla <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Nie można zmienić zachowania <xref:System.Windows.ContentElement> obsługi myszy przez zastąpienie. <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>  
  
 Alternatywnie można zastąpić tę metodę, aby zmienić obsługę zdarzeń dla określonego stanu myszy. Niezależnie od tego, czy chcesz wywołać implementację podstawową, zależy od danego scenariusza. Niepowodzenie wywołania elementu Base powoduje wyłączenie domyślnej obsługi danych wejściowych dla tego zdarzenia myszy w klasach nadrzędnych, <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>które również powinny być wywoływane. Na przykład można dziedziczyć z <xref:System.Windows.Controls.Button> klasy pochodnej i zastąpić <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> ją bez wywoływania podstawowej implementacji, jednak to zastąpienie spowoduje wyłączenie <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłaszają, że został wystawiony lewy przycisk myszy.</param>
        <summary>Wywoływane, gdy nieobsłużone <see cref="E:System.Windows.ContentElement.MouseLeftButtonUp" /> zdarzenie osiągnie element w swojej trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseLeftButtonUp> Zdarzenie wydaje się podróżować trasą propagacji, ale rzeczywiście podróżuje w sposób pośredni. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>to podstawowe zdarzenie, które jest kierowane przez bąbelki, <xref:System.Windows.ContentElement> a każdy z nich jest używany do wywołania bezpośredniego kierowanego zdarzenia <xref:System.Windows.ContentElement.MouseLeftButtonUp>do trasy zdarzeń. Mimo że można oznaczyć <xref:System.Windows.ContentElement.MouseLeftButtonUp> zdarzenie jako obsługiwane dla celów tego elementu, przewidziany stan nie perpetuate się do innych elementów wzdłuż trasy zdarzenia. Można jednak oznaczyć zdarzenie jako obsłużone w celu uniemożliwienia wywoływania ogólnych programów obsługi wystąpień (tych, które nie zostały określone `handledEventsToo`).  
  
 Domyślna implementacja ogólnej obsługi zdarzeń myszy w programie <xref:System.Windows.ContentElement> nasłuchuje <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenie lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej Zarejestruj procedurę obsługi klasy alternatywnej dla <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Nie można zmienić zachowania <xref:System.Windows.ContentElement> obsługi myszy przez zastąpienie. <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.MouseMove" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłaszają naciśnięcie prawego przycisku myszy.</param>
        <summary>Wywoływane, gdy nieobsłużone <see cref="E:System.Windows.ContentElement.MouseRightButtonDown" /> zdarzenie osiągnie element w swojej trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseRightButtonDown> Zdarzenie wydaje się podróżować trasą propagacji, ale rzeczywiście podróżuje w sposób pośredni. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>to podstawowe zdarzenie, które jest kierowane przez bąbelki, <xref:System.Windows.ContentElement> a każdy z nich jest używany do wywołania bezpośredniego kierowanego zdarzenia <xref:System.Windows.ContentElement.MouseRightButtonDown>do trasy zdarzeń. Mimo że można oznaczyć <xref:System.Windows.ContentElement.MouseRightButtonDown> zdarzenie jako obsługiwane dla celów tego elementu, przewidziany stan nie perpetuate się do innych elementów wzdłuż trasy zdarzenia. Można jednak oznaczyć zdarzenie jako obsłużone w celu uniemożliwienia wywoływania ogólnych programów obsługi wystąpień (tych, które nie zostały określone `handledEventsToo`).  
  
 Domyślna implementacja ogólnej obsługi zdarzeń myszy w programie <xref:System.Windows.ContentElement> nasłuchuje <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenie lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej Zarejestruj procedurę obsługi klasy alternatywnej dla <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Nie można zmienić zachowania <xref:System.Windows.ContentElement> obsługi myszy przez zastąpienie. <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>  
  
 Alternatywnie można zastąpić tę metodę, aby zmienić obsługę zdarzeń dla określonego stanu myszy. Niezależnie od tego, czy chcesz wywołać implementację podstawową, zależy od danego scenariusza. Niepowodzenie wywołania elementu Base powoduje wyłączenie domyślnej obsługi danych wejściowych dla tego zdarzenia myszy w klasach nadrzędnych, <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>które również powinny być wywoływane. Na przykład można dziedziczyć z <xref:System.Windows.Controls.Control> klasy pochodnej i przesłonić <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> ją bez wywoływania Base; jednak to zastąpienie powoduje wyłączenie usług menu kontekstowego w kontrolce, <xref:System.Windows.Controls.Control> które są częścią zachowania domyślnego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia są raportowane po wydaniu prawego przycisku myszy.</param>
        <summary>Wywoływane, gdy nieobsłużone <see cref="E:System.Windows.ContentElement.MouseRightButtonUp" /> zdarzenie osiągnie element w swojej trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.MouseRightButtonUp> Zdarzenie wydaje się podróżować trasą propagacji, ale rzeczywiście podróżuje w sposób pośredni. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>to podstawowe zdarzenie, które jest kierowane przez bąbelki, <xref:System.Windows.ContentElement> a każdy z nich jest używany do wywołania bezpośredniego kierowanego zdarzenia <xref:System.Windows.ContentElement.MouseRightButtonUp>do trasy zdarzeń. Mimo że można oznaczyć <xref:System.Windows.ContentElement.MouseRightButtonUp> zdarzenie jako obsługiwane dla celów tego elementu, przewidziany stan nie perpetuate się do innych elementów wzdłuż trasy zdarzenia. Można jednak oznaczyć zdarzenie jako obsłużone w celu uniemożliwienia wywoływania ogólnych programów obsługi wystąpień (tych, które nie zostały określone `handledEventsToo`).  
  
 Domyślna implementacja ogólnej obsługi zdarzeń myszy w programie <xref:System.Windows.ContentElement> nasłuchuje <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenie lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej Zarejestruj procedurę obsługi klasy alternatywnej dla <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Nie można zmienić zachowania <xref:System.Windows.ContentElement> obsługi myszy przez zastąpienie. <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłaszają, że przycisk myszy został wydzierżawiony.</param>
        <summary>Wywoływane, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.MouseUp" /> zdarzenie osiągnie element w swojej trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Akcje przycisków myszy są również obsługiwane przez dedykowanego Menedżera danych wejściowych. Inne funkcje programistyczne, które opierają się na akcjach przycisku myszy, takie jak powiązania danych wejściowych i poleceń, mogą wywoływać programy obsługi dla akcji, zanim zostanie ono ujawnione jako ogólna akcja przycisku myszy. Jeśli te funkcje systemu wejścia oznaczają <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> zdarzenie jako obsłużone, <xref:System.Windows.ContentElement.OnMouseUp%2A> nie są wywoływane.  
  
 Jeśli używasz tej procedury obsługi klasy do oznaczania zdarzenia jako obsługiwanego, może to mieć wpływ na następujące <xref:System.Windows.ContentElement.MouseLeftButtonUp> zdarzenia <xref:System.Windows.ContentElement.MouseRightButtonUp>: i. Każde z tych zdarzeń może zostać zgłoszone w momencie <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> odebrania elementu odbiorczego.  
  
 Po oznaczeniu tego zdarzenia jako obsługiwanego w obsłudze klasy, podzdarzenia nadal są wywoływane; jednak przechodzą stan obsłużony w danych zdarzenia. Jeśli zdarzenie jest obsługiwane w obsłudze klas, programy obsługi wystąpień dla zdarzeń nie są wywoływane, chyba że jawnie użyto <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> `handledEventsToo` `true` programu w celu dołączenia programów obsługi. Procedury obsługi klas również nie są wywoływane, <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> Jeśli te procedury obsługi klas nie zostały zarejestrowane z podpisem za pomocą. `handledEventsToo` `true` Dzięki obsłudze <xref:System.Windows.ContentElement.OnMouseUp%2A>, oznacza to, że obsługa klasy jest uwzględniana dla wszystkich możliwych akcji przycisku myszy. Takie zachowanie może być niepożądane; W związku z tym należy zachować ostrożność podczas używania tej metody wirtualnej do oznaczania zdarzeń jako obsłużonych.  
  
 Każde zdarzenie bezpośrednie specyficzne dla przycisku ma także wirtualną\* metodę. Rozważ, czy zastąpienie tych programów obsługi klas właściwych dla przycisku może być bardziej odpowiednie.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="contentElement.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseWheelEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit" Usage="contentElement.OnPreviewDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.PreviewDrop" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="contentElement.OnPreviewGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.GiveFeedbackEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnPreviewGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="contentElement.OnPreviewKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="contentElement.OnPreviewLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia raportują, że co najmniej jeden przycisk myszy został naciśnięty.</param>
        <summary>Wywoływana, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> zdarzenie połączonej trasy osiągnie element w swojej trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Akcje przycisków myszy są również obsługiwane przez dedykowanego Menedżera danych wejściowych. Inne funkcje programistyczne, które opierają się na akcjach przycisku myszy, takie jak powiązania danych wejściowych i poleceń, mogą wywoływać programy obsługi dla akcji, zanim zostanie ono ujawnione jako ogólna akcja przycisku myszy. Jeśli te funkcje systemu wejścia oznaczają <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> zdarzenie jako obsłużone, <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> nie są wywoływane.  
  
 Jeśli używasz tej procedury obsługi klasy do oznaczania zdarzenia jako obsługiwanego, może to mieć wpływ na następujące <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> zdarzenia <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>: i. Każde z tych zdarzeń może zostać zgłoszone w momencie <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> odebrania elementu odbiorczego.  
  
 Po oznaczeniu tego zdarzenia jako obsługiwanego w obsłudze klasy, podzdarzenia nadal są wywoływane; jednak przechodzą stan obsłużony w danych zdarzenia. Jeśli zdarzenie jest obsługiwane w obsłudze klas, programy obsługi wystąpień dla zdarzeń nie są wywoływane, chyba że jawnie użyto <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> `handledEventsToo` `true` programu w celu dołączenia programów obsługi. Procedury obsługi klas również nie są wywoływane, <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> Jeśli te procedury obsługi klas nie zostały zarejestrowane z podpisem za pomocą. `handledEventsToo` `true` Dzięki obsłudze <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A>, oznacza to, że obsługa klasy jest uwzględniana dla wszystkich możliwych akcji po kliknięciu przycisku myszy. Takie zachowanie może być niepożądane; W związku z tym należy zachować ostrożność podczas używania tej metody wirtualnej do oznaczania zdarzeń jako obsłużonych.  
  
 Każde zdarzenie bezpośrednie specyficzne dla przycisku ma także wirtualną\* metodę. Rozważ, czy zastąpienie tych programów obsługi klas właściwych dla przycisku może być bardziej odpowiednie.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłaszają naciśnięcie lewego przycisku myszy.</param>
        <summary>Wywoływane, gdy nieobsłużone <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> zdarzenie osiągnie element w swojej trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> Zdarzenie wydaje się kierować trasą tunelowania, ale rzeczywiście podróżuje w sposób pośredni. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>to zdarzenie bazowe, które jest trasowane przez tunel, a <xref:System.Windows.ContentElement> każdy z nich jest używany do wywołania bezpośredniego kierowanego zdarzenia <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>do trasy zdarzeń. Mimo że można oznaczyć <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> zdarzenie jako obsługiwane dla celów tego elementu, przewidziany stan nie perpetuate się do innych elementów wzdłuż trasy zdarzenia. Można jednak oznaczyć zdarzenie jako obsłużone w celu uniemożliwienia wywoływania ogólnych programów obsługi wystąpień (tych, które nie zostały określone `handledEventsToo`).  
  
 Domyślna implementacja ogólnej obsługi zdarzeń myszy w programie <xref:System.Windows.ContentElement> nasłuchuje <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenie lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej Zarejestruj procedurę obsługi klasy alternatywnej dla <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Nie można zmienić zachowania <xref:System.Windows.ContentElement> obsługi myszy przez zastąpienie. <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>  
  
 Alternatywnie można zastąpić tę metodę, aby zmienić obsługę zdarzeń dla określonego stanu myszy. Niezależnie od tego, czy chcesz wywołać implementację podstawową, zależy od danego scenariusza. Niepowodzenie wywołania elementu Base powoduje wyłączenie domyślnej obsługi danych wejściowych dla tego zdarzenia myszy w klasach nadrzędnych, <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>które również powinny być wywoływane. Na przykład można dziedziczyć z <xref:System.Windows.Controls.Button> klasy pochodnej i zastąpić <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> ją bez wywoływania podstawowej implementacji, jednak to zastąpienie spowoduje wyłączenie <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłaszają, że został wystawiony lewy przycisk myszy.</param>
        <summary>Wywoływane, gdy nieobsłużone <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> zdarzenie osiągnie element w swojej trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> Zdarzenie wydaje się kierować trasą tunelowania, ale rzeczywiście podróżuje w sposób pośredni. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>to zdarzenie bazowe, które jest trasowane przez tunel, a <xref:System.Windows.ContentElement> każdy z nich jest używany do wywołania bezpośredniego kierowanego zdarzenia <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>do trasy zdarzeń. Mimo że można oznaczyć <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> zdarzenie jako obsługiwane dla celów tego elementu, przewidziany stan nie perpetuate się do innych elementów wzdłuż trasy zdarzenia. Można jednak oznaczyć zdarzenie jako obsłużone w celu uniemożliwienia wywoływania ogólnych programów obsługi wystąpień (tych, które nie zostały określone `handledEventsToo`).  
  
 Domyślna implementacja ogólnej obsługi zdarzeń myszy w programie <xref:System.Windows.ContentElement> nasłuchuje <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenie lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej Zarejestruj procedurę obsługi klasy alternatywnej dla <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Nie można zmienić zachowania <xref:System.Windows.ContentElement> obsługi myszy przez zastąpienie. <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłaszają naciśnięcie prawego przycisku myszy.</param>
        <summary>Wywoływane, gdy nieobsłużone <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> zdarzenie osiągnie element w swojej trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> Zdarzenie wydaje się kierować trasą tunelowania, ale rzeczywiście podróżuje w sposób pośredni. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>to zdarzenie bazowe, które jest trasowane przez tunel, a <xref:System.Windows.ContentElement> każdy z nich jest używany do wywołania bezpośredniego kierowanego zdarzenia <xref:System.Windows.ContentElement.MouseRightButtonDown>do trasy zdarzeń. Mimo że można oznaczyć <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> zdarzenie jako obsługiwane dla celów tego elementu, przewidziany stan nie perpetuate się do innych elementów wzdłuż trasy zdarzenia. Można jednak oznaczyć zdarzenie jako obsłużone w celu uniemożliwienia wywoływania ogólnych programów obsługi wystąpień (tych, które nie zostały określone `handledEventsToo`).  
  
 Domyślna implementacja ogólnej obsługi zdarzeń myszy w programie <xref:System.Windows.ContentElement> nasłuchuje <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenie lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej Zarejestruj procedurę obsługi klasy alternatywnej dla <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Nie można zmienić zachowania <xref:System.Windows.ContentElement> obsługi myszy przez zastąpienie. <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>  
  
 Alternatywnie można zastąpić tę metodę, aby zmienić obsługę zdarzeń dla określonego stanu myszy. Niezależnie od tego, czy chcesz wywołać implementację podstawową, zależy od danego scenariusza. Niepowodzenie wywołania elementu Base powoduje wyłączenie domyślnej obsługi danych wejściowych dla tego zdarzenia myszy w klasach nadrzędnych, <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>które również powinny być wywoływane. Na przykład można dziedziczyć z <xref:System.Windows.Controls.Control> klasy pochodnej i przesłonić <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> ją bez wywoływania Base; jednak to zastąpienie powoduje wyłączenie usług menu kontekstowego w kontrolce, <xref:System.Windows.Controls.Control> które są częścią zachowania domyślnego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia są raportowane po wydaniu prawego przycisku myszy.</param>
        <summary>Wywoływane, gdy nieobsłużone <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> zdarzenie osiągnie element w swojej trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> Zdarzenie wydaje się kierować trasą tunelowania, ale rzeczywiście podróżuje w sposób pośredni. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>to zdarzenie bazowe, które jest trasowane przez tunel, a <xref:System.Windows.ContentElement> każdy z nich jest używany do wywołania bezpośredniego kierowanego zdarzenia <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>do trasy zdarzeń. Mimo że można oznaczyć <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> zdarzenie jako obsługiwane dla celów tego elementu, przewidziany stan nie perpetuate się do innych elementów wzdłuż trasy zdarzenia. Można jednak oznaczyć zdarzenie jako obsłużone w celu uniemożliwienia wywoływania ogólnych programów obsługi wystąpień (tych, które nie zostały określone `handledEventsToo`).  
  
 Domyślna implementacja ogólnej obsługi zdarzeń myszy w programie <xref:System.Windows.ContentElement> nasłuchuje <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenie lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej Zarejestruj procedurę obsługi klasy alternatywnej dla <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Nie można zmienić zachowania <xref:System.Windows.ContentElement> obsługi myszy przez zastąpienie. <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłaszają, że co najmniej jeden przycisk myszy został wykryty.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Akcje przycisków myszy są również obsługiwane przez dedykowanego Menedżera danych wejściowych. Inne funkcje programistyczne, które opierają się na akcjach przycisku myszy, takie jak powiązania danych wejściowych i poleceń, mogą wywoływać programy obsługi dla akcji, zanim zostanie ono ujawnione jako ogólna akcja przycisku myszy. Jeśli te funkcje systemu wejścia oznaczają <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> zdarzenie jako obsłużone, <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> nie są wywoływane.  
  
 Jeśli używasz tej procedury obsługi klasy do oznaczania zdarzenia jako obsługiwanego, może to mieć wpływ na następujące <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> zdarzenia <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>: i. Każde z tych zdarzeń może zostać zgłoszone w momencie <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> odebrania elementu odbiorczego.  
  
 Po oznaczeniu tego zdarzenia jako obsługiwanego w obsłudze klasy, podzdarzenia nadal są wywoływane; jednak przechodzą stan obsłużony w danych zdarzenia. Jeśli zdarzenie jest obsługiwane w obsłudze klas, programy obsługi wystąpień dla zdarzeń nie są wywoływane, chyba że jawnie użyto <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> `handledEventsToo` `true` programu w celu dołączenia programów obsługi. Procedury obsługi klas również nie są wywoływane, <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> Jeśli te procedury obsługi klas nie zostały zarejestrowane z podpisem za pomocą. `handledEventsToo` `true` Dzięki obsłudze <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A>, oznacza to, że obsługa klasy jest uwzględniana dla wszystkich możliwych akcji przycisku myszy. Takie zachowanie może być niepożądane; W związku z tym należy zachować ostrożność podczas używania tej metody wirtualnej do oznaczania zdarzeń jako obsłużonych.  
  
 Każde zdarzenie bezpośrednie specyficzne dla przycisku ma także wirtualną\* metodę. Rozważ, czy zastąpienie tych programów obsługi klas właściwych dla przycisku może być bardziej odpowiednie.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="contentElement.OnPreviewMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseWheelEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="contentElement.OnPreviewQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.QueryContinueDragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusButtonEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusButtonEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusDownEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnPreviewStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="contentElement.OnPreviewTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.TextCompositionEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.ContentElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnPreviewTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klas dla <see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> zdarzenia kierowanego, gdy dotknięciem jest naciśnięcie tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> w klasie pochodnej, aby <xref:System.Windows.ContentElement.PreviewTouchDown> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnPreviewTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> zdarzenia trasowanego, gdy nastąpi przeniesienie dotyku w obrębie tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> w klasie pochodnej, aby <xref:System.Windows.ContentElement.PreviewTouchMove> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnPreviewTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> zdarzenia trasowanego, gdy nastąpi wyprowadzenie dotyku wewnątrz tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> w klasie pochodnej, aby <xref:System.Windows.ContentElement.PreviewTouchUp> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="contentElement.OnQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.QueryContinueDragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit&#xA;override this.OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit" Usage="contentElement.OnQueryCursor e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.QueryCursorEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusButtonEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="contentElement.OnStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusButtonEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="contentElement.OnStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusDownEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusDown" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> dołączone zdarzenie jest zgłaszane przez ten element. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Oznaczanie zdarzenia jako obsługiwanego jest nadal przydatne do zapobiegania wywoływaniu typowych programów obsługi wystąpień (tych, `handledEventsToo`które nie są określone).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> dołączone zdarzenie jest zgłaszane przez ten element. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Oznaczanie zdarzenia jako obsługiwanego jest nadal przydatne do zapobiegania wywoływaniu typowych programów obsługi wystąpień (tych, `handledEventsToo`które nie są określone).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusMove" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="contentElement.OnStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="contentElement.OnStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusUp" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="contentElement.OnTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.TextCompositionEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzenia w\* metodach: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on\* jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może zostać zgłoszone przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.ContentElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klas dla <see cref="E:System.Windows.ContentElement.TouchDown" /> zdarzenia kierowanego, które występuje po naciśnięciu dotknięcia wewnątrz tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnTouchDown%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.ContentElement.OnTouchDown%2A> w klasie pochodnej, aby <xref:System.Windows.ContentElement.TouchDown> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.ContentElement.OnTouchDown%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.ContentElement.TouchEnter" /> zdarzenia trasowanego, gdy nastąpi przejście z zewnątrz do wewnątrz granic tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnTouchEnter%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.ContentElement.OnTouchEnter%2A> w klasie pochodnej, aby <xref:System.Windows.ContentElement.TouchEnter> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.ContentElement.OnTouchEnter%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.ContentElement.TouchLeave" /> zdarzenia trasowanego, gdy nastąpi przejście z wewnątrz do granic tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnTouchLeave%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.ContentElement.OnTouchLeave%2A> w klasie pochodnej, aby <xref:System.Windows.ContentElement.TouchLeave> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.ContentElement.OnTouchLeave%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.ContentElement.TouchMove" /> zdarzenia trasowanego, gdy nastąpi przeniesienie dotyku w obrębie tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnTouchMove%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.ContentElement.OnTouchMove%2A> w klasie pochodnej, aby <xref:System.Windows.ContentElement.TouchMove> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.ContentElement.OnTouchMove%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="contentElement.OnTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.ContentElement.TouchUp" /> zdarzenia trasowanego, gdy nastąpi wyprowadzenie dotyku wewnątrz tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.OnTouchUp%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.ContentElement.OnTouchUp%2A> w klasie pochodnej, aby <xref:System.Windows.ContentElement.TouchUp> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.ContentElement.OnTouchUp%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject&#xA;override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="contentElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">Kierunek żądanego przechodzenia fokusu.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, zwraca element, który otrzymuje fokus dla określonego kierunku przechodzenia fokusu, bez faktycznego przesuwania fokusu do tego elementu.</summary>
        <returns>Element, który uzyskał fokus, jeśli <see cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> został faktycznie wywołany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody w tej klasie jest niekompletna i zawsze zwraca wartość `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragEnter : System.Windows.DragEventHandler " Usage="member this.PreviewDragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłosi bazowe zdarzenie przeciągania z tym elementem jako element docelowy przeciągania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewDragEnter> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewDragEnter> zdarzenia są dołączone do <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewDragEnterEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.DragEnter>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewDragEnter%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewDragEnter" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragLeave : System.Windows.DragEventHandler " Usage="member this.PreviewDragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłosi bazowe zdarzenie przeciągania przy użyciu tego elementu jako punktu początkowego przeciągania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewDragLeave> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewDragLeave> zdarzenia są dołączone do <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewDragLeaveEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.DragLeave>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewDragLeave%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewDragLeave" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragOver : System.Windows.DragEventHandler " Usage="member this.PreviewDragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłosi bazowe zdarzenie przeciągania z tym elementem jako potencjalną tarczą docelową.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewDragOver> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewDragOver> zdarzenia są dołączone do <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewDragOverEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.DragOver>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewDragOver%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewDragOver" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberSignature Language="F#" Value="member this.PreviewDrop : System.Windows.DragEventHandler " Usage="member this.PreviewDrop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie upuszczania z tym elementem jako element docelowy upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewDrop> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewDrop> zdarzenia są dołączone do <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewDropEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.Drop>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewDrop%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDropEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewDropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewDrop" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po rozpoczęciu operacji przeciągania i upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.PreviewGiveFeedback> Zdarzenie włącza Źródło zdarzenia przeciągania, aby zmodyfikować jego wygląd, aby dać użytkownikowi opinię wizualną podczas operacji przeciągania i upuszczania.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewGiveFeedback> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewGiveFeedback> zdarzenia są dołączone do <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.GiveFeedback>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewGiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewGiveFeedback" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klawiatura ma fokus w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ to zdarzenie używa routingu tunelowania, element, który ma fokus, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który ma fokus.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> zdarzenia są dołączone do <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.GotKeyboardFocus>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu klawisza, gdy klawiatura ma fokus w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa kluczowych współdziała z innymi funkcjami platformy, takimi jak tworzenie poleceń i składanie tekstu. <xref:System.Windows.ContentElement.KeyDown> Zdarzenie jest zdarzeniem wprowadzania tekstu niższego poziomu, które może nie zachowywać się zgodnie z oczekiwaniami w niektórych kontrolkach. Wynika to z faktu, że niektóre kontrolki mają założenia kontrolne lub obsługujące klasy, które udostępniają wyższego poziomu obsługę wprowadzania tekstu i powiązane zdarzenia.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewKeyDown> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewKeyDown> zdarzenia są dołączone do <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewKeyDownEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.KeyDown>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewKeyDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewKeyDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po wydaniu klucza, gdy klawiatura ma fokus w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa kluczowych współdziała z innymi funkcjami platformy, takimi jak tworzenie poleceń i składanie tekstu. <xref:System.Windows.ContentElement.KeyUp> Zdarzenie jest zdarzeniem wprowadzania tekstu niższego poziomu, które może nie zachowywać się zgodnie z oczekiwaniami w niektórych kontrolkach. Wynika to z faktu, że niektóre kontrolki mają założenia kontrolne lub obsługujące klasy, które udostępniają wyższego poziomu obsługę wprowadzania tekstu i powiązane zdarzenia. Aby uzyskać szczegółowe informacje, zapoznaj się z dokumentacją dla poszczególnych kontrolek.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewKeyUp> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewKeyUp> zdarzenia są dołączone do <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewKeyUpEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.KeyUp>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewKeyUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewKeyUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klawiatura nie ma już fokusu w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ to zdarzenie używa routingu tunelowania, element, który utracił fokus, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który utracił fokus.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> zdarzenia są dołączone do <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.LostKeyboardFocus>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewLostKeyboardFocus" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu dowolnego przycisku myszy, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewMouseDown> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewMouseDown> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 Zdarzenie jest często wywoływane razem z albo <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> lub <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>, które odpowiada naciśnięciu jednego z dwóch standardowych przycisków myszy. <xref:System.Windows.ContentElement.PreviewMouseDown> <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>i <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> są także zdarzenia kierowane, ale są to zdarzenia bezpośrednie kierowane, a odpowiednie zdarzenie specyficzne dla przycisku jest zgłaszane, <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> gdy zdarzenie osiągnie ten element wzdłuż trasy zdarzenia. Zobacz uwagi dla <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> lub <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>.  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewMouseDownEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.MouseDown>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewMouseDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu lewego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mimo że te [routowane zdarzenia](~/docs/framework/wpf/advanced/routed-events-overview.md) są zgodne z trasą tunelowania za pośrednictwem drzewa elementu, to w rzeczywistości jest zdarzenie bezpośrednie kierowane, które jest zgłaszane i ponownie zgłaszane w drzewie <xref:System.Windows.ContentElement>elementów.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportują charakterystyczne dla przycisku myszy zdarzenia bazowego <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> , które jest dołączonym zdarzeniem przetwarzanym przez każdy element wraz z trasą zdarzenia.  
  
 Argumenty tego zdarzenia uwidaczniają argumenty bazowego <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> zdarzenia. Jeśli to zdarzenie jest oznaczone jako obsługiwane wzdłuż trasy zdarzenia, są nadal wywoływane zdarzenia dotyczące przycisku myszy. Jednak programy obsługi zdarzeń dla przycisku myszy muszą być dodawane jawnie <xref:System.Windows.ContentElement.AddHandler%2A>, z opcją obsługi zdarzeń, które są już oznaczone jako obsługiwane, aby były detektorami zdarzenia.  
  
 Koncepcyjnie, pomyśl o tym zdarzeniu (i innych zdarzeniach myszy w <xref:System.Windows.ContentElement>systemie) jako myszy "usługi" (z definicją usługi dostarczaną <xref:System.Windows.Input.Mouse> przez klasę). Zdarzenie dodaje wygodę niezbędną do sprawdzania, czy Stany przycisków myszy (w górę i w dół) oryginalnych zdarzeń myszy w danych zdarzenia. W przypadku bardziej zaawansowanych scenariuszy, takich jak sprawdzanie Stanów przycisków niestandardowymi, może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] <xref:System.Windows.Input.Mouse> <xref:System.Windows.ContentElement>klasy w klasie zamiast.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po udostępnieniu lewego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mimo że te [routowane zdarzenia](~/docs/framework/wpf/advanced/routed-events-overview.md) są zgodne z trasą tunelowania za pośrednictwem drzewa elementu, to w rzeczywistości jest zdarzenie bezpośrednie kierowane, które jest zgłaszane i ponownie zgłaszane w drzewie <xref:System.Windows.ContentElement>elementów.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportują charakterystyczne dla przycisku myszy zdarzenia bazowego <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> , które jest dołączonym zdarzeniem przetwarzanym przez każdy element wraz z trasą zdarzenia.  
  
 Argumenty tego zdarzenia uwidaczniają argumenty bazowego <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> zdarzenia. Jeśli to zdarzenie jest oznaczone jako obsługiwane wzdłuż trasy zdarzenia, są nadal wywoływane zdarzenia dotyczące przycisku myszy. Jednak programy obsługi zdarzeń dla przycisku myszy muszą być dodawane jawnie <xref:System.Windows.ContentElement.AddHandler%2A>, z opcją obsługi zdarzeń, które są już oznaczone jako obsługiwane, aby były detektorami zdarzenia.  
  
 Koncepcyjnie, pomyśl o tym zdarzeniu (i innych zdarzeniach myszy w <xref:System.Windows.ContentElement>systemie) jako myszy "usługi" (z definicją usługi dostarczaną <xref:System.Windows.Input.Mouse> przez klasę). Zdarzenie dodaje wygodę niezbędną do sprawdzania, czy Stany przycisków myszy (w górę i w dół) oryginalnych zdarzeń myszy w danych zdarzenia. W przypadku bardziej zaawansowanych scenariuszy, takich jak sprawdzanie Stanów przycisków niestandardowymi, może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] <xref:System.Windows.Input.Mouse> <xref:System.Windows.ContentElement>klasy w klasie zamiast.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewMouseLeftButtonUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po przesunięciu wskaźnika myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie występuje, gdy wskaźnik myszy najpierw przechodzi do granic elementów, a także gdy wskaźnik myszy jest przenoszony, gdy nadal pozostały w granicach elementów.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewMouseMove> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewMouseMove> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewMouseMoveEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.MouseMove>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewMouseMove%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewMouseMove" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu prawego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mimo że te [routowane zdarzenia](~/docs/framework/wpf/advanced/routed-events-overview.md) są zgodne z trasą tunelowania za pośrednictwem drzewa elementu, to w rzeczywistości jest zdarzenie bezpośrednie kierowane, które jest zgłaszane i ponownie zgłaszane w drzewie <xref:System.Windows.ContentElement>elementów.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportują charakterystyczne dla przycisku myszy zdarzenia bazowego <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> , które jest dołączonym zdarzeniem przetwarzanym przez każdy element wraz z trasą zdarzenia.  
  
 Argumenty tego zdarzenia uwidaczniają argumenty bazowego <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> zdarzenia. Jeśli to zdarzenie jest oznaczone jako obsługiwane wzdłuż trasy zdarzenia, są nadal wywoływane zdarzenia dotyczące przycisku myszy. Jednak programy obsługi zdarzeń dla przycisku myszy muszą być dodawane jawnie <xref:System.Windows.ContentElement.AddHandler%2A>, z opcją obsługi zdarzeń, które są już oznaczone jako obsługiwane, aby były detektorami zdarzenia.  
  
 Koncepcyjnie, pomyśl o tym zdarzeniu (i innych zdarzeniach myszy w <xref:System.Windows.ContentElement>systemie) jako myszy "usługi" (z definicją usługi dostarczaną <xref:System.Windows.Input.Mouse> przez klasę). Zdarzenie dodaje wygodę niezbędną do sprawdzania, czy Stany przycisków myszy (w górę i w dół) oryginalnych zdarzeń myszy w danych zdarzenia. W przypadku bardziej zaawansowanych scenariuszy, takich jak sprawdzanie Stanów przycisków niestandardowymi, może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] <xref:System.Windows.Input.Mouse> <xref:System.Windows.ContentElement>klasy w klasie zamiast.  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po udostępnieniu prawego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mimo że te [routowane zdarzenia](~/docs/framework/wpf/advanced/routed-events-overview.md) są zgodne z trasą tunelowania za pośrednictwem drzewa elementu, to w rzeczywistości jest zdarzenie bezpośrednie kierowane, które jest zgłaszane i ponownie zgłaszane w drzewie <xref:System.Windows.ContentElement>elementów.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportują charakterystyczne dla przycisku myszy zdarzenia bazowego <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> , które jest dołączonym zdarzeniem przetwarzanym przez każdy element wraz z trasą zdarzenia.  
  
 Argumenty tego zdarzenia uwidaczniają argumenty bazowego <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> zdarzenia. Jeśli to zdarzenie jest oznaczone jako obsługiwane wzdłuż trasy zdarzenia, są nadal wywoływane zdarzenia dotyczące przycisku myszy. Jednak programy obsługi zdarzeń dla przycisku myszy muszą być dodawane jawnie <xref:System.Windows.ContentElement.AddHandler%2A>, z opcją obsługi zdarzeń, które są już oznaczone jako obsługiwane, aby były detektorami zdarzenia.  
  
 Koncepcyjnie, pomyśl o tym zdarzeniu (i innych zdarzeniach myszy w <xref:System.Windows.ContentElement>systemie) jako myszy "usługi" (z definicją usługi dostarczaną <xref:System.Windows.Input.Mouse> przez klasę). Zdarzenie dodaje wygodę niezbędną do sprawdzania, czy Stany przycisków myszy (w górę i w dół) oryginalnych zdarzeń myszy w danych zdarzenia. W przypadku bardziej zaawansowanych scenariuszy, takich jak sprawdzanie Stanów przycisków niestandardowymi, może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] <xref:System.Windows.Input.Mouse> <xref:System.Windows.ContentElement>klasy w klasie zamiast.  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewMouseRightButtonUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po wydaniu dowolnego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewMouseUp> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewMouseUp> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 Zdarzenie jest często wywoływane razem z albo <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> lub <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>, które odpowiada naciśnięciu jednego z dwóch standardowych przycisków myszy. <xref:System.Windows.ContentElement.PreviewMouseUp> <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>i <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> są także zdarzenia kierowane, ale są to zdarzenia bezpośrednie kierowane, a odpowiednie zdarzenie specyficzne dla przycisku jest zgłaszane, <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> gdy zdarzenie osiągnie ten element wzdłuż trasy zdarzenia. Zobacz uwagi dla <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> lub <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewMouseUpEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.MouseUp>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewMouseUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik obraca kółko myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przechwycenie fokusu lub myszy ma pierwszeństwo przed miejscem, gdzie wskaźnik myszy jest; w związku z tym, jeśli otrzymasz to zdarzenie z elementu skoncentrowanego lub przechwyconego, wskaźnik myszy może faktycznie znajdować się nad innym elementem.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewMouseMove> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewMouseMove> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewMouseWheelEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.MouseWheel>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewMouseWheel" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zmianie stanu przycisku klawiatury lub myszy podczas operacji przeciągania i upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> Zdarzenie włącza Źródło przeciągania, aby zadeklarować, czy operacja przeciągania i upuszczania powinna zostać anulowana.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> zdarzenia są dołączone do <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.QueryContinueDrag>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewQueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewQueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewQueryContinueDrag" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu przycisku pióra, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewStylusButtonDown> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewStylusButtonDown> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.StylusButtonDown>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po udostępnieniu przycisku pióra, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewStylusButtonUp> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewStylusButtonUp> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.StylusButtonUp>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po dotknięciu dyskretyzatora przez pióro, gdy znajduje się on nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewStylusDown> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewStylusDown> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewStylusDownEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.StylusDown>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewStylusDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewStylusDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest przemieszczane nad elementem bez dotykania dyskretyzatora.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewStylusInAirMove> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewStylusInAirMove> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.StylusInAirMove>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest wystarczająco blisko dyskretyzatora, aby zostało wykryte, w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewStylusInRange> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewStylusInRange> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewStylusInRangeEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.StylusInRange>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewStylusInRange" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest przemieszczane nad elementem. Pióro musi zostać przeniesione podczas wykrywania przez dyskretyzatora, aby zgłosić to zdarzenie, w przeciwnym razie <see cref="E:System.Windows.ContentElement.PreviewStylusInAirMove" /> zostanie zgłoszone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewStylusMove> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewStylusMove> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewStylusMoveEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.StylusMove>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewStylusMove%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewStylusMove" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest zbyt daleko od dyskretyzatora, aby zostało wykryte.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.StylusOutOfRange>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewStylusOutOfRange" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik wykonuje jeden z kilku gestów pióra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informacje o gestach pióra znajdują się w temacie <xref:System.Windows.Input.SystemGesture>.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.StylusSystemGesture>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewStylusSystemGesture" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik wywołuje pióro, gdy pióro znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewStylusDown> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewStylusDown> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewStylusUpEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.StylusUp>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewStylusUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewStylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewStylusUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberSignature Language="F#" Value="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element Pobiera tekst w sposób niezależny od urządzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To <xref:System.Windows.ContentElement.PreviewTextInput> zdarzenie umożliwia składnikowi lub aplikacji nasłuchiwanie danych tekstowych w sposób niezależny od urządzenia. Klawiatura to podstawowy środek <xref:System.Windows.ContentElement.PreviewTextInput>, ale może również generować <xref:System.Windows.ContentElement.PreviewTextInput>mowę, pismo ręczne i inne urządzenia wejściowe.  
  
 Ze względu na kombinacje klawiszy — w domyślnych klawiaturach lub za pomocą edytorów metod wejściowych — wiele kluczowych zdarzeń może wywoływać tylko jedno zdarzenie wejściowe tekstu.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.PreviewTextInput> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.PreviewTextInput> zdarzenia są dołączone do <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewTextInputEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.TextInput>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewTextInput%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewTextInput" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy palec dotyka ekranu, gdy palcem znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Windows.ContentElement.PreviewTouchDown> zdarzenia i <xref:System.Windows.ContentElement.TouchDown> nie pojawiają się do momentu dotknięcia ekranu i przeniesienia. Naciśnięcie palca na ekranie i jego utrzymywanie bez przesuwania powoduje zachowanie <xref:System.Windows.Input.Stylus>nacisku i blokady. Zachowanie naciskania i przytrzymania jest równoważne kliknięciu prawym przyciskiem myszy.  
  
 Aby spowodować, <xref:System.Windows.ContentElement.PreviewTouchDown> że <xref:System.Windows.ContentElement.TouchDown> zdarzenia i wystąpienia są wykonywane zaraz po dotknięciu ekranu palcem, ustaw <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> właściwość dołączone na `false` dla tego elementu.  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewTouchDownEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.TouchDown>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewTouchDown" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy palec jest przenoszony na ekranie, gdy palcem znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewTouchMoveEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.TouchMove>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewTouchMove" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy Finger zostanie wysunięty z ekranu, gdy palcem znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.PreviewTouchUpEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.ContentElement.TouchUp>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.PreviewTouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.PreviewTouchUp" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zmianie stanu przycisku klawiatury lub myszy podczas operacji przeciągania i upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.QueryContinueDrag> Zdarzenie włącza Źródło przeciągania, aby określić, czy operacja przeciągania i upuszczania powinna zostać anulowana.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.QueryContinueDrag> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.QueryContinueDrag> zdarzenia są dołączone do <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.QueryContinueDragEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewQueryContinueDrag>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnQueryContinueDrag%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.QueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.QueryContinueDrag" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberSignature Language="F#" Value="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " Usage="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zażądaniu wyświetlenia kursora. To zdarzenie jest wywoływane na elemencie za każdym razem, gdy wskaźnik myszy jest przenoszony do nowej lokalizacji, co oznacza, że obiekt kursora może wymagać zmiany na podstawie jego nowej pozycji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.QueryCursor> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.QueryCursor> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 Kursor, do którego odwołuje się ta nazwa zdarzenia, nie musi być kursorem tekstu (czasami znanym jako punkt wstawiania). Zamiast tego kursor w tym kontekście jest obiektem, który deklaruje wyświetlacz graficzny Onscreen związany z kilkoma możliwymi urządzeniami wejściowymi lub koncepcjami w programowaniu systemu Windows. Ten obiekt jest reprezentowany przez <xref:System.Windows.Input.Cursor> klasę w WPF. System wprowadzania WPF umożliwia zmianę tego kursora, gdy reprezentuje pozycję na ekranie wskaźnika myszy. Można użyć wstępnie zdefiniowanych wartości z <xref:System.Windows.Input.Cursors> wyliczenia lub można zadeklarować niestandardowy kursor jako plik obrazu.  
  
 Nasłuchiwanie <xref:System.Windows.ContentElement.QueryCursor> dla zdarzenia nie jest efektywną techniką dla zarządzania kursorem. Zamiast tego każdy element powinien definiować własne zachowanie kursora z <xref:System.Windows.FrameworkContentElement.Cursor%2A> i. <xref:System.Windows.FrameworkContentElement.ForceCursor%2A> Należy się zależeć <xref:System.Windows.ContentElement.QueryCursor> tylko, jeśli nie korzystasz z podstawowych elementów platformy WPF Framework lub w sytuacjach wyjątkowych, gdy Definiowanie zachowania kursora dla poszczególnych elementów nie spełnia Twoich potrzeb. Aby uzyskać więcej informacji na temat implementowania zachowania kursora <xref:System.Windows.ContentElement.QueryCursor>w odpowiedzi <xref:System.Windows.Input.QueryCursorEventHandler>na, zobacz.  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.QueryCursorEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   Nie zdefiniowano odpowiedniego zdarzenia tunelowania.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnQueryCursor%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.QueryCursor" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit" Usage="contentElement.RaiseEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> , który zawiera dane zdarzenia, a także identyfikuje zdarzenie do wywołania.</param>
        <summary>Wywołuje określone zdarzenie kierowane. Wartość <see cref="T:System.Windows.RoutedEvent" /> do wyniesienia jest identyfikowana <see cref="T:System.Windows.RoutedEventArgs" /> w ramach podanego wystąpienia (jako <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> Właściwość danych zdarzenia).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr jest wpisywany jako wspólny typ podstawowy dla wszystkich danych zdarzeń kierowanych, jednak dane zdarzenia powinny być przekazywane jako najbardziej konkretny typ danych zdarzenia, który jest dostępny dla zdarzenia, które jest zgłaszane, ponieważ <xref:System.Windows.RoutedEventArgs> klasy pochodne zawierają `e` rzeczywiste specyficzne właściwości danych, które są przeznaczone dla konkretnego zdarzenia, gdy zostanie zgłoszone.  
  
 <xref:System.Windows.RoutedEventArgs>nie jest tylko właściwościami stanu zdarzenia; identyfikuje także, które zdarzenie zostało podniesione. Ten wzorzec podnoszenia zdarzeń i dane zdarzeń kierowanych różnią się [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] od zdarzeń i klas danych, które zwykle zawierają właściwości, które są związane ze zdarzeniem.  
  
   
  
## Examples  
 Poniższy przykład tworzy dane zdarzenia, dołącza identyfikator zdarzenia do danych, a następnie używa wystąpienia danych zdarzenia do wywołania niestandardowego zdarzenia kierowanego.  
  
 [!code-csharp[ContentElementsSmorgasbord#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#raiseevent)]
 [!code-vb[ContentElementsSmorgasbord#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberSignature Language="F#" Value="member this.ReleaseAllTouchCaptures : unit -&gt; unit" Usage="contentElement.ReleaseAllTouchCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie przechwycone urządzenia touch z tego elementu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseMouseCapture : unit -&gt; unit&#xA;override this.ReleaseMouseCapture : unit -&gt; unit" Usage="contentElement.ReleaseMouseCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia funkcję przechwytywania myszy, jeśli ten element przechwytuje przechwytywanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ten element nie zatrzymał przechwytywania, wywołanie tej metody nie ma żadnego wpływu. Rozważ sprawdzenie wartości <xref:System.Windows.ContentElement.IsMouseCaptured%2A> przed wywołaniem tej metody.  
  
   
  
## Examples  
 Poniższy program obsługi przechwytuje lub zwalnia przechwytywanie myszy zgodnie z Stanami przycisków myszy. W przykładzie pokazano, jak używać przechwyconych ruchów myszy do celów alternatywnych innych niż Przesuwanie wskaźnika myszy [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]w.  
  
 [!code-csharp[ContentElementsSmorgasbord#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[ContentElementsSmorgasbord#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ContentElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStylusCapture : unit -&gt; unit&#xA;override this.ReleaseStylusCapture : unit -&gt; unit" Usage="contentElement.ReleaseStylusCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia funkcję przechwytywania urządzenia pióra, jeśli ten element przechwytuje przechwytywanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ten element nie zatrzymał przechwytywania, wywołanie tej metody nie ma żadnego wpływu. Rozważ sprawdzenie wartości <xref:System.Windows.ContentElement.IsStylusCaptured%2A> przed wywołaniem tej metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.ReleaseTouchCapture : System.Windows.Input.TouchDevice -&gt; bool" Usage="contentElement.ReleaseTouchCapture touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Urządzenie do wydania.</param>
        <summary>Próbuje zwolnić określone urządzenie dotykowe z tego elementu.</summary>
        <returns><see langword="true" />Jeśli urządzenie dotykowe zostało wydane; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="touchDevice" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="contentElement.RemoveHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identyfikator zdarzenia kierowanego, do którego jest dołączona procedura obsługi.</param>
        <param name="handler">Określona implementacja programu obsługi do usunięcia z kolekcji programu obsługi zdarzeń w tym elemencie.</param>
        <summary>Usuwa określony moduł obsługi zdarzeń kierowany z tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Najbardziej typowym scenariuszem korzystania z [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] tego programu jest [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] zaimplementowanie zdarzenia "otoka", które jest skojarzone z niestandardowym zdarzeniem routingu, w szczególności w przypadku implementacji logiki "Remove" [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] dla programów obsługi na poziomie. W tym scenariuszu przedstawiono przykład opisany w poniższej sekcji uwagi.  
  
 Wywołanie tej metody nie działa, jeśli nie ma żadnych programów obsługi zarejestrowanych w kryteriach, które pasują do parametrów wejściowych dla wywołania metody.  
  
 Jeśli dołączono więcej niż jedną procedurę obsługi, która spełnia kryteria, tylko pierwsza procedura obsługi w magazynie obsługi zdarzeń zostanie usunięta. To zachowanie jest spójne z [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zachowaniem `-=` operatora.  
  
 Nie `routedEvent` może `handler` być`null`ani. Próba dostarczenia żadnej wartości jako `null` spowoduje wystąpienie wyjątku.  
  
 Ta metoda ignoruje `handledEventsToo` informacje o parametrach, które są dostępne, jeśli program obsługi został po <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> raz pierwszy dodany wraz z podpisem, który umożliwia obsługę już obsłużonych zdarzeń. Każdy typ procedury obsługi jest usuwany.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeCommandBindings : unit -&gt; bool" Usage="contentElement.ShouldSerializeCommandBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca czy procesy serializacji powinny serializować zawartość <see cref="P:System.Windows.ContentElement.CommandBindings" /> właściwości w wystąpieniach tej klasy.</summary>
        <returns><see langword="true" />Jeśli wartość <see langword="false" />właściwości powinna być serializowana; w przeciwnym razie,. <see cref="P:System.Windows.ContentElement.CommandBindings" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spowoduje to zwrócenie `true` wartości <xref:System.Windows.ContentElement.CommandBindings%2A> , jeśli jest ustawiona lokalnie.  
  
 Ta `ShouldSerialize` Metoda jest dostępna, <xref:System.Windows.UIElement.CommandBindings%2A> ponieważ właściwość nie ma prostej wartości domyślnej. Ta metoda wskazuje, czy właściwość została zmieniona z wartości domyślnej. Ta metoda jest zazwyczaj wywoływana, jeśli tworzysz projektanta lub opracowujesz własny formant, który składa się <xref:System.Windows.UIElement>z.  
  
 Aby uzyskać więcej informacji, zobacz [Definiowanie wartości domyślnych za pomocą metod ShouldSerialize i Reset](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ContentElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeInputBindings : unit -&gt; bool" Usage="contentElement.ShouldSerializeInputBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca czy procesy serializacji powinny serializować zawartość <see cref="P:System.Windows.ContentElement.InputBindings" /> właściwości w wystąpieniach tej klasy.</summary>
        <returns><see langword="true" />Jeśli wartość <see langword="false" />właściwości powinna być serializowana; w przeciwnym razie,. <see cref="P:System.Windows.ContentElement.InputBindings" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spowoduje to zwrócenie `true` wartości <xref:System.Windows.ContentElement.InputBindings%2A> , jeśli jest ustawiona lokalnie.  
  
 Ta `ShouldSerialize` Metoda jest dostępna, <xref:System.Windows.UIElement.InputBindings%2A> ponieważ właściwość nie ma prostej wartości domyślnej. Ta metoda wskazuje, czy właściwość została zmieniona z wartości domyślnej. Ta metoda jest zazwyczaj wywoływana, jeśli tworzysz projektanta lub opracowujesz własny formant, który składa się <xref:System.Windows.UIElement>z.  
  
 Aby uzyskać więcej informacji, zobacz [Definiowanie wartości domyślnych za pomocą metod ShouldSerialize i Reset](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu przycisku pióra, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.StylusButtonDown> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.StylusButtonDown> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.StylusButtonDownEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewStylusButtonDown>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnStylusButtonDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.StylusButtonDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po udostępnieniu przycisku pióra, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.StylusButtonUp> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.StylusButtonUp> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.StylusButtonUpEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewStylusButtonUp>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnStylusButtonUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.StylusButtonUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberSignature Language="F#" Value="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro dotyka dyskretyzatora, gdy pióro znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.StylusDown> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.StylusDown> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.StylusDownEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewStylusDown>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnStylusDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.StylusDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberSignature Language="F#" Value="member this.StylusEnter : System.Windows.Input.StylusEventHandler " Usage="member this.StylusEnter : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro wprowadzi granice tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.StylusEnter>to [Omówienie zdarzeń kierowanych](~/docs/framework/wpf/advanced/routed-events-overview.md) , które korzystają z strategii routingu bezpośredniego obsługi zdarzeń. Zdarzenia kierowane bezpośrednio nie są zgłaszane na trasie; Zamiast tego są obsługiwane w tym samym elemencie, w którym zostały zgłoszone. Jednak umożliwiają one włączenie innych aspektów zachowań zdarzeń kierowanych, takich jak wyzwalacze zdarzeń w stylach.  
  
 Chociaż <xref:System.Windows.ContentElement.StylusEnter> śledzi, gdy pióro wprowadza granice elementu, to zdarzenie jest bardziej dosłownie Raport <xref:System.Windows.ContentElement.IsStylusOver%2A> , że wartość właściwości została zmieniona z `false` na `true` na tym elemencie.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.StylusEnter> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.StylusEnter> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.StylusEnterEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnStylusEnter%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.StylusEnter" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest przemieszczane nad elementem bez dotykania dyskretyzatora.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.StylusInAirMove> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.StylusInAirMove> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.StylusInAirMoveEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewStylusInAirMove>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnStylusInAirMove%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.StylusInAirMove" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberSignature Language="F#" Value="member this.StylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest wystarczająco blisko dyskretyzatora, aby zostało wykryte, w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.StylusInRange> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.StylusInRange> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.StylusInRangeEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewStylusInRange>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnStylusInRange%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.StylusInRange" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberSignature Language="F#" Value="member this.StylusLeave : System.Windows.Input.StylusEventHandler " Usage="member this.StylusLeave : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro opuści granice elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.ContentElement.StylusLeave>to [Omówienie zdarzeń kierowanych](~/docs/framework/wpf/advanced/routed-events-overview.md) , które korzystają z strategii routingu bezpośredniego obsługi zdarzeń. Zdarzenia kierowane bezpośrednio nie są zgłaszane na trasie; Zamiast tego są obsługiwane w tym samym elemencie, w którym zostały zgłoszone. Jednak umożliwiają one włączenie innych aspektów zachowań zdarzeń kierowanych, takich jak wyzwalacze zdarzeń w stylach.  
  
 Chociaż <xref:System.Windows.ContentElement.StylusLeave> śledzi, gdy pióro opuszcza granice elementu, to zdarzenie jest bardziej dosłownie raporty <xref:System.Windows.ContentElement.IsStylusOver%2A> , że wartość właściwości została zmieniona z `true` na `false` na tego elementu.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.StylusLeave> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.StylusLeave> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.StylusLeaveEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnStylusLeave%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.StylusLeave" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberSignature Language="F#" Value="member this.StylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest przenoszone nad tym elementem. Aby zgłosić to zdarzenie, pióro musi zostać przeniesione przez dyskretyzatora. W przeciwnym razie jest zgłaszane. <see cref="E:System.Windows.ContentElement.StylusInAirMove" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.StylusMove> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.StylusMove> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.StylusMoveEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewStylusMove>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnStylusMove%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.StylusMove" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest zbyt daleko od dyskretyzatora, aby zostało wykryte, w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.StylusOutOfRange> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.StylusOutOfRange> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.StylusOutOfRangeEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewStylusOutOfRange>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnStylusOutOfRange%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.StylusOutOfRange" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik wykonuje jeden z kilku gestów pióra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat gestów <xref:System.Windows.Input.SystemGesture>pióra, zobacz.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.StylusSystemGesture> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.StylusSystemGesture> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.StylusSystemGestureEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewStylusSystemGesture>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnStylusSystemGesture%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.StylusSystemGesture" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberSignature Language="F#" Value="member this.StylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.StylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik wywołuje pióro, gdy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.StylusUp> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.StylusUp> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.StylusUpEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewStylusUp>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnStylusUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.StylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.StylusUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberSignature Language="F#" Value="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element Pobiera tekst w sposób niezależny od urządzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  To zdarzenie może już być oznaczone jako obsługiwane przez wewnętrzne implementacje kontrolek złożonych. Zobacz uwagi poniżej.  
  
 <xref:System.Windows.ContentElement.TextInput> Zdarzenie może już być oznaczone jako obsługiwane przez wewnętrzne implementacje kontrolek złożonych. Na przykład, <xref:System.Windows.Controls.TextBox> jest to złożona kontrolka, w <xref:System.Windows.ContentElement.TextInput> której zdarzenie jest już oznaczone jako obsługiwane; w ramach jego złożenia. Kontrolki to, ponieważ kontrolka musi interpretować niektóre typy danych wejściowych, takich jak klawisze strzałek, jako mające specjalne znaczenie dla tej kontrolki. Jeśli używasz <xref:System.Windows.ContentElement.PreviewTextInput> jako zdarzenia do dołączania obsługi dla wprowadzania tekstu, możesz uzyskać lepsze wyniki. Ta technika omija większość przypadków, w których kompozycja formantów już oznaczył to zdarzenie jako obsłużone i uniemożliwia programowi obsługi otrzymywanie zdarzenia wzdłuż trasy zdarzenia.  
  
 To <xref:System.Windows.ContentElement.TextInput> zdarzenie umożliwia składnikowi lub aplikacji nasłuchiwanie danych tekstowych w sposób niezależny od urządzenia. Klawiatura jest podstawowym środkiem <xref:System.Windows.ContentElement.TextInput>, ale może również podnieść <xref:System.Windows.ContentElement.TextInput>mowę, pismo odręczne oraz inne urządzenia wejściowe.  
  
 Ze względu na kombinacje klawiszy — w domyślnych klawiaturach lub za pomocą edytorów metod wejściowych — wiele kluczowych zdarzeń może wywoływać tylko jedno zdarzenie wprowadzania tekstu.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.ContentElement.TextInput> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.ContentElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.ContentElement.TextInput> zdarzenia są dołączone do <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.TextInputEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewTextInput>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnTextInput%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.TextInput" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberSignature Language="F#" Value="member this.TouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy palec dotyka ekranu, gdy palcem znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Windows.ContentElement.PreviewTouchDown> zdarzenia i <xref:System.Windows.ContentElement.TouchDown> nie pojawiają się do momentu dotknięcia ekranu i przeniesienia. Naciśnięcie palca na ekranie i jego utrzymywanie bez przesuwania powoduje zachowanie <xref:System.Windows.Input.Stylus>nacisku i blokady. Zachowanie naciskania i przytrzymania jest równoważne kliknięciu prawym przyciskiem myszy.  
  
 Aby spowodować, <xref:System.Windows.ContentElement.PreviewTouchDown> że <xref:System.Windows.ContentElement.TouchDown> zdarzenia i wystąpienia są wykonywane zaraz po dotknięciu ekranu palcem, ustaw <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> właściwość dołączone na `false` dla tego elementu.  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.TouchDownEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewTouchDown>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnTouchDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.TouchDown" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberSignature Language="F#" Value="member this.TouchEnter : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchEnter : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy nastąpi przejście z zewnątrz do wewnątrz granic tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie jest zawsze zgłaszane, niezależnie od tego, czy urządzenie dotykowe jest przechwytywane do tego elementu interfejsu użytkownika.  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.TouchEnterEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnTouchEnter%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.TouchEnter" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCaptured : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie urządzenia Touch, które są przechwytywane do tego elementu.</summary>
        <value>Wyliczenie <see cref="T:System.Windows.Input.TouchDevice" /> obiektów, które są przechwytywane do tego elementu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCapturedWithin : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie urządzenia Touch, które są przechwytywane do tego elementu lub wszelkich elementów podrzędnych w jego drzewie wizualnym.</summary>
        <value>Wyliczenie <see cref="T:System.Windows.Input.TouchDevice" /> obiektów, które są przechwytywane do tego elementu lub wszelkich elementów podrzędnych w jego drzewie wizualnym.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesDirectlyOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie urządzenia Touch, które znajdują się nad tym elementem.</summary>
        <value>Wyliczenie <see cref="T:System.Windows.Input.TouchDevice" /> obiektów znajdujących się na tym elemencie.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ContentElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.ContentElement.TouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie urządzenia dotykowe, które znajdują się nad tym elementem lub wszystkie elementy podrzędne w jego drzewie wizualnym.</summary>
        <value>Wyliczenie <see cref="T:System.Windows.Input.TouchDevice" /> obiektów znajdujących się nad tym elementem lub dowolnym elementem podrzędnym w jego drzewie wizualnym.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberSignature Language="F#" Value="member this.TouchLeave : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchLeave : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy nastąpi przejście z wewnątrz do granic tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.TouchLeaveEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnTouchLeave%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.TouchLeave" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberSignature Language="F#" Value="member this.TouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy palec jest przenoszony na ekranie, gdy palcem znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.TouchMoveEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewTouchMove>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnTouchMove%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.TouchMove" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.ContentElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberSignature Language="F#" Value="member this.TouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy Finger zostanie wysunięty z ekranu, gdy palcem znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.ContentElement.TouchUpEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.ContentElement.PreviewTouchUp>.  
  
-   Przesłoń <xref:System.Windows.ContentElement.OnTouchUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.ContentElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.ContentElement.TouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.ContentElement.TouchUp" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
