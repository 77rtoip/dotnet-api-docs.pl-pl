<Type Name="VisualState" FullName="System.Windows.VisualState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fb39d86958aa250a4d7334e24544cce355d29b6f" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55341627" /></Metadata><TypeSignature Language="C#" Value="public class VisualState : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualState extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualState" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualState&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualState : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualState = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Storyboard")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje wygląd kontrolki, gdy znajduje się w określonym stanie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.VisualState> określa wygląd kontrolki znajduje się w niektórych stanie. Na przykład, gdy <xref:System.Windows.Controls.Button> jest wciśnięty, obramowania musi być innym kolorze niż zwykle.  <xref:System.Windows.VisualState> Klasa ma <xref:System.Windows.VisualState.Storyboard%2A> właściwość, która zmienia się wygląd formantu. Gdy formant przechodzi do stanu, który jest określony przez <xref:System.Windows.VisualState.Name%2A?displayProperty=nameWithType> właściwości <xref:System.Windows.VisualState.Storyboard%2A> rozpoczyna się. Gdy formant opuszcza stan <xref:System.Windows.VisualState.Storyboard%2A> zatrzymuje.  
  
 <xref:System.Windows.VisualStateGroup.States%2A?displayProperty=nameWithType> Właściwość zawiera <xref:System.Windows.VisualState> obiektów. <xref:System.Windows.VisualStateGroup> obiekty są dodawane do <xref:System.Windows.VisualStateManager.VisualStateGroups%2A?displayProperty=nameWithType> dołączona właściwość, która jest zdefiniowana w sprawie <xref:System.Windows.FrameworkElement>. Możesz dodać <xref:System.Windows.VisualState> obiekty do dowolnego <xref:System.Windows.FrameworkElement>, ale są one zazwyczaj są używane w <xref:System.Windows.Controls.ControlTemplate> z <xref:System.Windows.Controls.Control>. Aby uzyskać informacje o sposobie tworzenia <xref:System.Windows.Controls.ControlTemplate> i <xref:System.Windows.VisualState> obiektów dla istniejących formantów, zobacz [Dostosowywanie wyglądu istniejącego formantu przez stworzenie ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md). Na przykład za pomocą <xref:System.Windows.VisualState> obiektów poza <xref:System.Windows.Controls.ControlTemplate>, zobacz <xref:System.Windows.VisualStateManager> klasy.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.VisualStateGroup> w <xref:System.Windows.Controls.ControlTemplate> z <xref:System.Windows.Controls.Button> o nazwie `CommonStates` i dodaje <xref:System.Windows.VisualState> obiektów w Stanach `Normal`, `Pressed`, i `MouseOver`. <xref:System.Windows.Controls.Button> Definiuje również stan o nazwie `Disabled` w `CommonStates` <xref:System.Windows.VisualStateGroup>, pomijając przykład go celu skrócenia programu. Na przykład cały, zobacz [Dostosowywanie wyglądu istniejącego formantu przez stworzenie ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
 [!code-xaml[VSMButtonTemplate#10](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#10)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualState.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualState();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.VisualState" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualState.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.VisualState.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę <see cref="T:System.Windows.VisualState" />.</summary>
        <value>Nazwa <see cref="T:System.Windows.VisualState" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Określ, którego stan wizualny na element, należy wprowadzić, przekazując <xref:System.Windows.VisualState.Name%2A> z <xref:System.Windows.VisualState> do <xref:System.Windows.VisualStateManager>.  
  
 Podczas <xref:System.Windows.Controls.Control> używa <xref:System.Windows.VisualStateManager> w <xref:System.Windows.Controls.ControlTemplate>, autorem formantu należy określić, które <xref:System.Windows.VisualState> obiekty kontrolki spodziewa się znaleźć w jego <xref:System.Windows.Controls.ControlTemplate> poprzez umieszczenie <xref:System.Windows.TemplateVisualStateAttribute> na jeho signatura klasy. <xref:System.Windows.Controls.ControlTemplate> Autorzy definiować nowych <xref:System.Windows.VisualState> obiektów i ustaw <xref:System.Windows.VisualState.Name%2A> właściwości na wartość określoną przez <xref:System.Windows.TemplateVisualStateAttribute.Name%2A?displayProperty=nameWithType> właściwości.  
  
 Aby znaleźć nazwy stanów wizualnych dla formantów, które są dołączone [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], zobacz [style i szablony kontrolek](~/docs/framework/wpf/controls/control-styles-and-templates.md). Aby uzyskać informacje o sposobie tworzenia <xref:System.Windows.Controls.ControlTemplate> i <xref:System.Windows.VisualState> obiektów dla istniejących formantów, zobacz [Dostosowywanie wyglądu istniejącego formantu przez stworzenie ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.VisualStateGroup> w <xref:System.Windows.Controls.ControlTemplate> z <xref:System.Windows.Controls.Button> o nazwie `CommonStates` i dodaje <xref:System.Windows.VisualState> obiektów w Stanach `Normal`, `Pressed`, i `MouseOver`. <xref:System.Windows.Controls.Button> Definiuje również stan o nazwie `Disabled` w `CommonStates` <xref:System.Windows.VisualStateGroup>, pomijając przykład go celu skrócenia programu. Na przykład cały, zobacz [Dostosowywanie wyglądu istniejącego formantu przez stworzenie ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
 [!code-xaml[VSMButtonTemplate#10](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Storyboard">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Storyboard Storyboard { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Storyboard Storyboard" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualState.Storyboard" />
      <MemberSignature Language="VB.NET" Value="Public Property Storyboard As Storyboard" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::Storyboard ^ Storyboard { System::Windows::Media::Animation::Storyboard ^ get(); void set(System::Windows::Media::Animation::Storyboard ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Storyboard : System.Windows.Media.Animation.Storyboard with get, set" Usage="System.Windows.VisualState.Storyboard" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Storyboard</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Windows.Media.Animation.Storyboard" /> definiuje wygląd kontrolki, gdy jest ona w stanie, który jest reprezentowany przez <see cref="T:System.Windows.VisualState" />.</summary>
        <value>Scenorysu, która definiuje wygląd kontrolki, gdy jest ona w stanie, który jest reprezentowany przez <see cref="T:System.Windows.VisualState" />. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy formant przechodzi do stanu, który jest określony przez <xref:System.Windows.VisualState.Name%2A?displayProperty=nameWithType> właściwości <xref:System.Windows.VisualState.Storyboard%2A> rozpoczyna się. Gdy formant opuszcza stan <xref:System.Windows.VisualState.Storyboard%2A> zatrzymuje.  
  
   
  
## Examples  
 Poniższy przykład tworzy prostą <xref:System.Windows.Controls.ControlTemplate> dla <xref:System.Windows.Controls.Button> zawiera jeden <xref:System.Windows.Controls.Grid>.  <xref:System.Windows.VisualState> o nazwie `MouseOver` ma scenorysu, który zmienia kolor <xref:System.Windows.Controls.Grid> z zielonego na czerwony użytkownik umieszcza wskaźnik myszy <xref:System.Windows.Controls.Button>.  <xref:System.Windows.VisualState> o nazwie `Normal` jest dołączony, tak aby po przesunięciu myszy poza przycisk, <xref:System.Windows.Controls.Grid> zwraca na zielony.  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>