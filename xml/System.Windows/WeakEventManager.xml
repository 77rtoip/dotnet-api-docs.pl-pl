<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WeakEventManager.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ac94cdae430bda3a59a21292d13f613f0012919d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac94cdae430bda3a59a21292d13f613f0012919d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.WeakEventManager">
          <source>Provides a base class for the event manager that is used in the <bpt id="p1">*</bpt>weak event pattern<ept id="p1">*</ept>.</source>
          <target state="translated">Udostępnia klasę podstawową dla menedżera zdarzeń, który jest używany w <bpt id="p1">*</bpt>wzorzec słabe zdarzeń<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.WeakEventManager">
          <source>The manager adds and removes listeners for events (or callbacks) that also use the pattern.</source>
          <target state="translated">Menedżer dodaje i usuwa odbiorników zdarzeń (lub wywołań zwrotnych) korzystających ze wzorca.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</source>
          <target state="translated">Wzorzec słabe zdarzeń jest zazwyczaj używana, gdy źródło zdarzenia ma okres istnienia obiektów, która jest niezależna od odbiorników zdarzeń.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>Using the central event dispatching capability of a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> allows the listener's handlers to be garbage collected even if the source object persists.</source>
          <target state="translated">Za pomocą tego zdarzenia centralnej wysyłki możliwości <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> umożliwia obsługi obiektu nasłuchującego być bezużytecznych nawet, jeśli obiekt źródłowy będzie się powtarzał.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>By contrast, a regular event hookup using the <ph id="ph1">`+=`</ph> operator causes the potentially disconnected source to hold a reference to the listeners.</source>
          <target state="translated">Z kolei podłączenie regularne zdarzeń przy użyciu <ph id="ph1">`+=`</ph> operatora powoduje potencjalnie odłączonego źródła do przechowywania odwołanie do odbiorników.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>This prevents the receiver from being garbage collected in a timely fashion.</source>
          <target state="translated">To zapobiega odbiornika bezużytecznych w odpowiednim czasie.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</source>
          <target state="translated">Jeden sytuacja wspólnej gdzie należy używać okresu istnienia relacji między źródłami i odbiorników wzorca słabe zdarzeń jest obsługi zdarzeń aktualizacji z powiązania danych.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>The weak event pattern can also be used for callbacks and regular events.</source>
          <target state="translated">Wzorzec słabe zdarzenia można również dla wywołań zwrotnych oraz zdarzeniami standardowymi.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.WeakEventManager">
          <source>For an example of a custom <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>, see <bpt id="p1">[</bpt>Weak Event Patterns<ept id="p1">](~/docs/framework/wpf/advanced/weak-event-patterns.md)</ept>.</source>
          <target state="translated">Na przykład niestandardowy <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph>, zobacz <bpt id="p1">[</bpt>słabe wzorce zdarzeń<ept id="p1">](~/docs/framework/wpf/advanced/weak-event-patterns.md)</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.#ctor">
          <source>Initializes base class values when it is used as the initializer by the constructor of a derived class.</source>
          <target state="translated">Inicjuje podstawowa Klasa wartości, gdy jest używany jako inicjator przez konstruktora klasy pochodnej.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>The object on which the event is being handled.</source>
          <target state="translated">Obiekt, w którym zdarzenie jest obsługiwane.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data for the event to deliver.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> Zawierający dane zdarzeń dla zdarzenia w celu dostarczenia.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>Delivers the event being managed to each listener.</source>
          <target state="translated">Dostarcza zdarzenia zarządzany każdego odbiornika.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> method from within the event handlers that are added or removed by the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> implementations of subclasses.</source>
          <target state="translated">Wywołanie <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> metodę z obsługi zdarzeń, które zostały dodane lub usunięte przez <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> i <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> implementacje podklasy.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>If you call the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> method in your <ph id="ph2">`AddListener`</ph> implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</source>
          <target state="translated">Wywołanie <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> metody w Twojej <ph id="ph2">`AddListener`</ph> implementacji klasy listy odbiorników odbierającego zdarzenie jest przechowywany w kolekcji źródłowej.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>(<ph id="ph1">`AddListener`</ph> is not part of an interface or class contract.</source>
          <target state="translated">(<ph id="ph1">`AddListener`</ph> nie jest częścią kontrakt interfejsu lub klasy.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source><ph id="ph1">`AddListener`</ph> is the suggested name for the method of your manager class that calls <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> and adds weak event pattern listeners for the event.)</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph> sugerowana nazwa dla metody klasy Menedżera wywołująca jest <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> i dodaje detektory wzorzec słabe zdarzeń dla zdarzenia.)</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> adds listeners to a single list.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> dodaje do jednej listy.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>If your manager implementation maintains more than one list of listeners per event, do not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>.</source>
          <target state="translated">Jeśli wdrożenie Menedżera ma więcej niż jedną listę odbiorników na zdarzenie, nie używaj <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> lub <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
          <source>Instead, your implementation should create its own <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instances, <ph id="ph2">`AddListener`</ph> should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>.</source>
          <target state="translated">Zamiast tego implementacji należy utworzyć własny <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> wystąpień, <ph id="ph2">`AddListener`</ph> należy dodać odbiorników na odpowiedniej liście i zdarzenia powinna zostać dostarczona do listy odpowiednie odbiornika przez wywołanie metody <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>The object on which the event is being handled.</source>
          <target state="translated">Obiekt, w którym zdarzenie jest obsługiwane.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> Zawierający dane zdarzenia.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>The provided <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</source>
          <target state="translated">Podana <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>Delivers the event being managed to each listener in the provided list.</source>
          <target state="translated">Dostarcza zdarzenia zarządzany każdego odbiornika w podanej listy.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>This method is necessary if your manager implementation maintains separate listeners lists based on information that is captured in the event data.</source>
          <target state="translated">Ta metoda jest niezbędne, jeśli implementacji Menedżera zachowuje odbiorników osobnych list na podstawie informacji przechwyconych w danych zdarzenia.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>If you use this advanced technique, you must create and maintain the separate lists as part of your manager implementation, and you must provide a way to add listeners to a specific list.</source>
          <target state="translated">Możesz użyć tej metody zaawansowane, musisz utworzyć i obsługa osobnych list w ramach implementacji manager, a należy podać sposób dodawania odbiorników do określonej listy.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
          <source>Your handler implementation that listens to the raw event must act upon the condition that you use to differentiate the lists, and deliver the event only to the appropriate list or lists.</source>
          <target state="translated">Implementację programu obsługi nasłuchujący zdarzenia pierwotnych musi obsługiwanie warunek obsługi do odróżnienia list, a dostarczyć zdarzenie tylko do odpowiedniej liście lub list.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>The type to obtain the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> for.</source>
          <target state="translated">Typ do uzyskania <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> dla.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> implementation that is used for the provided type.</source>
          <target state="translated">Zwraca <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> implementację, która jest używana dla podanego typu.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>The matching <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> implementation.</source>
          <target state="translated">Dopasowanie <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager" /&gt;</ph> implementacji.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source><ph id="ph1">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> implementations call this method using their passed <ph id="ph2">`managerType`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> implementacje wywołać tę metodę, przy użyciu ich przekazany <ph id="ph2">`managerType`</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
          <source>The returned <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> is then used as the differentiator that determines which event was received, and which private class handler to invoke.</source>
          <target state="translated">Zwrócona <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> służy jako różnicą, określająca otrzymano zdarzenie (event) i które obsługi Klasa prywatna do wywołania.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>The zero-based index of the requested source.</source>
          <target state="translated">Liczony od zera indeks żądanego źródła.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Gets or sets the data being stored for the specified source.</source>
          <target state="translated">Pobiera lub ustawia przechowywanych dla określonego źródła danych.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Data being stored by the manager for this source.</source>
          <target state="translated">Przechowywanych przez menedżera dla tego źródła danych.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Derived classes can choose what data and type to store in this indexer.</source>
          <target state="translated">Klasy pochodne mogą wybrać, jakie dane i typ do przechowywania w tym indeksatora.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>Typically this is implemented as a <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>, which is a list of weak references to listeners.</source>
          <target state="translated">Zazwyczaj jest to implementowane jako <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>, który znajduje się lista odwołania słabe do odbiorników.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>You would only have to change this type if the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> type cannot contain your required information.</source>
          <target state="translated">Czy wystarczy tylko zmienić tego typu, jeśli <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> typu nie może zawierać wymaganych informacji.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.Item(System.Object)">
          <source>If so, you will have to override the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> method so that all cleanup of the underlying type is performed correctly.</source>
          <target state="translated">Jeśli tak, należy zastąpić <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> metody, aby wszystkie oczyszczania podstawowy typ odbywa się poprawnie.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.NewListenerList">
          <source>Returns a new object to contain listeners to an event.</source>
          <target state="translated">Zwraca nowy obiekt, który zawiera odbiorników ze zdarzeniem.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.NewListenerList">
          <source>A new object to contain listeners to an event.</source>
          <target state="translated">Nowy obiekt zawierający odbiorników ze zdarzeniem.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
          <source>The source object that the handler delegate subscribes to.</source>
          <target state="translated">Obiekt źródłowy, która ją subskrybuje delegata obsługi.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
          <source>The delegate that handles the event that is raised by <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Delegat, który obsługuje zdarzenia, które jest wywoływane przez <bpt id="p1">&lt;c&gt;</bpt>źródła<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
          <source>Adds the specified delegate as an event handler of the specified source.</source>
          <target state="translated">Dodaje określonego delegata jako program obsługi zdarzeń z określonego źródła.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The source to attach listeners to.</source>
          <target state="translated">Źródło do odbiorników do dołączenia.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The listening class (which must implement <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph>).</source>
          <target state="translated">Klasa nasłuchiwania (który musi zaimplementować interfejs <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Adds the provided listener to the provided source for the event being managed.</source>
          <target state="translated">Dodaje podany odbiornika do udostępnionego źródła zdarzeń zarządzany.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Call this method within your manager class <ph id="ph1">`AddListener`</ph> methods on <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementations.</source>
          <target state="translated">Wywołanie tej metody w klasie Menedżera <ph id="ph1">`AddListener`</ph> metody <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementacji.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`AddListener`</ph> is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph> sugerowana nazwa jest dla metody statycznej zdefiniowanie w klasie manager, aby włączyć innych klas dodać odbiornika dla deseniu słabe zdarzeń.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`AddListener`</ph> should take two parameters: the <ph id="ph2">`source`</ph> where the listener is attached, and the <ph id="ph3">`listener`</ph> instance.</source>
          <target state="translated"><ph id="ph1">`AddListener`</ph> powinien mieć dwa parametry: <ph id="ph2">`source`</ph> w przypadku, gdy odbiornika jest dołączony, a <ph id="ph3">`listener`</ph> wystąpienia.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>For your <ph id="ph1">`AddListener`</ph> implementation, call the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> method on the current manager and pass the same two parameters.</source>
          <target state="translated">Dla Twojego <ph id="ph1">`AddListener`</ph> implementacji, wywołaj <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> metody na bieżący Menedżer i przebiegu tego samego dwa parametry.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If the list of listeners was previously empty, <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> calls the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> method internally, which will call your specific <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> override through polymorphism.</source>
          <target state="translated">Jeśli lista odbiorników było wcześniej puste, <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> wywołania <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> — metoda, która wywoła konkretnej <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StartListening%2A&gt;</ph> zastąpienia za pośrednictwem polimorfizm.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> adds listeners to a single internal <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> per <ph id="ph3">`source`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> dodaje do pojedynczego wewnętrznego <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> na <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>.</source>
          <target state="translated">Jeśli wdrożenie Menedżera ma więcej niż jedną listę odbiorników dla każdej kombinacji źródło zdarzenia, nie używaj <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Instead, your implementation should create its own <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instances, <ph id="ph2">`AddListener`</ph> should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph> event instead of the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> method.</source>
          <target state="translated">Zamiast tego implementacji należy utworzyć własny <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> wystąpień, <ph id="ph2">`AddListener`</ph> należy dodać odbiorników na odpowiedniej liście i zdarzenia powinna zostać dostarczona do listy odpowiednie odbiornika wywołując <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph> zdarzeń zamiast <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
          <source>The source to remove the handler from.</source>
          <target state="translated">Źródło do usunięcia programu obsługi.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
          <source>The delegate to remove from <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Delegat do usunięcia z <bpt id="p1">&lt;c&gt;</bpt>źródła<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
          <source>Removes the previously added handler from the specified source.</source>
          <target state="translated">Usuwa uprzednio dodanych obsługi pochodzących z określonego źródła.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The source to remove listeners from.</source>
          <target state="translated">Aby usunąć odbiorników z źródło.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>The listening class (which must implement <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph>).</source>
          <target state="translated">Klasa nasłuchiwania (który musi zaimplementować interfejs <ph id="ph1">&lt;see cref="T:System.Windows.IWeakEventListener" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Removes a previously added listener from the provided source.</source>
          <target state="translated">Usuwa odbiornik uprzednio dodanych z podanego źródła.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Call this method within your manager class <ph id="ph1">`RemoveListener`</ph> methods on <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementations.</source>
          <target state="translated">Wywołanie tej metody w klasie Menedżera <ph id="ph1">`RemoveListener`</ph> metody <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementacji.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`RemoveListener`</ph> is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</source>
          <target state="translated"><ph id="ph1">`RemoveListener`</ph> sugerowana nazwa jest dla metody statycznej zdefiniowanie w klasie manager, aby włączyć innych klas usunąć odbiornik dla deseniu słabe zdarzeń.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">`RemoveListener`</ph> should take two parameters: the <ph id="ph2">`source`</ph> where the listener is removed, and the <ph id="ph3">`listener`</ph> class.</source>
          <target state="translated"><ph id="ph1">`RemoveListener`</ph> powinien mieć dwa parametry: <ph id="ph2">`source`</ph> Jeśli odbiornik zostanie usunięty i <ph id="ph3">`listener`</ph> klasy.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>For your <ph id="ph1">`RemoveListener`</ph> implementation, call the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> method on the current manager and pass the same two parameters.</source>
          <target state="translated">Dla Twojego <ph id="ph1">`RemoveListener`</ph> implementacji, wywołaj <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> metody na bieżący Menedżer i przebiegu tego samego dwa parametry.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If a call to <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> removes the last listener in the list, <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> calls the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> method internally, which will call your specific <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> override through polymorphism.</source>
          <target state="translated">Jeśli wywołanie <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> usuwa odbiornik ostatniego na liście <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> wywołania <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> — metoda wewnętrznie, która wywoła konkretnej <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.StopListening%2A&gt;</ph> zastąpienia za pośrednictwem polimorfizm.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> removes listeners from a single internal <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> per <ph id="ph3">`source`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> Usuwa odbiorników jeden wewnętrzny <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> na <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>.</source>
          <target state="translated">Jeśli wdrożenie Menedżera ma więcej niż jedną listę odbiorników dla każdej kombinacji źródło zdarzenia, nie używaj <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
          <source>Instead, your implementation should create its own <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> instances, <ph id="ph2">`RemoveListener`</ph> should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph> method instead of the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> method.</source>
          <target state="translated">Zamiast tego implementacji należy utworzyć własny <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> wystąpień, <ph id="ph2">`RemoveListener`</ph> należy usunąć odbiorników z listy odpowiednią i zdarzenia powinna zostać dostarczona do listy odpowiednie odbiornika wywołując <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph> zamiast metody <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The source for events being listened to.</source>
          <target state="translated">Źródło zdarzenia prowadzi nasłuch do.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The data to check.</source>
          <target state="translated">Dane do sprawdzenia.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>This object is expected to be a <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> implementation.</source>
          <target state="translated">Ten obiekt powinien być <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> implementacji.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to stop listening to <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>, and completely remove all entries from <bpt id="p2">&lt;c&gt;</bpt>data<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby zatrzymać nasłuchiwanie <bpt id="p1">&lt;c&gt;</bpt>źródła<ept id="p1">&lt;/c&gt;</ept>i całkowicie usunąć wszystkie wpisy z <bpt id="p2">&lt;c&gt;</bpt>danych<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>Removes inactive listener entries from the data list for the provided source.</source>
          <target state="translated">Usuwa nieaktywne odbiornika wpisy z listy danych dla podanego źródła.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>Returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> if some entries were actually removed from the list.</source>
          <target state="translated">Zwraca <ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli niektóre wpisy rzeczywiście zostały usunięte z listy.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if some entries were actually removed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli niektóre wpisy rzeczywiście zostały usunięte; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> method has a default implementation that will remove all entries when data is a <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> Metoda ma domyślną implementację, która spowoduje usunięcie wszystkich wpisów, gdy dane są <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>If the underlying type for the <ph id="ph1">&lt;see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /&gt;</ph> is something other than <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>, or contains data beyond a <ph id="ph3">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>, you must override the <ph id="ph4">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">Jeśli typ bazowy dla <ph id="ph1">&lt;see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /&gt;</ph> coś jest inny niż <ph id="ph2">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>, lub zawiera dane poza <ph id="ph3">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph>, konieczne jest przesłonięcie <ph id="ph4">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>The override should provide purge behavior for the alternate type items list.</source>
          <target state="translated">Zastąpienie powinien zapewnić zachowanie przeczyszczania do listy elementów typu alternatywny.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>Generally, the override should provide behavior without calling the base implementation.</source>
          <target state="translated">Ogólnie rzecz biorąc zastąpienie powinien zapewnić zachowanie bez wywoływania implementacji podstawowej.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
          <source>If a specific <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> still needs clearing, call <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" /&gt;</ph>.</source>
          <target state="translated">Jeśli określony <ph id="ph1">&lt;see cref="T:System.Windows.WeakEventManager.ListenerList" /&gt;</ph> nadal wymaga czyszczenia, wywołania <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>Establishes a read-lock on the underlying data table, and returns an <ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph>.</source>
          <target state="translated">Ustanawia blokady odczytu w tabeli podstawowej danych i zwraca <ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <ph id="ph1">&lt;see langword="using" /&gt;</ph> construct.</source>
          <target state="translated">Obiekt, który może służyć do ustanowienia blokady w elementach członkowskich tabeli danych, a następnie odpowiednio usunięta z <ph id="ph1">&lt;see langword="using" /&gt;</ph> utworzenia.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>In derived classes, queries to the table contained in <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> should always occur within a <ph id="ph2">`using (ReadLock) { ... }`</ph> clause, except for queries that are already within a write lock.</source>
          <target state="translated">W klasach pochodnych, wysyła zapytanie do tabeli zawartych w <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> powinny być zawsze wykonywane w ramach <ph id="ph2">`using (ReadLock) { ... }`</ph> klauzuli, z wyjątkiem zapytań, które znajdują się już na blokadę zapisu.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.ReadLock">
          <source>These queries may be necessary if your class supports a more sophisticated <ph id="ph1">`AddListener`</ph> implementation that requires more data beyond the <ph id="ph2">`source`</ph> and the <ph id="ph3">`listener`</ph>, and uses the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> collection to store the extra information.</source>
          <target state="translated">Te zapytania może być konieczne, jeśli klasa obsługuje bardziej złożone <ph id="ph1">`AddListener`</ph> implementację, która wymaga większej ilości danych poza <ph id="ph2">`source`</ph> i <ph id="ph3">`listener`</ph>i używa <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> kolekcji do przechowywania dodatkowych informacji.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Remove(System.Object)">
          <source>The source to remove listener information for.</source>
          <target state="translated">Aby usunąć odbiornik informacje dotyczące źródło.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.Remove(System.Object)">
          <source>Removes all listeners for the specified source.</source>
          <target state="translated">Usuwa wszystkie odbiorników dla określonego źródła.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.ScheduleCleanup">
          <source>Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</source>
          <target state="translated">Wykonanie usuwanie nieużywanych wpisów na liście podstawowej odbiornika na niższy priorytet wątku żądania.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.ScheduleCleanup">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ScheduleCleanup%2A&gt;</ph> method is similar to calling the <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> method on the current manager's list, at lower thread priority, with the <ph id="ph3">`purgeAll`</ph> parameter set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated">Wywoływanie <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ScheduleCleanup%2A&gt;</ph> metoda jest podobna do wywoływania <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.Purge%2A&gt;</ph> metody na liście bieżący Menedżer, niższym priorytetem wątku, z <ph id="ph3">`purgeAll`</ph> ustawiono parametr <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>The type to set the new event manager.</source>
          <target state="translated">Typ do nowego menedżera zdarzeń.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>The new event manager.</source>
          <target state="translated">Nowy Menedżer zdarzeń.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>Sets the current manager for the specified manager type.</source>
          <target state="translated">Ustawia bieżący Menedżer Menedżera określonego typu.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.SetCurrentManager%2A&gt;</ph> method to initialize a manager, if that is required by a call to your <ph id="ph2">`CurrentManager`</ph> property on a <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementation.</source>
          <target state="translated">Wywołanie <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.SetCurrentManager%2A&gt;</ph> metody można zainicjować menedżera, jeśli jest wymagany przez wywołanie do Twojej <ph id="ph2">`CurrentManager`</ph> właściwość <ph id="ph3">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementacji.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The source to begin listening on.</source>
          <target state="translated">Źródło, aby rozpocząć nasłuchiwania na.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>When overridden in a derived class, starts listening for the event being managed.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, rozpoczyna nasłuchiwanie zdarzeń zarządzany.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>After the <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> method is first called, the manager should be in the state of calling <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> or <ph id="ph3">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph> whenever the relevant event from the provided source is handled.</source>
          <target state="translated">Po <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> najpierw wywoływana jest metoda, Menedżer powinien być w stanie wywołania metody <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> lub <ph id="ph3">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph> zawsze, gdy odpowiednie zdarzenie z podanego źródła jest obsługiwane.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> overrides should add a handler to the provided <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> zastąpienia należy dodać program obsługi do dostarczonego <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The handler is declared by the manager itself.</source>
          <target state="translated">Program obsługi jest zadeklarowany przez Menedżera samej siebie.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The class handler should not be public, and it should only be called in response to the event being managed.</source>
          <target state="translated">Obsługa klasy nie powinny być publiczne i powinna być wywoływana tylko w odpowiedzi na zdarzenie zarządzany.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StartListening(System.Object)">
          <source>The class handler should call the <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> method or the <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph> method appropriately.</source>
          <target state="translated">Obsługa klasy powinny wywoływać <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /&gt;</ph> metody lub <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /&gt;</ph> — metoda odpowiednio.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>The source to stop listening on.</source>
          <target state="translated">Źródło do zatrzymania nasłuchiwania.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>When overridden in a derived class, stops listening on the provided source for the event being managed.</source>
          <target state="translated">W przypadku przesłonięcia w klasie pochodnej, zatrzymuje nasłuchiwanie dla podanego źródła zdarzeń zarządzany.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /&gt;</ph> implementations should remove the class handler as added by the <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /&gt;</ph> implementacje należy usunąć program obsługi klasy dodawany przez <ph id="ph2">&lt;see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /&gt;</ph> metody.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>Removing a listener should not clear the listener list.</source>
          <target state="translated">Usuwanie odbiornik nie należy wyczyścić listy odbiornika.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>Instead, it should only disconnect the class handler (perhaps temporarily).</source>
          <target state="translated">Zamiast tego należy tylko Odłącz obsługi klasy (być może tymczasowo).</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.WeakEventManager.StopListening(System.Object)">
          <source>Other methods are available for clearing the entire list, such as the <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph> method with the <ph id="ph2">&lt;paramref name="purgeAll" /&gt;</ph> parameter set to <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Inne metody są dostępne, takich jak czyszczenie całą listę <ph id="ph1">&lt;see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /&gt;</ph> metody z <ph id="ph2">&lt;paramref name="purgeAll" /&gt;</ph> ustawiono parametr <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>Establishes a write-lock on the underlying data table, and returns an <ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph>.</source>
          <target state="translated">Ustanawia blokady zapisu w tabeli podstawowej danych i zwraca <ph id="ph1">&lt;see cref="T:System.IDisposable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <ph id="ph1">&lt;see langword="using" /&gt;</ph> construct.</source>
          <target state="translated">Obiekt, który może służyć do ustanowienia blokady w elementach członkowskich tabeli danych, a następnie odpowiednio usunięta z <ph id="ph1">&lt;see langword="using" /&gt;</ph> utworzenia.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>In derived classes, all modifications to the underlying data table should occur within a <ph id="ph1">`using (WriteLock) { ... }`</ph> clause.</source>
          <target state="translated">W klasach pochodnych, wszystkie zmiany do tabeli podstawowej danych powinna wystąpić w ramach <ph id="ph1">`using (WriteLock) { ... }`</ph> klauzuli.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.WeakEventManager.WriteLock">
          <source>These modifications may be necessary if your class supports a more sophisticated <ph id="ph1">`AddListener`</ph> implementation that requires more data beyond the <ph id="ph2">`source`</ph> and the <ph id="ph3">`listener`</ph>, and uses the <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> collection to store the extra information.</source>
          <target state="translated">Poniższe zmiany, może być konieczne, jeśli klasa obsługuje bardziej złożone <ph id="ph1">`AddListener`</ph> implementację, która wymaga większej ilości danych poza <ph id="ph2">`source`</ph> i <ph id="ph3">`listener`</ph>i używa <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.Item%2A&gt;</ph> kolekcji do przechowywania dodatkowych informacji.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>