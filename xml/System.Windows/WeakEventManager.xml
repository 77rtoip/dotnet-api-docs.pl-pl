<Type Name="WeakEventManager" FullName="System.Windows.WeakEventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="080b5265a21bc5938d549e2c320e525fe044eb65" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69443642" /></Metadata><TypeSignature Language="C#" Value="public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WeakEventManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WeakEventManager&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class WeakEventManager abstract : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type WeakEventManager = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="fe385-101">Dostarcza klasę bazową dla Menedżera zdarzeń, która jest używana w niesłabym *wzorcu zdarzenia*.</span><span class="sxs-lookup"><span data-stu-id="fe385-101">Provides a base class for the event manager that is used in the *weak event pattern*.</span></span> <span data-ttu-id="fe385-102">Menedżer dodaje i usuwa detektory zdarzeń (lub wywołania zwrotne), które również używają wzorca.</span><span class="sxs-lookup"><span data-stu-id="fe385-102">The manager adds and removes listeners for events (or callbacks) that also use the pattern.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe385-103">Wzorzec zdarzeń słabych jest zazwyczaj używany, gdy źródło zdarzenia ma okres istnienia obiektu, który jest niezależny od detektorów zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="fe385-103">You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</span></span> <span data-ttu-id="fe385-104">Użycie centralnej funkcji <xref:System.Windows.WeakEventManager> wysyłania zdarzeń przez program umożliwia obsługę elementów bezużytecznych odbiornika, nawet jeśli obiekt źródłowy utrzymuje się.</span><span class="sxs-lookup"><span data-stu-id="fe385-104">Using the central event dispatching capability of a <xref:System.Windows.WeakEventManager> allows the listener's handlers to be garbage collected even if the source object persists.</span></span> <span data-ttu-id="fe385-105">W przeciwieństwie do regularnego podłączenie zdarzeń przy `+=` użyciu operatora powoduje, że potencjalnie odłączona źródło może przechowywać odwołanie do odbiorników.</span><span class="sxs-lookup"><span data-stu-id="fe385-105">By contrast, a regular event hookup using the `+=` operator causes the potentially disconnected source to hold a reference to the listeners.</span></span> <span data-ttu-id="fe385-106">Zapobiega to odbieraniu przez odbiornik elementów bezużytecznych w odpowiednim czasie.</span><span class="sxs-lookup"><span data-stu-id="fe385-106">This prevents the receiver from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="fe385-107">Jedną z typowych sytuacji, w której relacje okresu istnienia między źródłami i odbiornikami powinny używać słabego wzorca zdarzeń, obsługują zdarzenia aktualizacji pochodzące z powiązań danych.</span><span class="sxs-lookup"><span data-stu-id="fe385-107">One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</span></span>  
  
 <span data-ttu-id="fe385-108">Słaby wzorzec zdarzeń może również służyć do wywoływania zwrotnego i zwykłych zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="fe385-108">The weak event pattern can also be used for callbacks and regular events.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="fe385-109">Przykład niestandardowego <see cref="T:System.Windows.WeakEventManager" />, zobacz [słabych wzorców zdarzeń](~/docs/framework/wpf/advanced/weak-event-patterns.md).</span><span class="sxs-lookup"><span data-stu-id="fe385-109">For an example of a custom <see cref="T:System.Windows.WeakEventManager" />, see [Weak Event Patterns](~/docs/framework/wpf/advanced/weak-event-patterns.md).</span></span></para></block>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeakEventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WeakEventManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fe385-110">Inicjuje wartości klasy bazowej, gdy jest używany jako inicjator przez konstruktora klasy pochodnej.</span><span class="sxs-lookup"><span data-stu-id="fe385-110">Initializes base class values when it is used as the initializer by the constructor of a derived class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="protected void DeliverEvent (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEvent(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEvent (sender As Object, args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEvent(System::Object ^ sender, EventArgs ^ args);" />
      <MemberSignature Language="F#" Value="member this.DeliverEvent : obj * EventArgs -&gt; unit" Usage="weakEventManager.DeliverEvent (sender, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="fe385-111">Obiekt, na którym zdarzenie jest obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="fe385-111">The object on which the event is being handled.</span></span></param>
        <param name="args"><span data-ttu-id="fe385-112"><see cref="T:System.EventArgs" /> Zawierający dane zdarzenia do dostarczenia.</span><span class="sxs-lookup"><span data-stu-id="fe385-112">An <see cref="T:System.EventArgs" /> that contains the event data for the event to deliver.</span></span></param>
        <summary><span data-ttu-id="fe385-113">Dostarcza zdarzenie zarządzane dla każdego odbiornika.</span><span class="sxs-lookup"><span data-stu-id="fe385-113">Delivers the event being managed to each listener.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe385-114">Wywołaj <xref:System.Windows.WeakEventManager.StartListening%2A> <xref:System.Windows.WeakEventManager.StopListening%2A> metodę z obsługi zdarzeń, które są dodawane lub usuwane przez implementacje podklas i. <xref:System.Windows.WeakEventManager.DeliverEvent%2A></span><span class="sxs-lookup"><span data-stu-id="fe385-114">Call the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method from within the event handlers that are added or removed by the <xref:System.Windows.WeakEventManager.StartListening%2A> and <xref:System.Windows.WeakEventManager.StopListening%2A> implementations of subclasses.</span></span>  
  
 <span data-ttu-id="fe385-115">Jeśli wywołasz <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> metodę `AddListener` w implementacji klasy, lista odbiorników otrzymujących zdarzenie jest zachowywana w źródłowej kolekcji.</span><span class="sxs-lookup"><span data-stu-id="fe385-115">If you call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method in your `AddListener` implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</span></span> <span data-ttu-id="fe385-116">(`AddListener` nie jest częścią kontraktu interfejsu lub klasy.</span><span class="sxs-lookup"><span data-stu-id="fe385-116">(`AddListener` is not part of an interface or class contract.</span></span> <span data-ttu-id="fe385-117">`AddListener`jest sugerowaną nazwą metody klasy Menedżera, która wywołuje <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> i dodaje słabe detektory wzorców zdarzeń dla zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="fe385-117">`AddListener` is the suggested name for the method of your manager class that calls <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and adds weak event pattern listeners for the event.)</span></span>  
  
 <span data-ttu-id="fe385-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>dodaje detektory do pojedynczej listy.</span><span class="sxs-lookup"><span data-stu-id="fe385-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single list.</span></span> <span data-ttu-id="fe385-119">Jeśli wdrożenie Menedżera zawiera więcej niż jedną listę odbiorników na zdarzenie, nie używaj <xref:System.Windows.WeakEventManager.DeliverEvent%2A> ani. <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A></span><span class="sxs-lookup"><span data-stu-id="fe385-119">If your manager implementation maintains more than one list of listeners per event, do not use <xref:System.Windows.WeakEventManager.DeliverEvent%2A> or <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="fe385-120">Zamiast tego implementacja powinna tworzyć własne <xref:System.Windows.WeakEventManager.ListenerList> wystąpienia, `AddListener` należy dodać detektory do odpowiedniej listy, a zdarzenia powinny zostać dostarczone do odpowiedniej listy odbiorników przez wywołanie <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span><span class="sxs-lookup"><span data-stu-id="fe385-120">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="DeliverEventToList">
      <MemberSignature Language="C#" Value="protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEventToList(object sender, class System.EventArgs args, class System.Windows.WeakEventManager/ListenerList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEventToList (sender As Object, args As EventArgs, list As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.DeliverEventToList : obj * EventArgs * System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="weakEventManager.DeliverEventToList (sender, args, list)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEventToList(System::Object ^ sender, EventArgs ^ args, System::Windows::WeakEventManager::ListenerList ^ list);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="fe385-121">Obiekt, na którym zdarzenie jest obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="fe385-121">The object on which the event is being handled.</span></span></param>
        <param name="args"><span data-ttu-id="fe385-122"><see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="fe385-122">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <param name="list"><span data-ttu-id="fe385-123">Dostarczone <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="fe385-123">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="fe385-124">Dostarcza zdarzenie zarządzane dla każdego odbiornika na podanej liście.</span><span class="sxs-lookup"><span data-stu-id="fe385-124">Delivers the event being managed to each listener in the provided list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe385-125">Ta metoda jest niezbędna, jeśli implementacja Menedżera przechowuje oddzielne listy odbiorników na podstawie informacji przechwytywanych w danych zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="fe385-125">This method is necessary if your manager implementation maintains separate listeners lists based on information that is captured in the event data.</span></span> <span data-ttu-id="fe385-126">W przypadku korzystania z tej zaawansowanej metody, należy utworzyć i obsłużyć osobne listy w ramach implementacji Menedżera i należy udostępnić sposób dodawania odbiorników do konkretnej listy.</span><span class="sxs-lookup"><span data-stu-id="fe385-126">If you use this advanced technique, you must create and maintain the separate lists as part of your manager implementation, and you must provide a way to add listeners to a specific list.</span></span> <span data-ttu-id="fe385-127">Implementacja programu obsługi, która nasłuchuje w zdarzeniu nieprzetworzonym, musi działać w oparciu o warunek, którego można użyć do odróżnienia list i dostarczenia zdarzenia tylko do odpowiedniej listy lub list.</span><span class="sxs-lookup"><span data-stu-id="fe385-127">Your handler implementation that listens to the raw event must act upon the condition that you use to differentiate the lists, and deliver the event only to the appropriate list or lists.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentManager">
      <MemberSignature Language="C#" Value="protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.WeakEventManager GetCurrentManager(class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetCurrentManager (managerType As Type) As WeakEventManager" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Windows::WeakEventManager ^ GetCurrentManager(Type ^ managerType);" />
      <MemberSignature Language="F#" Value="static member GetCurrentManager : Type -&gt; System.Windows.WeakEventManager" Usage="System.Windows.WeakEventManager.GetCurrentManager managerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="fe385-128">Typ, dla którego ma <see cref="T:System.Windows.WeakEventManager" /> zostać uzyskana wartość.</span><span class="sxs-lookup"><span data-stu-id="fe385-128">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</span></span></param>
        <summary><span data-ttu-id="fe385-129"><see cref="T:System.Windows.WeakEventManager" /> Zwraca implementację używaną dla podanego typu.</span><span class="sxs-lookup"><span data-stu-id="fe385-129">Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</span></span></summary>
        <returns><span data-ttu-id="fe385-130">Zgodna <see cref="T:System.Windows.WeakEventManager" /> implementacja.</span><span class="sxs-lookup"><span data-stu-id="fe385-130">The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe385-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>implementacje wywołują tę metodę przy `managerType`użyciu ich zakończono.</span><span class="sxs-lookup"><span data-stu-id="fe385-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementations call this method using their passed `managerType`.</span></span> <span data-ttu-id="fe385-132">Zwracany <xref:System.Windows.WeakEventManager> jest następnie używany jako odróżniający, który określa, które zdarzenie zostało odebrane i która procedura obsługi klasy prywatnej ma zostać wywołana.</span><span class="sxs-lookup"><span data-stu-id="fe385-132">The returned <xref:System.Windows.WeakEventManager> is then used as the differentiator that determines which event was received, and which private class handler to invoke.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="protected object this[object source] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Protected Property Item(source As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ source); void set(System::Object ^ source, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Windows.WeakEventManager.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="fe385-133">Indeks (liczony od zera) żądanego źródła.</span><span class="sxs-lookup"><span data-stu-id="fe385-133">The zero-based index of the requested source.</span></span></param>
        <summary><span data-ttu-id="fe385-134">Pobiera lub ustawia dane przechowywane dla określonego źródła.</span><span class="sxs-lookup"><span data-stu-id="fe385-134">Gets or sets the data being stored for the specified source.</span></span></summary>
        <value><span data-ttu-id="fe385-135">Dane przechowywane przez Menedżera dla tego źródła.</span><span class="sxs-lookup"><span data-stu-id="fe385-135">Data being stored by the manager for this source.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe385-136">Klasy pochodne mogą wybierać dane i typy do przechowywania w tym indeksatorze.</span><span class="sxs-lookup"><span data-stu-id="fe385-136">Derived classes can choose what data and type to store in this indexer.</span></span> <span data-ttu-id="fe385-137">Zwykle jest to implementowane jako <xref:System.Windows.WeakEventManager.ListenerList>, która jest listą słabych odwołań do odbiorników.</span><span class="sxs-lookup"><span data-stu-id="fe385-137">Typically this is implemented as a <xref:System.Windows.WeakEventManager.ListenerList>, which is a list of weak references to listeners.</span></span> <span data-ttu-id="fe385-138">Ten typ należy zmienić tylko wtedy, <xref:System.Windows.WeakEventManager.ListenerList> gdy typ nie może zawierać wymaganych informacji.</span><span class="sxs-lookup"><span data-stu-id="fe385-138">You would only have to change this type if the <xref:System.Windows.WeakEventManager.ListenerList> type cannot contain your required information.</span></span> <span data-ttu-id="fe385-139">Jeśli tak, należy przesłonić <xref:System.Windows.WeakEventManager.Purge%2A> metodę, aby wszystkie oczyszczanie typu podstawowego były wykonywane poprawnie.</span><span class="sxs-lookup"><span data-stu-id="fe385-139">If so, you will have to override the <xref:System.Windows.WeakEventManager.Purge%2A> method so that all cleanup of the underlying type is performed correctly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="abstract member NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="weakEventManager.NewListenerList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fe385-140">Zwraca nowy obiekt, który zawiera detektory do zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="fe385-140">Returns a new object to contain listeners to an event.</span></span></summary>
        <returns><span data-ttu-id="fe385-141">Nowy obiekt, który będzie zawierać detektory dla zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="fe385-141">A new object to contain listeners to an event.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedAddHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedAddHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.Delegate" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="fe385-142">Obiekt źródłowy, do którego subskrybuje program obsługi.</span><span class="sxs-lookup"><span data-stu-id="fe385-142">The source object that the handler delegate subscribes to.</span></span></param>
        <param name="handler"><span data-ttu-id="fe385-143">Delegat, który obsługuje zdarzenie, które jest zgłaszane przez <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="fe385-143">The delegate that handles the event that is raised by <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="fe385-144">Dodaje określonego delegata jako procedurę obsługi zdarzeń określonego źródła.</span><span class="sxs-lookup"><span data-stu-id="fe385-144">Adds the specified delegate as an event handler of the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddListener">
      <MemberSignature Language="C#" Value="protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedAddListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="fe385-145">Źródło, do którego mają zostać dołączone odbiorniki.</span><span class="sxs-lookup"><span data-stu-id="fe385-145">The source to attach listeners to.</span></span></param>
        <param name="listener"><span data-ttu-id="fe385-146">Klasa nasłuchu (która musi implementować <see cref="T:System.Windows.IWeakEventListener" />).</span><span class="sxs-lookup"><span data-stu-id="fe385-146">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span></span></param>
        <summary><span data-ttu-id="fe385-147">Dodaje podany odbiornik do podanego źródła dla zarządzanego zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="fe385-147">Adds the provided listener to the provided source for the event being managed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe385-148">Wywołaj tę metodę w ramach metod `AddListener` klasy Menedżera <xref:System.Windows.WeakEventManager> w przypadku implementacji.</span><span class="sxs-lookup"><span data-stu-id="fe385-148">Call this method within your manager class `AddListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="fe385-149">`AddListener`jest sugerowaną nazwą dla statycznej metody zdefiniowanej w klasie Menedżera, aby umożliwić innym klasom dodanie odbiornika dla słabych wzorców zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="fe385-149">`AddListener` is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</span></span> <span data-ttu-id="fe385-150">`AddListener`powinna przyjmować dwa parametry: `source` gdzie jest dołączony odbiornik `listener` i wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="fe385-150">`AddListener` should take two parameters: the `source` where the listener is attached, and the `listener` instance.</span></span> <span data-ttu-id="fe385-151">Dla Twojej `AddListener` implementacji <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> Wywołaj metodę w bieżącym Menedżerze i przekaż te same dwa parametry.</span><span class="sxs-lookup"><span data-stu-id="fe385-151">For your `AddListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="fe385-152">Jeśli lista odbiorników była wcześniej pusta, <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> <xref:System.Windows.WeakEventManager.StartListening%2A> wywołuje metodę wewnętrznie, która wywoła określone <xref:System.Windows.WeakEventManager.StartListening%2A> przesłonięcie za pomocą polimorfizmu.</span><span class="sxs-lookup"><span data-stu-id="fe385-152">If the list of listeners was previously empty, <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> calls the <xref:System.Windows.WeakEventManager.StartListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StartListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="fe385-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>dodaje detektory do pojedynczej <xref:System.Windows.WeakEventManager.ListenerList> wewnętrznej `source`wartości.</span><span class="sxs-lookup"><span data-stu-id="fe385-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="fe385-154">Jeśli wdrożenie Menedżera utrzymuje więcej niż jedną listę odbiorników dla każdej kombinacji źródła zdarzeń, nie należy używać <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span><span class="sxs-lookup"><span data-stu-id="fe385-154">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="fe385-155">Zamiast tego implementacja powinna tworzyć własne <xref:System.Windows.WeakEventManager.ListenerList> wystąpienia, `AddListener` należy dodać detektory do odpowiedniej listy, a zdarzenia powinny zostać dostarczone do odpowiedniej listy <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> odbiorników przez wywołanie zdarzenia zamiast <xref:System.Windows.WeakEventManager.DeliverEvent%2A> Metoda.</span><span class="sxs-lookup"><span data-stu-id="fe385-155">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> event instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedRemoveHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.Delegate" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="fe385-156">Źródło, z którego ma zostać usunięty program obsługi.</span><span class="sxs-lookup"><span data-stu-id="fe385-156">The source to remove the handler from.</span></span></param>
        <param name="handler"><span data-ttu-id="fe385-157">Delegat do usunięcia <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="fe385-157">The delegate to remove from <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="fe385-158">Usuwa wcześniej dodaną procedurę obsługi z określonego źródła.</span><span class="sxs-lookup"><span data-stu-id="fe385-158">Removes the previously added handler from the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveListener">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedRemoveListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="fe385-159">Źródło, z którego mają zostać usunięte odbiorniki.</span><span class="sxs-lookup"><span data-stu-id="fe385-159">The source to remove listeners from.</span></span></param>
        <param name="listener"><span data-ttu-id="fe385-160">Klasa nasłuchu (która musi implementować <see cref="T:System.Windows.IWeakEventListener" />).</span><span class="sxs-lookup"><span data-stu-id="fe385-160">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span></span></param>
        <summary><span data-ttu-id="fe385-161">Usuwa wcześniej dodany odbiornik z podanego źródła.</span><span class="sxs-lookup"><span data-stu-id="fe385-161">Removes a previously added listener from the provided source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe385-162">Wywołaj tę metodę w ramach metod `RemoveListener` klasy Menedżera <xref:System.Windows.WeakEventManager> w przypadku implementacji.</span><span class="sxs-lookup"><span data-stu-id="fe385-162">Call this method within your manager class `RemoveListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="fe385-163">`RemoveListener`jest sugerowaną nazwą dla statycznej metody zdefiniowanej w klasie Menedżera, aby umożliwić innym klasom usuwanie odbiornika dla słabych wzorców zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="fe385-163">`RemoveListener` is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</span></span> <span data-ttu-id="fe385-164">`RemoveListener`powinien przyjmować dwa parametry: `source` miejsce, w którym został usunięty odbiornik, `listener` i Klasa.</span><span class="sxs-lookup"><span data-stu-id="fe385-164">`RemoveListener` should take two parameters: the `source` where the listener is removed, and the `listener` class.</span></span> <span data-ttu-id="fe385-165">Dla Twojej `RemoveListener` implementacji <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> Wywołaj metodę w bieżącym Menedżerze i przekaż te same dwa parametry.</span><span class="sxs-lookup"><span data-stu-id="fe385-165">For your `RemoveListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="fe385-166">Jeśli wywołanie <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> usuwa ostatni odbiornik na liście, <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> wywołuje <xref:System.Windows.WeakEventManager.StopListening%2A> metodę wewnętrznie, która wywoła określone <xref:System.Windows.WeakEventManager.StopListening%2A> przesłonięcie za pomocą polimorfizmu.</span><span class="sxs-lookup"><span data-stu-id="fe385-166">If a call to <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes the last listener in the list, <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> calls the <xref:System.Windows.WeakEventManager.StopListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StopListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="fe385-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>usuwa odbiorniki z pojedynczej <xref:System.Windows.WeakEventManager.ListenerList> wewnętrznej `source`na.</span><span class="sxs-lookup"><span data-stu-id="fe385-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes listeners from a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="fe385-168">Jeśli wdrożenie Menedżera utrzymuje więcej niż jedną listę odbiorników dla każdej kombinacji źródła zdarzeń, nie należy używać <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>.</span><span class="sxs-lookup"><span data-stu-id="fe385-168">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>.</span></span> <span data-ttu-id="fe385-169">Zamiast tego implementacja powinna tworzyć własne <xref:System.Windows.WeakEventManager.ListenerList> wystąpienia, `RemoveListener` należy usunąć detektory z odpowiedniej listy, a zdarzenia powinny zostać dostarczone do odpowiedniej listy <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> odbiorników przez wywołanie metody zamiast <xref:System.Windows.WeakEventManager.DeliverEvent%2A> Metoda.</span><span class="sxs-lookup"><span data-stu-id="fe385-169">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `RemoveListener` should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> method instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected virtual bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberSignature Language="F#" Value="abstract member Purge : obj * obj * bool -&gt; bool&#xA;override this.Purge : obj * obj * bool -&gt; bool" Usage="weakEventManager.Purge (source, data, purgeAll)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="fe385-170">Źródło zdarzeń, do których nasłuchuje.</span><span class="sxs-lookup"><span data-stu-id="fe385-170">The source for events being listened to.</span></span></param>
        <param name="data"><span data-ttu-id="fe385-171">Dane do sprawdzenia.</span><span class="sxs-lookup"><span data-stu-id="fe385-171">The data to check.</span></span> <span data-ttu-id="fe385-172">Oczekiwanym obiektem jest <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementacja.</span><span class="sxs-lookup"><span data-stu-id="fe385-172">This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</span></span></param>
        <param name="purgeAll"><span data-ttu-id="fe385-173"><see langword="true" />Aby przerwać nasłuchiwanie <paramref name="source" />i całkowicie usunąć wszystkie wpisy z <paramref name="data" />programu.</span><span class="sxs-lookup"><span data-stu-id="fe385-173"><see langword="true" /> to stop listening to <paramref name="source" />, and completely remove all entries from <paramref name="data" />.</span></span></param>
        <summary><span data-ttu-id="fe385-174">Usuwa nieaktywne wpisy odbiornika z listy danych dla podanego źródła.</span><span class="sxs-lookup"><span data-stu-id="fe385-174">Removes inactive listener entries from the data list for the provided source.</span></span> <span data-ttu-id="fe385-175">Zwraca <see langword="true" /> czy niektóre wpisy zostały faktycznie usunięte z listy.</span><span class="sxs-lookup"><span data-stu-id="fe385-175">Returns <see langword="true" /> if some entries were actually removed from the list.</span></span></summary>
        <returns><span data-ttu-id="fe385-176"><see langword="true" />Jeśli niektóre wpisy zostały faktycznie usunięte; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="fe385-176"><see langword="true" /> if some entries were actually removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe385-177">Metoda ma domyślną implementację, która spowoduje usunięcie wszystkich wpisów, gdy dane <xref:System.Windows.WeakEventManager.ListenerList>są. <xref:System.Windows.WeakEventManager.Purge%2A></span><span class="sxs-lookup"><span data-stu-id="fe385-177">The <xref:System.Windows.WeakEventManager.Purge%2A> method has a default implementation that will remove all entries when data is a <xref:System.Windows.WeakEventManager.ListenerList>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="fe385-178">Jeśli <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> typ podstawowy dla elementu to coś innego niż <see cref="T:System.Windows.WeakEventManager.ListenerList" />lub zawiera dane poza obiektem <see cref="T:System.Windows.WeakEventManager.ListenerList" />, należy zastąpić <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> metodę.</span><span class="sxs-lookup"><span data-stu-id="fe385-178">If the underlying type for the <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> is something other than <see cref="T:System.Windows.WeakEventManager.ListenerList" />, or contains data beyond a <see cref="T:System.Windows.WeakEventManager.ListenerList" />, you must override the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method.</span></span> <span data-ttu-id="fe385-179">Zastąpienie powinno zapewnić zachowanie podczas przeczyszczania dla listy elementów typu alternatywnego.</span><span class="sxs-lookup"><span data-stu-id="fe385-179">The override should provide purge behavior for the alternate type items list.</span></span> <span data-ttu-id="fe385-180">Ogólnie rzecz biorąc, zastąpienie powinno zapewnić zachowanie bez wywoływania podstawowej implementacji.</span><span class="sxs-lookup"><span data-stu-id="fe385-180">Generally, the override should provide behavior without calling the base implementation.</span></span> <span data-ttu-id="fe385-181">Jeśli określone <see cref="T:System.Windows.WeakEventManager.ListenerList" /> nadal wymagają czyszczenia, wywołaj <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</span><span class="sxs-lookup"><span data-stu-id="fe385-181">If a specific <see cref="T:System.Windows.WeakEventManager.ListenerList" /> still needs clearing, call <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</span></span></para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="protected IDisposable ReadLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable ReadLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ReadLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReadLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ ReadLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadLock : IDisposable" Usage="System.Windows.WeakEventManager.ReadLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe385-182">Ustanawia odblokowanie do odczytu w źródłowej tabeli danych i zwraca <see cref="T:System.IDisposable" />.</span><span class="sxs-lookup"><span data-stu-id="fe385-182">Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span></span></summary>
        <value><span data-ttu-id="fe385-183">Obiekt, który może służyć do ustanowienia blokady elementów członkowskich tabeli danych, a następnie być odpowiednio usunięty z <see langword="using" /> konstrukcja.</span><span class="sxs-lookup"><span data-stu-id="fe385-183">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe385-184">W klasach pochodnych zapytania do tabeli zawartej w <xref:System.Windows.WeakEventManager.Item%2A> `using (ReadLock) { ... }` elemencie powinny zawsze występować w klauzuli, z wyjątkiem zapytań, które znajdują się już w ramach blokady zapisu.</span><span class="sxs-lookup"><span data-stu-id="fe385-184">In derived classes, queries to the table contained in <xref:System.Windows.WeakEventManager.Item%2A> should always occur within a `using (ReadLock) { ... }` clause, except for queries that are already within a write lock.</span></span> <span data-ttu-id="fe385-185">Te zapytania mogą być niezbędne, jeśli klasa obsługuje bardziej zaawansowaną `AddListener` implementację, która wymaga większej ilości danych `listener` `source` poza i i używa <xref:System.Windows.WeakEventManager.Item%2A> kolekcji do przechowywania dodatkowych informacji.</span><span class="sxs-lookup"><span data-stu-id="fe385-185">These queries may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.WriteLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected void Remove (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Remove(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Remove (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Remove(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="member this.Remove : obj -&gt; unit" Usage="weakEventManager.Remove source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="fe385-186">Źródło, dla którego mają zostać usunięte informacje o odbiorniku.</span><span class="sxs-lookup"><span data-stu-id="fe385-186">The source to remove listener information for.</span></span></param>
        <summary><span data-ttu-id="fe385-187">Usuwa wszystkie detektory dla określonego źródła.</span><span class="sxs-lookup"><span data-stu-id="fe385-187">Removes all listeners for the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCleanup">
      <MemberSignature Language="C#" Value="protected void ScheduleCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ScheduleCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ScheduleCleanup" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ScheduleCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ScheduleCleanup();" />
      <MemberSignature Language="F#" Value="member this.ScheduleCleanup : unit -&gt; unit" Usage="weakEventManager.ScheduleCleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fe385-188">Żąda, aby przeczyszczanie nieużywanych wpisów na liście bazowych odbiorników odbywało się w wątku o niższym priorytecie.</span><span class="sxs-lookup"><span data-stu-id="fe385-188">Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe385-189">Wywołanie metody jest podobne do <xref:System.Windows.WeakEventManager.Purge%2A> wywołania metody na liście bieżącego Menedżera, przy niższym priorytecie `purgeAll` wątku, z parametrem ustawionym na `false`. <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A></span><span class="sxs-lookup"><span data-stu-id="fe385-189">Calling the <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> method is similar to calling the <xref:System.Windows.WeakEventManager.Purge%2A> method on the current manager's list, at lower thread priority, with the `purgeAll` parameter set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentManager">
      <MemberSignature Language="C#" Value="protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetCurrentManager(class System.Type managerType, class System.Windows.WeakEventManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub SetCurrentManager (managerType As Type, manager As WeakEventManager)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void SetCurrentManager(Type ^ managerType, System::Windows::WeakEventManager ^ manager);" />
      <MemberSignature Language="F#" Value="static member SetCurrentManager : Type * System.Windows.WeakEventManager -&gt; unit" Usage="System.Windows.WeakEventManager.SetCurrentManager (managerType, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="manager" Type="System.Windows.WeakEventManager" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="fe385-190">Typ, dla którego ma zostać ustawiony nowy Menedżer zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="fe385-190">The type to set the new event manager.</span></span></param>
        <param name="manager"><span data-ttu-id="fe385-191">Nowy Menedżer zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="fe385-191">The new event manager.</span></span></param>
        <summary><span data-ttu-id="fe385-192">Ustawia bieżącego Menedżera dla określonego typu Menedżera.</span><span class="sxs-lookup"><span data-stu-id="fe385-192">Sets the current manager for the specified manager type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe385-193">Wywołaj `CurrentManager` <xref:System.Windows.WeakEventManager> metodę, aby zainicjować Menedżera, jeśli jest to wymagane przez wywołanie właściwości w implementacji. <xref:System.Windows.WeakEventManager.SetCurrentManager%2A></span><span class="sxs-lookup"><span data-stu-id="fe385-193">Call the <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> method to initialize a manager, if that is required by a call to your `CurrentManager` property on a <xref:System.Windows.WeakEventManager> implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected abstract void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StartListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StartListening : obj -&gt; unit" Usage="weakEventManager.StartListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="fe385-194">Źródło, na którym rozpocznie się nasłuchiwanie.</span><span class="sxs-lookup"><span data-stu-id="fe385-194">The source to begin listening on.</span></span></param>
        <summary><span data-ttu-id="fe385-195">Gdy jest zastępowany w klasie pochodnej, zaczyna nasłuchiwać zarządzanego zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="fe385-195">When overridden in a derived class, starts listening for the event being managed.</span></span> <span data-ttu-id="fe385-196">Po pierwszym wywołaniu <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> metody Menedżer powinien być w stanie wywoływania lub zawsze, gdy odpowiednie zdarzenie z podanego źródła jest obsługiwane. <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /></span><span class="sxs-lookup"><span data-stu-id="fe385-196">After the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="fe385-197">
            <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />zastąpień należy dodać procedurę obsługi do <paramref name="source" />podanego elementu.</span><span class="sxs-lookup"><span data-stu-id="fe385-197">
            <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> overrides should add a handler to the provided <paramref name="source" />.</span></span> <span data-ttu-id="fe385-198">Program obsługi jest zadeklarowany przez Menedżera.</span><span class="sxs-lookup"><span data-stu-id="fe385-198">The handler is declared by the manager itself.</span></span> <span data-ttu-id="fe385-199">Procedura obsługi klas nie powinna być publiczna i powinna być wywoływana tylko w odpowiedzi na zarządzane zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="fe385-199">The class handler should not be public, and it should only be called in response to the event being managed.</span></span> <span data-ttu-id="fe385-200">Procedura obsługi klasy powinna wywołać <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> metodę <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> lub metodę odpowiednio.</span><span class="sxs-lookup"><span data-stu-id="fe385-200">The class handler should call the <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> method or the <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> method appropriately.</span></span></para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected abstract void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StopListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StopListening : obj -&gt; unit" Usage="weakEventManager.StopListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="fe385-201">Źródło, na którym ma zostać zatrzymane nasłuchiwanie.</span><span class="sxs-lookup"><span data-stu-id="fe385-201">The source to stop listening on.</span></span></param>
        <summary><span data-ttu-id="fe385-202">Gdy jest zastępowany w klasie pochodnej, przestaje nasłuchiwać podanego źródła dla zarządzanego zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="fe385-202">When overridden in a derived class, stops listening on the provided source for the event being managed.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="fe385-203">
            <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" />implementacje powinny usuwać procedurę obsługi klas dodaną przez <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> metodę.</span><span class="sxs-lookup"><span data-stu-id="fe385-203">
            <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> implementations should remove the class handler as added by the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method.</span></span> <span data-ttu-id="fe385-204">Usuwanie odbiornika nie powinno czyścić listy odbiorników.</span><span class="sxs-lookup"><span data-stu-id="fe385-204">Removing a listener should not clear the listener list.</span></span> <span data-ttu-id="fe385-205">Zamiast tego należy rozłączyć tylko procedurę obsługi klasy (prawdopodobnie tymczasowo).</span><span class="sxs-lookup"><span data-stu-id="fe385-205">Instead, it should only disconnect the class handler (perhaps temporarily).</span></span> <span data-ttu-id="fe385-206">Inne metody są dostępne do wyczyszczenia całej listy, <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> na przykład metody <paramref name="purgeAll" /> z parametrem ustawionym na <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="fe385-206">Other methods are available for clearing the entire list, such as the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method with the <paramref name="purgeAll" /> parameter set to <see langword="true" />.</span></span></para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="protected IDisposable WriteLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable WriteLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.WriteLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property WriteLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ WriteLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteLock : IDisposable" Usage="System.Windows.WeakEventManager.WriteLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fe385-207">Ustanawia blokadę zapisu w źródłowej tabeli danych i zwraca <see cref="T:System.IDisposable" />.</span><span class="sxs-lookup"><span data-stu-id="fe385-207">Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span></span></summary>
        <value><span data-ttu-id="fe385-208">Obiekt, który może służyć do ustanowienia blokady elementów członkowskich tabeli danych, a następnie być odpowiednio usunięty z <see langword="using" /> konstrukcja.</span><span class="sxs-lookup"><span data-stu-id="fe385-208">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fe385-209">W klasach pochodnych wszystkie modyfikacje źródłowej tabeli danych powinny występować w `using (WriteLock) { ... }` klauzuli.</span><span class="sxs-lookup"><span data-stu-id="fe385-209">In derived classes, all modifications to the underlying data table should occur within a `using (WriteLock) { ... }` clause.</span></span> <span data-ttu-id="fe385-210">Te `AddListener` modyfikacje mogą być konieczne, jeśli klasa obsługuje bardziej zaawansowaną implementację, która wymaga większej ilości danych `source` poza i `listener`i <xref:System.Windows.WeakEventManager.Item%2A> używa kolekcji do przechowywania dodatkowych informacji.</span><span class="sxs-lookup"><span data-stu-id="fe385-210">These modifications may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.ReadLock" />
      </Docs>
    </Member>
  </Members>
</Type>
