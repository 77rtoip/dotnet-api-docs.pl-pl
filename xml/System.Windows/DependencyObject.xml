<Type Name="DependencyObject" FullName="System.Windows.DependencyObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b20096950e5ef29b8ab06fba5406a44bbc3ff7f2" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36461258" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DependencyObject : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DependencyObject extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyObject&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyObject : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type DependencyObject = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="99abe-101">Reprezentuje obiekt, który uczestniczy w systemie właściwości zależności.</span>
      <span class="sxs-lookup">
        <span data-stu-id="99abe-101">Represents an object that participates in the dependency property system.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99abe-102"><xref:System.Windows.DependencyObject> Klasy umożliwia [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] właściwości usług systemowych na jej wielu klas pochodnych.</span><span class="sxs-lookup"><span data-stu-id="99abe-102">The <xref:System.Windows.DependencyObject> class enables [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] property system services on its many derived classes.</span></span>  
  
 <span data-ttu-id="99abe-103">Podstawową funkcją systemu właściwość jest do obliczenia wartości właściwości oraz zapewnienie systemu powiadomień o wartości, które zostały zmienione.</span><span class="sxs-lookup"><span data-stu-id="99abe-103">The property system's primary function is to compute the values of properties, and to provide system notification about values that have changed.</span></span> <span data-ttu-id="99abe-104">Jest inna klasa klucza, który uczestniczy w systemie właściwości <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="99abe-104">Another key class that participates in the property system is <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="99abe-105"><xref:System.Windows.DependencyProperty> Umożliwia rejestrację właściwości zależności w systemie właściwości i zawiera identyfikator i informacje o każdej właściwości zależności, podczas gdy <xref:System.Windows.DependencyObject> jako klasa podstawowa umożliwia obiektów do użycia właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="99abe-105"><xref:System.Windows.DependencyProperty> enables the registration of dependency properties into the property system, and provides identification and information about each dependency property, whereas <xref:System.Windows.DependencyObject> as a base class enables objects to use the dependency properties.</span></span>  
  
 <span data-ttu-id="99abe-106"><xref:System.Windows.DependencyObject> usługi i właściwości są następujące:</span><span class="sxs-lookup"><span data-stu-id="99abe-106"><xref:System.Windows.DependencyObject> services and characteristics include the following:</span></span>  
  
-   <span data-ttu-id="99abe-107">Hosting obsługa właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="99abe-107">Dependency property hosting support.</span></span> <span data-ttu-id="99abe-108">Zarejestruj właściwości zależności przez wywołanie metody <xref:System.Windows.DependencyProperty.Register%2A> — metoda i przechowywanie wartości zwracanej przez metodę jako publiczne pola statycznego w klasie.</span><span class="sxs-lookup"><span data-stu-id="99abe-108">You register a dependency property by calling the <xref:System.Windows.DependencyProperty.Register%2A> method, and storing the method's return value as a public static field in your class.</span></span>  
  
-   <span data-ttu-id="99abe-109">Dołączona właściwość hosting pomocy technicznej.</span><span class="sxs-lookup"><span data-stu-id="99abe-109">Attached property hosting support.</span></span> <span data-ttu-id="99abe-110">Zarejestruj dołączona właściwość przez wywołanie metody <xref:System.Windows.DependencyProperty.RegisterAttached%2A> — metoda i przechowywanie wartości zwracanej przez metodę jako publiczne statyczne pole tylko do odczytu w klasie.</span><span class="sxs-lookup"><span data-stu-id="99abe-110">You register an attached property by calling the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, and storing the method's return value as a public static read-only field in your class.</span></span> <span data-ttu-id="99abe-111">(Istnieją również wymagania dodatkowy element członkowski; należy pamiętać, że jest to [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] konkretnej implementacji w przypadku dołączonych właściwości.</span><span class="sxs-lookup"><span data-stu-id="99abe-111">(There are also additional member requirements; note that this represents a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] specific implementation for attached properties.</span></span> <span data-ttu-id="99abe-112">Aby uzyskać więcej informacji, zobacz [dołączony Przegląd właściwości](~/docs/framework/wpf/advanced/attached-properties-overview.md).) Twoje dołączonej właściwości można następnie ustawić na dowolnej klasy, która jest pochodną <xref:System.Windows.DependencyObject>.</span><span class="sxs-lookup"><span data-stu-id="99abe-112">For details, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).) Your attached property can then be set on any class that derives from <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="99abe-113">Get ustaw i wyczyść metody narzędziowe do wartości wszystkich właściwości zależności, które istnieją na <xref:System.Windows.DependencyObject>.</span><span class="sxs-lookup"><span data-stu-id="99abe-113">Get, set, and clear utility methods for values of any dependency properties that exist on the <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="99abe-114">Metadane, wymuszone wartość obsługi powiadomień zmiany właściwości i wywołania zwrotne zastąpienia dla właściwości zależności lub dołączone właściwości.</span><span class="sxs-lookup"><span data-stu-id="99abe-114">Metadata, coerce value support, property changed notification, and override callbacks for  dependency properties or attached properties.</span></span> <span data-ttu-id="99abe-115">Ponadto <xref:System.Windows.DependencyObject> klasy ułatwia na właściciela metadanych właściwości dla właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="99abe-115">Also, the <xref:System.Windows.DependencyObject> class facilitates the per-owner property metadata for a dependency property.</span></span>  
  
-   <span data-ttu-id="99abe-116">Wspólna klasa podstawowa dla klas pochodnych <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, lub <xref:System.Windows.Media.Visual>.</span><span class="sxs-lookup"><span data-stu-id="99abe-116">A common base class for classes derived from <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, or <xref:System.Windows.Media.Visual>.</span></span> <span data-ttu-id="99abe-117">(<xref:System.Windows.UIElement>, inny base element klasa, ma hierarchii klasy, która obejmuje <xref:System.Windows.Media.Visual>.)</span><span class="sxs-lookup"><span data-stu-id="99abe-117">(<xref:System.Windows.UIElement>, another base element class, has a class hierarchy that includes <xref:System.Windows.Media.Visual>.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99abe-118">Poniższy przykład pochodzi z <xref:System.Windows.DependencyObject> do utworzenia nowej klasy abstrakcyjnej.</span><span class="sxs-lookup"><span data-stu-id="99abe-118">The following example derives from <xref:System.Windows.DependencyObject> to create a new abstract class.</span></span> <span data-ttu-id="99abe-119">Klasa następnie rejestruje dołączona właściwość i zawiera elementy pomocy technicznej dla tej właściwości dołączone.</span><span class="sxs-lookup"><span data-stu-id="99abe-119">The class then registers an attached property and includes support members for that attached property.</span></span>  
  
 [!code-csharp[WPFAquariumSln#DOMain](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#domain)]
 [!code-vb[WPFAquariumSln#DOMain](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#domain)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="99abe-120">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.DependencyObject" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-120">Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="99abe-121">Czyści lokalnego wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-121">Clears the local value of a property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.ClearValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="99abe-122">Właściwości zależności, aby wyczyścić, identyfikowane przez <see cref="T:System.Windows.DependencyProperty" /> obiektu odwołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-122">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty" /> object reference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="99abe-123">Czyści lokalnego wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-123">Clears the local value of a property.</span>
          </span>
          <span data-ttu-id="99abe-124">Właściwość do wyczyszczenia jest określona przez <see cref="T:System.Windows.DependencyProperty" /> identyfikator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-124">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty" /> identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99abe-125">Wyczyszczenie wartości właściwości przez wywołanie metody <xref:System.Windows.DependencyObject.ClearValue%2A> niekoniecznie daje właściwości zależności domyślną wartość, która została określona w metadanych właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="99abe-125">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="99abe-126">Czyszczenie właściwości tylko wyraźnie czyści niezależnie od wartości lokalnej zostały zastosowane.</span><span class="sxs-lookup"><span data-stu-id="99abe-126">Clearing the property only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="99abe-127">Aby uzyskać więcej informacji, zobacz [pierwszeństwo wartość właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="99abe-127">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99abe-128">Poniższy przykład wykonuje iterację wszystkich właściwości, które mają wartości ustawionej w obiekcie, następnie wywołuje <xref:System.Windows.DependencyObject.ClearValue%2A> można wyczyścić wartości każdej z tych właściwości.</span><span class="sxs-lookup"><span data-stu-id="99abe-128">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="99abe-129">Nastąpiła próba wywołania <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> w zapieczętowanym <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-129">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="P:System.Windows.DependencyObject.IsSealed" />
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyObject.ClearValue key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="99abe-130">Klucz dla właściwości zależności do wyczyszczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-130">The key for the dependency property to be cleared.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="99abe-131">Usuwa lokalną wartość właściwości tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-131">Clears the local value of a read-only property.</span>
          </span>
          <span data-ttu-id="99abe-132">Właściwość do wyczyszczenia jest określona przez <see cref="T:System.Windows.DependencyPropertyKey" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-132">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99abe-133">A <xref:System.Windows.DependencyPropertyKey> identyfikuje właściwość tylko do odczytu zależności dla operacji systemu właściwości.</span><span class="sxs-lookup"><span data-stu-id="99abe-133">A <xref:System.Windows.DependencyPropertyKey> identifies a read-only dependency property for property system operations.</span></span> <span data-ttu-id="99abe-134">Klasy, które definiują właściwości tylko do odczytu zależności nie powinny ujawniać tego klucza publicznego.</span><span class="sxs-lookup"><span data-stu-id="99abe-134">Classes that define read-only dependency properties should not expose this key with public access.</span></span> <span data-ttu-id="99abe-135">Klucz publicznie ujawnionych zapewni ścieżki kodu publicznego, który zanegowane znak tylko do odczytu właściwości, jeśli metod, takich jak <xref:System.Windows.DependencyObject.ClearValue%2A> lub <xref:System.Windows.DependencyObject.SetValue%2A> może zostać wywołana poza klasę lub odwołanie do klucza zestawu.</span><span class="sxs-lookup"><span data-stu-id="99abe-135">A publicly exposed key would provide a public code pathway that negated the read-only character of the property, if methods such as <xref:System.Windows.DependencyObject.ClearValue%2A> or <xref:System.Windows.DependencyObject.SetValue%2A> could be called outside the class or assembly, referencing the key.</span></span>  
  
 <span data-ttu-id="99abe-136">Wyczyszczenie wartości właściwości przez wywołanie metody <xref:System.Windows.DependencyObject.ClearValue%2A> niekoniecznie daje właściwości zależności domyślną wartość, która została określona w metadanych właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="99abe-136">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="99abe-137">Wyczyszczenie wartości tylko w szczególności czyści niezależnie od wartości lokalnej zostały zastosowane.</span><span class="sxs-lookup"><span data-stu-id="99abe-137">Clearing the value only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="99abe-138">Aby uzyskać więcej informacji, zobacz [pierwszeństwo wartość właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="99abe-138">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="99abe-139">Nastąpiła próba wywołania <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> w zapieczętowanym <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-139">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="T:System.Windows.DependencyPropertyKey" />
      </Docs>
    </Member>
    <Member MemberName="CoerceValue">
      <MemberSignature Language="C#" Value="public void CoerceValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CoerceValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CoerceValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CoerceValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.CoerceValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.CoerceValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="99abe-140">Identyfikator właściwości zależności, aby wymusić.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-140">The identifier for the dependency property to coerce.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="99abe-141">Przekształca wynik dane wartości właściwości określonej zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-141">Coerces the value of the specified dependency property.</span>
          </span>
          <span data-ttu-id="99abe-142">Jest to osiągane przez wywoływanie żadnego <see cref="T:System.Windows.CoerceValueCallback" /> funkcja określony w metadanych właściwości dla właściwości zależności, ponieważ znajduje się na wywołujący <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-142">This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback" /> function specified in property metadata for the dependency property as it exists on the calling <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99abe-143">Oprócz jawnie wywoływany za pośrednictwem wywołania <xref:System.Windows.DependencyObject.CoerceValue%2A>, <xref:System.Windows.CoerceValueCallback> zależność właściwości jest również wywoływana wewnętrznie zawsze, gdy wartość właściwości zależności jest ponownie oceniane przez [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] właściwości systemu.</span><span class="sxs-lookup"><span data-stu-id="99abe-143">In addition to being explicitly invoked through calling <xref:System.Windows.DependencyObject.CoerceValue%2A>, the <xref:System.Windows.CoerceValueCallback> for a dependency property is also invoked internally whenever the dependency property value is being re-evaluated by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span>  
  
 <span data-ttu-id="99abe-144">Gdy wywołanie <xref:System.Windows.DependencyObject.CoerceValue%2A> metody, możesz są ostatecznie wywoływania wywołania zwrotnego wartość coerce dla określonej właściwości.</span><span class="sxs-lookup"><span data-stu-id="99abe-144">When you invoke the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, you are ultimately invoking the coerce value callback for the property that you specify.</span></span> <span data-ttu-id="99abe-145">Zwykle wywoła <xref:System.Windows.DependencyObject.CoerceValue%2A> tylko, jeśli wiadomo, czy istnieje wartość coerce wywołania zwrotnego i znane kryteria koercja metodę wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="99abe-145">Typically you will invoke <xref:System.Windows.DependencyObject.CoerceValue%2A> only if you know that a coerce value callback exists, and if you know the callback's criteria for coercion.</span></span>  
  
 <span data-ttu-id="99abe-146">Najbardziej typowym scenariuszem dla wywołania <xref:System.Windows.DependencyObject.CoerceValue%2A> jest w obrębie klasy obsługi lub właściwość zmiany wywołania zwrotne powiązanych właściwości, które wpływają na wartości w sposób zależnych.</span><span class="sxs-lookup"><span data-stu-id="99abe-146">The most common scenario for calling <xref:System.Windows.DependencyObject.CoerceValue%2A> is within class handling or property change callbacks of related properties that influence each other's values in a dependent way.</span></span> <span data-ttu-id="99abe-147">Aby uzyskać więcej informacji, zobacz [wywołania zwrotne właściwości zależności i sprawdzania poprawności](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="99abe-147">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99abe-148">Następujące przykładowe wywołania <xref:System.Windows.DependencyObject.CoerceValue%2A> w <xref:System.Windows.PropertyChangedCallback> implementacji, które jest używane jako <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> dla właściwości zależności inny, na tej samej klasy.</span><span class="sxs-lookup"><span data-stu-id="99abe-148">The following example calls <xref:System.Windows.DependencyObject.CoerceValue%2A> within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class.</span></span> <span data-ttu-id="99abe-149">Jest to wspólnego wzorca wprowadzenia wartości true zależności między właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="99abe-149">This is a common pattern for introducing true value dependencies between dependency properties.</span></span>  
  
 [!code-csharp[DPCallbackOverride#OnPCCurrent](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#onpccurrent)]
 [!code-vb[DPCallbackOverride#OnPCCurrent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#onpccurrent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="99abe-150">Określony <paramref name="dp" /> lub jego wartość były nieprawidłowe lub nie istnieją.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-150">The specified <paramref name="dp" /> or its value were invalid or do not exist.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.CoerceValueCallback" />
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DependencyObjectType">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObjectType DependencyObjectType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObjectType DependencyObjectType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.DependencyObjectType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyObjectType As DependencyObjectType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObjectType ^ DependencyObjectType { System::Windows::DependencyObjectType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyObjectType : System.Windows.DependencyObjectType" Usage="System.Windows.DependencyObject.DependencyObjectType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObjectType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="99abe-151">Pobiera <see cref="T:System.Windows.DependencyObjectType" /> który opakowuje [! Typ include[TLA2#tla_clr](~/includes/tla2sharptla-CLR-MD.MD)] tego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-151">Gets the <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="99abe-152">A <see cref="T:System.Windows.DependencyObjectType" /> który opakowuje [! Typ include[TLA2#tla_clr](~/includes/tla2sharptla-CLR-MD.MD)] tego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-152">A <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99abe-153">Ta właściwość jest przydatna, jeśli obiekt jest zwracany z metody ma typ wartości zwracanej <xref:System.Windows.DependencyObject> i chcesz przeprowadzić właściwości określonych operacji w systemie go w zależności od jego typu.</span><span class="sxs-lookup"><span data-stu-id="99abe-153">This property is useful if an object that is returned from a method has a return value type of <xref:System.Windows.DependencyObject> and you want to perform property system specific operations on it depending on its type.</span></span> <span data-ttu-id="99abe-154">Na przykład jest bardziej wydajne, aby wywołać <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> przy użyciu <xref:System.Windows.DependencyObjectType> zamiast [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] typu.</span><span class="sxs-lookup"><span data-stu-id="99abe-154">For example it is more efficient to call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> using the <xref:System.Windows.DependencyObjectType> rather than the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type.</span></span> <span data-ttu-id="99abe-155"><xref:System.Windows.DependencyObjectType> Umożliwia szybsze wyszukiwanie.</span><span class="sxs-lookup"><span data-stu-id="99abe-155"><xref:System.Windows.DependencyObjectType> facilitates faster lookup.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99abe-156">W poniższym przykładzie pseudocode `MySubClass` oszacowano, że dodatkowe klasy pochodne mogą zmienić wartość domyślną `MyCustom` właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="99abe-156">In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property.</span></span> <span data-ttu-id="99abe-157">Klasa implementuje konstruktora domyślnego, które można określić rzeczywistego klasy pochodnej dzięki wykorzystaniu polimorfizm <xref:System.Windows.DependencyObjectType> wartość zawsze, gdy ten konstruktor jest używany jako instantiator klasy pochodnej.</span><span class="sxs-lookup"><span data-stu-id="99abe-157">The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.</span></span>  
  
 `public DOClass() : base()`  
  
 `{`  
  
 `__customPropertyCache = (CustomDP)`  
  
 `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
        <altmember cref="T:System.Windows.DependencyObjectType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override sealed bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dependencyObject.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="99abe-158">
            <see cref="T:System.Windows.DependencyObject" /> Do porównania z bieżącym wystąpieniem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-158">The <see cref="T:System.Windows.DependencyObject" /> to compare to the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="99abe-159">Określa, czy podany <see cref="T:System.Windows.DependencyObject" /> jest odpowiednikiem bieżącego <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-159">Determines whether a provided <see cref="T:System.Windows.DependencyObject" /> is equivalent to the current <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="99abe-160">
            <see langword="true" /> Jeśli dwa wystąpienia są takie same; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-160">
              <see langword="true" /> if the two instances are the same; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99abe-161">Ta implementacja jest tylko równości odwołań, a nie próbuje ocenić równości wartości zawartych w niej właściwości.</span><span class="sxs-lookup"><span data-stu-id="99abe-161">This implementation is reference equality only, and does not attempt to evaluate value equality of the contained properties.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="99abe-162">
            <para>
              <see cref="T:System.Windows.DependencyObject" /> zastąpienia, a następnie uszczelnienia dwóch basic <see cref="T:System.Object" /> metody: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> i <see cref="M:System.Windows.DependencyObject.GetHashCode" />. Wywołanie zastąpienia <see cref="T:System.Object" /> implementacji, co powoduje zachowanie równość obiektu. Te zastąpienia zamierzonego ma na celu zapobieganie próby Definiowanie równości wartości dla klas pochodnych <see cref="T:System.Windows.DependencyObject" />. Wartość equalities dla <see cref="T:System.Windows.DependencyObject" /> nigdy nie będą dokładne z powodu możliwości zmiany wartości właściwości zapewniające z <see cref="T:System.Windows.DependencyObject" /> i jego właściwości zależności. Dotyczy to również podstawowe [! INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-MD.MD)] funkcje, takie jak powiązania danych i [! INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-MD.MD)] właściwości systemu.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-162">
              <para>
                <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two basic <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />. The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior. The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />. Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties. This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override sealed int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyObject.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="99abe-163">Pobiera wartość skrótu dla tego <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-163">Gets a hash code for this <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="99abe-164">Całkowita 32-bitowa wartość skrótu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-164">A signed 32-bit integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="99abe-165">
            <para>
              <see cref="T:System.Windows.DependencyObject" /> zastąpienia, a następnie uszczelnienia dwa <see cref="T:System.Object" /> metody: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> i <see cref="M:System.Windows.DependencyObject.GetHashCode" />. Wywołanie zastąpienia <see cref="T:System.Object" /> implementacji, co powoduje zachowanie równość obiektu. Te zastąpienia zamierzonego ma na celu zapobieganie próby Definiowanie równości wartości dla klas pochodnych <see cref="T:System.Windows.DependencyObject" />. Wartość equalities dla <see cref="T:System.Windows.DependencyObject" /> nigdy nie będą dokładne z powodu możliwości zmiany wartości właściwości zapewniające z <see cref="T:System.Windows.DependencyObject" /> i jego właściwości zależności. Dotyczy to również podstawowe [! INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-MD.MD)] funkcje, takie jak powiązania danych i [! INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-MD.MD)] właściwości systemu.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-165">
              <para>
                <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />. The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior. The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />. Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties. This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetLocalValueEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.LocalValueEnumerator GetLocalValueEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocalValueEnumerator () As LocalValueEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::LocalValueEnumerator GetLocalValueEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetLocalValueEnumerator : unit -&gt; System.Windows.LocalValueEnumerator" Usage="dependencyObject.GetLocalValueEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LocalValueEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="99abe-166">Tworzy specjalne modułu wyliczającego określania właściwości zależności, które ustawiono lokalnie wartości na tym <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-166">Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="99abe-167">Moduł wyliczający specjalne wartości lokalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-167">A specialized local value enumerator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99abe-168">A *wartości lokalnej* jest dowolną wartością właściwości zależności, która została ustawiona przez <xref:System.Windows.DependencyObject.SetValue%2A>, w przeciwieństwie do innych aspektów dla właściwości.</span><span class="sxs-lookup"><span data-stu-id="99abe-168">A *local value* is any dependency property value that was set by <xref:System.Windows.DependencyObject.SetValue%2A>, as opposed to other aspects of the property system.</span></span>  
  
 <span data-ttu-id="99abe-169"><xref:System.Windows.LocalValueEnumerator> Można uzyskać przez wywołanie <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> może służyć do wyliczenia właściwości, które mają lokalnie ustaw wartość na <xref:System.Windows.DependencyObject> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="99abe-169">The <xref:System.Windows.LocalValueEnumerator> obtained by calling <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> can be used to enumerate properties that have a locally set value on a <xref:System.Windows.DependencyObject> instance.</span></span> <span data-ttu-id="99abe-170">Każdej z tych właściwości jest reprezentowany przez moduł wyliczający <xref:System.Windows.LocalValueEntry> obiektu, który ma właściwości, które odwołują się do konkretnych <xref:System.Windows.DependencyProperty> i jej wartości.</span><span class="sxs-lookup"><span data-stu-id="99abe-170">Each such property is represented in the enumerator by a <xref:System.Windows.LocalValueEntry> object, which has properties that reference the specific <xref:System.Windows.DependencyProperty> and its values.</span></span> <span data-ttu-id="99abe-171">Ta technika wyliczania za pośrednictwem lokalnie ustawiony wartości może służyć do optymalizacji lub innych obsługi wartości lokalnej, takich jak do określenia wartości właściwości z <xref:System.Windows.DependencyObject> zmieniłby, jeśli zostały one wyczyszczone.</span><span class="sxs-lookup"><span data-stu-id="99abe-171">This technique of enumerating over the locally set values can be used for optimization or for other handling of local values, such as to determine which property values of a <xref:System.Windows.DependencyObject> would change if they were cleared.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="99abe-172">Zwrócona <xref:System.Windows.LocalValueEnumerator> może zawierać <xref:System.Windows.LocalValueEntry> rekordów dla właściwości zależności, które są tylko do odczytu lub właściwości zależności, których wartości są obliczane przez system właściwości.</span><span class="sxs-lookup"><span data-stu-id="99abe-172">The returned <xref:System.Windows.LocalValueEnumerator> might contain <xref:System.Windows.LocalValueEntry> records for dependency properties that are read-only, or dependency properties where values are calculated by the property system.</span></span> <span data-ttu-id="99abe-173">Na przykład element visual framework, który ma ustaloną szerokość za pośrednictwem układu będzie zgłaszać wartości lokalnej dla <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span><span class="sxs-lookup"><span data-stu-id="99abe-173">For example, a visual framework element that has an established width through layout will report a local value for <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span></span> <span data-ttu-id="99abe-174">Aby zresetować je w przypadku uzyskiwania wartości lokalnej, sprawdź <xref:System.Windows.DependencyProperty.ReadOnly%2A> wartości na podstawie identyfikatora właściwości każdego <xref:System.Windows.LocalValueEntry> do sprawdzenia, czy <xref:System.Windows.DependencyProperty> zagrożona nie jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="99abe-174">If you are getting local values in order to reset them, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value on the property identifier of each <xref:System.Windows.LocalValueEntry> to verify that the <xref:System.Windows.DependencyProperty> in question is not read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99abe-175">Poniższy przykład wykonuje iterację wszystkich właściwości, które mają wartości ustawionej w obiekcie, następnie wywołuje <xref:System.Windows.DependencyObject.ClearValue%2A> można wyczyścić wartości każdej z tych właściwości.</span><span class="sxs-lookup"><span data-stu-id="99abe-175">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.LocalValueEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.GetValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="99abe-176">
            <see cref="T:System.Windows.DependencyProperty" /> Identyfikator można pobrać wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-176">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="99abe-177">Zwraca bieżącą wartość skuteczne właściwości zależności dla tego wystąpienia obiektu <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-177">Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="99abe-178">Zwraca bieżącą wartość skuteczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-178">Returns the current effective value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99abe-179">*Wartość efektywna* jest wartością zwracaną przez system właściwości do każdego obiektu wywołującego, który żąda wartość właściwości.</span><span class="sxs-lookup"><span data-stu-id="99abe-179">The *effective value* is the value of the property that is returned by the property system to any caller that is requesting the value.</span></span> <span data-ttu-id="99abe-180">Wartość efektywna jest wynikiem systemu właściwość o ocenie wszystkich możliwych danych wejściowych uczestniczących w pierwszeństwo wartość właściwości systemu.</span><span class="sxs-lookup"><span data-stu-id="99abe-180">The effective value is the result of the property system having evaluated all the possible inputs that participate in the property system value precedence.</span></span> <span data-ttu-id="99abe-181">Obejmuje to koercja i animacji.</span><span class="sxs-lookup"><span data-stu-id="99abe-181">This includes coercion and animation.</span></span> <span data-ttu-id="99abe-182">Aby uzyskać więcej informacji, zobacz [pierwszeństwo wartość właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="99abe-182">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="99abe-183">Ta metoda zwróci dane nigdy nie <xref:System.Windows.DependencyProperty.UnsetValue>.</span><span class="sxs-lookup"><span data-stu-id="99abe-183">This method will never return <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span> <span data-ttu-id="99abe-184"><xref:System.Windows.DependencyProperty.UnsetValue> Jest wartością wartownik systemu właściwości, który jest używany w różnych formach wewnętrznie i czasami również dostępne za pośrednictwem wywołania zwrotne wymuszenia.</span><span class="sxs-lookup"><span data-stu-id="99abe-184">The <xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value for the property system that is used in various capacities internally and occasionally also exposed through coercion callbacks.</span></span>  
  
 <span data-ttu-id="99abe-185">Jeśli nie masz pewności, co powinna być typu właściwości, można zbadać identyfikatora właściwości zależności żądanych, aby ustalić, czy jest określony więcej <xref:System.Windows.DependencyProperty.PropertyType%2A> której można przekonwertować wartości zwracanej.</span><span class="sxs-lookup"><span data-stu-id="99abe-185">If you are not sure what the property's type should be, you can query the identifier of the requested dependency property to determine whether there is a more specific <xref:System.Windows.DependencyProperty.PropertyType%2A> that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="99abe-186">Określony <paramref name="dp" /> lub jego wartość jest nieprawidłowy lub określony <paramref name="dp" /> nie istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-186">The specified <paramref name="dp" /> or its value was invalid, or the specified <paramref name="dp" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateProperty">
      <MemberSignature Language="C#" Value="public void InvalidateProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateProperty (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.InvalidateProperty : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.InvalidateProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="99abe-187">
            <see cref="T:System.Windows.DependencyProperty" /> Identyfikator właściwości unieważnić.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-187">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to invalidate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="99abe-188">Ponownie oblicza wartość efektywna dla właściwości zależności określony</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-188">Re-evaluates the effective value for the specified dependency property</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99abe-189">Podczas wywoływania <xref:System.Windows.DependencyObject.InvalidateProperty%2A>, wszystkie skojarzone i stosowane <xref:System.Windows.CoerceValueCallback> lub <xref:System.Windows.PropertyChangedCallback> funkcje zarejestrowany dla tej właściwości zależności mogą wywołać.</span><span class="sxs-lookup"><span data-stu-id="99abe-189">When you call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>, any associated and applicable <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions registered for that dependency property might be invoked.</span></span>  
  
 <span data-ttu-id="99abe-190">Wywoływanie <xref:System.Windows.DependencyObject.InvalidateProperty%2A> dla właściwości, która ma lokalnego wartością ustawioną nie odniesie żadnego skutku, ponieważ wartość lokalnego mają pierwszeństwo przed innych danych wejściowych do systemu z właściwości, z wyjątkiem animacji.</span><span class="sxs-lookup"><span data-stu-id="99abe-190">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a property that has its local value set will have no effect, because the local value takes precedence over other property system inputs, except for animations.</span></span> <span data-ttu-id="99abe-191">Jednak można wywołać <xref:System.Windows.DependencyObject.ClearValue%2A>, następnie wywołaj <xref:System.Windows.DependencyObject.InvalidateProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="99abe-191">However, you could call <xref:System.Windows.DependencyObject.ClearValue%2A>, then call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>.</span></span> <span data-ttu-id="99abe-192">Aby uzyskać więcej informacji, zobacz [pierwszeństwo wartość właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="99abe-192">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="99abe-193">Wywoływanie <xref:System.Windows.DependencyObject.InvalidateProperty%2A> nie mieć zastosowania w różnych scenariuszach właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="99abe-193">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is not necessarily applicable for many dependency property scenarios.</span></span> <span data-ttu-id="99abe-194">Jeśli właściwość zależności staje się unieważnionych z powodu zmiany wartości w jednym ze składników, system właściwości unieważnia i ponownie automatycznie sprawdza właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="99abe-194">If a dependency property becomes invalidated because of value changes in any of the constituents, the property system invalidates and re-evaluates the dependency property automatically.</span></span> <span data-ttu-id="99abe-195">Jednak nadal istnieją odpowiednie sytuacje, gdy <xref:System.Windows.DependencyObject.InvalidateProperty%2A> przydaje się.</span><span class="sxs-lookup"><span data-stu-id="99abe-195">However, there are still some appropriate scenarios where <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is useful.</span></span> <span data-ttu-id="99abe-196">W szczególności można użyć <xref:System.Windows.DependencyObject.InvalidateProperty%2A> wewnątrz wartości coerce lub właściwości zmienić wywołania zwrotnego dla właściwości zależności inny.</span><span class="sxs-lookup"><span data-stu-id="99abe-196">In particular, you can use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> inside the coerce value or property changed callback for a different dependency property.</span></span> <span data-ttu-id="99abe-197">Można również użyć <xref:System.Windows.DependencyObject.InvalidateProperty%2A> Aby wymusić ponowną ocenę powiązanie względem źródła danych, który nie jest w stanie do zaimplementowania zalecanej <xref:System.ComponentModel.INotifyPropertyChanged> mechanizm powiadomień (możliwe, że jeśli korzystanie z klas danych, która nie może dziedziczyć po lub gdy dane są statycznego element członkowski).</span><span class="sxs-lookup"><span data-stu-id="99abe-197">You can also use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> to force re-evaluation of a binding against a data source that is not able to implement the recommended <xref:System.ComponentModel.INotifyPropertyChanged> notification mechanism (perhaps if consuming data classes that cannot be derived from, or where the data is a static member).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99abe-198">Następujące przykładowe wywołania <xref:System.Windows.DependencyObject.InvalidateProperty%2A> we właściwości niestandardowej, gdy właściwości, które są zaangażowane w obliczeniach nieważne właściwości zmienić.</span><span class="sxs-lookup"><span data-stu-id="99abe-198">The following example calls <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a custom property, whenever properties that are involved in the invalidated property's calculations change.</span></span> <span data-ttu-id="99abe-199">Jest alternatywna metoda do wywołania <xref:System.Windows.DependencyObject.CoerceValue%2A> metody, ponieważ unieważnia właściwość również wywoła żadnych zarejestrowany <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.</span><span class="sxs-lookup"><span data-stu-id="99abe-199">This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/SDKSampleLibrary/class1.cs#invalidateproperty)]
 [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/sdksamplelibrary/class1.vb#invalidateproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.DependencyProperty.UnsetValue" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.DependencyObject.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="99abe-200">Pobiera wartość wskazującą, czy to wystąpienie jest obecnie zapieczętowany (tylko do odczytu).</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-200">Gets a value that indicates whether this instance is currently sealed (read-only).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="99abe-201">
            <see langword="true" /> Jeśli to wystąpienie jest zapieczętowany; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-201">
              <see langword="true" /> if this instance is sealed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99abe-202">Ta wartość jest ustawiana wewnętrznie.</span><span class="sxs-lookup"><span data-stu-id="99abe-202">This value is set internally.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkElementFactory" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="dependencyObject.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="99abe-203">Dane zdarzenia, który będzie zawierać identyfikator właściwości zależności zainteresowań, metadane właściwości dla typu i starej i nowej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-203">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="99abe-204">Wywoływane, gdy wartość efektywna dowolnej właściwości zależności na tym <see cref="T:System.Windows.DependencyObject" /> została zaktualizowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-204">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject" /> has been updated.</span>
          </span>
          <span data-ttu-id="99abe-205">Właściwości określonych zależności, które zmienić jest zgłaszana w danych zdarzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-205">The specific dependency property that changed is reported in the event data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99abe-206">Ta metoda nie ma zazwyczaj wykrycia zmiany indywidualne właściwości lub wykonać invalidations właściwości na poszczególnych przypadków.</span><span class="sxs-lookup"><span data-stu-id="99abe-206">This method is not intended to generally detect individual property changes or perform invalidations of properties on a per-case basis.</span></span> <span data-ttu-id="99abe-207"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> Zamiast tego jest przeznaczony dla modyfikacje wzorca unieważniania ogólne, jeśli znane jest niektórych informacji o klasyfikacjach szeroki właściwości.</span><span class="sxs-lookup"><span data-stu-id="99abe-207"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is instead intended for modifications of the general invalidation pattern, if certain information is known about wide classifications of properties.</span></span> <span data-ttu-id="99abe-208">Na przykład zmiany w <xref:System.Windows.Freezable> może być zmiany w typach wartości <xref:System.Windows.Freezable>, lub może nie zawierać właściwości, której zmiany są w innych <xref:System.Windows.Freezable> odwołania.</span><span class="sxs-lookup"><span data-stu-id="99abe-208">For example, changes in a <xref:System.Windows.Freezable> might be changes in the value types of the <xref:System.Windows.Freezable>, or might be subproperties, where the changes are within other <xref:System.Windows.Freezable> references.</span></span> <span data-ttu-id="99abe-209"><xref:System.Windows.Freezable> Zastąpienia implementacja <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> używa wewnętrznego informacji do ustalenia, czy właściwości mają właściwości i udostępnia logikę odpowiedniej klasy podstawowej dla obu przypadkach.</span><span class="sxs-lookup"><span data-stu-id="99abe-209">The <xref:System.Windows.Freezable> override implementation of <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> uses internal information to determine whether the properties are subproperties, and provides appropriate base class logic for either case.</span></span>  
  
 <span data-ttu-id="99abe-210"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> potencjalnie jest wywołana wiele razy w okresie istnienia obiektu.</span><span class="sxs-lookup"><span data-stu-id="99abe-210"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="99abe-211">W związku z tym można osiągnąć lepszą wydajność systemu ogólne właściwości, jeśli Zastępowanie metadanych określonych właściwości, a następnie dołącz <xref:System.Windows.CoerceValueCallback> lub <xref:System.Windows.PropertyChangedCallback> funkcje dla poszczególnych właściwości.</span><span class="sxs-lookup"><span data-stu-id="99abe-211">Therefore, you can achieve better performance for the overall property system if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="99abe-212">Jednak czy użyć tej metody, jeśli <xref:System.Windows.DependencyObject> obejmuje znaczących właściwości zależności powiązanych wartości, lub jeśli zawiera logikę, takich jak zachowanie renderowania, który musi zostać uruchomiony ponownie dla kilku powiązanych przypadków invalidations właściwości.</span><span class="sxs-lookup"><span data-stu-id="99abe-212">However, you would use this method if a <xref:System.Windows.DependencyObject> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="99abe-213">
            <para>Zawsze wywoływać implementację podstawową. Błąd w tym celu znacznie spowoduje wyłączenie całego [! INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-MD.MD)] właściwości systemu, powoduje należy podać niepoprawne wartości.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-213">
              <para>Always call the base implementation. Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, causing incorrect values to be reported.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.FrameworkElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadLocalValue">
      <MemberSignature Language="C#" Value="public object ReadLocalValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadLocalValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLocalValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ReadLocalValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ReadLocalValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.ReadLocalValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="99abe-214">
            <see cref="T:System.Windows.DependencyProperty" /> Identyfikator można pobrać wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-214">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="99abe-215">Zwraca wartość lokalnego właściwości zależności, jeśli istnieje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-215">Returns the local value of a dependency property, if it exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="99abe-216">Zwraca wartość lokalnego lub zwraca wartość wartownik <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> przypadku nie wartości lokalnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-216">Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99abe-217">Należy używać <xref:System.Windows.DependencyObject.GetValue%2A> najbardziej typowych operacji "get" dla właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="99abe-217">You should use <xref:System.Windows.DependencyObject.GetValue%2A> for most typical "get" operations for a dependency property.</span></span> <span data-ttu-id="99abe-218"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> Zwraca wartość efektywna dla różnych okolicznościach w której wartość nie lokalnie ustawiono.</span><span class="sxs-lookup"><span data-stu-id="99abe-218"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> does not return the effective value for a variety of circumstances where the value was not locally set.</span></span>  
  
 <span data-ttu-id="99abe-219">Wartości, które są ustawiane przez style, kompozycje i szablony, wartością domyślną z metadanych lub dziedziczenie wartość właściwości nie są uważane można wartości lokalnej.</span><span class="sxs-lookup"><span data-stu-id="99abe-219">Values that are set by styles, themes, templates, the default value from metadata, or property value inheritance are not considered to be local values.</span></span> <span data-ttu-id="99abe-220">Jednak powiązania i inne wyrażenia są uważane wartości lokalnego po zostały ocenione.</span><span class="sxs-lookup"><span data-stu-id="99abe-220">However, bindings and other expressions are considered to be local values, after they have been evaluated.</span></span>  
  
 <span data-ttu-id="99abe-221">Jeśli ustawiono nie wartości lokalnej, ta metoda zwraca <xref:System.Windows.DependencyProperty.UnsetValue>.</span><span class="sxs-lookup"><span data-stu-id="99abe-221">When no local value is set, this method returns <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span>  
  
 <span data-ttu-id="99abe-222">Jeśli zwrócona wartość jest inny niż <xref:System.Windows.DependencyProperty.UnsetValue>, możesz zbadać metadane właściwości żądanego zależności, aby ustalić, czy jest więcej określonego typu, który można przekonwertować na wartość zwracaną.</span><span class="sxs-lookup"><span data-stu-id="99abe-222">If the returned value is other than <xref:System.Windows.DependencyProperty.UnsetValue>, you can query the metadata of the requested dependency property to determine whether there is a more specific type that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentValue">
      <MemberSignature Language="C#" Value="public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCurrentValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCurrentValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCurrentValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetCurrentValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetCurrentValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="99abe-223">Identyfikator właściwości zależności do ustawienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-223">The identifier of the dependency property to set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="99abe-224">Nowa wartość lokalnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-224">The new local value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="99abe-225">Ustawia wartości właściwości zależności nie zmieniając wartość źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-225">Sets the value of a dependency property without changing its value source.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99abe-226">Ta metoda jest używana przez składnik programowo ustawia wartości jednego z jego własnej właściwości bez konieczności wyłączania aplikacji użyj zadeklarowane właściwości.</span><span class="sxs-lookup"><span data-stu-id="99abe-226">This method is used by a component that programmatically sets the value of one of its own properties without disabling an application's declared use of the property.</span></span> <span data-ttu-id="99abe-227"><xref:System.Windows.DependencyObject.SetCurrentValue%2A> Metoda zmienia wartość powiązania danych właściwości, ale istniejące wyzwalacze i style będą nadal działać.</span><span class="sxs-lookup"><span data-stu-id="99abe-227">The <xref:System.Windows.DependencyObject.SetCurrentValue%2A> method changes the effective value of the property, but existing triggers, data bindings, and styles will continue to work.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="99abe-228">Podjęto próbę modyfikacji właściwości zależności tylko do odczytu lub właściwość w zapieczętowanym <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-228">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="99abe-229">
            <paramref name="value" /> nie ma poprawnego typu jest zarejestrowany dla <paramref name="dp" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-229">
              <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="99abe-230">Ustawia wartość lokalnego właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-230">Sets the local value of a dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="99abe-231">Identyfikator właściwości zależności do ustawienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-231">The identifier of the dependency property to set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="99abe-232">Nowa wartość lokalnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-232">The new local value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="99abe-233">Ustawia wartość lokalnego właściwości zależności, określony przez jego identyfikatora właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-233">Sets the local value of a dependency property, specified by its dependency property identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99abe-234">Jeśli podany typ niezgodny z typem, który jest zadeklarowana dla właściwości zależności, ponieważ pierwotnie został zarejestrowany, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="99abe-234">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="99abe-235">`value` Zawsze należy podawać parametru jako odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="99abe-235">The `value` parameter should always be provided as the appropriate type.</span></span>  
  
 <span data-ttu-id="99abe-236">Potencjalnie wpływało warunków wyjątków <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> wywołania zwrotnego, która istnieje na podstawie identyfikatora właściwości zależności ustawiania właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="99abe-236">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span> <span data-ttu-id="99abe-237">W przeciwnym razie wartość podana może awarii ogólnych warunków Sprawdzanie typu (np. przekazywanie ciąg, gdy typ macierzysty jest o podwójnej precyzji).</span><span class="sxs-lookup"><span data-stu-id="99abe-237">Otherwise, the value provided might be failing general type-checking conditions (for example, passing a string when the native type is Double).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="99abe-238">Podjęto próbę modyfikacji właściwości zależności tylko do odczytu lub właściwość w zapieczętowanym <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-238">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="99abe-239">
            <paramref name="value" /> nie ma poprawnego typu jest zarejestrowany dla <paramref name="dp" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-239">
              <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyPropertyKey key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyPropertyKey key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (key As DependencyPropertyKey, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyPropertyKey ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyPropertyKey * obj -&gt; unit" Usage="dependencyObject.SetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="99abe-240">
            <see cref="T:System.Windows.DependencyPropertyKey" /> Identyfikator właściwości do ustawienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-240">The <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the property to set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="99abe-241">Nowa wartość lokalnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-241">The new local value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="99abe-242">Ustawia wartość lokalnego właściwości zależności tylko do odczytu, określona przez <see cref="T:System.Windows.DependencyPropertyKey" /> identyfikatora właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-242">Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99abe-243">Ta sygnatura jest zazwyczaj używana w przypadku ustawienia wartości dla właściwości tylko do odczytu zależności, które są zdefiniowane przez użytkownika klas niestandardowych.</span><span class="sxs-lookup"><span data-stu-id="99abe-243">This signature is generally used when you set values for read-only dependency properties that are defined by your custom classes.</span></span> <span data-ttu-id="99abe-244">Ogólnie rzecz biorąc <xref:System.Windows.DependencyObject.SetValue%2A> jest wywoływane tylko z typ zarejestrowanych tej właściwości zależności, która implementuje wewnętrzny logiki, która zawiera wartości określone dla właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="99abe-244">Generally, <xref:System.Windows.DependencyObject.SetValue%2A> is called only from the type that registered that dependency property, which implements the internal logic that provides the determined value for the dependency property.</span></span> <span data-ttu-id="99abe-245">Aby uzyskać więcej informacji, zobacz [tylko do odczytu właściwości zależności](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="99abe-245">For more information, see [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="99abe-246">Jeśli podany typ niezgodny z typem, który jest zadeklarowana dla właściwości zależności, ponieważ pierwotnie został zarejestrowany, jest zwracany wyjątek.</span><span class="sxs-lookup"><span data-stu-id="99abe-246">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="99abe-247">`value` Zawsze należy podawać parametru jako odpowiedniego typu.</span><span class="sxs-lookup"><span data-stu-id="99abe-247">The `value` parameter should always be provided as the appropriate type.</span></span> <span data-ttu-id="99abe-248">Potencjalnie wpływało warunków wyjątków <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> wywołania zwrotnego, która istnieje na podstawie identyfikatora właściwości zależności ustawiania właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="99abe-248">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99abe-249">W poniższym przykładzie zdefiniowano właściwość tylko do odczytu zależności, wraz z `public static readonly` <xref:System.Windows.DependencyProperty> zapewnia niezbędne uwidocznienia tylko do odczytu dla konsumentów właściwości i metody dostępu get dla [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] otoki.</span><span class="sxs-lookup"><span data-stu-id="99abe-249">The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeProperty">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializeProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ShouldSerializeProperty (dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ShouldSerializeProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool&#xA;override this.ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool" Usage="dependencyObject.ShouldSerializeProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="99abe-250">Identyfikator właściwości zależności, które powinny być serializowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-250">The identifier for the dependency property that should be serialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="99abe-251">Zwraca wartość wskazującą, czy procesy serializacji powinny serializacji wartości dla właściwości zależności podana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-251">Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="99abe-252">
            <see langword="true" /> Jeśli właściwość zależności, która jest dostarczana powinny być serializowane wartości; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-252">
              <see langword="true" /> if the dependency property that is supplied should be value-serialized; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99abe-253">Domyślna implementacja zwraca `true` we wszystkich przypadkach, w których właściwość zależności miał wartość lokalnego w <xref:System.Windows.DependencyObject>.</span><span class="sxs-lookup"><span data-stu-id="99abe-253">The default implementation returns `true` for all cases in which a dependency property had a local value established on the <xref:System.Windows.DependencyObject>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="99abe-254">
            <para>Zastąpienia dla tej metody może obsługiwać właściwości zależności określone inaczej.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="99abe-254">
              <para>Overrides for this method might handle specific dependency properties differently.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>