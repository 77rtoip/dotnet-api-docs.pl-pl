<Type Name="DependencyObject" FullName="System.Windows.DependencyObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9909bfd452bcd81963621d54c49b964f2e5e3ce1" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69434688" /></Metadata><TypeSignature Language="C#" Value="public class DependencyObject : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DependencyObject extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyObject&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyObject : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type DependencyObject = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="78a61-101">Reprezentuje obiekt, który uczestniczy w systemie właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-101">Represents an object that participates in the dependency property system.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78a61-102">Klasa umożliwia korzystanie [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] z usług systemu właściwości na wielu klasach pochodnych. <xref:System.Windows.DependencyObject></span><span class="sxs-lookup"><span data-stu-id="78a61-102">The <xref:System.Windows.DependencyObject> class enables [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] property system services on its many derived classes.</span></span>  
  
 <span data-ttu-id="78a61-103">Podstawową funkcją systemu właściwości jest obliczanie wartości właściwości i zapewnienie powiadomienia systemu o wartościach, które uległy zmianie.</span><span class="sxs-lookup"><span data-stu-id="78a61-103">The property system's primary function is to compute the values of properties, and to provide system notification about values that have changed.</span></span> <span data-ttu-id="78a61-104">Inna Klasa klucza, która uczestniczy w systemie właściwości, <xref:System.Windows.DependencyProperty>to.</span><span class="sxs-lookup"><span data-stu-id="78a61-104">Another key class that participates in the property system is <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="78a61-105"><xref:System.Windows.DependencyProperty>Włącza rejestrację właściwości zależności w systemie właściwości i zawiera identyfikację i informacje o każdej właściwości zależności, natomiast <xref:System.Windows.DependencyObject> jako klasa bazowa umożliwia obiektom Używanie właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-105"><xref:System.Windows.DependencyProperty> enables the registration of dependency properties into the property system, and provides identification and information about each dependency property, whereas <xref:System.Windows.DependencyObject> as a base class enables objects to use the dependency properties.</span></span>  
  
 <span data-ttu-id="78a61-106"><xref:System.Windows.DependencyObject>dostępne są następujące usługi i cechy:</span><span class="sxs-lookup"><span data-stu-id="78a61-106"><xref:System.Windows.DependencyObject> services and characteristics include the following:</span></span>  
  
-   <span data-ttu-id="78a61-107">Obsługa hostingu właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-107">Dependency property hosting support.</span></span> <span data-ttu-id="78a61-108">Należy zarejestrować właściwość zależności przez wywołanie <xref:System.Windows.DependencyProperty.Register%2A> metody i przechowywanie wartości zwracanej metody jako publicznego pola statycznego w klasie.</span><span class="sxs-lookup"><span data-stu-id="78a61-108">You register a dependency property by calling the <xref:System.Windows.DependencyProperty.Register%2A> method, and storing the method's return value as a public static field in your class.</span></span>  
  
-   <span data-ttu-id="78a61-109">Obsługa hostingu właściwości dołączonej.</span><span class="sxs-lookup"><span data-stu-id="78a61-109">Attached property hosting support.</span></span> <span data-ttu-id="78a61-110">Zarejestrowano dołączoną Właściwość przez wywołanie <xref:System.Windows.DependencyProperty.RegisterAttached%2A> metody i przechowywanie wartości zwracanej metody jako publicznego statycznego pola tylko do odczytu w klasie.</span><span class="sxs-lookup"><span data-stu-id="78a61-110">You register an attached property by calling the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, and storing the method's return value as a public static read-only field in your class.</span></span> <span data-ttu-id="78a61-111">(Istnieją także dodatkowe wymagania dotyczące elementu członkowskiego; należy zauważyć, [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] że reprezentuje to konkretną implementację załączonych właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-111">(There are also additional member requirements; note that this represents a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] specific implementation for attached properties.</span></span> <span data-ttu-id="78a61-112">Aby uzyskać szczegółowe informacje, zobacz [Omówienie załączonych właściwości](~/docs/framework/wpf/advanced/attached-properties-overview.md).) Dołączoną Właściwość można następnie ustawić dla każdej klasy, która pochodzi od <xref:System.Windows.DependencyObject>.</span><span class="sxs-lookup"><span data-stu-id="78a61-112">For details, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).) Your attached property can then be set on any class that derives from <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="78a61-113">Pobieranie, ustawianie i czyszczenie metod narzędzi dla wartości właściwości zależności, które istnieją w <xref:System.Windows.DependencyObject>.</span><span class="sxs-lookup"><span data-stu-id="78a61-113">Get, set, and clear utility methods for values of any dependency properties that exist on the <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="78a61-114">Metadane, przekształcenie obsługi wartości, powiadomienie o zmianie właściwości i przesłonięcie wywołania zwrotnego dla właściwości zależności lub załączonych właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-114">Metadata, coerce value support, property changed notification, and override callbacks for  dependency properties or attached properties.</span></span> <span data-ttu-id="78a61-115"><xref:System.Windows.DependencyObject> Ponadto Klasa umożliwia obsługę metadanych właściwości dla właściciela dla właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-115">Also, the <xref:System.Windows.DependencyObject> class facilitates the per-owner property metadata for a dependency property.</span></span>  
  
-   <span data-ttu-id="78a61-116">Wspólna Klasa bazowa dla klas pochodnych <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, lub <xref:System.Windows.Media.Visual>.</span><span class="sxs-lookup"><span data-stu-id="78a61-116">A common base class for classes derived from <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, or <xref:System.Windows.Media.Visual>.</span></span> <span data-ttu-id="78a61-117">(<xref:System.Windows.UIElement>, inna Klasa elementu podstawowego ma hierarchię klas, która zawiera <xref:System.Windows.Media.Visual>).</span><span class="sxs-lookup"><span data-stu-id="78a61-117">(<xref:System.Windows.UIElement>, another base element class, has a class hierarchy that includes <xref:System.Windows.Media.Visual>.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78a61-118">Poniższy przykład pochodzi od <xref:System.Windows.DependencyObject> do utworzenia nowej klasy abstrakcyjnej.</span><span class="sxs-lookup"><span data-stu-id="78a61-118">The following example derives from <xref:System.Windows.DependencyObject> to create a new abstract class.</span></span> <span data-ttu-id="78a61-119">Klasa następnie rejestruje załączoną Właściwość i zawiera członków pomocy technicznej dla tej dołączonej właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-119">The class then registers an attached property and includes support members for that attached property.</span></span>  
  
 [!code-csharp[WPFAquariumSln#DOMain](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#domain)]
 [!code-vb[WPFAquariumSln#DOMain](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#domain)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="78a61-120">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.DependencyObject" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="78a61-120">Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="78a61-121">Czyści wartość lokalną właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-121">Clears the local value of a property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.ClearValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="78a61-122">Właściwość zależności, która ma zostać wyczyszczona, <see cref="T:System.Windows.DependencyProperty" /> identyfikowana przez odwołanie do obiektu.</span><span class="sxs-lookup"><span data-stu-id="78a61-122">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty" /> object reference.</span></span></param>
        <summary><span data-ttu-id="78a61-123">Czyści wartość lokalną właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-123">Clears the local value of a property.</span></span> <span data-ttu-id="78a61-124">Właściwość, która ma zostać wyczyszczona, <see cref="T:System.Windows.DependencyProperty" /> jest określana przez identyfikator.</span><span class="sxs-lookup"><span data-stu-id="78a61-124">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty" /> identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78a61-125">Wyczyszczenie wartości właściwości przez wywołanie <xref:System.Windows.DependencyObject.ClearValue%2A> nie musi dawać właściwości zależności wartością domyślną określoną w metadanych właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-125">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="78a61-126">Czyszczenie właściwości tylko wyraźnie czyści, niezależnie od tego, która wartość lokalna mogła zostać zastosowana.</span><span class="sxs-lookup"><span data-stu-id="78a61-126">Clearing the property only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="78a61-127">Aby uzyskać więcej informacji, zobacz [pierwszeństwo wartości właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="78a61-127">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78a61-128">Poniższy przykład wykonuje iterację wszystkich właściwości, które mają wartości lokalne ustawione dla obiektu, a następnie <xref:System.Windows.DependencyObject.ClearValue%2A> wywołuje w celu wyczyszczenia wartości każdej takiej właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-128">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="78a61-129">Podjęto próbę <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> wywołania zapieczętowanego <see cref="T:System.Windows.DependencyObject" />elementu.</span><span class="sxs-lookup"><span data-stu-id="78a61-129">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="P:System.Windows.DependencyObject.IsSealed" />
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyObject.ClearValue key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="78a61-130">Klucz dla właściwości zależności, która ma zostać wyczyszczona.</span><span class="sxs-lookup"><span data-stu-id="78a61-130">The key for the dependency property to be cleared.</span></span></param>
        <summary><span data-ttu-id="78a61-131">Czyści wartość lokalną właściwości tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="78a61-131">Clears the local value of a read-only property.</span></span> <span data-ttu-id="78a61-132">Właściwość, która ma zostać wyczyszczona, <see cref="T:System.Windows.DependencyPropertyKey" />jest określana przez.</span><span class="sxs-lookup"><span data-stu-id="78a61-132">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78a61-133"><xref:System.Windows.DependencyPropertyKey> Identyfikuje właściwość zależności tylko do odczytu dla operacji systemu właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-133">A <xref:System.Windows.DependencyPropertyKey> identifies a read-only dependency property for property system operations.</span></span> <span data-ttu-id="78a61-134">Klasy definiujące właściwości zależności tylko do odczytu nie powinny ujawniać tego klucza z dostępem publicznym.</span><span class="sxs-lookup"><span data-stu-id="78a61-134">Classes that define read-only dependency properties should not expose this key with public access.</span></span> <span data-ttu-id="78a61-135">Publicznie uwidoczniony klucz zapewnia publiczne ścieżki kodu, które negacją znaku tylko do odczytu właściwości, jeśli metody takie jak <xref:System.Windows.DependencyObject.ClearValue%2A> lub <xref:System.Windows.DependencyObject.SetValue%2A> mogą być wywoływane poza klasą lub zestawem, odwołujące się do klucza.</span><span class="sxs-lookup"><span data-stu-id="78a61-135">A publicly exposed key would provide a public code pathway that negated the read-only character of the property, if methods such as <xref:System.Windows.DependencyObject.ClearValue%2A> or <xref:System.Windows.DependencyObject.SetValue%2A> could be called outside the class or assembly, referencing the key.</span></span>  
  
 <span data-ttu-id="78a61-136">Wyczyszczenie wartości właściwości przez wywołanie <xref:System.Windows.DependencyObject.ClearValue%2A> nie musi dawać właściwości zależności wartością domyślną określoną w metadanych właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-136">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="78a61-137">Czyszczenie wartości tylko wyraźnie czyści, niezależnie od tego, która wartość lokalna mogła zostać zastosowana.</span><span class="sxs-lookup"><span data-stu-id="78a61-137">Clearing the value only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="78a61-138">Aby uzyskać więcej informacji, zobacz [pierwszeństwo wartości właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="78a61-138">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="78a61-139">Podjęto próbę <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> wywołania zapieczętowanego <see cref="T:System.Windows.DependencyObject" />elementu.</span><span class="sxs-lookup"><span data-stu-id="78a61-139">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="T:System.Windows.DependencyPropertyKey" />
      </Docs>
    </Member>
    <Member MemberName="CoerceValue">
      <MemberSignature Language="C#" Value="public void CoerceValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CoerceValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CoerceValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CoerceValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.CoerceValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.CoerceValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="78a61-140">Identyfikator właściwości zależności, która ma zostać przekształcona.</span><span class="sxs-lookup"><span data-stu-id="78a61-140">The identifier for the dependency property to coerce.</span></span></param>
        <summary><span data-ttu-id="78a61-141">Przekształca wartość określonej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-141">Coerces the value of the specified dependency property.</span></span> <span data-ttu-id="78a61-142">Jest to realizowane przez wywołanie dowolnej <see cref="T:System.Windows.CoerceValueCallback" /> funkcji określonej w metadanych właściwości dla właściwości zależności, która istnieje w wywołaniu. <see cref="T:System.Windows.DependencyObject" /></span><span class="sxs-lookup"><span data-stu-id="78a61-142">This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback" /> function specified in property metadata for the dependency property as it exists on the calling <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78a61-143">Oprócz jawnego wywołania metody <xref:System.Windows.DependencyObject.CoerceValue%2A> <xref:System.Windows.CoerceValueCallback> dla właściwości zależności jest również wywoływana wewnętrznie za każdym razem, gdy wartość właściwości zależności jest przeliczana przez [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] system właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-143">In addition to being explicitly invoked through calling <xref:System.Windows.DependencyObject.CoerceValue%2A>, the <xref:System.Windows.CoerceValueCallback> for a dependency property is also invoked internally whenever the dependency property value is being re-evaluated by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span>  
  
 <span data-ttu-id="78a61-144">Gdy wywołasz <xref:System.Windows.DependencyObject.CoerceValue%2A> metodę, ostatecznie wywołujesz wywołanie zwrotne wartości wymuszonej dla właściwości, którą określisz.</span><span class="sxs-lookup"><span data-stu-id="78a61-144">When you invoke the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, you are ultimately invoking the coerce value callback for the property that you specify.</span></span> <span data-ttu-id="78a61-145">Zwykle zostanie to wywołane <xref:System.Windows.DependencyObject.CoerceValue%2A> tylko wtedy, gdy wiesz, że istnieje wywołanie zwrotne wartości wymuszonej i jeśli znasz kryteria wywołania zwrotnego dla przekształcenia.</span><span class="sxs-lookup"><span data-stu-id="78a61-145">Typically you will invoke <xref:System.Windows.DependencyObject.CoerceValue%2A> only if you know that a coerce value callback exists, and if you know the callback's criteria for coercion.</span></span>  
  
 <span data-ttu-id="78a61-146">Najbardziej typowym scenariuszem wywoływania <xref:System.Windows.DependencyObject.CoerceValue%2A> jest w ramach obsługi klasy lub zmiany wartości wywołania zwrotnego powiązanych właściwości, które mają wpływ na wszystkie inne elementy w zależności od siebie.</span><span class="sxs-lookup"><span data-stu-id="78a61-146">The most common scenario for calling <xref:System.Windows.DependencyObject.CoerceValue%2A> is within class handling or property change callbacks of related properties that influence each other's values in a dependent way.</span></span> <span data-ttu-id="78a61-147">Aby uzyskać więcej informacji, zobacz [wywołania zwrotne właściwości zależności i walidacja](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="78a61-147">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78a61-148">Poniższy przykład wywołuje <xref:System.Windows.DependencyObject.CoerceValue%2A> <xref:System.Windows.PropertyChangedCallback> w ramach implementacji <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> , która jest używana jako dla różnych właściwości zależności w tej samej klasie.</span><span class="sxs-lookup"><span data-stu-id="78a61-148">The following example calls <xref:System.Windows.DependencyObject.CoerceValue%2A> within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class.</span></span> <span data-ttu-id="78a61-149">Jest to typowy wzorzec służący do wprowadzania wartości rzeczywistych zależności między właściwościami zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-149">This is a common pattern for introducing true value dependencies between dependency properties.</span></span>  
  
 [!code-csharp[DPCallbackOverride#OnPCCurrent](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#onpccurrent)]
 [!code-vb[DPCallbackOverride#OnPCCurrent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#onpccurrent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="78a61-150">Określony <paramref name="dp" /> lub jego wartość jest nieprawidłowa lub nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="78a61-150">The specified <paramref name="dp" /> or its value were invalid or do not exist.</span></span></exception>
        <altmember cref="T:System.Windows.CoerceValueCallback" />
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DependencyObjectType">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObjectType DependencyObjectType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObjectType DependencyObjectType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.DependencyObjectType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyObjectType As DependencyObjectType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObjectType ^ DependencyObjectType { System::Windows::DependencyObjectType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyObjectType : System.Windows.DependencyObjectType" Usage="System.Windows.DependencyObject.DependencyObjectType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObjectType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78a61-151">Pobiera, który zawija [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] typ tego wystąpienia. <see cref="T:System.Windows.DependencyObjectType" /></span><span class="sxs-lookup"><span data-stu-id="78a61-151">Gets the <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span></span></summary>
        <value><span data-ttu-id="78a61-152">Obiekt <see cref="T:System.Windows.DependencyObjectType" /> , który zawija [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] typ tego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="78a61-152">A <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78a61-153">Ta właściwość jest przydatna <xref:System.Windows.DependencyObject> , jeśli obiekt, który jest zwracany z metody, ma typ wartości zwracanej i chcesz wykonać na nim operacje specyficzne dla systemu właściwości, w zależności od jego typu.</span><span class="sxs-lookup"><span data-stu-id="78a61-153">This property is useful if an object that is returned from a method has a return value type of <xref:System.Windows.DependencyObject> and you want to perform property system specific operations on it depending on its type.</span></span> <span data-ttu-id="78a61-154">Na przykład bardziej wydajne jest wywoływanie <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> <xref:System.Windows.DependencyObjectType> przy użyciu elementu zamiast [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] typu.</span><span class="sxs-lookup"><span data-stu-id="78a61-154">For example it is more efficient to call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> using the <xref:System.Windows.DependencyObjectType> rather than the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type.</span></span> <span data-ttu-id="78a61-155"><xref:System.Windows.DependencyObjectType>ułatwia szybsze wyszukiwanie.</span><span class="sxs-lookup"><span data-stu-id="78a61-155"><xref:System.Windows.DependencyObjectType> facilitates faster lookup.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78a61-156">W poniższym przykładzie `MySubClass` pseudokodzie przewiduje, że dodatkowe klasy pochodne mogą zmienić wartość `MyCustom` domyślną właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-156">In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property.</span></span> <span data-ttu-id="78a61-157">Klasa implementuje Konstruktor bez parametrów, który może ustalić rzeczywistą klasę pochodną, wykorzystując w tym celu zalety polimorfizmu na <xref:System.Windows.DependencyObjectType> wartości za każdym razem, gdy Konstruktor jest używany jako Klasa pochodna.</span><span class="sxs-lookup"><span data-stu-id="78a61-157">The class implements a parameterless constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.</span></span>  
  
 `public DOClass() : base()`  
  
 `{`  
  
 `__customPropertyCache = (CustomDP)`  
  
 `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
        <altmember cref="T:System.Windows.DependencyObjectType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override sealed bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dependencyObject.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="78a61-158"><see cref="T:System.Windows.DependencyObject" /> Do porównania z bieżącym wystąpieniem.</span><span class="sxs-lookup"><span data-stu-id="78a61-158">The <see cref="T:System.Windows.DependencyObject" /> to compare to the current instance.</span></span></param>
        <summary><span data-ttu-id="78a61-159">Określa, czy podana <see cref="T:System.Windows.DependencyObject" /> jest równoważna z bieżącym <see cref="T:System.Windows.DependencyObject" />.</span><span class="sxs-lookup"><span data-stu-id="78a61-159">Determines whether a provided <see cref="T:System.Windows.DependencyObject" /> is equivalent to the current <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="78a61-160"><see langword="true" />Jeśli dwa wystąpienia są takie same; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="78a61-160"><see langword="true" /> if the two instances are the same; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78a61-161">Ta implementacja dotyczy tylko równości odwołań i nie próbuje oszacować równości wartości zawartych właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-161">This implementation is reference equality only, and does not attempt to evaluate value equality of the contained properties.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="78a61-162">
            <see cref="T:System.Windows.DependencyObject" />zastępuje, a następnie wypisuje <see cref="T:System.Object" /> dwie podstawowe <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> metody <see cref="M:System.Windows.DependencyObject.GetHashCode" />: i.</span><span class="sxs-lookup"><span data-stu-id="78a61-162">
            <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two basic <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span></span> <span data-ttu-id="78a61-163">Przesłonięcia wywołują <see cref="T:System.Object" /> implementacje, co skutkuje zachowaniem równości obiektów.</span><span class="sxs-lookup"><span data-stu-id="78a61-163">The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior.</span></span> <span data-ttu-id="78a61-164">Celem tych zamierzonych zastąpień jest uniemożliwienie klasom pochodnym próby zdefiniowania równości wartości <see cref="T:System.Windows.DependencyObject" />dla.</span><span class="sxs-lookup"><span data-stu-id="78a61-164">The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />.</span></span> <span data-ttu-id="78a61-165">Wartości równe dla <see cref="T:System.Windows.DependencyObject" /> nigdy nie będą dokładne, ponieważ wartości właściwości innate zmieniają możliwości <see cref="T:System.Windows.DependencyObject" /> i właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-165">Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties.</span></span> <span data-ttu-id="78a61-166">Obejmuje to podstawowe [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] funkcje, takie jak powiązanie danych [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] i system właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-166">This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override sealed int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyObject.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="78a61-167">Pobiera kod skrótu dla tego <see cref="T:System.Windows.DependencyObject" />elementu.</span><span class="sxs-lookup"><span data-stu-id="78a61-167">Gets a hash code for this <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="78a61-168">Podpisany 32-bitowy kod skrótu liczby całkowitej.</span><span class="sxs-lookup"><span data-stu-id="78a61-168">A signed 32-bit integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="78a61-169">
            <see cref="T:System.Windows.DependencyObject" />przesłania, a następnie plombuje dwie <see cref="T:System.Object" /> metody <see cref="M:System.Windows.DependencyObject.GetHashCode" />: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> i.</span><span class="sxs-lookup"><span data-stu-id="78a61-169">
            <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span></span> <span data-ttu-id="78a61-170">Przesłonięcia wywołują <see cref="T:System.Object" /> implementacje, co skutkuje zachowaniem równości obiektów.</span><span class="sxs-lookup"><span data-stu-id="78a61-170">The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior.</span></span> <span data-ttu-id="78a61-171">Celem tych zamierzonych zastąpień jest uniemożliwienie klasom pochodnym próby zdefiniowania równości wartości <see cref="T:System.Windows.DependencyObject" />dla.</span><span class="sxs-lookup"><span data-stu-id="78a61-171">The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />.</span></span> <span data-ttu-id="78a61-172">Wartości równe dla <see cref="T:System.Windows.DependencyObject" /> nigdy nie będą dokładne, ponieważ wartości właściwości innate zmieniają możliwości <see cref="T:System.Windows.DependencyObject" /> i właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-172">Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties.</span></span> <span data-ttu-id="78a61-173">Obejmuje to podstawowe [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] funkcje, takie jak powiązanie danych [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] i system właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-173">This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetLocalValueEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.LocalValueEnumerator GetLocalValueEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocalValueEnumerator () As LocalValueEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::LocalValueEnumerator GetLocalValueEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetLocalValueEnumerator : unit -&gt; System.Windows.LocalValueEnumerator" Usage="dependencyObject.GetLocalValueEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LocalValueEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="78a61-174">Tworzy wyspecjalizowany moduł wyliczający służący do określania, które właściwości zależności mają <see cref="T:System.Windows.DependencyObject" />lokalnie ustawione wartości.</span><span class="sxs-lookup"><span data-stu-id="78a61-174">Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="78a61-175">Wyspecjalizowany moduł wyliczający wartość lokalną.</span><span class="sxs-lookup"><span data-stu-id="78a61-175">A specialized local value enumerator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78a61-176">*Wartość lokalna* to jakakolwiek wartość właściwości zależności, która została ustawiona przez <xref:System.Windows.DependencyObject.SetValue%2A>, w przeciwieństwie do innych aspektów systemu właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-176">A *local value* is any dependency property value that was set by <xref:System.Windows.DependencyObject.SetValue%2A>, as opposed to other aspects of the property system.</span></span>  
  
 <span data-ttu-id="78a61-177">Metodę uzyskana przez <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> wywołanie mogą służyć do wyliczania właściwości, które mają <xref:System.Windows.DependencyObject> lokalnie ustawioną wartość w wystąpieniu. <xref:System.Windows.LocalValueEnumerator></span><span class="sxs-lookup"><span data-stu-id="78a61-177">The <xref:System.Windows.LocalValueEnumerator> obtained by calling <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> can be used to enumerate properties that have a locally set value on a <xref:System.Windows.DependencyObject> instance.</span></span> <span data-ttu-id="78a61-178">Każda taka właściwość jest reprezentowana w module wyliczającym <xref:System.Windows.LocalValueEntry> przez obiekt, który ma właściwości odwołujące <xref:System.Windows.DependencyProperty> się do określonych i jego wartości.</span><span class="sxs-lookup"><span data-stu-id="78a61-178">Each such property is represented in the enumerator by a <xref:System.Windows.LocalValueEntry> object, which has properties that reference the specific <xref:System.Windows.DependencyProperty> and its values.</span></span> <span data-ttu-id="78a61-179">Ta technika wyliczania za pośrednictwem wartości zestawu lokalnego może być używana do optymalizacji lub do innej obsługi wartości lokalnych, na przykład w celu określenia, które wartości <xref:System.Windows.DependencyObject> właściwości mogą ulec zmianie, jeśli zostały wyczyszczone.</span><span class="sxs-lookup"><span data-stu-id="78a61-179">This technique of enumerating over the locally set values can be used for optimization or for other handling of local values, such as to determine which property values of a <xref:System.Windows.DependencyObject> would change if they were cleared.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="78a61-180">Zwrócone <xref:System.Windows.LocalValueEnumerator> mogą zawierać <xref:System.Windows.LocalValueEntry> rekordy właściwości zależności, które są tylko do odczytu lub właściwości zależności, gdzie wartości są obliczane przez system właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-180">The returned <xref:System.Windows.LocalValueEnumerator> might contain <xref:System.Windows.LocalValueEntry> records for dependency properties that are read-only, or dependency properties where values are calculated by the property system.</span></span> <span data-ttu-id="78a61-181">Na przykład element Visual Framework, który ma ustaloną szerokość przez układ, będzie zgłaszać wartość lokalną dla <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span><span class="sxs-lookup"><span data-stu-id="78a61-181">For example, a visual framework element that has an established width through layout will report a local value for <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span></span> <span data-ttu-id="78a61-182">Jeśli otrzymujesz wartości lokalne, aby je zresetować, sprawdź <xref:System.Windows.DependencyProperty.ReadOnly%2A> wartość w każdym <xref:System.Windows.LocalValueEntry> identyfikatorze właściwości, aby sprawdzić, czy <xref:System.Windows.DependencyProperty> pytanie nie jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="78a61-182">If you are getting local values in order to reset them, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value on the property identifier of each <xref:System.Windows.LocalValueEntry> to verify that the <xref:System.Windows.DependencyProperty> in question is not read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78a61-183">Poniższy przykład wykonuje iterację wszystkich właściwości, które mają wartości lokalne ustawione dla obiektu, a następnie <xref:System.Windows.DependencyObject.ClearValue%2A> wywołuje w celu wyczyszczenia wartości każdej takiej właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-183">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.LocalValueEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.GetValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="78a61-184"><see cref="T:System.Windows.DependencyProperty" /> Identyfikator właściwości, dla której ma zostać pobrana wartość.</span><span class="sxs-lookup"><span data-stu-id="78a61-184">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span></span></param>
        <summary><span data-ttu-id="78a61-185">Zwraca bieżącą obowiązującą wartość właściwości zależności w tym wystąpieniu <see cref="T:System.Windows.DependencyObject" />.</span><span class="sxs-lookup"><span data-stu-id="78a61-185">Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="78a61-186">Zwraca bieżącą wartość efektywną.</span><span class="sxs-lookup"><span data-stu-id="78a61-186">Returns the current effective value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78a61-187">*Wartość efektywna* to wartość właściwości, która jest zwracana przez system właściwości do dowolnego obiektu wywołującego żądającego wartości.</span><span class="sxs-lookup"><span data-stu-id="78a61-187">The *effective value* is the value of the property that is returned by the property system to any caller that is requesting the value.</span></span> <span data-ttu-id="78a61-188">Wartość efektywna to wynik systemu właściwości, który ocenia wszystkie możliwe dane wejściowe, które uczestniczą w pierwszeństwie wartości systemu właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-188">The effective value is the result of the property system having evaluated all the possible inputs that participate in the property system value precedence.</span></span> <span data-ttu-id="78a61-189">Obejmuje to przekształcenia i animację.</span><span class="sxs-lookup"><span data-stu-id="78a61-189">This includes coercion and animation.</span></span> <span data-ttu-id="78a61-190">Aby uzyskać więcej informacji, zobacz [pierwszeństwo wartości właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="78a61-190">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="78a61-191">Ta metoda nigdy nie zwróci <xref:System.Windows.DependencyProperty.UnsetValue>.</span><span class="sxs-lookup"><span data-stu-id="78a61-191">This method will never return <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span> <span data-ttu-id="78a61-192"><xref:System.Windows.DependencyProperty.UnsetValue> Jest to wartość wskaźnikowa dla systemu właściwości, który jest używany w różnych możliwościach wewnętrznie, a jednocześnie narażony na wywołania zwrotne.</span><span class="sxs-lookup"><span data-stu-id="78a61-192">The <xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value for the property system that is used in various capacities internally and occasionally also exposed through coercion callbacks.</span></span>  
  
 <span data-ttu-id="78a61-193">Jeśli nie masz pewności, jaka jest wartość typu właściwości, możesz wykonać zapytanie o identyfikator żądanej właściwości zależności, aby określić, czy jest bardziej szczegółowy <xref:System.Windows.DependencyProperty.PropertyType%2A> , aby można było przekonwertować wartość zwracaną na.</span><span class="sxs-lookup"><span data-stu-id="78a61-193">If you are not sure what the property's type should be, you can query the identifier of the requested dependency property to determine whether there is a more specific <xref:System.Windows.DependencyProperty.PropertyType%2A> that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="78a61-194">Określona <paramref name="dp" /> lub jej wartość jest nieprawidłowa lub określona <paramref name="dp" /> nie istnieje.</span><span class="sxs-lookup"><span data-stu-id="78a61-194">The specified <paramref name="dp" /> or its value was invalid, or the specified <paramref name="dp" /> does not exist.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateProperty">
      <MemberSignature Language="C#" Value="public void InvalidateProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateProperty (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.InvalidateProperty : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.InvalidateProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="78a61-195"><see cref="T:System.Windows.DependencyProperty" /> Identyfikator właściwości do unieważnienia.</span><span class="sxs-lookup"><span data-stu-id="78a61-195">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to invalidate.</span></span></param>
        <summary><span data-ttu-id="78a61-196">Ponowna ocenuje wartość efektywną dla określonej właściwości zależności</span><span class="sxs-lookup"><span data-stu-id="78a61-196">Re-evaluates the effective value for the specified dependency property</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78a61-197">W przypadku wywołania <xref:System.Windows.DependencyObject.InvalidateProperty%2A>, wszystkie skojarzone i mające <xref:System.Windows.PropertyChangedCallback> zastosowanie <xref:System.Windows.CoerceValueCallback> funkcje lub funkcję zarejestrowane dla danej właściwości zależności mogą być wywoływane.</span><span class="sxs-lookup"><span data-stu-id="78a61-197">When you call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>, any associated and applicable <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions registered for that dependency property might be invoked.</span></span>  
  
 <span data-ttu-id="78a61-198">Wywołanie <xref:System.Windows.DependencyObject.InvalidateProperty%2A> na właściwości, która ma jej lokalny zestaw wartości, nie będzie miało wpływu, ponieważ wartość lokalna ma pierwszeństwo przed innymi danymi wejściowymi systemu właściwości, z wyjątkiem animacji.</span><span class="sxs-lookup"><span data-stu-id="78a61-198">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a property that has its local value set will have no effect, because the local value takes precedence over other property system inputs, except for animations.</span></span> <span data-ttu-id="78a61-199">Można jednak wywołać metodę <xref:System.Windows.DependencyObject.ClearValue%2A>, a następnie wywołać <xref:System.Windows.DependencyObject.InvalidateProperty%2A>polecenie.</span><span class="sxs-lookup"><span data-stu-id="78a61-199">However, you could call <xref:System.Windows.DependencyObject.ClearValue%2A>, then call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>.</span></span> <span data-ttu-id="78a61-200">Aby uzyskać więcej informacji, zobacz [pierwszeństwo wartości właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="78a61-200">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="78a61-201">Wywołanie <xref:System.Windows.DependencyObject.InvalidateProperty%2A> nie musi być stosowane dla wielu scenariuszy właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-201">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is not necessarily applicable for many dependency property scenarios.</span></span> <span data-ttu-id="78a61-202">Jeśli właściwość zależności zostanie unieważniona ze względu na zmiany wartości w którymkolwiek z elementów, system właściwości unieważnia i ponownie oblicza właściwość zależności automatycznie.</span><span class="sxs-lookup"><span data-stu-id="78a61-202">If a dependency property becomes invalidated because of value changes in any of the constituents, the property system invalidates and re-evaluates the dependency property automatically.</span></span> <span data-ttu-id="78a61-203">Jednak nadal istnieją pewne odpowiednie scenariusze, w których <xref:System.Windows.DependencyObject.InvalidateProperty%2A> są użyteczne.</span><span class="sxs-lookup"><span data-stu-id="78a61-203">However, there are still some appropriate scenarios where <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is useful.</span></span> <span data-ttu-id="78a61-204">W szczególności można użyć <xref:System.Windows.DependencyObject.InvalidateProperty%2A> wewnątrz wartości wymuszania lub zmiany właściwości wywołania zwrotnego dla innej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-204">In particular, you can use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> inside the coerce value or property changed callback for a different dependency property.</span></span> <span data-ttu-id="78a61-205">Można również użyć <xref:System.Windows.DependencyObject.InvalidateProperty%2A> , aby wymusić ponowną ocenę powiązania ze źródłem danych, które nie jest w stanie zaimplementować zalecanego <xref:System.ComponentModel.INotifyPropertyChanged> mechanizmu powiadamiania (na przykład w przypadku używania klas danych, które nie mogą pochodzić z lub gdzie dane są statyczne członek).</span><span class="sxs-lookup"><span data-stu-id="78a61-205">You can also use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> to force re-evaluation of a binding against a data source that is not able to implement the recommended <xref:System.ComponentModel.INotifyPropertyChanged> notification mechanism (perhaps if consuming data classes that cannot be derived from, or where the data is a static member).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78a61-206">Poniższy przykład wywołuje <xref:System.Windows.DependencyObject.InvalidateProperty%2A> właściwość niestandardową, zawsze, gdy właściwości, które są związane z niezweryfikowaną zmianą właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-206">The following example calls <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a custom property, whenever properties that are involved in the invalidated property's calculations change.</span></span> <span data-ttu-id="78a61-207">Jest to alternatywna technika wywołująca <xref:System.Windows.DependencyObject.CoerceValue%2A> metodę, ponieważ unieważnienie właściwości spowoduje również wywołanie wszelkich zarejestrowanych. <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A></span><span class="sxs-lookup"><span data-stu-id="78a61-207">This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/SDKSampleLibrary/class1.cs#invalidateproperty)]
 [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/sdksamplelibrary/class1.vb#invalidateproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.DependencyProperty.UnsetValue" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.DependencyObject.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78a61-208">Pobiera wartość wskazującą, czy to wystąpienie jest aktualnie zapieczętowane (tylko do odczytu).</span><span class="sxs-lookup"><span data-stu-id="78a61-208">Gets a value that indicates whether this instance is currently sealed (read-only).</span></span></summary>
        <value><span data-ttu-id="78a61-209"><see langword="true" />Jeśli to wystąpienie jest zapieczętowane; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="78a61-209"><see langword="true" /> if this instance is sealed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78a61-210">Ta wartość jest ustawiana wewnętrznie.</span><span class="sxs-lookup"><span data-stu-id="78a61-210">This value is set internally.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkElementFactory" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="dependencyObject.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="78a61-211">Dane zdarzenia, które będą zawierać identyfikator właściwości zależności, metadane właściwości dla typu i stare i nowe wartości.</span><span class="sxs-lookup"><span data-stu-id="78a61-211">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</span></span></param>
        <summary><span data-ttu-id="78a61-212">Wywoływana za każdym razem, gdy wartość skuteczna każdej właściwości <see cref="T:System.Windows.DependencyObject" /> zależności na tej stronie została zaktualizowana.</span><span class="sxs-lookup"><span data-stu-id="78a61-212">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject" /> has been updated.</span></span> <span data-ttu-id="78a61-213">Określona właściwość zależności, która została zmieniona, jest raportowana w danych zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="78a61-213">The specific dependency property that changed is reported in the event data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78a61-214">Ta metoda nie jest przeznaczona do ogólnego wykrywania poszczególnych zmian właściwości lub wykonywania nieprawidłowych właściwości dla poszczególnych przypadków.</span><span class="sxs-lookup"><span data-stu-id="78a61-214">This method is not intended to generally detect individual property changes or perform invalidations of properties on a per-case basis.</span></span> <span data-ttu-id="78a61-215"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A>Zamiast tego jest przeznaczony do modyfikacji ogólnego wzorca unieważnienia, jeśli pewne informacje są znane o szerokich klasyfikacjach właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-215"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is instead intended for modifications of the general invalidation pattern, if certain information is known about wide classifications of properties.</span></span> <span data-ttu-id="78a61-216">Na przykład zmiany w programie <xref:System.Windows.Freezable> mogą być zmieniane w typach <xref:System.Windows.Freezable>wartości lub mogą być podwłaściwościami, gdzie zmiany znajdują się w innych <xref:System.Windows.Freezable> odwołaniach.</span><span class="sxs-lookup"><span data-stu-id="78a61-216">For example, changes in a <xref:System.Windows.Freezable> might be changes in the value types of the <xref:System.Windows.Freezable>, or might be subproperties, where the changes are within other <xref:System.Windows.Freezable> references.</span></span> <span data-ttu-id="78a61-217">Implementacja przesłonięcia <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> programu używa wewnętrznych informacji, aby określić, czy właściwości są podwłaściwościami, i zapewnia odpowiednią logikę klasy bazowej w obu przypadkach. <xref:System.Windows.Freezable></span><span class="sxs-lookup"><span data-stu-id="78a61-217">The <xref:System.Windows.Freezable> override implementation of <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> uses internal information to determine whether the properties are subproperties, and provides appropriate base class logic for either case.</span></span>  
  
 <span data-ttu-id="78a61-218"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A>jest potencjalnie wywoływany wiele razy w okresie istnienia obiektu.</span><span class="sxs-lookup"><span data-stu-id="78a61-218"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="78a61-219">W związku z tym można osiągnąć lepszą wydajność dla ogólnego systemu właściwości w przypadku zastąpienia metadanych określonych właściwości, a następnie <xref:System.Windows.CoerceValueCallback> dołączenia <xref:System.Windows.PropertyChangedCallback> lub funkcji dla poszczególnych właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-219">Therefore, you can achieve better performance for the overall property system if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="78a61-220">Należy jednak użyć tej metody, jeśli <xref:System.Windows.DependencyObject> zawiera znaczną liczbę właściwości zależności z wartościami, lub jeśli zawiera logikę, taką jak zachowanie renderowania, które należy uruchomić ponownie dla kilku powiązanych przypadków Unieważnień właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-220">However, you would use this method if a <xref:System.Windows.DependencyObject> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="78a61-221">Zawsze Wywołaj implementację podstawową.</span><span class="sxs-lookup"><span data-stu-id="78a61-221">Always call the base implementation.</span></span> <span data-ttu-id="78a61-222">Niewykonanie tej czynności spowoduje znacząco wyłączenie całego [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] systemu właściwości, co spowoduje zgłoszenie niepoprawnych wartości.</span><span class="sxs-lookup"><span data-stu-id="78a61-222">Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, causing incorrect values to be reported.</span></span></para></block>
        <altmember cref="T:System.Windows.FrameworkElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadLocalValue">
      <MemberSignature Language="C#" Value="public object ReadLocalValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadLocalValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLocalValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ReadLocalValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ReadLocalValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.ReadLocalValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="78a61-223"><see cref="T:System.Windows.DependencyProperty" /> Identyfikator właściwości, dla której ma zostać pobrana wartość.</span><span class="sxs-lookup"><span data-stu-id="78a61-223">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span></span></param>
        <summary><span data-ttu-id="78a61-224">Zwraca wartość lokalną właściwości zależności, jeśli istnieje.</span><span class="sxs-lookup"><span data-stu-id="78a61-224">Returns the local value of a dependency property, if it exists.</span></span></summary>
        <returns><span data-ttu-id="78a61-225">Zwraca wartość lokalną lub zwraca wartość <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> wskaźnikową, jeśli nie ustawiono żadnej wartości lokalnej.</span><span class="sxs-lookup"><span data-stu-id="78a61-225">Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78a61-226">Należy używać <xref:System.Windows.DependencyObject.GetValue%2A> dla większości typowych operacji "Get" dla właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-226">You should use <xref:System.Windows.DependencyObject.GetValue%2A> for most typical "get" operations for a dependency property.</span></span> <span data-ttu-id="78a61-227"><xref:System.Windows.DependencyObject.ReadLocalValue%2A>nie zwraca wartości efektywnej dla różnych przypadków, w których wartość nie została ustawiona lokalnie.</span><span class="sxs-lookup"><span data-stu-id="78a61-227"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> does not return the effective value for a variety of circumstances where the value was not locally set.</span></span>  
  
 <span data-ttu-id="78a61-228">Wartości, które są ustawiane przez style, motywy, szablony, wartość domyślną z metadanych lub dziedziczenia wartości właściwości, nie są uznawane za wartości lokalne.</span><span class="sxs-lookup"><span data-stu-id="78a61-228">Values that are set by styles, themes, templates, the default value from metadata, or property value inheritance are not considered to be local values.</span></span> <span data-ttu-id="78a61-229">Jednakże powiązania i inne wyrażenia są uznawane za wartości lokalne po ich ocenie.</span><span class="sxs-lookup"><span data-stu-id="78a61-229">However, bindings and other expressions are considered to be local values, after they have been evaluated.</span></span>  
  
 <span data-ttu-id="78a61-230">Gdy wartość lokalna nie jest ustawiona, ta metoda zwraca <xref:System.Windows.DependencyProperty.UnsetValue>.</span><span class="sxs-lookup"><span data-stu-id="78a61-230">When no local value is set, this method returns <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span>  
  
 <span data-ttu-id="78a61-231">Jeśli zwracana wartość jest inna niż <xref:System.Windows.DependencyProperty.UnsetValue>, można wysłać zapytanie do metadanych żądanej właściwości zależności, aby określić, czy istnieje bardziej konkretny typ, do którego można przekonwertować wartość zwracaną.</span><span class="sxs-lookup"><span data-stu-id="78a61-231">If the returned value is other than <xref:System.Windows.DependencyProperty.UnsetValue>, you can query the metadata of the requested dependency property to determine whether there is a more specific type that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentValue">
      <MemberSignature Language="C#" Value="public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCurrentValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCurrentValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCurrentValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetCurrentValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetCurrentValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="78a61-232">Identyfikator właściwości zależności do ustawienia.</span><span class="sxs-lookup"><span data-stu-id="78a61-232">The identifier of the dependency property to set.</span></span></param>
        <param name="value"><span data-ttu-id="78a61-233">Nowa wartość lokalna.</span><span class="sxs-lookup"><span data-stu-id="78a61-233">The new local value.</span></span></param>
        <summary><span data-ttu-id="78a61-234">Ustawia wartość właściwości zależności bez zmiany jego źródła wartości.</span><span class="sxs-lookup"><span data-stu-id="78a61-234">Sets the value of a dependency property without changing its value source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78a61-235">Ta metoda jest używana przez składnik, który programowo ustawia wartość jednej z własnych właściwości bez wyłączania użycia właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-235">This method is used by a component that programmatically sets the value of one of its own properties without disabling an application's declared use of the property.</span></span> <span data-ttu-id="78a61-236"><xref:System.Windows.DependencyObject.SetCurrentValue%2A> Metoda zmienia obowiązującą wartość właściwości, ale istniejące wyzwalacze, powiązania danych i style będą nadal działały.</span><span class="sxs-lookup"><span data-stu-id="78a61-236">The <xref:System.Windows.DependencyObject.SetCurrentValue%2A> method changes the effective value of the property, but existing triggers, data bindings, and styles will continue to work.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="78a61-237">Podjęto próbę zmodyfikowania właściwości zależności tylko do odczytu lub właściwości zapieczętowanej <see cref="T:System.Windows.DependencyObject" />.</span><span class="sxs-lookup"><span data-stu-id="78a61-237">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="78a61-238"><paramref name="value" />nie jest prawidłowym typem zarejestrowanym dla <paramref name="dp" /> właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-238"><paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="78a61-239">Ustawia wartość lokalną właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-239">Sets the local value of a dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="78a61-240">Identyfikator właściwości zależności do ustawienia.</span><span class="sxs-lookup"><span data-stu-id="78a61-240">The identifier of the dependency property to set.</span></span></param>
        <param name="value"><span data-ttu-id="78a61-241">Nowa wartość lokalna.</span><span class="sxs-lookup"><span data-stu-id="78a61-241">The new local value.</span></span></param>
        <summary><span data-ttu-id="78a61-242">Ustawia wartość lokalną właściwości zależności, określoną za pomocą identyfikatora właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-242">Sets the local value of a dependency property, specified by its dependency property identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78a61-243">Jeśli dostarczony typ nie jest zgodny z typem zadeklarowanym dla właściwości zależności, która została pierwotnie zarejestrowana, zgłaszany jest wyjątek.</span><span class="sxs-lookup"><span data-stu-id="78a61-243">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="78a61-244">`value` Parametr powinien zawsze być określony jako odpowiedni typ.</span><span class="sxs-lookup"><span data-stu-id="78a61-244">The `value` parameter should always be provided as the appropriate type.</span></span>  
  
 <span data-ttu-id="78a61-245">Warunki wyjątku mogą mieć wpływ <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> na wywołanie zwrotne istniejące w identyfikatorze właściwości zależności ustawionej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-245">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span> <span data-ttu-id="78a61-246">W przeciwnym razie podana wartość może kończyć się niepowodzeniem ogólnymi warunkami sprawdzania typu (na przykład przekazywaniem ciągu, gdy typ natywny jest podwójny).</span><span class="sxs-lookup"><span data-stu-id="78a61-246">Otherwise, the value provided might be failing general type-checking conditions (for example, passing a string when the native type is Double).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="78a61-247">Podjęto próbę zmodyfikowania właściwości zależności tylko do odczytu lub właściwości zapieczętowanej <see cref="T:System.Windows.DependencyObject" />.</span><span class="sxs-lookup"><span data-stu-id="78a61-247">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="78a61-248"><paramref name="value" />nie jest prawidłowym typem zarejestrowanym dla <paramref name="dp" /> właściwości.</span><span class="sxs-lookup"><span data-stu-id="78a61-248"><paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyPropertyKey key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyPropertyKey key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (key As DependencyPropertyKey, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyPropertyKey ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyPropertyKey * obj -&gt; unit" Usage="dependencyObject.SetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="78a61-249"><see cref="T:System.Windows.DependencyPropertyKey" /> Identyfikator właściwości do ustawienia.</span><span class="sxs-lookup"><span data-stu-id="78a61-249">The <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the property to set.</span></span></param>
        <param name="value"><span data-ttu-id="78a61-250">Nowa wartość lokalna.</span><span class="sxs-lookup"><span data-stu-id="78a61-250">The new local value.</span></span></param>
        <summary><span data-ttu-id="78a61-251">Ustawia wartość lokalną właściwości zależności tylko do odczytu, określoną przez <see cref="T:System.Windows.DependencyPropertyKey" /> identyfikator właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-251">Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78a61-252">Ten podpis jest zazwyczaj używany podczas ustawiania wartości dla właściwości zależności tylko do odczytu, które są zdefiniowane przez klasy niestandardowe.</span><span class="sxs-lookup"><span data-stu-id="78a61-252">This signature is generally used when you set values for read-only dependency properties that are defined by your custom classes.</span></span> <span data-ttu-id="78a61-253">Ogólnie rzecz biorąc jest wywoływana tylko z typu, który zarejestrował tę właściwość zależności, która implementuje wewnętrzną logikę, która dostarcza określoną wartość właściwości zależności. <xref:System.Windows.DependencyObject.SetValue%2A></span><span class="sxs-lookup"><span data-stu-id="78a61-253">Generally, <xref:System.Windows.DependencyObject.SetValue%2A> is called only from the type that registered that dependency property, which implements the internal logic that provides the determined value for the dependency property.</span></span> <span data-ttu-id="78a61-254">Aby uzyskać więcej informacji, zobacz [właściwości zależności tylko do odczytu](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="78a61-254">For more information, see [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="78a61-255">Jeśli dostarczony typ nie jest zgodny z typem zadeklarowanym dla właściwości zależności, która została pierwotnie zarejestrowana, zgłaszany jest wyjątek.</span><span class="sxs-lookup"><span data-stu-id="78a61-255">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="78a61-256">`value` Parametr powinien zawsze być określony jako odpowiedni typ.</span><span class="sxs-lookup"><span data-stu-id="78a61-256">The `value` parameter should always be provided as the appropriate type.</span></span> <span data-ttu-id="78a61-257">Warunki wyjątku mogą mieć wpływ <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> na wywołanie zwrotne istniejące w identyfikatorze właściwości zależności ustawionej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-257">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78a61-258">W poniższym przykładzie zdefiniowano właściwość zależności tylko do odczytu wraz z `public static readonly` <xref:System.Windows.DependencyProperty> , która zapewnia niezbędny dostęp tylko do odczytu do odbiorców właściwości, i metodę dostępu dla [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] otoki.</span><span class="sxs-lookup"><span data-stu-id="78a61-258">The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeProperty">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializeProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ShouldSerializeProperty (dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ShouldSerializeProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool&#xA;override this.ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool" Usage="dependencyObject.ShouldSerializeProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="78a61-259">Identyfikator właściwości zależności, która powinna być serializowana.</span><span class="sxs-lookup"><span data-stu-id="78a61-259">The identifier for the dependency property that should be serialized.</span></span></param>
        <summary><span data-ttu-id="78a61-260">Zwraca wartość wskazującą, czy procesy serializacji powinny serializować wartość dla podanej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-260">Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</span></span></summary>
        <returns><span data-ttu-id="78a61-261"><see langword="true" />Jeśli podana właściwość zależności powinna mieć wartość Serializacja wartości. w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="78a61-261"><see langword="true" /> if the dependency property that is supplied should be value-serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78a61-262">Domyślna implementacja zwraca `true` wszystkie przypadki, w których właściwość dependency ma wartość <xref:System.Windows.DependencyObject>lokalną dla elementu.</span><span class="sxs-lookup"><span data-stu-id="78a61-262">The default implementation returns `true` for all cases in which a dependency property had a local value established on the <xref:System.Windows.DependencyObject>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="78a61-263">Zastąpienia tej metody mogą w różny sposób obsługiwać określone właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="78a61-263">Overrides for this method might handle specific dependency properties differently.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>
