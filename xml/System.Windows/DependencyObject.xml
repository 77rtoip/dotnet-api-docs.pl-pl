<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DependencyObject.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac593e067f8bf97d79f7e4525a57db08a4a8d5109c2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">93e067f8bf97d79f7e4525a57db08a4a8d5109c2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyObject">
          <source>Represents an object that participates in the dependency property system.</source>
          <target state="translated">Reprezentuje obiekt, który uczestniczy w systemie właściwości zależności.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> class enables <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> property system services on its many derived classes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> Klasy umożliwia <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> właściwości usług systemowych na jej wielu klas pochodnych.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>The property system's primary function is to compute the values of properties, and to provide system notification about values that have changed.</source>
          <target state="translated">Podstawową funkcją systemu właściwość jest do obliczenia wartości właściwości oraz zapewnienie systemu powiadomień o wartości, które zostały zmienione.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>Another key class that participates in the property system is <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.</source>
          <target state="translated">Jest inna klasa klucza, który uczestniczy w systemie właściwości <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> enables the registration of dependency properties into the property system, and provides identification and information about each dependency property, whereas <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph> as a base class enables objects to use the dependency properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> Umożliwia rejestrację właściwości zależności w systemie właściwości i zawiera identyfikator i informacje o każdej właściwości zależności, podczas gdy <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph> jako klasa podstawowa umożliwia obiektów do użycia właściwości zależności.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> services and characteristics include the following:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> usługi i właściwości są następujące:</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>Dependency property hosting support.</source>
          <target state="translated">Hosting obsługa właściwości zależności.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>You register a dependency property by calling the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph> method, and storing the method's return value as a public static field in your class.</source>
          <target state="translated">Zarejestruj właściwości zależności przez wywołanie metody <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph> — metoda i przechowywanie wartości zwracanej przez metodę jako publiczne pola statycznego w klasie.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>Attached property hosting support.</source>
          <target state="translated">Dołączona właściwość hosting pomocy technicznej.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>You register an attached property by calling the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;</ph> method, and storing the method's return value as a public static read-only field in your class.</source>
          <target state="translated">Zarejestruj dołączona właściwość przez wywołanie metody <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;</ph> — metoda i przechowywanie wartości zwracanej przez metodę jako publiczne statyczne pole tylko do odczytu w klasie.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>(There are also additional member requirements; note that this represents a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> specific implementation for attached properties.</source>
          <target state="translated">(Istnieją również wymagania dodatkowy element członkowski; należy pamiętać, że jest to <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> konkretnej implementacji w przypadku dołączonych właściwości.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>For details, see <bpt id="p1">[</bpt>Attached Properties Overview<ept id="p1">](~/docs/framework/wpf/advanced/attached-properties-overview.md)</ept>.) Your attached property can then be set on any class that derives from <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>dołączony Przegląd właściwości<ept id="p1">](~/docs/framework/wpf/advanced/attached-properties-overview.md)</ept>.) Twoje dołączonej właściwości można następnie ustawić na dowolnej klasy, która jest pochodną <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>Get, set, and clear utility methods for values of any dependency properties that exist on the <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</source>
          <target state="translated">Get ustaw i wyczyść metody narzędziowe do wartości wszystkich właściwości zależności, które istnieją na <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>Metadata, coerce value support, property changed notification, and override callbacks for  dependency properties or attached properties.</source>
          <target state="translated">Metadane, wymuszone wartość obsługi powiadomień zmiany właściwości i wywołania zwrotne zastąpienia dla właściwości zależności lub dołączone właściwości.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>Also, the <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> class facilitates the per-owner property metadata for a dependency property.</source>
          <target state="translated">Ponadto <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> klasy ułatwia na właściciela metadanych właściwości dla właściwości zależności.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>A common base class for classes derived from <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.Media.Visual&gt;</ph>.</source>
          <target state="translated">Wspólna klasa podstawowa dla klas pochodnych <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph>, lub <ph id="ph3">&lt;xref:System.Windows.Media.Visual&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>(<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>, another base element class, has a class hierarchy that includes <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph>.)</source>
          <target state="translated">(<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>, inny base element klasa, ma hierarchii klasy, która obejmuje <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph>.)</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>The following example derives from <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> to create a new abstract class.</source>
          <target state="translated">Poniższy przykład pochodzi z <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> do utworzenia nowej klasy abstrakcyjnej.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>The class then registers an attached property and includes support members for that attached property.</source>
          <target state="translated">Klasa następnie rejestruje dołączona właściwość i zawiera elementy pomocy technicznej dla tej właściwości dołączone.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyObject">
          <source>Clears the local value of a property.</source>
          <target state="translated">Czyści lokalnego wartości właściwości.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>The dependency property to be cleared, identified by a <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> object reference.</source>
          <target state="translated">Właściwości zależności, aby wyczyścić, identyfikowane przez <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> obiektu odwołania.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>Clears the local value of a property.</source>
          <target state="translated">Czyści lokalnego wartości właściwości.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>The property to be cleared is specified by a <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> identifier.</source>
          <target state="translated">Właściwość do wyczyszczenia jest określona przez <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> identyfikator.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>Clearing the property value by calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</source>
          <target state="translated">Wyczyszczenie wartości właściwości przez wywołanie metody <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> niekoniecznie daje właściwości zależności domyślną wartość, która została określona w metadanych właściwości zależności.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>Clearing the property only specifically clears whatever local value may have been applied.</source>
          <target state="translated">Czyszczenie właściwości tylko wyraźnie czyści niezależnie od wartości lokalnej zostały zastosowane.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>pierwszeństwo wartość właściwości zależności<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>The following example iterates all properties that have local values set on an object, then calls <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> to clear the values of each such property.</source>
          <target state="translated">Poniższy przykład wykonuje iterację wszystkich właściwości, które mają wartości ustawionej w obiekcie, następnie wywołuje <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> można wyczyścić wartości każdej z tych właściwości.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>Attempted to call <ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /&gt;</ph> on a sealed <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Nastąpiła próba wywołania <ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /&gt;</ph> w zapieczętowanym <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>The key for the dependency property to be cleared.</source>
          <target state="translated">Klucz dla właściwości zależności do wyczyszczenia.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>Clears the local value of a read-only property.</source>
          <target state="translated">Usuwa lokalną wartość właściwości tylko do odczytu.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>The property to be cleared is specified by a <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyKey" /&gt;</ph>.</source>
          <target state="translated">Właściwość do wyczyszczenia jest określona przez <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyKey" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>A <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyKey&gt;</ph> identifies a read-only dependency property for property system operations.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyKey&gt;</ph> identyfikuje właściwość tylko do odczytu zależności dla operacji systemu właściwości.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>Classes that define read-only dependency properties should not expose this key with public access.</source>
          <target state="translated">Klasy, które definiują właściwości tylko do odczytu zależności nie powinny ujawniać tego klucza publicznego.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>A publicly exposed key would provide a public code pathway that negated the read-only character of the property, if methods such as <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph> could be called outside the class or assembly, referencing the key.</source>
          <target state="translated">Klucz publicznie ujawnionych zapewni ścieżki kodu publicznego, który zanegowane znak tylko do odczytu właściwości, jeśli metod, takich jak <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> lub <ph id="ph2">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph> może zostać wywołana poza klasę lub odwołanie do klucza zestawu.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>Clearing the property value by calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</source>
          <target state="translated">Wyczyszczenie wartości właściwości przez wywołanie metody <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> niekoniecznie daje właściwości zależności domyślną wartość, która została określona w metadanych właściwości zależności.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>Clearing the value only specifically clears whatever local value may have been applied.</source>
          <target state="translated">Wyczyszczenie wartości tylko w szczególności czyści niezależnie od wartości lokalnej zostały zastosowane.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>pierwszeństwo wartość właściwości zależności<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>Attempted to call <ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /&gt;</ph> on a sealed <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Nastąpiła próba wywołania <ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /&gt;</ph> w zapieczętowanym <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>The identifier for the dependency property to coerce.</source>
          <target state="translated">Identyfikator właściwości zależności, aby wymusić.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>Coerces the value of the specified dependency property.</source>
          <target state="translated">Przekształca wynik dane wartości właściwości określonej zależności.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>This is accomplished by invoking any <ph id="ph1">&lt;see cref="T:System.Windows.CoerceValueCallback" /&gt;</ph> function specified in property metadata for the dependency property as it exists on the calling <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Jest to osiągane przez wywoływanie żadnego <ph id="ph1">&lt;see cref="T:System.Windows.CoerceValueCallback" /&gt;</ph> funkcja określony w metadanych właściwości dla właściwości zależności, ponieważ znajduje się na wywołujący <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>In addition to being explicitly invoked through calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> for a dependency property is also invoked internally whenever the dependency property value is being re-evaluated by the <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> property system.</source>
          <target state="translated">Oprócz jawnie wywoływany za pośrednictwem wywołania <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> zależność właściwości jest również wywoływana wewnętrznie zawsze, gdy wartość właściwości zależności jest ponownie oceniane przez <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> właściwości systemu.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>When you invoke the <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> method, you are ultimately invoking the coerce value callback for the property that you specify.</source>
          <target state="translated">Gdy wywołanie <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> metody, możesz są ostatecznie wywoływania wywołania zwrotnego wartość coerce dla określonej właściwości.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>Typically you will invoke <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> only if you know that a coerce value callback exists, and if you know the callback's criteria for coercion.</source>
          <target state="translated">Zwykle wywoła <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> tylko, jeśli wiadomo, czy istnieje wartość coerce wywołania zwrotnego i znane kryteria koercja metodę wywołania zwrotnego.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>The most common scenario for calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> is within class handling or property change callbacks of related properties that influence each other's values in a dependent way.</source>
          <target state="translated">Najbardziej typowym scenariuszem dla wywołania <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> jest w obrębie klasy obsługi lub właściwość zmiany wywołania zwrotne powiązanych właściwości, które wpływają na wartości w sposób zależnych.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Callbacks and Validation<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>wywołania zwrotne właściwości zależności i sprawdzania poprawności<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)</ept>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>The following example calls <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> within a <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> implementation that is used as the <ph id="ph3">&lt;xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A&gt;</ph> for a different dependency properties on the same class.</source>
          <target state="translated">Następujące przykładowe wywołania <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> w <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> implementacji, które jest używane jako <ph id="ph3">&lt;xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A&gt;</ph> dla właściwości zależności inny, na tej samej klasy.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>This is a common pattern for introducing true value dependencies between dependency properties.</source>
          <target state="translated">Jest to wspólnego wzorca wprowadzenia wartości true zależności między właściwości zależności.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>The specified <ph id="ph1">&lt;paramref name="dp" /&gt;</ph> or its value were invalid or do not exist.</source>
          <target state="translated">Określony <ph id="ph1">&lt;paramref name="dp" /&gt;</ph> lub jego wartość były nieprawidłowe lub nie istnieją.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObjectType" /&gt;</ph> that wraps the <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> type of this instance.</source>
          <target state="translated">Pobiera <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObjectType" /&gt;</ph> który opakowuje <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> typu tego wystąpienia.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObjectType" /&gt;</ph> that wraps the <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> type of this instance.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObjectType" /&gt;</ph> który opakowuje <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> typu tego wystąpienia.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source>This property is useful if an object that is returned from a method has a return value type of <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> and you want to perform property system specific operations on it depending on its type.</source>
          <target state="translated">Ta właściwość jest przydatna, jeśli obiekt jest zwracany z metody ma typ wartości zwracanej <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> i chcesz przeprowadzić właściwości określonych operacji w systemie go w zależności od jego typu.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source>For example it is more efficient to call <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29&gt;</ph> using the <ph id="ph2">&lt;xref:System.Windows.DependencyObjectType&gt;</ph> rather than the <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> type.</source>
          <target state="translated">Na przykład jest bardziej wydajne, aby wywołać <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29&gt;</ph> przy użyciu <ph id="ph2">&lt;xref:System.Windows.DependencyObjectType&gt;</ph> zamiast <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> typu.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyObjectType&gt;</ph> facilitates faster lookup.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObjectType&gt;</ph> Umożliwia szybsze wyszukiwanie.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source>In the following pseudocode example, <ph id="ph1">`MySubClass`</ph> anticipates that additional derived classes might change the default value of the <ph id="ph2">`MyCustom`</ph> dependency property.</source>
          <target state="translated">W poniższym przykładzie pseudocode <ph id="ph1">`MySubClass`</ph> oszacowano, że dodatkowe klasy pochodne mogą zmienić wartość domyślną <ph id="ph2">`MyCustom`</ph> właściwości zależności.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source>The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <ph id="ph1">&lt;xref:System.Windows.DependencyObjectType&gt;</ph> value whenever that constructor is used as a derived class instantiator.</source>
          <target state="translated">Klasa implementuje konstruktora domyślnego, które można określić rzeczywistego klasy pochodnej dzięki wykorzystaniu polimorfizm <ph id="ph1">&lt;xref:System.Windows.DependencyObjectType&gt;</ph> wartość zawsze, gdy ten konstruktor jest używany jako instantiator klasy pochodnej.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> to compare to the current instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> Do porównania z bieżącym wystąpieniem.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>Determines whether a provided <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> is equivalent to the current <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Określa, czy podany <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> jest odpowiednikiem bieżącego <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two instances are the same; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli dwa wystąpienia są takie same; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>This implementation is reference equality only, and does not attempt to evaluate value equality of the contained properties.</source>
          <target state="translated">Ta implementacja jest tylko równości odwołań, a nie próbuje ocenić równości wartości zawartych w niej właściwości.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> overrides and then seals two basic <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> methods: <ph id="ph3">&lt;see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /&gt;</ph> and <ph id="ph4">&lt;see cref="M:System.Windows.DependencyObject.GetHashCode" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> zastąpienia, a następnie uszczelnienia dwóch basic <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> metody: <ph id="ph3">&lt;see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /&gt;</ph> i <ph id="ph4">&lt;see cref="M:System.Windows.DependencyObject.GetHashCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>The overrides call the <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> implementations, resulting in an object equality behavior.</source>
          <target state="translated">Wywołanie zastąpienia <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> implementacji, co powoduje zachowanie równość obiektu.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Te zastąpienia zamierzonego ma na celu zapobieganie próby Definiowanie równości wartości dla klas pochodnych <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>Value equalities for <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> will never be accurate because of the innate property value-changing capabilities of a <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> and its dependency properties.</source>
          <target state="translated">Wartość equalities dla <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> nigdy nie będą dokładne z powodu możliwości zmiany wartości właściwości zapewniające z <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> i jego właściwości zależności.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>This includes fundamental <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> features such as data binding and the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> property system.</source>
          <target state="translated">Dotyczy to również podstawowe <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> funkcje, takie jak powiązania danych i <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> właściwości systemu.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source>Gets a hash code for this <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Pobiera wartość skrótu dla tego <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source>A signed 32-bit integer hash code.</source>
          <target state="translated">Całkowita 32-bitowa wartość skrótu.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> overrides and then seals two <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> methods: <ph id="ph3">&lt;see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /&gt;</ph> and <ph id="ph4">&lt;see cref="M:System.Windows.DependencyObject.GetHashCode" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> zastąpienia, a następnie uszczelnienia dwa <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> metody: <ph id="ph3">&lt;see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /&gt;</ph> i <ph id="ph4">&lt;see cref="M:System.Windows.DependencyObject.GetHashCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source>The overrides call the <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> implementations, resulting in an object equality behavior.</source>
          <target state="translated">Wywołanie zastąpienia <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> implementacji, co powoduje zachowanie równość obiektu.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source>The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Te zastąpienia zamierzonego ma na celu zapobieganie próby Definiowanie równości wartości dla klas pochodnych <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source>Value equalities for <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> will never be accurate because of the innate property value-changing capabilities of a <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> and its dependency properties.</source>
          <target state="translated">Wartość equalities dla <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> nigdy nie będą dokładne z powodu możliwości zmiany wartości właściwości zapewniające z <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> i jego właściwości zależności.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source>This includes fundamental <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> features such as data binding and the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> property system.</source>
          <target state="translated">Dotyczy to również podstawowe <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> funkcje, takie jak powiązania danych i <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> właściwości systemu.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>Creates a specialized enumerator for determining which dependency properties have locally set values on this <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Tworzy specjalne modułu wyliczającego określania właściwości zależności, które ustawiono lokalnie wartości na tym <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>A specialized local value enumerator.</source>
          <target state="translated">Moduł wyliczający specjalne wartości lokalnej.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>A <bpt id="p1">*</bpt>local value<ept id="p1">*</ept> is any dependency property value that was set by <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph>, as opposed to other aspects of the property system.</source>
          <target state="translated">A <bpt id="p1">*</bpt>wartości lokalnej<ept id="p1">*</ept> jest dowolną wartością właściwości zależności, która została ustawiona przez <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph>, w przeciwieństwie do innych aspektów dla właściwości.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Windows.LocalValueEnumerator&gt;</ph> obtained by calling <ph id="ph2">&lt;xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt;</ph> can be used to enumerate properties that have a locally set value on a <ph id="ph3">&lt;xref:System.Windows.DependencyObject&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.LocalValueEnumerator&gt;</ph> Można uzyskać przez wywołanie <ph id="ph2">&lt;xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt;</ph> może służyć do wyliczenia właściwości, które mają lokalnie ustaw wartość na <ph id="ph3">&lt;xref:System.Windows.DependencyObject&gt;</ph> wystąpienia.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>Each such property is represented in the enumerator by a <ph id="ph1">&lt;xref:System.Windows.LocalValueEntry&gt;</ph> object, which has properties that reference the specific <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph> and its values.</source>
          <target state="translated">Każdej z tych właściwości jest reprezentowany przez moduł wyliczający <ph id="ph1">&lt;xref:System.Windows.LocalValueEntry&gt;</ph> obiektu, który ma właściwości, które odwołują się do konkretnych <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph> i jej wartości.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>This technique of enumerating over the locally set values can be used for optimization or for other handling of local values, such as to determine which property values of a <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> would change if they were cleared.</source>
          <target state="translated">Ta technika wyliczania za pośrednictwem lokalnie ustawiony wartości może służyć do optymalizacji lub innych obsługi wartości lokalnej, takich jak do określenia wartości właściwości z <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> zmieniłby, jeśli zostały one wyczyszczone.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>The returned <ph id="ph1">&lt;xref:System.Windows.LocalValueEnumerator&gt;</ph> might contain <ph id="ph2">&lt;xref:System.Windows.LocalValueEntry&gt;</ph> records for dependency properties that are read-only, or dependency properties where values are calculated by the property system.</source>
          <target state="translated">Zwrócona <ph id="ph1">&lt;xref:System.Windows.LocalValueEnumerator&gt;</ph> może zawierać <ph id="ph2">&lt;xref:System.Windows.LocalValueEntry&gt;</ph> rekordów dla właściwości zależności, które są tylko do odczytu lub właściwości zależności, których wartości są obliczane przez system właściwości.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>For example, a visual framework element that has an established width through layout will report a local value for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph>.</source>
          <target state="translated">Na przykład element visual framework, który ma ustaloną szerokość za pośrednictwem układu będzie zgłaszać wartości lokalnej dla <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>If you are getting local values in order to reset them, check the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt;</ph> value on the property identifier of each <ph id="ph2">&lt;xref:System.Windows.LocalValueEntry&gt;</ph> to verify that the <ph id="ph3">&lt;xref:System.Windows.DependencyProperty&gt;</ph> in question is not read-only.</source>
          <target state="translated">Aby zresetować je w przypadku uzyskiwania wartości lokalnej, sprawdź <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt;</ph> wartości na podstawie identyfikatora właściwości każdego <ph id="ph2">&lt;xref:System.Windows.LocalValueEntry&gt;</ph> do sprawdzenia, czy <ph id="ph3">&lt;xref:System.Windows.DependencyProperty&gt;</ph> zagrożona nie jest tylko do odczytu.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>The following example iterates all properties that have local values set on an object, then calls <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> to clear the values of each such property.</source>
          <target state="translated">Poniższy przykład wykonuje iterację wszystkich właściwości, które mają wartości ustawionej w obiekcie, następnie wywołuje <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> można wyczyścić wartości każdej z tych właściwości.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> identifier of the property to retrieve the value for.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> Identyfikator można pobrać wartości właściwości.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>Returns the current effective value of a dependency property on this instance of a <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Zwraca bieżącą wartość skuteczne właściwości zależności dla tego wystąpienia obiektu <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>Returns the current effective value.</source>
          <target state="translated">Zwraca bieżącą wartość skuteczne.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>The <bpt id="p1">*</bpt>effective value<ept id="p1">*</ept> is the value of the property that is returned by the property system to any caller that is requesting the value.</source>
          <target state="translated"><bpt id="p1">*</bpt>Wartość efektywna<ept id="p1">*</ept> jest wartością zwracaną przez system właściwości do każdego obiektu wywołującego, który żąda wartość właściwości.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>The effective value is the result of the property system having evaluated all the possible inputs that participate in the property system value precedence.</source>
          <target state="translated">Wartość efektywna jest wynikiem systemu właściwość o ocenie wszystkich możliwych danych wejściowych uczestniczących w pierwszeństwo wartość właściwości systemu.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>This includes coercion and animation.</source>
          <target state="translated">Obejmuje to koercja i animacji.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>pierwszeństwo wartość właściwości zależności<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>This method will never return <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>.</source>
          <target state="translated">Ta metoda zwróci dane nigdy nie <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> is a sentinel value for the property system that is used in various capacities internally and occasionally also exposed through coercion callbacks.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> Jest wartością wartownik systemu właściwości, który jest używany w różnych formach wewnętrznie i czasami również dostępne za pośrednictwem wywołania zwrotne wymuszenia.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>If you are not sure what the property's type should be, you can query the identifier of the requested dependency property to determine whether there is a more specific <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.PropertyType%2A&gt;</ph> that the return value can be converted to.</source>
          <target state="translated">Jeśli nie masz pewności, co powinna być typu właściwości, można zbadać identyfikatora właściwości zależności żądanych, aby ustalić, czy jest określony więcej <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.PropertyType%2A&gt;</ph> której można przekonwertować wartości zwracanej.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>The specified <ph id="ph1">&lt;paramref name="dp" /&gt;</ph> or its value was invalid, or the specified <ph id="ph2">&lt;paramref name="dp" /&gt;</ph> does not exist.</source>
          <target state="translated">Określony <ph id="ph1">&lt;paramref name="dp" /&gt;</ph> lub jego wartość jest nieprawidłowy lub określony <ph id="ph2">&lt;paramref name="dp" /&gt;</ph> nie istnieje.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> identifier of the property to invalidate.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> Identyfikator właściwości unieważnić.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>Re-evaluates the effective value for the specified dependency property</source>
          <target state="translated">Ponownie oblicza wartość efektywna dla właściwości zależności określony</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>When you call <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph>, any associated and applicable <ph id="ph2">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> functions registered for that dependency property might be invoked.</source>
          <target state="translated">Podczas wywoływania <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph>, wszystkie skojarzone i stosowane <ph id="ph2">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> lub <ph id="ph3">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> funkcje zarejestrowany dla tej właściwości zależności mogą wywołać.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> on a property that has its local value set will have no effect, because the local value takes precedence over other property system inputs, except for animations.</source>
          <target state="translated">Wywoływanie <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> dla właściwości, która ma lokalnego wartością ustawioną nie odniesie żadnego skutku, ponieważ wartość lokalnego mają pierwszeństwo przed innych danych wejściowych do systemu z właściwości, z wyjątkiem animacji.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>However, you could call <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph>, then call <ph id="ph2">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph>.</source>
          <target state="translated">Jednak można wywołać <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph>, następnie wywołaj <ph id="ph2">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>pierwszeństwo wartość właściwości zależności<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> is not necessarily applicable for many dependency property scenarios.</source>
          <target state="translated">Wywoływanie <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> nie mieć zastosowania w różnych scenariuszach właściwości zależności.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>If a dependency property becomes invalidated because of value changes in any of the constituents, the property system invalidates and re-evaluates the dependency property automatically.</source>
          <target state="translated">Jeśli właściwość zależności staje się unieważnionych z powodu zmiany wartości w jednym ze składników, system właściwości unieważnia i ponownie automatycznie sprawdza właściwości zależności.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>However, there are still some appropriate scenarios where <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> is useful.</source>
          <target state="translated">Jednak nadal istnieją odpowiednie sytuacje, gdy <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> przydaje się.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>In particular, you can use <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> inside the coerce value or property changed callback for a different dependency property.</source>
          <target state="translated">W szczególności można użyć <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> wewnątrz wartości coerce lub właściwości zmienić wywołania zwrotnego dla właściwości zależności inny.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>You can also use <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> to force re-evaluation of a binding against a data source that is not able to implement the recommended <ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> notification mechanism (perhaps if consuming data classes that cannot be derived from, or where the data is a static member).</source>
          <target state="translated">Można również użyć <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> Aby wymusić ponowną ocenę powiązanie względem źródła danych, który nie jest w stanie do zaimplementowania zalecanej <ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> mechanizm powiadomień (możliwe, że jeśli korzystanie z klas danych, która nie może dziedziczyć po lub gdy dane są statycznego element członkowski).</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>The following example calls <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> on a custom property, whenever properties that are involved in the invalidated property's calculations change.</source>
          <target state="translated">Następujące przykładowe wywołania <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> we właściwości niestandardowej, gdy właściwości, które są zaangażowane w obliczeniach nieważne właściwości zmienić.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>This is an alternative technique to calling the <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> method, because invalidating the property will also call any registered <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</ph>.</source>
          <target state="translated">Jest alternatywna metoda do wywołania <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> metody, ponieważ unieważnia właściwość również wywoła żadnych zarejestrowany <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.Windows.DependencyObject.IsSealed">
          <source>Gets a value that indicates whether this instance is currently sealed (read-only).</source>
          <target state="translated">Pobiera wartość wskazującą, czy to wystąpienie jest obecnie zapieczętowany (tylko do odczytu).</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.IsSealed">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this instance is sealed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli to wystąpienie jest zapieczętowany; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.IsSealed">
          <source>This value is set internally.</source>
          <target state="translated">Ta wartość jest ustawiana wewnętrznie.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</source>
          <target state="translated">Dane zdarzenia, który będzie zawierać identyfikator właściwości zależności zainteresowań, metadane właściwości dla typu i starej i nowej wartości.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked whenever the effective value of any dependency property on this <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> has been updated.</source>
          <target state="translated">Wywoływane, gdy wartość efektywna dowolnej właściwości zależności na tym <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> została zaktualizowana.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The specific dependency property that changed is reported in the event data.</source>
          <target state="translated">Właściwości określonych zależności, które zmienić jest zgłaszana w danych zdarzenia.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method is not intended to generally detect individual property changes or perform invalidations of properties on a per-case basis.</source>
          <target state="translated">Ta metoda nie ma zazwyczaj wykrycia zmiany indywidualne właściwości lub wykonać invalidations właściwości na poszczególnych przypadków.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> is instead intended for modifications of the general invalidation pattern, if certain information is known about wide classifications of properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> Zamiast tego jest przeznaczony dla modyfikacje wzorca unieważniania ogólne, jeśli znane jest niektórych informacji o klasyfikacjach szeroki właściwości.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>For example, changes in a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> might be changes in the value types of the <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph>, or might be subproperties, where the changes are within other <ph id="ph3">&lt;xref:System.Windows.Freezable&gt;</ph> references.</source>
          <target state="translated">Na przykład zmiany w <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> może być zmiany w typach wartości <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph>, lub może nie zawierać właściwości, której zmiany są w innych <ph id="ph3">&lt;xref:System.Windows.Freezable&gt;</ph> odwołania.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> override implementation of <ph id="ph2">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> uses internal information to determine whether the properties are subproperties, and provides appropriate base class logic for either case.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> Zastąpienia implementacja <ph id="ph2">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> używa wewnętrznego informacji do ustalenia, czy właściwości mają właściwości i udostępnia logikę odpowiedniej klasy podstawowej dla obu przypadkach.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> is potentially invoked many times during the life of an object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> potencjalnie jest wywołana wiele razy w okresie istnienia obiektu.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you can achieve better performance for the overall property system if you override the metadata of specific properties and then attach <ph id="ph1">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> functions for individual properties.</source>
          <target state="translated">W związku z tym można osiągnąć lepszą wydajność systemu ogólne właściwości, jeśli Zastępowanie metadanych określonych właściwości, a następnie dołącz <ph id="ph1">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> lub <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> funkcje dla poszczególnych właściwości.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>However, you would use this method if a <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</source>
          <target state="translated">Jednak czy użyć tej metody, jeśli <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> obejmuje znaczących właściwości zależności powiązanych wartości, lub jeśli zawiera logikę, takich jak zachowanie renderowania, który musi zostać uruchomiony ponownie dla kilku powiązanych przypadków invalidations właściwości.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Always call the base implementation.</source>
          <target state="translated">Zawsze wywoływać implementację podstawową.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Failure to do this will significantly disable the entire <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> property system, causing incorrect values to be reported.</source>
          <target state="translated">Błąd w tym celu znacznie spowoduje wyłączenie całą <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> właściwości systemu, powoduje należy podać niepoprawne wartości.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> identifier of the property to retrieve the value for.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> Identyfikator można pobrać wartości właściwości.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>Returns the local value of a dependency property, if it exists.</source>
          <target state="translated">Zwraca wartość lokalnego właściwości zależności, jeśli istnieje.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>Returns the local value, or returns the sentinel value <ph id="ph1">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph> if no local value is set.</source>
          <target state="translated">Zwraca wartość lokalnego lub zwraca wartość wartownik <ph id="ph1">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph> przypadku nie wartości lokalnego.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>You should use <ph id="ph1">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> for most typical "get" operations for a dependency property.</source>
          <target state="translated">Należy używać <ph id="ph1">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> najbardziej typowych operacji "get" dla właściwości zależności.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyObject.ReadLocalValue%2A&gt;</ph> does not return the effective value for a variety of circumstances where the value was not locally set.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObject.ReadLocalValue%2A&gt;</ph> Zwraca wartość efektywna dla różnych okolicznościach w której wartość nie lokalnie ustawiono.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>Values that are set by styles, themes, templates, the default value from metadata, or property value inheritance are not considered to be local values.</source>
          <target state="translated">Wartości, które są ustawiane przez style, kompozycje i szablony, wartością domyślną z metadanych lub dziedziczenie wartość właściwości nie są uważane można wartości lokalnej.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>However, bindings and other expressions are considered to be local values, after they have been evaluated.</source>
          <target state="translated">Jednak powiązania i inne wyrażenia są uważane wartości lokalnego po zostały ocenione.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>When no local value is set, this method returns <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>.</source>
          <target state="translated">Jeśli ustawiono nie wartości lokalnej, ta metoda zwraca <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>If the returned value is other than <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>, you can query the metadata of the requested dependency property to determine whether there is a more specific type that the return value can be converted to.</source>
          <target state="translated">Jeśli zwrócona wartość jest inny niż <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>, możesz zbadać metadane właściwości żądanego zależności, aby ustalić, czy jest więcej określonego typu, który można przekonwertować na wartość zwracaną.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source>The identifier of the dependency property to set.</source>
          <target state="translated">Identyfikator właściwości zależności do ustawienia.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source>The new local value.</source>
          <target state="translated">Nowa wartość lokalnego.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source>Sets the value of a dependency property without changing its value source.</source>
          <target state="translated">Ustawia wartości właściwości zależności nie zmieniając wartość źródła.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source>This method is used by a component that programmatically sets the value of one of its own properties without disabling an application's declared use of the property.</source>
          <target state="translated">Ta metoda jest używana przez składnik programowo ustawia wartości jednego z jego własnej właściwości bez konieczności wyłączania aplikacji użyj zadeklarowane właściwości.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetCurrentValue%2A&gt;</ph> method changes the effective value of the property, but existing triggers, data bindings, and styles will continue to work.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetCurrentValue%2A&gt;</ph> Metoda zmienia wartość powiązania danych właściwości, ale istniejące wyzwalacze i style będą nadal działać.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source>Attempted to modify a read-only dependency property, or a property on a sealed <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Podjęto próbę modyfikacji właściwości zależności tylko do odczytu lub właściwość w zapieczętowanym <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> was not the correct type as registered for the <ph id="ph2">&lt;paramref name="dp" /&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> nie ma poprawnego typu jest zarejestrowany dla <ph id="ph2">&lt;paramref name="dp" /&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyObject">
          <source>Sets the local value of a dependency property.</source>
          <target state="translated">Ustawia wartość lokalnego właściwości zależności.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>The identifier of the dependency property to set.</source>
          <target state="translated">Identyfikator właściwości zależności do ustawienia.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>The new local value.</source>
          <target state="translated">Nowa wartość lokalnego.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>Sets the local value of a dependency property, specified by its dependency property identifier.</source>
          <target state="translated">Ustawia wartość lokalnego właściwości zależności, określony przez jego identyfikatora właściwości zależności.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</source>
          <target state="translated">Jeśli podany typ niezgodny z typem, który jest zadeklarowana dla właściwości zależności, ponieważ pierwotnie został zarejestrowany, jest zwracany wyjątek.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>The <ph id="ph1">`value`</ph> parameter should always be provided as the appropriate type.</source>
          <target state="translated"><ph id="ph1">`value`</ph> Zawsze należy podawać parametru jako odpowiedniego typu.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>The exception conditions are potentially influenced by the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ValidateValueCallback%2A&gt;</ph> callback that exists on the dependency property identifier of the dependency property being set.</source>
          <target state="translated">Potencjalnie wpływało warunków wyjątków <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ValidateValueCallback%2A&gt;</ph> wywołania zwrotnego, która istnieje na podstawie identyfikatora właściwości zależności ustawiania właściwości zależności.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>Otherwise, the value provided might be failing general type-checking conditions (for example, passing a string when the native type is Double).</source>
          <target state="translated">W przeciwnym razie wartość podana może awarii ogólnych warunków Sprawdzanie typu (np. przekazywanie ciąg, gdy typ macierzysty jest o podwójnej precyzji).</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>Attempted to modify a read-only dependency property, or a property on a sealed <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Podjęto próbę modyfikacji właściwości zależności tylko do odczytu lub właściwość w zapieczętowanym <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> was not the correct type as registered for the <ph id="ph2">&lt;paramref name="dp" /&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> nie ma poprawnego typu jest zarejestrowany dla <ph id="ph2">&lt;paramref name="dp" /&gt;</ph> właściwości.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyKey" /&gt;</ph> identifier of the property to set.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyKey" /&gt;</ph> Identyfikator właściwości do ustawienia.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>The new local value.</source>
          <target state="translated">Nowa wartość lokalnego.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>Sets the local value of a read-only dependency property, specified by the <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyKey" /&gt;</ph> identifier of the dependency property.</source>
          <target state="translated">Ustawia wartość lokalnego właściwości zależności tylko do odczytu, określona przez <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyKey" /&gt;</ph> identyfikatora właściwości zależności.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>This signature is generally used when you set values for read-only dependency properties that are defined by your custom classes.</source>
          <target state="translated">Ta sygnatura jest zazwyczaj używana w przypadku ustawienia wartości dla właściwości tylko do odczytu zależności, które są zdefiniowane przez użytkownika klas niestandardowych.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>Generally, <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph> is called only from the type that registered that dependency property, which implements the internal logic that provides the determined value for the dependency property.</source>
          <target state="translated">Ogólnie rzecz biorąc <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph> jest wywoływane tylko z typ zarejestrowanych tej właściwości zależności, która implementuje wewnętrzny logiki, która zawiera wartości określone dla właściwości zależności.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Read-Only Dependency Properties<ept id="p1">](~/docs/framework/wpf/advanced/read-only-dependency-properties.md)</ept>.</source>
          <target state="translated">Aby uzyskać więcej informacji, zobacz <bpt id="p1">[</bpt>tylko do odczytu właściwości zależności<ept id="p1">](~/docs/framework/wpf/advanced/read-only-dependency-properties.md)</ept>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</source>
          <target state="translated">Jeśli podany typ niezgodny z typem, który jest zadeklarowana dla właściwości zależności, ponieważ pierwotnie został zarejestrowany, jest zwracany wyjątek.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>The <ph id="ph1">`value`</ph> parameter should always be provided as the appropriate type.</source>
          <target state="translated"><ph id="ph1">`value`</ph> Zawsze należy podawać parametru jako odpowiedniego typu.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>The exception conditions are potentially influenced by the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ValidateValueCallback%2A&gt;</ph> callback that exists on the dependency property identifier of the dependency property being set.</source>
          <target state="translated">Potencjalnie wpływało warunków wyjątków <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ValidateValueCallback%2A&gt;</ph> wywołania zwrotnego, która istnieje na podstawie identyfikatora właściwości zależności ustawiania właściwości zależności.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>The following example defines a read-only dependency property, along with a <ph id="ph1">`public static readonly`</ph> <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph> that provides necessary read-only exposure to property consumers, and the get accessor for the <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> wrapper.</source>
          <target state="translated">W poniższym przykładzie zdefiniowano właściwość tylko do odczytu zależności, wraz z <ph id="ph1">`public static readonly`</ph> <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph> zapewnia niezbędne uwidocznienia tylko do odczytu dla konsumentów właściwości i metody dostępu get dla <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> otoki.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
          <source>The identifier for the dependency property that should be serialized.</source>
          <target state="translated">Identyfikator właściwości zależności, które powinny być serializowane.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
          <source>Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</source>
          <target state="translated">Zwraca wartość wskazującą, czy procesy serializacji powinny serializacji wartości dla właściwości zależności podana.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the dependency property that is supplied should be value-serialized; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli właściwość zależności, która jest dostarczana powinny być serializowane wartości; w przeciwnym razie <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
          <source>The default implementation returns <ph id="ph1">`true`</ph> for all cases in which a dependency property had a local value established on the <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</source>
          <target state="translated">Domyślna implementacja zwraca <ph id="ph1">`true`</ph> we wszystkich przypadkach, w których właściwość zależności miał wartość lokalnego w <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
          <source>Overrides for this method might handle specific dependency properties differently.</source>
          <target state="translated">Zastąpienia dla tej metody może obsługiwać właściwości zależności określone inaczej.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>