<Type Name="WeakEventManager+ListenerList" FullName="System.Windows.WeakEventManager+ListenerList">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9f0f2be98debc822496ae0fb7a0b36b79ece2165" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30715469" />
  </Metadata>
  <TypeSignature Language="C#" Value="protected class WeakEventManager.ListenerList" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi beforefieldinit WeakEventManager/ListenerList extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager.ListenerList" />
  <TypeSignature Language="VB.NET" Value="Protected Class WeakEventManager.ListenerList" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="7ef20-101">Zawiera listę wbudowanej kolekcji do przechowywania odbiorników dla <see cref="T:System.Windows.WeakEventManager" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7ef20-101">Provides a built-in collection list for storing listeners for a <see cref="T:System.Windows.WeakEventManager" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ef20-102">Mimo że ta lista zawiera elementy członkowskie, które przypominają tymi zdefiniowanymi przez <xref:System.Collections.IList> i <xref:System.Collections.ICollection>i podaj podobne funkcje, w tym implementuje klasy żadna z tych interfejsów.</span><span class="sxs-lookup"><span data-stu-id="7ef20-102">Although this list contains members that resemble those defined by <xref:System.Collections.IList> and <xref:System.Collections.ICollection>, and provide similar functionality, this class implements neither of those interfaces.</span></span>  
  
 <span data-ttu-id="7ef20-103">Większość <xref:System.Windows.WeakEventManager> klasy pochodne nie trzeba używać żadnych elementów członkowskich na <xref:System.Windows.WeakEventManager.ListenerList>.</span><span class="sxs-lookup"><span data-stu-id="7ef20-103">Most <xref:System.Windows.WeakEventManager> derived classes do not need to use any members on <xref:System.Windows.WeakEventManager.ListenerList>.</span></span> <span data-ttu-id="7ef20-104"><xref:System.Windows.WeakEventManager> Metody <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> i <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> Użyj wartości domyślnej <xref:System.Windows.WeakEventManager.ListenerList> wewnętrznie jedną listę dla każdego `source`.</span><span class="sxs-lookup"><span data-stu-id="7ef20-104">The <xref:System.Windows.WeakEventManager> methods <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> use a default <xref:System.Windows.WeakEventManager.ListenerList> internally, one list for each `source`.</span></span>  
  
 <span data-ttu-id="7ef20-105">Należy wywołać <xref:System.Windows.WeakEventManager.ListenerList> metody Jeśli Twoje <xref:System.Windows.WeakEventManager> klasa obsługuje wiele listy dla tej samej kombinacji źródło zdarzenia przy każdym listy utworzone konto w różnych warunkach zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="7ef20-105">You only need to call <xref:System.Windows.WeakEventManager.ListenerList> methods if your <xref:System.Windows.WeakEventManager> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event.</span></span> <span data-ttu-id="7ef20-106">W takim przypadku nie należy używać <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> i <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> i czy zamiast tego wdrożenie `AddListener` lub `RemoveListener` działanie odbiorników w tylko jednym z listy wewnętrznych odbiornika, zwykle na podstawie parametru dodawanego do `AddListener` lub `RemoveListener`.</span><span class="sxs-lookup"><span data-stu-id="7ef20-106">In this case, you would not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> and would instead implement `AddListener` or `RemoveListener` to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to `AddListener` or `RemoveListener`.</span></span> <span data-ttu-id="7ef20-107">Ponadto implementację programu obsługi, która otrzymuje nieprzetworzone zdarzenia nie można wywołać po prostu <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; należy zamiast tego informacje o szczegóły zdarzenia i dostarczyć zdarzenie tylko do odpowiedniej listy przy użyciu <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span><span class="sxs-lookup"><span data-stu-id="7ef20-107">Also, the handler implementation that receives the raw event cannot simply call <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 <span data-ttu-id="7ef20-108">Różnych metod <xref:System.Windows.WeakEventManager.ListenerList> są dostarczane, dzięki czemu można pracować z listy wewnętrznych i, dzięki czemu można zapobiec modyfikacji listy podczas dostarczania rzeczywistego zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="7ef20-108">The various methods of <xref:System.Windows.WeakEventManager.ListenerList> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event.</span></span>  
  
 <span data-ttu-id="7ef20-109">Przykład klasy, która jest używana ta metoda wdrażania jest <xref:System.ComponentModel.PropertyChangedEventManager>, który obsługuje oddzielne odbiornika wymieniono w `PropertyChanged` oparte na które zmiany właściwości.</span><span class="sxs-lookup"><span data-stu-id="7ef20-109">An example class that used this implementation technique is <xref:System.ComponentModel.PropertyChangedEventManager>, which maintains separate listener lists for `PropertyChanged` based on which property changed.</span></span>  
  
<a name="xamlTextUsage_ListenerList"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="7ef20-110">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="7ef20-110">XAML Text Usage</span></span>  
 <span data-ttu-id="7ef20-111">Nie można użyć tej klasy w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="7ef20-111">You cannot use this class in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7ef20-112">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.WeakEventManager.ListenerList" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-112">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7ef20-113">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.WeakEventManager.ListenerList" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-113">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList(int capacity);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="7ef20-114">Liczba elementów, które powinny być przydzielone na początkowej liście.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-114">The number of items that should be allocated in the initial list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ef20-115">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.WeakEventManager.ListenerList" /> klasy o określonej pojemności początkowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-115">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class with the specified initial capacity.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::IWeakEventListener ^ listener);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener">
          <span data-ttu-id="7ef20-116">Odbiornik elementu do dodania do <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-116">The listener element to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ef20-117">Dodaje <see cref="T:System.Windows.IWeakEventListener" /> do obiektu <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-117">Adds a <see cref="T:System.Windows.IWeakEventListener" /> object to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ef20-118">Podany obiekt odbiornika powinny być <xref:System.Windows.DependencyObject> implementującej <xref:System.Windows.IWeakEventListener> interfejsu i dlatego działa <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementacji.</span><span class="sxs-lookup"><span data-stu-id="7ef20-118">The object provided as listener should be a <xref:System.Windows.DependencyObject> that implements the <xref:System.Windows.IWeakEventListener> interface and therefore has a working <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementation.</span></span>  
  
 <span data-ttu-id="7ef20-119">Zawsze należy wywołać <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> przed zmianą wyświetlanie zawartości.</span><span class="sxs-lookup"><span data-stu-id="7ef20-119">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="7ef20-120">W przeciwnym razie lista może być w trakcie dostarczania zdarzeń i w związku z tym oryginalny jest zablokowany.</span><span class="sxs-lookup"><span data-stu-id="7ef20-120">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="7ef20-121">Wywoływanie <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> zmiany danych wejściowych `list` za klon, aby Twoje <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> wywołania mogą nadal działać w klonowania.</span><span class="sxs-lookup"><span data-stu-id="7ef20-121">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> call can still work on the clone.</span></span> <span data-ttu-id="7ef20-122">Jeśli <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> zwraca `true`, konieczne może być aktualizacja prywatnej odwołań do listy Obsługa w innych obszarach kodu.</span><span class="sxs-lookup"><span data-stu-id="7ef20-122">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="handler">
          <span data-ttu-id="7ef20-123">Program obsługi zdarzeń, aby dodać do <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-123">The event handler to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ef20-124">Dodaje program obsługi zdarzeń do <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-124">Adds an event handler to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUse">
      <MemberSignature Language="C#" Value="public bool BeginUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool BeginUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginUse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BeginUse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7ef20-125">Deklaruje listy będzie używana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-125">Declares the list to be in use.</span>
          </span>
          <span data-ttu-id="7ef20-126">Zapobiega to zmian bezpośrednio do listy podczas iteracji elementów listy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-126">This prevents direct changes to the list during iterations of the list items.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ef20-127">
            <see langword="true" /> Jeśli lista została już zadeklarowana jest używany; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-127">
              <see langword="true" /> if the list was already declared to be in use; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ef20-128">A <xref:System.Windows.WeakEventManager> powinny wywoływać implementację <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> przed iteracja na liście, aby dostarczyć zdarzenie, aby odbiorniki i powinna wywołać <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> po jej zakończeniu.</span><span class="sxs-lookup"><span data-stu-id="7ef20-128">A <xref:System.Windows.WeakEventManager> implementation should call <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> before iterating through the list to deliver an event to the listeners, and should call <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> when it is done.</span></span> <span data-ttu-id="7ef20-129">Uniemożliwia to modyfikowanie listy w trakcie iteracji w celu dostarczania zdarzeń innego wywołującego.</span><span class="sxs-lookup"><span data-stu-id="7ef20-129">This prevents another caller from modifying the list while the iteration for purposes of event delivery is in progress.</span></span> <span data-ttu-id="7ef20-130">Jeśli lista jest zmodyfikowany w tym czasie, został sklonowany listy.</span><span class="sxs-lookup"><span data-stu-id="7ef20-130">If the list is modified during this time, then the list is cloned.</span></span> <span data-ttu-id="7ef20-131">Jeśli na liście zostanie sklonowany, następnie <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> zwraca `true`, co oznacza, że pominięto Ostatnia zmiana odbiornika w ostatniej dostawy.</span><span class="sxs-lookup"><span data-stu-id="7ef20-131">If the list is cloned, then <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, which means that you have missed a recent listener change in the last delivery.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Windows.WeakEventManager.ListenerList Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As WeakEventManager.ListenerList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7ef20-132">Tworzy modyfikowalną klonu tego <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-132">Creates a modifiable clone of this <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ef20-133">Można modyfikować klonowania bieżącego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-133">A modifiable clone of the current object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="protected void CopyTo (System.Windows.WeakEventManager.ListenerList newList);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CopyTo(class System.Windows.WeakEventManager/ListenerList newList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CopyTo (newList As WeakEventManager.ListenerList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newList" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="newList">
          <span data-ttu-id="7ef20-134">Obiekt przeznaczony do skopiowania do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-134">The object to copy to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ef20-135">Kopiuje bieżącego <see cref="T:System.Windows.WeakEventManager.ListenerList" /> do określonego <see cref="T:System.Windows.WeakEventManager.ListenerList" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-135">Copies the current <see cref="T:System.Windows.WeakEventManager.ListenerList" /> to the specified <see cref="T:System.Windows.WeakEventManager.ListenerList" /></span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7ef20-136">Pobiera liczbę elementów zawartych w <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-136">Gets the number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ef20-137">Liczba elementów zawartych w <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-137">The number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="public virtual bool DeliverEvent (object sender, EventArgs args, Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeliverEvent(object sender, class System.EventArgs args, class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeliverEvent (sender As Object, args As EventArgs, managerType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool DeliverEvent(System::Object ^ sender, EventArgs ^ args, Type ^ managerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="sender">
          <span data-ttu-id="7ef20-138">Obiekt, który wywołał zdarzenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-138">The object that raised the event.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="7ef20-139">Obiekt zawierający dane zdarzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-139">An object that contains the event data.</span>
          </span>
        </param>
        <param name="managerType">
          <span data-ttu-id="7ef20-140">Typ <see cref="T:System.Windows.WeakEventManager" /> wywołuje tę metodę, która.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-140">The type of the <see cref="T:System.Windows.WeakEventManager" /> that calls this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ef20-141">Dostarcza zdarzenia zarządzany każdego odbiornika w <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-141">Delivers the event being managed to each listener in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ef20-142">
            <see langword="true" /> Jeśli występują odbiorników w <see cref="T:System.Windows.WeakEventManager.ListenerList" /> odwoływać się do obiektu, który został odzyskiwanie zebranych; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-142">
              <see langword="true" /> if any of the listeners in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> refer to an object that has been garbage collected; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.WeakEventManager.ListenerList Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.WeakEventManager/ListenerList Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As WeakEventManager.ListenerList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7ef20-143">Pobiera wartość, która reprezentuje pustą listę na potrzeby porównania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-143">Gets a value that represents an empty list for purposes of comparisons.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ef20-144">Reprezentacja lista jest pusta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-144">The empty list representation.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUse">
      <MemberSignature Language="C#" Value="public void EndUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUse();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7ef20-145">Odblokowuje blokadę inicjowane przez <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-145">Unlocks the locked state initiated by <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7ef20-146">Pobiera wartość, która deklaruje czy to <see cref="T:System.Windows.WeakEventManager.ListenerList" /> jest pusta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-146">Gets a value that declares whether this <see cref="T:System.Windows.WeakEventManager.ListenerList" /> is empty.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ef20-147">
            <see langword="true" /> Jeśli lista jest pusta. w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-147">
              <see langword="true" /> if the list is empty; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ef20-148">Ta metoda jest odpowiednikiem sprawdzanie, czy <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> wynosi zero, a nie sprawdza, czy dowolnego z odwołań na liście są teraz przestarzałe.</span><span class="sxs-lookup"><span data-stu-id="7ef20-148">This method is equivalent to checking whether the <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> is zero, and does not check whether any of the references in the list are now stale.</span></span> <span data-ttu-id="7ef20-149">Jeśli chcesz mieć pewność, że wszystkie odwołania są nadal ważne, należy wywołać <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> wcześniejszy niż sprawdzanie stanu pusta lista.</span><span class="sxs-lookup"><span data-stu-id="7ef20-149">If you want to assure that all references are still valid, call <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> just prior to checking the empty status of the list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.IWeakEventListener this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IWeakEventListener Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As IWeakEventListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IWeakEventListener ^ default[int] { System::Windows::IWeakEventListener ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IWeakEventListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="7ef20-150">Liczony od zera Indeks odbiornika na liście.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-150">The zero-based index of the listener in the list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ef20-151">Pobiera lub ustawia element określony odbiornik w <see cref="T:System.Windows.WeakEventManager.ListenerList" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-151">Gets or sets a specific listener item in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> .</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ef20-152">Element w tym indeksu lub odwołaniem null, jeśli nie ma elementu o indeksie tego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-152">The item at that index, or a null reference if no item was at that index.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForWriting">
      <MemberSignature Language="C#" Value="public static bool PrepareForWriting (ref System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool PrepareForWriting(class System.Windows.WeakEventManager/ListenerList&amp; list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PrepareForWriting (ByRef list As WeakEventManager.ListenerList) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool PrepareForWriting(System::Windows::WeakEventManager::ListenerList ^ % list);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="list">
          <span data-ttu-id="7ef20-153">Na liście, aby sprawdzić stanu i potencjalnie skopiować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-153">The list to check for use state and potentially copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ef20-154">Sprawdza, czy podana lista jest w użyciu, a jeśli tak, ustawia parametru odwołania listy kopię tej listy, a nie oryginału.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-154">Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ef20-155">
            <see langword="true" /> Jeśli dostarczona lista był używany w połączeniu i w związku z tym <paramref name="list" /> odwołania do parametru resetowania jako kopię.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-155">
              <see langword="true" /> if the provided list was in use at the time of call and therefore the <paramref name="list" /> parameter reference was reset to be a copy.</span>
          </span>
          <span data-ttu-id="7ef20-156">
            <see langword="false" /> Jeśli dostarczona lista nie jest w użyciu, w którym to przypadku <paramref name="list" /> odwołania do parametru pozostanie niezmieniona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-156">
              <see langword="false" /> if the provided list was not in use, in which case the <paramref name="list" /> parameter reference remains unaltered.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ef20-157">Jeśli w danej listy jest w użyciu (co oznacza, że zdarzenie jest obecnie dostarczana), wywołanie tej metody spowoduje zastąpienie danych wejściowych `list` klonu.</span><span class="sxs-lookup"><span data-stu-id="7ef20-157">If the given list is in use (which means an event is currently being delivered), calling this method will replace the input `list` with a clone.</span></span>  <span data-ttu-id="7ef20-158">Istniejących użytkowników zostanie zakończone, dostarczając zdarzenia do oryginalnej listy bez zakłóceń ze zmian na nową listę.</span><span class="sxs-lookup"><span data-stu-id="7ef20-158">The existing users will finish delivering the event to the original list, without interference from changes to the new list.</span></span>  
  
 <span data-ttu-id="7ef20-159">Jeśli metoda zwraca `true`, wywołań może chcesz wstawić nową listę w ich własnych struktur danych, ponieważ oznacza to możliwość, że dostarczona lista nie jest już aktualny.</span><span class="sxs-lookup"><span data-stu-id="7ef20-159">If the method returns `true`, callers may want to insert the new list in their own data structures, since this indicates the possibility that the provided list is no longer current.</span></span>  
  
 <span data-ttu-id="7ef20-160">Ta metoda wywołuje <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> wewnętrznie, a następnie natychmiast wywołuje <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span><span class="sxs-lookup"><span data-stu-id="7ef20-160">This method calls <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> internally and then immediately calls <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span> <span data-ttu-id="7ef20-161">W związku z tym wywołaniem <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> czy sam nie wprowadza blokady na liście.</span><span class="sxs-lookup"><span data-stu-id="7ef20-161">Therefore calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> does not itself introduce a lock on the list.</span></span> <span data-ttu-id="7ef20-162">Nawet kopiowanie klonu odbywa się jako dodatkowej operacji po wywołaniu <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span><span class="sxs-lookup"><span data-stu-id="7ef20-162">Even the clone copy is done as a secondary operation after calling <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public bool Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Function Purge () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Purge();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7ef20-163">Usuwa wszystkie wpisy z listy, gdzie podstawowej docelowego odwołania to odwołanie o wartości null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-163">Removes all entries from the list where the underlying reference target is a null reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ef20-164">Zwraca <see langword="true" /> gdyby wpisów usunięty; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-164">Returns <see langword="true" /> if any entries were purged; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::IWeakEventListener ^ listener);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener">
          <span data-ttu-id="7ef20-165">Element do usunięcia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-165">The item to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ef20-166">Usuwa pierwsze wystąpienie elementu odbiornika z <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-166">Removes the first occurrence of a listener item from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ef20-167">Zawsze należy wywołać <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> przed zmianą wyświetlanie zawartości.</span><span class="sxs-lookup"><span data-stu-id="7ef20-167">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="7ef20-168">W przeciwnym razie lista może być w trakcie dostarczania zdarzeń i w związku z tym oryginalny jest zablokowany.</span><span class="sxs-lookup"><span data-stu-id="7ef20-168">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="7ef20-169">Wywoływanie <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> zmiany danych wejściowych `list` za klon, aby Twoje <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> wywołania mogą nadal działać w klonowania.</span><span class="sxs-lookup"><span data-stu-id="7ef20-169">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> call can still work on the clone.</span></span> <span data-ttu-id="7ef20-170">Jeśli <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> zwraca `true`, konieczne może być aktualizacja prywatnej odwołań do listy Obsługa w innych obszarach kodu.</span><span class="sxs-lookup"><span data-stu-id="7ef20-170">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveHandler(Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="handler">
          <span data-ttu-id="7ef20-171">Program obsługi zdarzeń do usunięcia z <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-171">The event handler to remove from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ef20-172">Usuwa program obsługi zdarzeń z <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ef20-172">Removes an event handler from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>