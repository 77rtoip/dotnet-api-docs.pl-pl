<Type Name="WeakEventManager+ListenerList" FullName="System.Windows.WeakEventManager+ListenerList">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1491302f301779d2d4fb6aa34fa4e04a2352961f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69432619" /></Metadata><TypeSignature Language="C#" Value="protected class WeakEventManager.ListenerList" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi beforefieldinit WeakEventManager/ListenerList extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager.ListenerList" />
  <TypeSignature Language="VB.NET" Value="Protected Class WeakEventManager.ListenerList" />
  <TypeSignature Language="C++ CLI" Value="protected: ref class WeakEventManager::ListenerList" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3a8d2-101">Zawiera wbudowaną listę kolekcji do przechowywania odbiorników dla programu <see cref="T:System.Windows.WeakEventManager" />.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-101">Provides a built-in collection list for storing listeners for a <see cref="T:System.Windows.WeakEventManager" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a8d2-102">Mimo że ta lista zawiera elementy członkowskie, które przypominają <xref:System.Collections.IList> te <xref:System.Collections.ICollection>zdefiniowane przez program i i zapewniają podobną funkcjonalność, ta klasa implementuje żaden z tych interfejsów.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-102">Although this list contains members that resemble those defined by <xref:System.Collections.IList> and <xref:System.Collections.ICollection>, and provide similar functionality, this class implements neither of those interfaces.</span></span>  
  
 <span data-ttu-id="3a8d2-103">Większość <xref:System.Windows.WeakEventManager> klas pochodnych nie musi używać żadnych elementów członkowskich w <xref:System.Windows.WeakEventManager.ListenerList>.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-103">Most <xref:System.Windows.WeakEventManager> derived classes do not need to use any members on <xref:System.Windows.WeakEventManager.ListenerList>.</span></span> <span data-ttu-id="3a8d2-104"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> `source`Metody i używają domyślnej<xref:System.Windows.WeakEventManager.ListenerList> wewnętrznej, jednej listy dla każdej z nich. <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> <xref:System.Windows.WeakEventManager></span><span class="sxs-lookup"><span data-stu-id="3a8d2-104">The <xref:System.Windows.WeakEventManager> methods <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> use a default <xref:System.Windows.WeakEventManager.ListenerList> internally, one list for each `source`.</span></span>  
  
 <span data-ttu-id="3a8d2-105">Musisz wywołać <xref:System.Windows.WeakEventManager.ListenerList> metody tylko wtedy, <xref:System.Windows.WeakEventManager> gdy Klasa utrzymuje wiele list dla tej samej kombinacji źródła zdarzeń, z każdą listą utworzoną w celu uwzględnienia różnych warunków zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-105">You only need to call <xref:System.Windows.WeakEventManager.ListenerList> methods if your <xref:System.Windows.WeakEventManager> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event.</span></span> <span data-ttu-id="3a8d2-106">W tym przypadku nie należy używać <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> i <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> i zamiast tego zaimplementować `AddListener` lub `RemoveListener` do działania w przypadku odbiorników w jednej z wewnętrznych list odbiorników, zazwyczaj na podstawie parametru dodawanego do `AddListener` lub `RemoveListener`.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-106">In this case, you would not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> and would instead implement `AddListener` or `RemoveListener` to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to `AddListener` or `RemoveListener`.</span></span> <span data-ttu-id="3a8d2-107">Ponadto implementacja programu obsługi, która odbiera nieprzetworzone zdarzenie, nie może <xref:System.Windows.WeakEventManager.DeliverEvent%2A>po prostu wywołać. należy zamiast tego śledzić szczegóły zdarzenia i dostarczać zdarzenie tylko do odpowiedniej listy przy użyciu. <xref:System.Windows.WeakEventManager.DeliverEventToList%2A></span><span class="sxs-lookup"><span data-stu-id="3a8d2-107">Also, the handler implementation that receives the raw event cannot simply call <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 <span data-ttu-id="3a8d2-108">Różne metody <xref:System.Windows.WeakEventManager.ListenerList> są udostępniane w taki sposób, aby można było korzystać z list wewnętrznych i aby zapobiec modyfikacji listy podczas rzeczywistej dostawy zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-108">The various methods of <xref:System.Windows.WeakEventManager.ListenerList> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event.</span></span>  
  
 <span data-ttu-id="3a8d2-109">Przykładową klasą, która korzysta z tej <xref:System.ComponentModel.PropertyChangedEventManager>techniki implementacji, jest, która obsługuje `PropertyChanged` oddzielne listy odbiorników na podstawie zmiany właściwości.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-109">An example class that used this implementation technique is <xref:System.ComponentModel.PropertyChangedEventManager>, which maintains separate listener lists for `PropertyChanged` based on which property changed.</span></span>  
  
<a name="xamlTextUsage_ListenerList"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="3a8d2-110">Użycie tekstu w języku XAML</span><span class="sxs-lookup"><span data-stu-id="3a8d2-110">XAML Text Usage</span></span>  
 <span data-ttu-id="3a8d2-111">Nie można użyć tej klasy w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="3a8d2-111">You cannot use this class in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a8d2-112">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.WeakEventManager.ListenerList" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-112">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a8d2-113">Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.WeakEventManager.ListenerList" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-113">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Windows.WeakEventManager.ListenerList : int -&gt; System.Windows.WeakEventManager.ListenerList" Usage="new System.Windows.WeakEventManager.ListenerList capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="3a8d2-114">Liczba elementów, które powinny być przydzieloną na liście początkowej.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-114">The number of items that should be allocated in the initial list.</span></span></param>
        <summary><span data-ttu-id="3a8d2-115">Inicjuje nowe wystąpienie <see cref="T:System.Windows.WeakEventManager.ListenerList" /> klasy z określoną pojemnością początkową.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-115">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class with the specified initial capacity.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.IWeakEventListener -&gt; unit" Usage="listenerList.Add listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener"><span data-ttu-id="3a8d2-116">Element odbiornika, który ma zostać dodany <see cref="T:System.Windows.WeakEventManager.ListenerList" />do.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-116">The listener element to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="3a8d2-117"><see cref="T:System.Windows.IWeakEventListener" /> Dodaje obiekt<see cref="T:System.Windows.WeakEventManager.ListenerList" />do.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-117">Adds a <see cref="T:System.Windows.IWeakEventListener" /> object to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a8d2-118">Obiekt dostarczony jako odbiornik powinien być <xref:System.Windows.DependencyObject> <xref:System.Windows.IWeakEventListener> implementujący interfejs i w związku z tym ma działającą <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementację.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-118">The object provided as listener should be a <xref:System.Windows.DependencyObject> that implements the <xref:System.Windows.IWeakEventListener> interface and therefore has a working <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementation.</span></span>  
  
 <span data-ttu-id="3a8d2-119">Zawsze należy wywołać <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> przed zmianą zawartości listy.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-119">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="3a8d2-120">W przeciwnym razie lista może być w trakcie dostarczania zdarzeń i w związku z tym oryginalna jest zablokowana.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-120">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="3a8d2-121">Wywołanie <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> zmienia dane wejściowe `list` jako klon, aby <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> wywołanie było nadal działać na klonie.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-121">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> call can still work on the clone.</span></span> <span data-ttu-id="3a8d2-122">Jeśli <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> zwraca`true`, może być konieczne zaktualizowanie wszelkich prywatnych odwołań do listy, która jest utrzymywana w innych obszarach kodu.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-122">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : Delegate -&gt; unit" Usage="listenerList.AddHandler handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="3a8d2-123">Procedura obsługi zdarzeń do dodania do programu <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-123">The event handler to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="3a8d2-124">Dodaje procedurę obsługi zdarzeń do <see cref="T:System.Windows.WeakEventManager.ListenerList" />elementu.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-124">Adds an event handler to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUse">
      <MemberSignature Language="C#" Value="public bool BeginUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool BeginUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginUse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BeginUse();" />
      <MemberSignature Language="F#" Value="member this.BeginUse : unit -&gt; bool" Usage="listenerList.BeginUse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a8d2-125">Deklaruje listę, która ma być używana.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-125">Declares the list to be in use.</span></span> <span data-ttu-id="3a8d2-126">Uniemożliwia to bezpośrednie zmiany na liście podczas iteracji elementów listy.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-126">This prevents direct changes to the list during iterations of the list items.</span></span></summary>
        <returns><span data-ttu-id="3a8d2-127"><see langword="true" />Jeśli lista została już zadeklarowana do użycia; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="3a8d2-127"><see langword="true" /> if the list was already declared to be in use; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a8d2-128">Implementacja powinna wywołać <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> przed przeprowadzeniem iteracji przez listę w celu dostarczenia zdarzenia do odbiorników i powinna wywołać <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> po zakończeniu. <xref:System.Windows.WeakEventManager></span><span class="sxs-lookup"><span data-stu-id="3a8d2-128">A <xref:System.Windows.WeakEventManager> implementation should call <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> before iterating through the list to deliver an event to the listeners, and should call <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> when it is done.</span></span> <span data-ttu-id="3a8d2-129">Zapobiega to modyfikowaniu listy przez innego wywołującego, podczas gdy iteracja dla celów dostarczania zdarzeń jest w toku.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-129">This prevents another caller from modifying the list while the iteration for purposes of event delivery is in progress.</span></span> <span data-ttu-id="3a8d2-130">Jeśli lista zostanie zmodyfikowana w tym czasie, lista zostanie sklonowana.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-130">If the list is modified during this time, then the list is cloned.</span></span> <span data-ttu-id="3a8d2-131">Jeśli lista jest klonowana, następnie <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> zwraca `true`, co oznacza, że pominięto ostatnią zmianę odbiornika podczas ostatniego dostarczania.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-131">If the list is cloned, then <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, which means that you have missed a recent listener change in the last delivery.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Windows.WeakEventManager.ListenerList Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.Clone : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="listenerList.Clone " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::WeakEventManager::ListenerList ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a8d2-132">Tworzy modyfikowalny klon tego <see cref="T:System.Windows.WeakEventManager.ListenerList" />elementu.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-132">Creates a modifiable clone of this <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <returns><span data-ttu-id="3a8d2-133">Modyfikowalny klon bieżącego obiektu.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-133">A modifiable clone of the current object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="protected void CopyTo (System.Windows.WeakEventManager.ListenerList newList);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CopyTo(class System.Windows.WeakEventManager/ListenerList newList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CopyTo (newList As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="listenerList.CopyTo newList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newList" Type="System.Windows.WeakEventManager+ListenerList" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="newList"><span data-ttu-id="3a8d2-134">Obiekt do skopiowania.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-134">The object to copy to.</span></span></param>
        <summary><span data-ttu-id="3a8d2-135">Kopiuje bieżące <see cref="T:System.Windows.WeakEventManager.ListenerList" /> do określonego<see cref="T:System.Windows.WeakEventManager.ListenerList" /></span><span class="sxs-lookup"><span data-stu-id="3a8d2-135">Copies the current <see cref="T:System.Windows.WeakEventManager.ListenerList" /> to the specified <see cref="T:System.Windows.WeakEventManager.ListenerList" /></span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.WeakEventManager.ListenerList.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a8d2-136">Pobiera liczbę elementów zawartych w <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-136">Gets the number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <value><span data-ttu-id="3a8d2-137">Liczba elementów zawartych w <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-137">The number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="public virtual bool DeliverEvent (object sender, EventArgs args, Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeliverEvent(object sender, class System.EventArgs args, class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeliverEvent (sender As Object, args As EventArgs, managerType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool DeliverEvent(System::Object ^ sender, EventArgs ^ args, Type ^ managerType);" />
      <MemberSignature Language="F#" Value="abstract member DeliverEvent : obj * EventArgs * Type -&gt; bool&#xA;override this.DeliverEvent : obj * EventArgs * Type -&gt; bool" Usage="listenerList.DeliverEvent (sender, args, managerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="args" Type="System.EventArgs" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="managerType" Type="System.Type" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="3a8d2-138">Obiekt, który wywołał zdarzenie.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-138">The object that raised the event.</span></span></param>
        <param name="args"><span data-ttu-id="3a8d2-139">Obiekt, który zawiera dane zdarzenia.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-139">An object that contains the event data.</span></span></param>
        <param name="managerType"><span data-ttu-id="3a8d2-140">Typ <see cref="T:System.Windows.WeakEventManager" /> , który wywołuje tę metodę.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-140">The type of the <see cref="T:System.Windows.WeakEventManager" /> that calls this method.</span></span></param>
        <summary><span data-ttu-id="3a8d2-141">Dostarcza zdarzenie zarządzane dla każdego odbiornika w <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-141">Delivers the event being managed to each listener in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <returns><span data-ttu-id="3a8d2-142"><see langword="true" />Jeśli którykolwiek z odbiorników w <see cref="T:System.Windows.WeakEventManager.ListenerList" /> odniesieniu do obiektu, który został pobrany jako bezużyteczny; w przeciwnym razie,. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="3a8d2-142"><see langword="true" /> if any of the listeners in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> refer to an object that has been garbage collected; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.WeakEventManager.ListenerList Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.WeakEventManager/ListenerList Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Windows.WeakEventManager.ListenerList" Usage="System.Windows.WeakEventManager.ListenerList.Empty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::WeakEventManager::ListenerList ^ Empty { System::Windows::WeakEventManager::ListenerList ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a8d2-143">Pobiera wartość, która reprezentuje pustą listę w celu porównania.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-143">Gets a value that represents an empty list for purposes of comparisons.</span></span></summary>
        <value><span data-ttu-id="3a8d2-144">Reprezentacja pustej listy.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-144">The empty list representation.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUse">
      <MemberSignature Language="C#" Value="public void EndUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUse();" />
      <MemberSignature Language="F#" Value="member this.EndUse : unit -&gt; unit" Usage="listenerList.EndUse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a8d2-145">Odblokowuje zablokowany stan zainicjowany przez <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-145">Unlocks the locked state initiated by <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Windows.WeakEventManager.ListenerList.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a8d2-146">Pobiera wartość, która deklaruje, <see cref="T:System.Windows.WeakEventManager.ListenerList" /> czy jest ona pusta.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-146">Gets a value that declares whether this <see cref="T:System.Windows.WeakEventManager.ListenerList" /> is empty.</span></span></summary>
        <value><span data-ttu-id="3a8d2-147"><see langword="true" />Jeśli lista jest pusta; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="3a8d2-147"><see langword="true" /> if the list is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a8d2-148">Ta metoda jest równoznaczna z sprawdzeniem <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> , czy jest równa zero, i nie sprawdza, czy którykolwiek z odwołań na liście jest teraz przestarzały.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-148">This method is equivalent to checking whether the <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> is zero, and does not check whether any of the references in the list are now stale.</span></span> <span data-ttu-id="3a8d2-149">Jeśli chcesz upewnić się, że wszystkie odwołania są nadal ważne, <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> Wywołaj tuż przed sprawdzeniem pustego stanu listy.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-149">If you want to assure that all references are still valid, call <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> just prior to checking the empty status of the list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.IWeakEventListener this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IWeakEventListener Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As IWeakEventListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IWeakEventListener ^ default[int] { System::Windows::IWeakEventListener ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.IWeakEventListener" Usage="System.Windows.WeakEventManager.ListenerList.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IWeakEventListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="3a8d2-150">Indeks (liczony od zera) odbiornika na liście.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-150">The zero-based index of the listener in the list.</span></span></param>
        <summary><span data-ttu-id="3a8d2-151">Pobiera lub ustawia określony element odbiornika w <see cref="T:System.Windows.WeakEventManager.ListenerList" /> .</span><span class="sxs-lookup"><span data-stu-id="3a8d2-151">Gets or sets a specific listener item in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> .</span></span></summary>
        <value><span data-ttu-id="3a8d2-152">Element w tym indeksie lub odwołanie o wartości null, jeśli w tym indeksie nie ma żadnego elementu.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-152">The item at that index, or a null reference if no item was at that index.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForWriting">
      <MemberSignature Language="C#" Value="public static bool PrepareForWriting (ref System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool PrepareForWriting(class System.Windows.WeakEventManager/ListenerList&amp; list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PrepareForWriting (ByRef list As WeakEventManager.ListenerList) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool PrepareForWriting(System::Windows::WeakEventManager::ListenerList ^ % list);" />
      <MemberSignature Language="F#" Value="static member PrepareForWriting :  -&gt; bool" Usage="System.Windows.WeakEventManager.ListenerList.PrepareForWriting list" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="list"><span data-ttu-id="3a8d2-153">Lista służąca do sprawdzania stanu użytkowania i potencjalnie kopiowania.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-153">The list to check for use state and potentially copy.</span></span></param>
        <summary><span data-ttu-id="3a8d2-154">Sprawdza, czy podana lista jest w użyciu, a jeśli tak, ustawia parametr odwołania do listy na kopię tej listy, a nie oryginalną.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-154">Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.</span></span></summary>
        <returns><span data-ttu-id="3a8d2-155"><see langword="true" />Jeśli podana lista była używana w czasie wywołania i w związku z tym <paramref name="list" /> odwołanie do parametru zostało zresetowane jako kopia.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-155"><see langword="true" /> if the provided list was in use at the time of call and therefore the <paramref name="list" /> parameter reference was reset to be a copy.</span></span> <span data-ttu-id="3a8d2-156"><see langword="false" />Jeśli podana lista nie jest używana, w takim przypadku odwołanie do <paramref name="list" /> parametru pozostanie niezmienione.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-156"><see langword="false" /> if the provided list was not in use, in which case the <paramref name="list" /> parameter reference remains unaltered.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a8d2-157">Jeśli podana lista jest w użyciu (co oznacza, że zdarzenie jest obecnie dostarczane), wywołanie tej metody zastąpi dane wejściowe `list` klonem.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-157">If the given list is in use (which means an event is currently being delivered), calling this method will replace the input `list` with a clone.</span></span>  <span data-ttu-id="3a8d2-158">Istniejący użytkownicy ukończyją dostarczenie zdarzenia do oryginalnej listy bez ingerencji o zmiany na nową listę.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-158">The existing users will finish delivering the event to the original list, without interference from changes to the new list.</span></span>  
  
 <span data-ttu-id="3a8d2-159">Jeśli metoda zwraca `true`, obiekty wywołujące mogą chcieć wstawić nową listę we własnych strukturach danych, ponieważ wskazuje to na możliwość, że udostępniona lista nie jest już aktualna.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-159">If the method returns `true`, callers may want to insert the new list in their own data structures, since this indicates the possibility that the provided list is no longer current.</span></span>  
  
 <span data-ttu-id="3a8d2-160">Ta metoda wywołuje <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> wewnętrznie, a następnie natychmiast <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>wywołuje.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-160">This method calls <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> internally and then immediately calls <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span> <span data-ttu-id="3a8d2-161">W związku <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> z tym wywołanie nie wprowadza blokady na liście.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-161">Therefore calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> does not itself introduce a lock on the list.</span></span> <span data-ttu-id="3a8d2-162">Nawet kopia klonu jest wykonywana jako operacja pomocnicza po wywołaniu <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-162">Even the clone copy is done as a secondary operation after calling <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public bool Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Function Purge () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Purge();" />
      <MemberSignature Language="F#" Value="member this.Purge : unit -&gt; bool" Usage="listenerList.Purge " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a8d2-163">Usuwa wszystkie wpisy z listy, gdzie bazowego celu odwołania jest odwołaniem o wartości null.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-163">Removes all entries from the list where the underlying reference target is a null reference.</span></span></summary>
        <returns><span data-ttu-id="3a8d2-164">Zwraca <see langword="true" /> czy wpisy zostały przeczyszczone; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-164">Returns <see langword="true" /> if any entries were purged; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.IWeakEventListener -&gt; unit" Usage="listenerList.Remove listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener"><span data-ttu-id="3a8d2-165">Element do usunięcia.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-165">The item to remove.</span></span></param>
        <summary><span data-ttu-id="3a8d2-166">Usuwa pierwsze wystąpienie elementu odbiornika z <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-166">Removes the first occurrence of a listener item from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a8d2-167">Zawsze należy wywołać <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> przed zmianą zawartości listy.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-167">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="3a8d2-168">W przeciwnym razie lista może być w trakcie dostarczania zdarzeń i w związku z tym oryginalna jest zablokowana.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-168">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="3a8d2-169">Wywołanie <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> zmienia dane wejściowe `list` jako klon, aby <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> wywołanie było nadal działać na klonie.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-169">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> call can still work on the clone.</span></span> <span data-ttu-id="3a8d2-170">Jeśli <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> zwraca`true`, może być konieczne zaktualizowanie wszelkich prywatnych odwołań do listy, która jest utrzymywana w innych obszarach kodu.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-170">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveHandler(Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.RemoveHandler : Delegate -&gt; unit" Usage="listenerList.RemoveHandler handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="3a8d2-171">Procedura obsługi zdarzeń do usunięcia z programu <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-171">The event handler to remove from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="3a8d2-172">Usuwa procedurę obsługi zdarzeń z <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span><span class="sxs-lookup"><span data-stu-id="3a8d2-172">Removes an event handler from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
