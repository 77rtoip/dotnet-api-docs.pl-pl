<Type Name="Trigger" FullName="System.Windows.Trigger">
  <Metadata><Meta Name="ms.openlocfilehash" Value="70db3304173e9e72c26c30e481dedd45e23dc055" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69432929" /></Metadata><TypeSignature Language="C#" Value="public class Trigger : System.Windows.TriggerBase, System.ComponentModel.ISupportInitialize, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Trigger extends System.Windows.TriggerBase implements class System.ComponentModel.ISupportInitialize, class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Trigger" />
  <TypeSignature Language="VB.NET" Value="Public Class Trigger&#xA;Inherits TriggerBase&#xA;Implements IAddChild, ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Trigger : System::Windows::TriggerBase, System::ComponentModel::ISupportInitialize, System::Windows::Markup::IAddChild" />
  <TypeSignature Language="F#" Value="type Trigger = class&#xA;    inherit TriggerBase&#xA;    interface IAddChild&#xA;    interface ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.TriggerBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Setters")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Windows.Markup.XamlSetTypeConverter("ReceiveTypeConverter")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje wyzwalacz, który stosuje wartości właściwości lub warunkowo wykonuje działania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]definiuje właściwości, które odpowiadają akcjom użytkownika końcowego, takim jak <xref:System.Windows.UIElement.IsMouseOver%2A> właściwość, która jest `true` ustawiana, gdy użytkownik umieści kursor nad <xref:System.Windows.UIElement> lub odpowiadającą <xref:System.Windows.ContentElement.IsMouseOver%2A> właściwością <xref:System.Windows.ContentElement>. Reprezentowanie akcji użytkownika końcowego w wartościach właściwości, wraz <xref:System.Windows.Trigger> z elementem, [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] umożliwia stylom zmianę wartości właściwości na podstawie tych akcji użytkownika końcowego, wszystkie z znaczników.  
  
 Właściwości zmienione przez wyzwalacze są automatycznie resetowane do ich poprzedniej wartości, gdy wyzwalany warunek nie jest już spełniony. Wyzwalacze są zoptymalizowane pod kątem przejściowych Stanów, które należy zmienić i powrócić do stanu <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> pierwotnego <xref:System.Windows.Controls.ListBoxItem.IsSelected%2A> , <xref:System.Windows.Controls.ListBoxItem>na przykład włączone <xref:System.Windows.Controls.Button> i włączone. <xref:System.Windows.Trigger.Property%2A> Odsetki muszą być właściwością zależności.  
  
 Należy pamiętać, że należy określić <xref:System.Windows.Trigger.Property%2A> właściwości <xref:System.Windows.Trigger> i <xref:System.Windows.Trigger.Value%2A> dla wyzwalacza, aby mieć znaczenie. Jeśli nie ustawiono jednej lub obu właściwości, zostanie zgłoszony wyjątek.  
  
 Właściwość obiektu może składać się tylko z <xref:System.Windows.Setter> obiektów. <xref:System.Windows.Trigger> <xref:System.Windows.Trigger.Setters%2A> Dodanie elementu podrzędnego <xref:System.Windows.Trigger> do obiektu <xref:System.Windows.SetterBaseCollection> niejawnie dodaje <xref:System.Windows.Trigger> go do obiektu. <xref:System.Windows.Setter> <xref:System.Windows.EventSetter>obiekty nie są obsługiwane; <xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType> obsługuje<xref:System.Windows.EventSetter> tylko obiekty.  
  
 Istnieją inne typy wyzwalaczy. <xref:System.Windows.MultiTrigger>umożliwia zastosowanie zmian w zależności od stanu wielu właściwości. <xref:System.Windows.EventTrigger>umożliwia zastosowanie zmian w przypadku wystąpienia zdarzenia. <xref:System.Windows.DataTrigger>i <xref:System.Windows.MultiDataTrigger> są dla właściwości powiązanych z danymi.  
  
   
  
## Examples  
 Poniższy przykład pokazuje nazwane <xref:System.Windows.Style> dostępne dla <xref:System.Windows.Controls.Button> kontrolek. <xref:System.Windows.Controls.Control.Foreground%2A> <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> Definiuje element, który zmienia właściwość przycisku, gdy właściwość jest `true`. <xref:System.Windows.Style> <xref:System.Windows.Trigger>  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">Wprowadzenie do stylów i przykładu tworzenia szablonów</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Trigger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Trigger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Trigger" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty Property { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty Property" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.Property" />
      <MemberSignature Language="VB.NET" Value="Public Property Property As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ Property { System::Windows::DependencyProperty ^ get(); void set(System::Windows::DependencyProperty ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Property : System.Windows.DependencyProperty with get, set" Usage="System.Windows.Trigger.Property" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Modifiability=System.Windows.Modifiability.Unmodifiable, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia właściwość zwracającą wartość, która jest porównywana z <see cref="P:System.Windows.Trigger.Value" /> właściwością wyzwalacza. Porównanie jest sprawdzaniem równości odwołań.</summary>
        <value>A <see cref="T:System.Windows.DependencyProperty" /> , która zwraca wartość właściwości elementu. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwrócona przez tę właściwość jest porównywana z wartością określoną przez <xref:System.Windows.Trigger.Value%2A> właściwość. Wykonywane porównanie jest sprawdzaniem równości odwołań. Jeśli dwie wartości są zgodne, skojarzone <xref:System.Windows.Setter>s stosują określone wartości właściwości.  
  
 Użyj składni, aby zakwalifikować właściwość, którą określasz, jeśli styl lub szablon, który zawiera ten wyzwalacz, nie `TargetType` ma ustawionej właściwości. `ClassName.PropertyName`  
  
 Należy pamiętać, że należy określić <xref:System.Windows.Trigger.Property%2A> właściwości <xref:System.Windows.Trigger> i <xref:System.Windows.Trigger.Value%2A> dla wyzwalacza, aby mieć znaczenie. Jeśli nie ustawiono jednej lub obu właściwości, zostanie zgłoszony wyjątek.  
  
   
  
## Examples  
 Poniższy przykład zawiera dwa wyzwalacze. Najpierw zmienia <xref:System.Windows.Controls.Control.Background%2A> Właściwość <xref:System.Windows.Controls.Button> , gdy <xref:System.Windows.UIElement.IsMouseOver%2A> właściwość jest `true`. Druga zmiana <xref:System.Windows.Controls.Control.Foreground%2A> właściwości przycisku, <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> gdy właściwość jest `true`. Wartość jest ustawiona na<xref:System.Windows.Controls.Button> i`Property` dlatego nie ma potrzeby kwalifikowania właściwości przy użyciu nazwy klasy. <xref:System.Windows.Style> <xref:System.Windows.Style.TargetType%2A>  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Element <see cref="T:System.Windows.Style" /> a nie może <see cref="T:System.Windows.Trigger" /> zawierać elementu, który <see cref="T:System.Windows.Style" /> odwołuje się do właściwości.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Windows.Trigger" /> Po użyciu nie można go modyfikować.</exception>
        <altmember cref="P:System.Windows.Trigger.Value" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">Wprowadzenie do stylów i przykładu tworzenia szablonów</related>
      </Docs>
    </Member>
    <Member MemberName="ReceiveTypeConverter">
      <MemberSignature Language="C#" Value="public static void ReceiveTypeConverter (object targetObject, System.Windows.Markup.XamlSetTypeConverterEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReceiveTypeConverter(object targetObject, class System.Windows.Markup.XamlSetTypeConverterEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.ReceiveTypeConverter(System.Object,System.Windows.Markup.XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReceiveTypeConverter (targetObject As Object, eventArgs As XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReceiveTypeConverter(System::Object ^ targetObject, System::Windows::Markup::XamlSetTypeConverterEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="static member ReceiveTypeConverter : obj * System.Windows.Markup.XamlSetTypeConverterEventArgs -&gt; unit" Usage="System.Windows.Trigger.ReceiveTypeConverter (targetObject, eventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetObject" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="eventArgs" Type="System.Windows.Markup.XamlSetTypeConverterEventArgs" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="targetObject">Obiekt, w którym konwerter typu ustawia wartość.</param>
        <param name="eventArgs">Dane istotne dla przetwarzania konwertera typów.</param>
        <summary>Obsługuje przypadki, w których konwerter typów udostępnia wartość właściwości <see cref="T:System.Windows.Trigger" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to metoda, do której odwołuje <xref:System.Windows.Markup.XamlSetTypeConverterAttribute> się stosowany atrybut na poziomie klasy, co oznacza, że ta metoda przetwarza wszystkie próby ustawienia <xref:System.Windows.Trigger> wartości przy użyciu konwertera typów. Ta metoda nie jest zazwyczaj wywoływana bezpośrednio.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />
        <altmember cref="T:System.Windows.Markup.XamlSetTypeConverterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Setters">
      <MemberSignature Language="C#" Value="public System.Windows.SetterBaseCollection Setters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.SetterBaseCollection Setters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.Setters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Setters As SetterBaseCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SetterBaseCollection ^ Setters { System::Windows::SetterBaseCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Setters : System.Windows.SetterBaseCollection" Usage="System.Windows.Trigger.Setters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.SetterBaseCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję <see cref="T:System.Windows.Setter" /> obiektów, która opisuje wartości właściwości do zastosowania, gdy określony warunek został spełniony.</summary>
        <value>Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Setters"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.Setters>  
    ZeroOrMoreSetters  
  </object.Setters>  
</object>  
```  
  
<a name="xamlValues_Setters"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *ZeroOrMoreSetters*  
 Zero lub więcej <xref:System.Windows.Setter> obiektów. To nie obsługuje <xref:System.Windows.EventSetter> obiektu.  
  
 A <xref:System.Windows.Trigger> umożliwia<xref:System.Windows.Setter>stosowanie wartości właściwości, gdy element spełnia określony warunek. Na przykład możesz chcieć zmienić kolor tła elementu, gdy jest on fokusem.  
  
 Jeśli ta sama właściwość jest ustawiona więcej niż raz, zostanie zastosowana Ostatnia wartość właściwości.  
  
 Właściwość obiektu może składać się tylko z <xref:System.Windows.Setter> obiektów. <xref:System.Windows.Trigger> <xref:System.Windows.Trigger.Setters%2A> Dodanie elementu podrzędnego <xref:System.Windows.Trigger> do obiektu <xref:System.Windows.SetterBaseCollection> niejawnie dodaje <xref:System.Windows.Trigger> go do obiektu. <xref:System.Windows.Setter> <xref:System.Windows.EventSetter>obiekty nie są obsługiwane; <xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType> obsługuje<xref:System.Windows.EventSetter> tylko obiekty.  
  
   
  
## Examples  
 Jak wspomniano powyżej, dodanie <xref:System.Windows.Setter> elementu podrzędnego <xref:System.Windows.Trigger> do obiektu <xref:System.Windows.SetterBaseCollection> niejawnie dodaje <xref:System.Windows.Trigger> go do obiektu. W poniższym przykładzie `<Trigger.Setters>` jest niejawny.  
  
 [!code-xaml[PhotoStoreDemoStyled#TriggerSettersRef](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#triggersettersref)]   
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">Wprowadzenie do stylów i przykładu tworzenia szablonów</related>
      </Docs>
    </Member>
    <Member MemberName="SourceName">
      <MemberSignature Language="C#" Value="public string SourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.SourceName" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceName : string with get, set" Usage="System.Windows.Trigger.SourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę obiektu z właściwością, która powoduje zastosowanie skojarzonych metod ustawiających.</summary>
        <value>Właściwość domyślna to <see langword="null" />. Jeśli ta właściwość ma <see langword="null" />wartość, <see cref="P:System.Windows.Trigger.Property" /> właściwość jest szacowana względem elementu, do którego jest stosowany ten styl lub szablon, do (styl nadrzędny lub szablon nadrzędny).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można ustawić tę właściwość na nazwę dowolnego elementu w zakresie, w którym jest stosowana kolekcja wyzwalacza (kolekcja, która <xref:System.Windows.Trigger> jest częścią). Jest to zazwyczaj nazwany element, który znajduje się w szablonie, który zawiera <xref:System.Windows.Trigger>.  
  
 Można nazwać obiekt za pomocą składni [dyrektywy x:Name](~/docs/framework/xaml-services/x-name-directive.md) .  
  
   
  
## Examples  
 Jednym z scenariuszy, w którym należy <xref:System.Windows.Trigger.SourceName%2A> użyć właściwości, jest to, że właściwość zainteresowania nie jest właściwością szablonu nadrzędnego, jak w poniższym przykładzie:  
  
 [!code-xaml[ControlTemplateExamples#TriggerSourceName](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/menu.xaml#triggersourcename)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Windows.Trigger" /> Po użyciu nie można go modyfikować.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.BeginInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#ComponentModel#ISupportInitialize#BeginInit" />
      <MemberSignature Language="VB.NET" Value="Sub BeginInit () Implements ISupportInitialize.BeginInit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.ISupportInitialize.BeginInit() = System::ComponentModel::ISupportInitialize::BeginInit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sygnalizuje obiekt, który uruchamia inicjalizację.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.Windows.Setter> gdy wystąpienie jest rzutowane <xref:System.ComponentModel.ISupportInitialize> do interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.ISupportInitialize.EndInit">
      <MemberSignature Language="C#" Value="void ISupportInitialize.EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.ISupportInitialize.EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#ComponentModel#ISupportInitialize#EndInit" />
      <MemberSignature Language="VB.NET" Value="Sub EndInit () Implements ISupportInitialize.EndInit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.ISupportInitialize.EndInit() = System::ComponentModel::ISupportInitialize::EndInit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sygnalizuje obiekt, który zakończył inicjowanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.Windows.Setter> gdy wystąpienie jest rzutowane <xref:System.ComponentModel.ISupportInitialize> do interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt podrzędny do dodania.</param>
        <summary>Dodaje obiekt podrzędny.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.Windows.Trigger> gdy wystąpienie jest rzutowane <xref:System.Windows.Markup.IAddChild> do interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Trigger.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Tekst, który ma zostać dodany do obiektu.</param>
        <summary>Dodaje zawartość tekstową węzła do obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.Windows.Trigger> gdy wystąpienie jest rzutowane <xref:System.Windows.Markup.IAddChild> do interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Trigger.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj with get, set" Usage="System.Windows.Trigger.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.SetterTriggerConditionValueConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("Property")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("SourceName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość do porównania z wartością właściwości elementu. Porównanie jest sprawdzaniem równości odwołań.</summary>
        <value>Wartość domyślna to <see langword="null" />. Zobacz również sekcję wyjątki.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta wartość jest porównywana z wartością właściwości zwracaną przez <xref:System.Windows.Trigger.Property%2A> właściwość. <xref:System.Windows.Trigger> Wykonywane porównanie jest sprawdzaniem jakości referencyjnej. Jeśli dwie wartości są równe, wówczas skojarzone <xref:System.Windows.Setter>s stosują określone wartości właściwości.  
  
 Należy pamiętać, że należy określić <xref:System.Windows.Trigger.Property%2A> właściwości <xref:System.Windows.Trigger> i <xref:System.Windows.Trigger.Value%2A> dla wyzwalacza, aby mieć znaczenie. W związku z tym, jeśli co najmniej jedna z właściwości nie zostanie określona, zostanie zgłoszony wyjątek.  
  
<a name="xamlPropertyElementUsage_Value"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.Value>  
    Value  
  </object.Value>  
</object>  
```  
  
   
  
## Examples  
 Poniższy przykład zmienia <xref:System.Windows.Controls.Control.Foreground%2A> właściwość przycisku, <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> gdy właściwość jest `true`.  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Wyrażenia takie jak powiązania nie są obsługiwane.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Windows.Trigger" /> Po użyciu nie można go modyfikować.</exception>
        <altmember cref="P:System.Windows.Trigger.Property" />
        <altmember cref="P:System.Windows.Trigger.Setters" />
      </Docs>
    </Member>
  </Members>
</Type>
