<Type Name="DataTemplate" FullName="System.Windows.DataTemplate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1c6e83c3c3a1f93b234c006cb89e1a558fe470a8" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36461167" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataTemplate : System.Windows.FrameworkTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplate extends System.Windows.FrameworkTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DataTemplate" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplate&#xA;Inherits FrameworkTemplate" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplate : System::Windows::FrameworkTemplate" />
  <TypeSignature Language="F#" Value="type DataTemplate = class&#xA;    inherit FrameworkTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("DataTemplateKey")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Opisuje visual strukturę obiektu danych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Windows.DataTemplate> do określenia wizualizacji obiektów danych. <xref:System.Windows.DataTemplate> obiekty są szczególnie użyteczne w przypadku, gdy jest <xref:System.Windows.Controls.ItemsControl> takich jak <xref:System.Windows.Controls.ListBox> do całej kolekcji. Bez szczegółowych instrukcji <xref:System.Windows.Controls.ListBox> Wyświetla reprezentację ciągu obiektów w kolekcji. W takim przypadku można użyć <xref:System.Windows.DataTemplate> do określenia jej wyglądu obiektów danych. Zawartość użytkownika <xref:System.Windows.DataTemplate> staje się visual struktury obiektów danych.  
  
 Szczegółowe omówienie, zobacz [omówienie tworzenia szablonów danych](~/docs/framework/wpf/data/data-templating-overview.md).  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób tworzenia <xref:System.Windows.DataTemplate> wbudowanego. <xref:System.Windows.DataTemplate> Określa, czy każdy element danych jest wyświetlany jako trzy <xref:System.Windows.Controls.TextBlock> elementów w obrębie <xref:System.Windows.Controls.StackPanel>. W tym przykładzie obiekt danych to klasy o nazwie `Task`. Należy pamiętać, że każdy <xref:System.Windows.Controls.TextBlock> element w tym szablonie jest powiązana z właściwością `Task` klasy.  
  
 [!code-xaml[DataTemplatingIntro_snip#Inline](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#inline)]  
  
 Jest bardziej popularne, aby zdefiniować <xref:System.Windows.DataTemplate> w sekcji zasobów, dlatego może być obiekt wielokrotnego użytku, jak w poniższym przykładzie:  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#AsResource](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#asresource)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 Teraz można używać `myTaskTemplate` jako zasób, jak w poniższym przykładzie:  
  
 [!code-xaml[DataTemplatingIntro_snip#MyTaskTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#mytasktemplate)]  
  
 Pełny przykład, zobacz [wprowadzenie do danych przykładowych tworzenia szablonów](http://go.microsoft.com/fwlink/?LinkID=160009).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Data.Binding" />
    <altmember cref="T:System.Windows.Controls.DataTemplateSelector" />
    <altmember cref="T:System.Windows.HierarchicalDataTemplate" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.DataTemplate" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplate();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.DataTemplate" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplate (object dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataType As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplate(System::Object ^ dataType);" />
      <MemberSignature Language="F#" Value="new System.Windows.DataTemplate : obj -&gt; System.Windows.DataTemplate" Usage="new System.Windows.DataTemplate dataType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataType" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataType">Jeśli szablon jest przeznaczony dla obiekt danych, jest to nazwa typu obiektu danych.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.DataTemplate" /> klasy z określonym <see cref="P:System.Windows.DataTemplate.DataType" /> właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby odwołać się do nazwy typu klasy, należy użyć [x: Type — rozszerzenie znaczników](~/docs/framework/xaml-services/x-type-markup-extension.md). Jeśli szablon jest przeznaczony dla [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] danych, jest to ciąg, który reprezentuje nazwę tagu danych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataTemplateKey">
      <MemberSignature Language="C#" Value="public object DataTemplateKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataTemplateKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.DataTemplateKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataTemplateKey As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataTemplateKey { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataTemplateKey : obj" Usage="System.Windows.DataTemplate.DataTemplateKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera domyślny klucz <see cref="T:System.Windows.DataTemplate" />.</summary>
        <value>Domyślny klucz <see cref="T:System.Windows.DataTemplate" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie ustawisz [dyrektywy x: Key](~/docs/framework/xaml-services/x-key-directive.md) na <xref:System.Windows.DataTemplate> w <xref:System.Windows.ResourceDictionary>, <xref:System.Windows.DataTemplate.DataTemplateKey%2A> jest używany jako klucz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public object DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataType { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataType : obj with get, set" Usage="System.Windows.DataTemplate.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia typ, dla której ta <see cref="T:System.Windows.DataTemplate" /> ma.</summary>
        <value>Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest bardzo podobny do <xref:System.Windows.Style.TargetType%2A> właściwość <xref:System.Windows.Style> klasy. Po ustawieniu tej właściwości na typ danych bez określania `x:Key`, <xref:System.Windows.DataTemplate> pobiera automatycznie stosowane do danych obiektów tego typu. Należy pamiętać, że po wykonaniu tych `x:Key` jest ustawiane niejawnie. W związku z tym po przypisaniu to <xref:System.Windows.DataTemplate> `x:Key` wartości, są zastępowanie niejawne `x:Key` i <xref:System.Windows.DataTemplate> nie będą stosowane automatycznie.  
  
 Należy również zauważyć, że są wiązane <xref:System.Windows.Controls.ContentControl> do kolekcji `Task` obiektów, <xref:System.Windows.Controls.ContentControl> nie używa <xref:System.Windows.DataTemplate> automatycznie. Jest to spowodowane powiązania w <xref:System.Windows.Controls.ContentControl> potrzebuje dodatkowych informacji w celu rozróżnienia czy chcesz powiązać całą kolekcję lub pojedyncze obiekty. Jeśli Twoje <xref:System.Windows.Controls.ContentControl> służy do śledzenia wybór <xref:System.Windows.Controls.ItemsControl> typu, możesz ustawić <xref:System.Windows.Data.Binding.Path%2A> właściwość <xref:System.Windows.Controls.ContentControl> powiązanie z "`/`" Aby wskazać, że jesteś zainteresowany w bieżącym elemencie. Na przykład zobacz [porady: powiązanie do zbierania i wyświetlania informacji na podstawie zaznaczenia](~/docs/framework/wpf/data/how-to-bind-to-a-collection-and-display-information-based-on-selection.md). W przeciwnym razie należy określić <xref:System.Windows.DataTemplate> jawnie ustawiając <xref:System.Windows.Controls.ContentControl.ContentTemplate%2A> właściwości.  
  
 <xref:System.Windows.DataTemplate.DataType%2A> Właściwości jest szczególnie przydatne w przypadku <xref:System.Windows.Data.CompositeCollection> różnych typów obiektów danych.  
  
 Jeśli ta właściwość jest przeznaczony dla elementu XML, który nie znajduje się w domyślnej przestrzeni nazw, należy poprzedzić nazwy elementu z przestrzeni nazw lub oznaczeniem przestrzeni nazw. XML za pośrednictwem LINQ do XML obszar nazw pojawia się w nawiasach klamrowych, poprzedzone sekwencji unikowej nawias klamrowy:  
  
```xaml  
<DataTemplate DataType="{}{http://myNamespace}Details">  
```  
  
 Dostępne za pośrednictwem XPath XML, nazwa elementu jest poprzedzony desygnator przestrzeni nazw ustanowionych przez wystąpienie <xref:System.Windows.Data.XmlNamespaceMapping>:  
  
```xaml  
<DataTemplate DataType="mn:Details">  
```  
  
<a name="xamlAttributeUsage_DataType"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<object DataType="typeName"/>  
```  
  
<a name="xamlValues_DataType"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *właściwość typeName*  
 Jeśli szablon jest przeznaczony dla obiekt danych, ta właściwość zawiera nazwę typu obiektu danych (jako ciąg). Aby odwołać się do nazwy typu klasy, należy użyć [x: Type — rozszerzenie znaczników](~/docs/framework/xaml-services/x-type-markup-extension.md). Jeśli szablon jest przeznaczony dla [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] danych, ta właściwość zawiera nazwę elementu XML. Zobacz uwagi dokumentacji szczegółowe informacje o określaniu z systemem innym niż domyślny obszar nazw dla elementu XML.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.DataTemplate.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("VisualTree")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("Template")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję wyzwalacze, które stosowanie wartości właściwości lub wykonania akcji w oparciu o co najmniej jeden warunek.</summary>
        <value>Kolekcja obiektów wyzwalacza. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli tworzysz Wyzwalacze w szablonie danych metod ustawiających wyzwalacze powinien ustawienie właściwości, które znajdują się w zakresie szablonu danych. W przeciwnym razie może być odpowiedniejsze można utworzyć wyzwalaczy przy użyciu stylu, przeznaczonego dla typu, który zawiera dane. Na przykład, jeśli są powiązanie <xref:System.Windows.Controls.ListBox> kontroli, kontenery są <xref:System.Windows.Controls.ListBoxItem> obiektów. Jeśli używasz wyzwalaczy można ustawić właściwości, które nie są w zakresie <xref:System.Windows.DataTemplate>, może być bardziej odpowiednie do utworzenia <xref:System.Windows.Controls.ListBoxItem> styl i utworzyć Wyzwalacze w stylu. Aby uzyskać więcej informacji zobacz, co należy w szablonie danych? w [omówienie tworzenia szablonów danych](~/docs/framework/wpf/data/data-templating-overview.md).  
  
> [!NOTE]
>  Tej właściwości można ustawić tylko [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] za pomocą składni kolekcji pokazano lub uzyskiwania dostępu do obiektu kolekcji i używając jej różnych metod, takich jak dodawanie. Właściwość do samego obiektu kolekcji jest tylko do odczytu, sama kolekcja odczytu i zapisu.  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.Triggers>  
    OneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *OneOrMoreTriggers*  
 Zero lub więcej <xref:System.Windows.TriggerBase> obiektów.  
  
   
  
## Examples  
 Następujące <xref:System.Windows.DataTemplate> zademonstrowano użycie <xref:System.Windows.DataTemplate.Triggers%2A> właściwości.  
  
 [!code-xaml[DataBindingLab#AuctionItemDataTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/DataBindingLabApp.xaml#auctionitemdatatemplate)]  
  
 Pełny przykład, zobacz [pokaz powiązania danych](http://go.microsoft.com/fwlink/?LinkID=163703).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DataTrigger" />
        <altmember cref="T:System.Windows.MultiDataTrigger" />
      </Docs>
    </Member>
    <Member MemberName="ValidateTemplatedParent">
      <MemberSignature Language="C#" Value="protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ValidateTemplatedParent(class System.Windows.FrameworkElement templatedParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ValidateTemplatedParent (templatedParent As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ValidateTemplatedParent(System::Windows::FrameworkElement ^ templatedParent);" />
      <MemberSignature Language="F#" Value="override this.ValidateTemplatedParent : System.Windows.FrameworkElement -&gt; unit" Usage="dataTemplate.ValidateTemplatedParent templatedParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templatedParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="templatedParent">Element ten szablon jest stosowany do.</param>
        <summary>Sprawdza, czy opartego na szablonie nadrzędnego pod kątem zestawu reguł.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metody stosowane są następujące reguły:  
  
-   `templatedParent` Musi być inne niż null <xref:System.Windows.FrameworkElement>.  
  
-   <xref:System.Windows.DataTemplate> Musi zostać zastosowana <xref:System.Windows.Controls.ContentPresenter>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>