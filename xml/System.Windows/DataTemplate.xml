<Type Name="DataTemplate" FullName="System.Windows.DataTemplate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a406976b584aa7dd6b02474f4fa22aaf1f2e0379" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69445091" /></Metadata><TypeSignature Language="C#" Value="public class DataTemplate : System.Windows.FrameworkTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplate extends System.Windows.FrameworkTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DataTemplate" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplate&#xA;Inherits FrameworkTemplate" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplate : System::Windows::FrameworkTemplate" />
  <TypeSignature Language="F#" Value="type DataTemplate = class&#xA;    inherit FrameworkTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("DataTemplateKey")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Opisuje strukturę wizualizacji obiektu danych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć, <xref:System.Windows.DataTemplate> aby określić wizualizację obiektów danych. <xref:System.Windows.DataTemplate>obiekty są szczególnie przydatne w przypadku powiązania <xref:System.Windows.Controls.ItemsControl> takich <xref:System.Windows.Controls.ListBox> jak z całą kolekcją. Bez określonych instrukcji, a <xref:System.Windows.Controls.ListBox> wyświetla ciąg reprezentacji obiektów w kolekcji. W takim przypadku można użyć <xref:System.Windows.DataTemplate> do zdefiniowania wyglądu obiektów danych. Zawartość użytkownika <xref:System.Windows.DataTemplate> zmieni się na strukturę wizualizacji obiektów danych.  
  
 Aby uzyskać szczegółowe informacje, zobacz [tworzenia szablonów danych — omówienie](~/docs/framework/wpf/data/data-templating-overview.md).  
  
   
  
## Examples  
 Poniższy przykład pokazuje, <xref:System.Windows.DataTemplate> jak utworzyć wbudowaną. Określa, że każdy element danych pojawia się jako <xref:System.Windows.Controls.TextBlock> trzy elementy w <xref:System.Windows.Controls.StackPanel>. <xref:System.Windows.DataTemplate> W tym przykładzie obiekt danych jest klasą o nazwie `Task`. Należy zauważyć, <xref:System.Windows.Controls.TextBlock> że każdy element w tym szablonie jest powiązany z właściwością `Task` klasy.  
  
 [!code-xaml[DataTemplatingIntro_snip#Inline](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#inline)]  
  
 Jest to bardziej powszechne, aby zdefiniować <xref:System.Windows.DataTemplate> w sekcji Resources, aby mógł być obiektem wielokrotnego użytku, jak w poniższym przykładzie:  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#AsResource](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#asresource)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 Teraz można użyć `myTaskTemplate` jako zasobu, jak w poniższym przykładzie:  
  
 [!code-xaml[DataTemplatingIntro_snip#MyTaskTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#mytasktemplate)]  
  
 Pełny przykład można znaleźć w artykule [wprowadzenie do danych tworzenia szablonów Sample](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/DataTemplatingIntro).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Data.Binding" />
    <altmember cref="T:System.Windows.Controls.DataTemplateSelector" />
    <altmember cref="T:System.Windows.HierarchicalDataTemplate" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=163703">Pokaz powiązania danych</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.DataTemplate" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplate();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.DataTemplate" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplate (object dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataType As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplate(System::Object ^ dataType);" />
      <MemberSignature Language="F#" Value="new System.Windows.DataTemplate : obj -&gt; System.Windows.DataTemplate" Usage="new System.Windows.DataTemplate dataType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataType" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataType">Jeśli szablon jest przeznaczony dla danych obiektu, jest to nazwa typu obiektu danych.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.DataTemplate" /> klasy z określoną <see cref="P:System.Windows.DataTemplate.DataType" /> właściwością.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby odwołać się do nazwy typu klasy, użyj [rozszerzenia znacznika x:Type —](~/docs/framework/xaml-services/x-type-markup-extension.md). Jeśli szablon jest przeznaczony dla [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] danych, jest to ciąg, który reprezentuje nazwę tagu danych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataTemplateKey">
      <MemberSignature Language="C#" Value="public object DataTemplateKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataTemplateKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.DataTemplateKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataTemplateKey As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataTemplateKey { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataTemplateKey : obj" Usage="System.Windows.DataTemplate.DataTemplateKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera domyślny klucz <see cref="T:System.Windows.DataTemplate" />.</summary>
        <value>Domyślny klucz <see cref="T:System.Windows.DataTemplate" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie ustawisz [dyrektywy x:Key](~/docs/framework/xaml-services/x-key-directive.md) na <xref:System.Windows.DataTemplate> <xref:System.Windows.ResourceDictionary>, która znajduje się <xref:System.Windows.DataTemplate.DataTemplateKey%2A> w, zostanie użyta jako klucz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public object DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataType { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataType : obj with get, set" Usage="System.Windows.DataTemplate.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia typ, dla którego <see cref="T:System.Windows.DataTemplate" /> jest przeznaczony.</summary>
        <value>Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest bardzo podobna do <xref:System.Windows.Style.TargetType%2A> właściwości <xref:System.Windows.Style> klasy. W przypadku ustawienia tej właściwości na typ danych bez określania `x:Key`, zostanie <xref:System.Windows.DataTemplate> ona automatycznie zastosowana do obiektów danych tego typu. Należy pamiętać, że po wybraniu `x:Key` tego ustawienia niejawnie. W związku z tym, jeśli <xref:System.Windows.DataTemplate> przypiszesz `x:Key` tę wartość, <xref:System.Windows.DataTemplate> zastępujesz `x:Key` niejawną, a nie zostanie ona zastosowana automatycznie.  
  
 Należy również pamiętać, że jeśli tworzysz powiązanie <xref:System.Windows.Controls.ContentControl> z `Task` kolekcją obiektów, program <xref:System.Windows.Controls.ContentControl> nie używa tego <xref:System.Windows.DataTemplate> automatycznie. Jest to spowodowane tym, że powiązanie <xref:System.Windows.Controls.ContentControl> na potrzeby potrzeb dodatkowych informacji pozwalające określić, czy chcesz powiązać z całą kolekcją, czy z pojedynczymi obiektami. <xref:System.Windows.Controls.ContentControl> Jeśli śledzi wybór <xref:System.Windows.Controls.ItemsControl> typu`/`, można <xref:System.Windows.Controls.ContentControl> ustawić właściwość powiązania na "", aby wskazać, że interesuje <xref:System.Windows.Data.Binding.Path%2A> Cię bieżący element. Aby zapoznać się z przykładem, zobacz [How to: Powiąż z kolekcją i wyświetlaj informacje na](~/docs/framework/wpf/data/how-to-bind-to-a-collection-and-display-information-based-on-selection.md)podstawie wyboru. W przeciwnym razie należy określić <xref:System.Windows.DataTemplate> jawnie przez <xref:System.Windows.Controls.ContentControl.ContentTemplate%2A> ustawienie właściwości.  
  
 Właściwość jest szczególnie przydatna w przypadku <xref:System.Windows.Data.CompositeCollection> różnych typów obiektów danych. <xref:System.Windows.DataTemplate.DataType%2A>  
  
 Jeśli ta właściwość jest przeznaczona dla elementu XML, który nie znajduje się w domyślnej przestrzeni nazw, musisz poprzedzać nazwę elementu z przestrzenią nazw lub oznaczeniem przestrzeni nazw. W przypadku kodu XML uwidocznionego za pomocą LINQ for XML, przestrzeń nazw występuje w nawiasach klamrowych, poprzedzona sekwencją ucieczki w nawiasach klamrowych:  
  
```xaml  
<DataTemplate DataType="{}{http://myNamespace}Details">  
```  
  
 W przypadku kodu XML uwidocznionego za pomocą wyrażenia XPath nazwa elementu jest poprzedzona oznaczeniem przestrzeni nazw ustanowionym przez <xref:System.Windows.Data.XmlNamespaceMapping>wystąpienie:  
  
```xaml  
<DataTemplate DataType="mn:Details">  
```  
  
<a name="xamlAttributeUsage_DataType"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<object DataType="typeName"/>  
```  
  
<a name="xamlValues_DataType"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *typeName*  
 Jeśli szablon jest przeznaczony dla danych obiektu, ta właściwość zawiera nazwę typu obiektu danych (jako ciąg). Aby odwołać się do nazwy typu klasy, użyj [rozszerzenia znacznika x:Type —](~/docs/framework/xaml-services/x-type-markup-extension.md). Jeśli szablon jest przeznaczony dla [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] danych, ta właściwość zawiera nazwę elementu XML. Zobacz uwagi dotyczące dokumentacji, aby uzyskać szczegółowe informacje na temat określania niedomyślnej przestrzeni nazw dla elementu XML.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160009">Wprowadzenie do przykładu danych tworzenia szablonów</related>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.DataTemplate.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("VisualTree")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Windows.Markup.DependsOn("Template")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję wyzwalaczy, które stosują wartości właściwości lub wykonują akcje na podstawie jednego lub większej liczby warunków.</summary>
        <value>Kolekcja obiektów wyzwalacza. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli tworzysz Wyzwalacze w szablonie danych, metody ustawiające wyzwalacze powinny być ustawianymi właściwościami należącymi do zakresu szablonu danych. W przeciwnym razie może być bardziej odpowiednie do tworzenia wyzwalaczy przy użyciu stylu, który jest przeznaczony dla typu, który zawiera dane. Na przykład jeśli tworzysz powiązanie <xref:System.Windows.Controls.ListBox> kontrolki, kontenery są <xref:System.Windows.Controls.ListBoxItem> obiektami. Jeśli używasz wyzwalaczy do ustawiania właściwości, które znajdują się poza zakresem <xref:System.Windows.DataTemplate>, może być bardziej odpowiednie do <xref:System.Windows.Controls.ListBoxItem> tworzenia stylu i tworzenia wyzwalaczy w tym stylu. Aby uzyskać więcej informacji, zobacz co należy do szablonu DataTemplate? w [przeglądzie tworzenia szablonów danych](~/docs/framework/wpf/data/data-templating-overview.md).  
  
> [!NOTE]
>  Tę właściwość można ustawić [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] tylko za pośrednictwem podanej składni kolekcji lub przez uzyskanie dostępu do obiektu kolekcja i użycie jego różnych metod, takich jak Add. Właściwość uzyskiwania dostępu do obiektu kolekcji jest tylko do odczytu, a sama kolekcja to Read-Write.  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.Triggers>  
    OneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *OneOrMoreTriggers*  
 Zero lub więcej <xref:System.Windows.TriggerBase> obiektów.  
  
   
  
## Examples  
 Poniżej <xref:System.Windows.DataTemplate> przedstawiono sposób użycia <xref:System.Windows.DataTemplate.Triggers%2A> właściwości.  
  
 [!code-xaml[DataBindingLab#AuctionItemDataTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/DataBindingLabApp.xaml#auctionitemdatatemplate)]  
  
 Aby zapoznać się z kompletnym przykładem, zobacz [Demonstracja powiązania danych](https://go.microsoft.com/fwlink/?LinkID=163703).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DataTrigger" />
        <altmember cref="T:System.Windows.MultiDataTrigger" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160009">Wprowadzenie do przykładu danych tworzenia szablonów</related>
      </Docs>
    </Member>
    <Member MemberName="ValidateTemplatedParent">
      <MemberSignature Language="C#" Value="protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ValidateTemplatedParent(class System.Windows.FrameworkElement templatedParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ValidateTemplatedParent (templatedParent As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ValidateTemplatedParent(System::Windows::FrameworkElement ^ templatedParent);" />
      <MemberSignature Language="F#" Value="override this.ValidateTemplatedParent : System.Windows.FrameworkElement -&gt; unit" Usage="dataTemplate.ValidateTemplatedParent templatedParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templatedParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="templatedParent">Element, do którego jest stosowany ten szablon.</param>
        <summary>Sprawdza szablon nadrzędny względem zestawu reguł.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda używa następujących reguł:  
  
-   Wartość musi być inna niż null <xref:System.Windows.FrameworkElement>. `templatedParent`  
  
-   <xref:System.Windows.DataTemplate> Należy zastosować <xref:System.Windows.Controls.ContentPresenter>do.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
