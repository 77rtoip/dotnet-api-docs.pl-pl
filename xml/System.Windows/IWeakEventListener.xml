<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3ebfdb9ce19336f783b2dfdfa69984aebd3d731d" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37492174" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Zapewnia obsługę nasłuchiwania zdarzeń dla klas, które oczekują na odbieranie zdarzeń za pomocą wzorca WeakEvent i <see cref="T:System.Windows.WeakEventManager" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.WeakEventManager> (Dyspozytora) przekazuje zdarzenia przez wywołanie metody <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> metoda w klasach, które implementują ten interfejs, a które zostały dodane jako detektory przez wywołanie metody <xref:System.Windows.WeakEventManager> metody wcześniej.  
  
 Głównym powodem do korzystania z wzorca WeakEvent jest, gdy źródło zdarzenia ma okres istnienia obiektu, który jest potencjalnie niezależny detektorów zdarzeń. Za pomocą centralnej zdarzenia wysyłki <xref:System.Windows.WeakEventManager> umożliwia programy obsługi dla obiektów nasłuchujących się wyrzucanie elementów pobrane (lub ręcznie przeczyścić) nawet wtedy, gdy okres istnienia obiektu źródłowego wykracza poza odbiorników. Z drugiej strony Obsługa normalne zdarzeń za pomocą `+=` lub źródła potencjalnie nadal podłączonej do przechowywania silne odwołanie do obsługi powoduje, że składnia równoważne zdarzeń specyficznych dla języka. Dzięki temu odwołania do odbiornika jako elementu bezużytecznego zebranych w odpowiednim czasie.  
  
 Jedna sytuacja wspólnego, gdzie relacje między źródłami a odbiorników sugeruje, użyj tego wzorca jest obsługa zdarzeń aktualizacji pochodzące ze źródeł dla powiązania danych.  
  
 Wzorzec WeakEvent służy do nasłuchiwania zdarzeń, które są zewnętrzne w stosunku do aplikacji. Musisz zdefiniować <xref:System.Windows.WeakEventManager> , zapewniają zachowanie nasłuchujące <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>i użyj <xref:System.Windows.WeakEventManager> odwołuje się do dołączenia programu obsługi zamiast `+=`.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">Typ <see cref="T:System.Windows.WeakEventManager" /> wywołanie tej metody.</param>
        <param name="sender">Obiekt, który pochodzi zdarzenie.</param>
        <param name="e">Dane zdarzenia.</param>
        <summary>Odbiera zdarzenia z Menedżera scentralizowane zdarzeń.</summary>
        <returns>
          <see langword="true" /> Jeśli odbiornik obsługi zdarzenia. Jest on uznawany za błąd przez <see cref="T:System.Windows.WeakEventManager" /> Obsługa w [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] zarejestrowanie odbiornika dla zdarzenia, które nie obsługuje odbiornika. Niezależnie od tego, metoda powinna zwrócić <see langword="false" /> jeżeli otrzyma zdarzenie, które nie rozpoznają lub obsługi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład implementuje <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> zapewnia WeakEvent wzorca obsługi dwa zdarzenia hipotetyczny `ClockwiseSpin` i `CounterclockwiseSpin` których każdy może mieć dedykowany <xref:System.Windows.WeakEventManager> (niewyświetlany). Ta implementacja wywołuje klasę programu obsługi wycinków dla każdego zdarzenia obsługiwanych rzutowanie dane zdarzenia (w tym przypadku dwa zdarzenia udostępnianie typu danych zdarzenia `SpinEventArgs`). Implementacja zwraca `false` Jeśli odebrane zdarzenie nie jest taki, który jest oczekiwany.  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Ta metoda jest przeznaczona do odbierania wszystkich możliwych zdarzeń, gdzie odbiornika jest na liście odbiornika. Szczególnie, jeśli implementacja dla klasy, która oczekuje na więcej niż jedno zdarzenie, należy sprawdzić typ przychodzącego <paramref name="managerType" /> odnosi się do parametru, aby dowiedzieć się, które zdarzenie wywołania. Dlatego każdego zdarzenia, który ma być część wzorca musi mieć dedykowany <see cref="T:System.Windows.WeakEventManager" />. Ponadto <paramref name="e" /> jako ogólnego jest wpisana nazwa parametru <see cref="T:System.EventArgs" />. W związku z tym, w kolejności uzyskać żadnych określonych właściwości wykorzystać dane zdarzenie, Twoja implementacja będą musieli rzutować na typ danych określonego zdarzenia.  Zazwyczaj po sprawdzania pod kątem tożsamości zdarzenia na podstawie <see cref="T:System.Windows.WeakEventManager" /> typu implementacji powinny wywoływać obsługi Klasa prywatna. Programu obsługi klasy wielkiego może być bardzo tej samej klasy program obsługi który jest używany do obsługi zdarzenia dla odbiorników, które są dodawane przy użyciu wzorca zdarzeń konwencjonalne Dodawanie funkcji za pośrednictwem <see langword="+=" /> zdarzenia na nadawcy. W poniższej sekcji przykład zawiera szablon nierównej implementacji.</para>
        </block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>