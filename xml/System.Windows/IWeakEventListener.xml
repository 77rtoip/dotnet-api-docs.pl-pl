<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cc2e6a04492a7e98297c411356edd79396b478a7" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69444520" /></Metadata><TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Zapewnia obsługę nasłuchiwania zdarzeń dla klas, które oczekują na otrzymywanie zdarzeń za pomocą <see cref="T:System.Windows.WeakEventManager" />wzorca WeakEvent i.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 (Dyspozytor) przekazuje zdarzenie, <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> wywołując metodę dla klas implementujących ten interfejs i które zostały dodane jako detektory przez wywoływanie <xref:System.Windows.WeakEventManager> metod wcześniej. <xref:System.Windows.WeakEventManager>  
  
 Główną przyczyną następującego wzorca WeakEvent jest to, że źródło zdarzenia ma okres istnienia obiektu, który jest potencjalnie niezależny od detektorów zdarzeń. Przy użyciu centralnego wysyłania zdarzeń z <xref:System.Windows.WeakEventManager> programu programy obsługi odbiorników mogą być odzyskiwane jako elementy bezużyteczne (lub ręcznie przeczyszczane), nawet jeśli okres istnienia obiektu źródłowego wykracza poza odbiorniki. Z drugiej strony, normalne zdarzenie podłączenie przy `+=` użyciu lub równoważnej składni zdarzeń specyficznych dla języka powoduje, że potencjalnie połączone źródło może przechowywać silne odwołanie do programów obsługi. Dzięki temu odbiorniki nie są zbierane w odpowiednim czasie.  
  
 Jedną z typowych sytuacji, w których relacje między źródłami i detektorami sugerują użycie tego wzorca, jest obsługa zdarzeń aktualizacji pochodzących ze źródeł dla powiązań danych.  
  
 Wzorca WeakEvent można użyć do nasłuchiwania zdarzeń zewnętrznych dla aplikacji. Wystarczy tylko zdefiniować <xref:System.Windows.WeakEventManager> dla niego, zapewnić zachowanie nasłuchiwania w <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, a następnie użyć <xref:System.Windows.WeakEventManager> do dołączenia odwołań do programu obsługi `+=`zamiast.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">Typ <see cref="T:System.Windows.WeakEventManager" /> wywołania tej metody.</param>
        <param name="sender">Obiekt, który pochodzi ze zdarzenia.</param>
        <param name="e">Dane zdarzenia.</param>
        <summary>Odbiera zdarzenia z Menedżera zdarzeń scentralizowanych.</summary>
        <returns><see langword="true" />Jeśli odbiornik obsłużył zdarzenie. <see cref="T:System.Windows.WeakEventManager" /> W[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] celu zarejestrowania odbiornika dla zdarzenia, którego odbiornik nie obsługuje, jest uznawany za błąd. Bez względu na to, Metoda <see langword="false" /> powinna zostać zwrócona, Jeśli odbierze zdarzenie, którego nie rozpoznaje ani nie obsługuje.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład implementuje <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> , aby zapewnić obsługę wzorca WeakEvent dla dwóch zdarzeń `ClockwiseSpin` hipotetycznych `CounterclockwiseSpin` i że każdy z nich <xref:System.Windows.WeakEventManager> ma dedykowany (niepokazywany). Ta implementacja wywołuje procedury obsługi klas dla każdego obsługiwanego zdarzenia, Rzutowanie danych zdarzenia (w tym przypadku dwa zdarzenia współużytkują typ `SpinEventArgs`danych zdarzenia). Implementacja zwraca wartość `false` , jeśli odebrane zdarzenie nie jest oczekiwane.  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Ta metoda jest przeznaczona do odbierania wszystkich możliwych zdarzeń, w których odbiornik znajduje się na liście odbiorników. Szczególnie jeśli implementacja dla klasy, która nasłuchuje dla więcej niż jednego zdarzenia, należy sprawdzić typ parametru przychodzącego <paramref name="managerType" /> , aby wiedzieć, które zdarzenie odnosi się do. Dlatego każde zdarzenie, które ma być częścią wzorca, musi mieć dedykowany <see cref="T:System.Windows.WeakEventManager" />. Ponadto parametr jest typem ogólnym <see cref="T:System.EventArgs" />. <paramref name="e" /> W związku z tym, w celu uzyskania określonych właściwości z danych zdarzeń, implementacja będzie musiała zostać rzutowana na konkretny typ danych zdarzenia.  
  
Zwykle po sprawdzeniu tożsamości zdarzenia na podstawie <see cref="T:System.Windows.WeakEventManager" /> typu, implementacja powinna wywołać procedurę obsługi klasy prywatnej. Procedura obsługi klas może być w ten sam sposób obsługą klasy, która jest używana do obsługi tego zdarzenia dla odbiorników, które są dodawane przez konwencjonalny wzorzec zdarzeń do <see langword="+=" /> dodawania za pośrednictwem do zdarzenia w nadawcy. W poniższej sekcji przedstawiono szablon szablonu o nieprawidłowym wdrożeniu.</para></block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>
