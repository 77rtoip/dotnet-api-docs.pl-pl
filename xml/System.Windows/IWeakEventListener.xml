<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3ebfdb9ce19336f783b2dfdfa69984aebd3d731d" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37492174" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="7a002-101">Zapewnia obsługę nasłuchiwania zdarzeń dla klas, które oczekują na odbieranie zdarzeń za pomocą wzorca WeakEvent i <see cref="T:System.Windows.WeakEventManager" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7a002-101">Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a002-102"><xref:System.Windows.WeakEventManager> (Dyspozytora) przekazuje zdarzenia przez wywołanie metody <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> metoda w klasach, które implementują ten interfejs, a które zostały dodane jako detektory przez wywołanie metody <xref:System.Windows.WeakEventManager> metody wcześniej.</span><span class="sxs-lookup"><span data-stu-id="7a002-102">The <xref:System.Windows.WeakEventManager> (a dispatcher) forwards an event by calling the <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> method on classes that implement this interface, and that have been added as listeners by calling <xref:System.Windows.WeakEventManager> methods beforehand.</span></span>  
  
 <span data-ttu-id="7a002-103">Głównym powodem do korzystania z wzorca WeakEvent jest, gdy źródło zdarzenia ma okres istnienia obiektu, który jest potencjalnie niezależny detektorów zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="7a002-103">The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners.</span></span> <span data-ttu-id="7a002-104">Za pomocą centralnej zdarzenia wysyłki <xref:System.Windows.WeakEventManager> umożliwia programy obsługi dla obiektów nasłuchujących się wyrzucanie elementów pobrane (lub ręcznie przeczyścić) nawet wtedy, gdy okres istnienia obiektu źródłowego wykracza poza odbiorników.</span><span class="sxs-lookup"><span data-stu-id="7a002-104">Using the central event dispatching of a <xref:System.Windows.WeakEventManager> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners.</span></span> <span data-ttu-id="7a002-105">Z drugiej strony Obsługa normalne zdarzeń za pomocą `+=` lub źródła potencjalnie nadal podłączonej do przechowywania silne odwołanie do obsługi powoduje, że składnia równoważne zdarzeń specyficznych dla języka.</span><span class="sxs-lookup"><span data-stu-id="7a002-105">By contrast, a normal event hookup using `+=` or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers.</span></span> <span data-ttu-id="7a002-106">Dzięki temu odwołania do odbiornika jako elementu bezużytecznego zebranych w odpowiednim czasie.</span><span class="sxs-lookup"><span data-stu-id="7a002-106">This keeps the listener references from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="7a002-107">Jedna sytuacja wspólnego, gdzie relacje między źródłami a odbiorników sugeruje, użyj tego wzorca jest obsługa zdarzeń aktualizacji pochodzące ze źródeł dla powiązania danych.</span><span class="sxs-lookup"><span data-stu-id="7a002-107">One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.</span></span>  
  
 <span data-ttu-id="7a002-108">Wzorzec WeakEvent służy do nasłuchiwania zdarzeń, które są zewnętrzne w stosunku do aplikacji.</span><span class="sxs-lookup"><span data-stu-id="7a002-108">You can use the WeakEvent pattern to listen for events that are external to your application.</span></span> <span data-ttu-id="7a002-109">Musisz zdefiniować <xref:System.Windows.WeakEventManager> , zapewniają zachowanie nasłuchujące <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>i użyj <xref:System.Windows.WeakEventManager> odwołuje się do dołączenia programu obsługi zamiast `+=`.</span><span class="sxs-lookup"><span data-stu-id="7a002-109">You only need to define a <xref:System.Windows.WeakEventManager> for it, provide listening behavior in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, and use the <xref:System.Windows.WeakEventManager> to attach the handler references rather than `+=`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <span data-ttu-id="7a002-110">Typ <see cref="T:System.Windows.WeakEventManager" /> wywołanie tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a002-110">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</span>
          </span>
        </param>
        <param name="sender">
          <span data-ttu-id="7a002-111">Obiekt, który pochodzi zdarzenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a002-111">Object that originated the event.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="7a002-112">Dane zdarzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a002-112">Event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a002-113">Odbiera zdarzenia z Menedżera scentralizowane zdarzeń.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a002-113">Receives events from the centralized event manager.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a002-114">
            <see langword="true" /> Jeśli odbiornik obsługi zdarzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a002-114">
              <see langword="true" /> if the listener handled the event.</span>
          </span>
          <span data-ttu-id="7a002-115">Jest on uznawany za błąd przez <see cref="T:System.Windows.WeakEventManager" /> Obsługa w [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] zarejestrowanie odbiornika dla zdarzenia, które nie obsługuje odbiornika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a002-115">It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle.</span>
          </span>
          <span data-ttu-id="7a002-116">Niezależnie od tego, metoda powinna zwrócić <see langword="false" /> jeżeli otrzyma zdarzenie, które nie rozpoznają lub obsługi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a002-116">Regardless, the method should return <see langword="false" /> if it receives an event that it does not recognize or handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7a002-117">Poniższy przykład implementuje <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> zapewnia WeakEvent wzorca obsługi dwa zdarzenia hipotetyczny `ClockwiseSpin` i `CounterclockwiseSpin` których każdy może mieć dedykowany <xref:System.Windows.WeakEventManager> (niewyświetlany).</span><span class="sxs-lookup"><span data-stu-id="7a002-117">The following example implements <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> to provide WeakEvent pattern support for two hypothetical events `ClockwiseSpin` and `CounterclockwiseSpin` that each have a dedicated <xref:System.Windows.WeakEventManager> (not shown).</span></span> <span data-ttu-id="7a002-118">Ta implementacja wywołuje klasę programu obsługi wycinków dla każdego zdarzenia obsługiwanych rzutowanie dane zdarzenia (w tym przypadku dwa zdarzenia udostępnianie typu danych zdarzenia `SpinEventArgs`).</span><span class="sxs-lookup"><span data-stu-id="7a002-118">This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type `SpinEventArgs`).</span></span> <span data-ttu-id="7a002-119">Implementacja zwraca `false` Jeśli odebrane zdarzenie nie jest taki, który jest oczekiwany.</span><span class="sxs-lookup"><span data-stu-id="7a002-119">The implementation returns `false` if the event received is not one that is expected.</span></span>  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="7a002-120">
            <para>Ta metoda jest przeznaczona do odbierania wszystkich możliwych zdarzeń, gdzie odbiornika jest na liście odbiornika. Szczególnie, jeśli implementacja dla klasy, która oczekuje na więcej niż jedno zdarzenie, należy sprawdzić typ przychodzącego <paramref name="managerType" /> odnosi się do parametru, aby dowiedzieć się, które zdarzenie wywołania. Dlatego każdego zdarzenia, który ma być część wzorca musi mieć dedykowany <see cref="T:System.Windows.WeakEventManager" />. Ponadto <paramref name="e" /> jako ogólnego jest wpisana nazwa parametru <see cref="T:System.EventArgs" />. W związku z tym, w kolejności uzyskać żadnych określonych właściwości wykorzystać dane zdarzenie, Twoja implementacja będą musieli rzutować na typ danych określonego zdarzenia.  Zazwyczaj po sprawdzania pod kątem tożsamości zdarzenia na podstawie <see cref="T:System.Windows.WeakEventManager" /> typu implementacji powinny wywoływać obsługi Klasa prywatna. Programu obsługi klasy wielkiego może być bardzo tej samej klasy program obsługi który jest używany do obsługi zdarzenia dla odbiorników, które są dodawane przy użyciu wzorca zdarzeń konwencjonalne Dodawanie funkcji za pośrednictwem <see langword="+=" /> zdarzenia na nadawcy. W poniższej sekcji przykład zawiera szablon nierównej implementacji.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="7a002-120">
              <para>This method is intended to receive all possible events where the receiver is in a listener list. Particularly if implementing for a class that is listening for more than one event, you must check the type of the incoming <paramref name="managerType" /> parameter in order to know which event the call corresponds to. This is why each event that is to be part of the pattern must have a dedicated <see cref="T:System.Windows.WeakEventManager" />. Also, the <paramref name="e" /> parameter is typed as the general <see cref="T:System.EventArgs" />. Therefore, in order get any specific properties out of the event data, your implementation will need to cast to the specific event data type.  Typically, after checking for the identity of the event based on the <see cref="T:System.Windows.WeakEventManager" /> type, your implementation should call a private class handler. Your class handler could conceivably be the very same class handler that is used to handle that event for listeners that are added through the conventional event pattern of adding via <see langword="+=" /> to the event on the sender. The following example section provides a rough implementation template.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>