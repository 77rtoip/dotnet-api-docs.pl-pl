<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3a1bf86fcc21c642d34254ee3721d50b914beee5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30714368" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="5de83-101">Zapewnia obsługę nasłuchiwania zdarzeń dla klas, które oczekują na odbieranie zdarzeń za pomocą wzorca WeakEvent i <see cref="T:System.Windows.WeakEventManager" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5de83-101">Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5de83-102"><xref:System.Windows.WeakEventManager> (Dyspozytora) przekazuje zdarzenia przez wywołanie metody <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> metody dla klasy, który implementuje ten interfejs, a które zostały dodane jako odbiorników przez wywołanie metody <xref:System.Windows.WeakEventManager> metody wcześniej.</span><span class="sxs-lookup"><span data-stu-id="5de83-102">The <xref:System.Windows.WeakEventManager> (a dispatcher) forwards an event by calling the <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> method on classes that implement this interface, and that have been added as listeners by calling <xref:System.Windows.WeakEventManager> methods beforehand.</span></span>  
  
 <span data-ttu-id="5de83-103">Główną przyczynę następującego wzorca WeakEvent jest, gdy źródło zdarzenia ma okres istnienia obiektu jest potencjalnie niezależna odbiorników zdarzeń.</span><span class="sxs-lookup"><span data-stu-id="5de83-103">The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners.</span></span> <span data-ttu-id="5de83-104">Przy użyciu centralnej zdarzeń wysyłką <xref:System.Windows.WeakEventManager> umożliwia obsługę odbiorników się odzyskiwanie pobrane (lub ręcznie przeczyścić), nawet jeśli okres istnienia obiektu źródłowego wykracza poza odbiorniki.</span><span class="sxs-lookup"><span data-stu-id="5de83-104">Using the central event dispatching of a <xref:System.Windows.WeakEventManager> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners.</span></span> <span data-ttu-id="5de83-105">Z kolei podłączenie normalne zdarzeń przy użyciu `+=` lub równoważne zdarzenia specyficzne dla języka składni powoduje, że źródło potencjalnie nadal podłączony do przechowywania silne odwołanie do obsługi.</span><span class="sxs-lookup"><span data-stu-id="5de83-105">By contrast, a normal event hookup using `+=` or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers.</span></span> <span data-ttu-id="5de83-106">Dzięki temu odwołania odbiornika przed bezużytecznych w odpowiednim czasie.</span><span class="sxs-lookup"><span data-stu-id="5de83-106">This keeps the listener references from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="5de83-107">Co gdzie relacje między źródłami a odbiorników sugeruje użycia tego wzorca sytuacja jest obsługa zdarzeń aktualizacji pochodzących z źródeł dla powiązania danych.</span><span class="sxs-lookup"><span data-stu-id="5de83-107">One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.</span></span>  
  
 <span data-ttu-id="5de83-108">Wzorzec WeakEvent służy do nasłuchiwania zdarzeń, które są zewnętrzne do aplikacji.</span><span class="sxs-lookup"><span data-stu-id="5de83-108">You can use the WeakEvent pattern to listen for events that are external to your application.</span></span> <span data-ttu-id="5de83-109">Musisz zdefiniować <xref:System.Windows.WeakEventManager> , podaj nasłuchiwania zachowanie w <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>i użyj <xref:System.Windows.WeakEventManager> odwołuje się do dołączenia obsługi zamiast `+=`.</span><span class="sxs-lookup"><span data-stu-id="5de83-109">You only need to define a <xref:System.Windows.WeakEventManager> for it, provide listening behavior in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, and use the <xref:System.Windows.WeakEventManager> to attach the handler references rather than `+=`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <span data-ttu-id="5de83-110">Typ <see cref="T:System.Windows.WeakEventManager" /> wywołaniem tej metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5de83-110">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</span>
          </span>
        </param>
        <param name="sender">
          <span data-ttu-id="5de83-111">Obiekt, który pochodzi zdarzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5de83-111">Object that originated the event.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="5de83-112">Dane zdarzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5de83-112">Event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5de83-113">Odbiera zdarzenia z Menedżera scentralizowane zdarzeń.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5de83-113">Receives events from the centralized event manager.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5de83-114">
            <see langword="true" /> Jeśli odbiornik obsługi zdarzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5de83-114">
              <see langword="true" /> if the listener handled the event.</span>
          </span>
          <span data-ttu-id="5de83-115">Jest on uznawany za błąd przez <see cref="T:System.Windows.WeakEventManager" /> Obsługa w [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] się zarejestrowanie odbiornika dla zdarzenia, który nie obsługuje odbiornika.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5de83-115">It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle.</span>
          </span>
          <span data-ttu-id="5de83-116">Niezależnie od tego, metoda powinna zwrócić <see langword="false" /> po otrzymaniu zdarzenie, które nie rozpoznaje lub dojścia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5de83-116">Regardless, the method should return <see langword="false" /> if it receives an event that it does not recognize or handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5de83-117">Poniższy przykład implementuje <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> celu zapewnienia obsługi wzorzec WeakEvent dwa zdarzenia hipotetyczny `ClockwiseSpin` i `CounterclockwiseSpin` każdy mieć dedykowana <xref:System.Windows.WeakEventManager> (tego nie pokazano).</span><span class="sxs-lookup"><span data-stu-id="5de83-117">The following example implements <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> to provide WeakEvent pattern support for two hypothetical events `ClockwiseSpin` and `CounterclockwiseSpin` that each have a dedicated <xref:System.Windows.WeakEventManager> (not shown).</span></span> <span data-ttu-id="5de83-118">Ta implementacja wywołuje klasy zastępcze obsługi dla każdego zdarzenia obsługiwanych Rzutowanie danych zdarzenia (w takim przypadku dwa zdarzenia udostępnianie typu danych zdarzenia `SpinEventArgs`).</span><span class="sxs-lookup"><span data-stu-id="5de83-118">This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type `SpinEventArgs`).</span></span> <span data-ttu-id="5de83-119">Implementacja zwraca `false` Jeśli odebrane zdarzenie nie jest taki, który jest oczekiwany.</span><span class="sxs-lookup"><span data-stu-id="5de83-119">The implementation returns `false` if the event received is not one that is expected.</span></span>  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="5de83-120">Ta metoda jest przeznaczona do odbierania wszystkie możliwe zdarzenia, gdzie odbiornika jest na liście odbiornika.</span>
            <span class="sxs-lookup">
              <span data-stu-id="5de83-120">This method is intended to receive all possible events where the receiver is in a listener list.</span>
            </span>
            <span data-ttu-id="5de83-121">Szczególnie jeśli implementacja dla klasy, która oczekuje na więcej niż jedno zdarzenie, należy zaznaczyć typ przychodzącego <paramref name="managerType" /> odpowiada parametr, aby wiedzieć, wywołanie zdarzenie (event).</span>
            <span class="sxs-lookup">
              <span data-stu-id="5de83-121">Particularly if implementing for a class that is listening for more than one event, you must check the type of the incoming <paramref name="managerType" /> parameter in order to know which event the call corresponds to.</span>
            </span>
            <span data-ttu-id="5de83-122">Dlatego każdego zdarzenia, który ma być częścią wzorzec musi mieć dedykowana <see cref="T:System.Windows.WeakEventManager" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="5de83-122">This is why each event that is to be part of the pattern must have a dedicated <see cref="T:System.Windows.WeakEventManager" />.</span>
            </span>
            <span data-ttu-id="5de83-123">Ponadto <paramref name="e" /> parametr jest typu ogólnego <see cref="T:System.EventArgs" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="5de83-123">Also, the <paramref name="e" /> parameter is typed as the general <see cref="T:System.EventArgs" />.</span>
            </span>
            <span data-ttu-id="5de83-124">W związku z tym w kolejności uzyskać żadnych określonych właściwości poza dane zdarzenia, implementacji, należy rzutować na typ danych określonego zdarzenia.</span>
            <span class="sxs-lookup">
              <span data-stu-id="5de83-124">Therefore, in order get any specific properties out of the event data, your implementation will need to cast to the specific event data type.</span>
            </span>
            <span data-ttu-id="5de83-125">Zwykle po sprawdzanie tożsamości zdarzenia na podstawie <see cref="T:System.Windows.WeakEventManager" /> typ implementacji powinny wywoływać obsługi Klasa prywatna.</span>
            <span class="sxs-lookup">
              <span data-stu-id="5de83-125">Typically, after checking for the identity of the event based on the <see cref="T:System.Windows.WeakEventManager" /> type, your implementation should call a private class handler.</span>
            </span>
            <span data-ttu-id="5de83-126">Powrotne można znaleźć programu obsługi klasy tej samej obsługi klasy, która jest używana do obsługi tego zdarzenia w przypadku odbiorników dodane za pomocą wzorca zdarzenia z konwencjonalnej dodawania za pośrednictwem <see langword="+=" /> w zdarzeniu na nadawcy.</span>
            <span class="sxs-lookup">
              <span data-stu-id="5de83-126">Your class handler could conceivably be the very same class handler that is used to handle that event for listeners that are added through the conventional event pattern of adding via <see langword="+=" /> to the event on the sender.</span>
            </span>
            <span data-ttu-id="5de83-127">W poniższej sekcji przykład zawiera szablon nierównej implementacji.</span>
            <span class="sxs-lookup">
              <span data-stu-id="5de83-127">The following example section provides a rough implementation template.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>