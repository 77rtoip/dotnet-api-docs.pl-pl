<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3a1bf86fcc21c642d34254ee3721d50b914beee5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30714368" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Zapewnia obsługę nasłuchiwania zdarzeń dla klas, które oczekują na odbieranie zdarzeń za pomocą wzorca WeakEvent i <see cref="T:System.Windows.WeakEventManager" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.WeakEventManager> (Dyspozytora) przekazuje zdarzenia przez wywołanie metody <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> metody dla klasy, który implementuje ten interfejs, a które zostały dodane jako odbiorników przez wywołanie metody <xref:System.Windows.WeakEventManager> metody wcześniej.  
  
 Główną przyczynę następującego wzorca WeakEvent jest, gdy źródło zdarzenia ma okres istnienia obiektu jest potencjalnie niezależna odbiorników zdarzeń. Przy użyciu centralnej zdarzeń wysyłką <xref:System.Windows.WeakEventManager> umożliwia obsługę odbiorników się odzyskiwanie pobrane (lub ręcznie przeczyścić), nawet jeśli okres istnienia obiektu źródłowego wykracza poza odbiorniki. Z kolei podłączenie normalne zdarzeń przy użyciu `+=` lub równoważne zdarzenia specyficzne dla języka składni powoduje, że źródło potencjalnie nadal podłączony do przechowywania silne odwołanie do obsługi. Dzięki temu odwołania odbiornika przed bezużytecznych w odpowiednim czasie.  
  
 Co gdzie relacje między źródłami a odbiorników sugeruje użycia tego wzorca sytuacja jest obsługa zdarzeń aktualizacji pochodzących z źródeł dla powiązania danych.  
  
 Wzorzec WeakEvent służy do nasłuchiwania zdarzeń, które są zewnętrzne do aplikacji. Musisz zdefiniować <xref:System.Windows.WeakEventManager> , podaj nasłuchiwania zachowanie w <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>i użyj <xref:System.Windows.WeakEventManager> odwołuje się do dołączenia obsługi zamiast `+=`.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">Typ <see cref="T:System.Windows.WeakEventManager" /> wywołaniem tej metody.</param>
        <param name="sender">Obiekt, który pochodzi zdarzenia.</param>
        <param name="e">Dane zdarzenia.</param>
        <summary>Odbiera zdarzenia z Menedżera scentralizowane zdarzeń.</summary>
        <returns>
          <see langword="true" /> Jeśli odbiornik obsługi zdarzenia. Jest on uznawany za błąd przez <see cref="T:System.Windows.WeakEventManager" /> Obsługa w [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] się zarejestrowanie odbiornika dla zdarzenia, który nie obsługuje odbiornika. Niezależnie od tego, metoda powinna zwrócić <see langword="false" /> po otrzymaniu zdarzenie, które nie rozpoznaje lub dojścia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład implementuje <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> celu zapewnienia obsługi wzorzec WeakEvent dwa zdarzenia hipotetyczny `ClockwiseSpin` i `CounterclockwiseSpin` każdy mieć dedykowana <xref:System.Windows.WeakEventManager> (tego nie pokazano). Ta implementacja wywołuje klasy zastępcze obsługi dla każdego zdarzenia obsługiwanych Rzutowanie danych zdarzenia (w takim przypadku dwa zdarzenia udostępnianie typu danych zdarzenia `SpinEventArgs`). Implementacja zwraca `false` Jeśli odebrane zdarzenie nie jest taki, który jest oczekiwany.  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Ta metoda jest przeznaczona do odbierania wszystkie możliwe zdarzenia, gdzie odbiornika jest na liście odbiornika. Szczególnie jeśli implementacja dla klasy, która oczekuje na więcej niż jedno zdarzenie, należy zaznaczyć typ przychodzącego <paramref name="managerType" /> odpowiada parametr, aby wiedzieć, wywołanie zdarzenie (event). Dlatego każdego zdarzenia, który ma być częścią wzorzec musi mieć dedykowana <see cref="T:System.Windows.WeakEventManager" />. Ponadto <paramref name="e" /> parametr jest typu ogólnego <see cref="T:System.EventArgs" />. W związku z tym w kolejności uzyskać żadnych określonych właściwości poza dane zdarzenia, implementacji, należy rzutować na typ danych określonego zdarzenia.  
  
 Zwykle po sprawdzanie tożsamości zdarzenia na podstawie <see cref="T:System.Windows.WeakEventManager" /> typ implementacji powinny wywoływać obsługi Klasa prywatna. Powrotne można znaleźć programu obsługi klasy tej samej obsługi klasy, która jest używana do obsługi tego zdarzenia w przypadku odbiorników dodane za pomocą wzorca zdarzenia z konwencjonalnej dodawania za pośrednictwem <see langword="+=" /> w zdarzeniu na nadawcy. W poniższej sekcji przykład zawiera szablon nierównej implementacji.</para>
        </block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>