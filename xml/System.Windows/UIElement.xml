<Type Name="UIElement" FullName="System.Windows.UIElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="58cf2394b2fe40f3260a70e32ac10ed7ecb0353b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37492896" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi UIElement extends System.Windows.Media.Visual implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.UIElement" />
  <TypeSignature Language="VB.NET" Value="Public Class UIElement&#xA;Inherits Visual&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class UIElement : System::Windows::Media::Visual, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <TypeSignature Language="F#" Value="type UIElement = class&#xA;    inherit Visual&#xA;    interface IAnimatable&#xA;    interface IInputElement" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Visual</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.UidProperty("Uid")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.Windows.UIElement" /> jest klasą bazową dla implementacji poziomu core WPF opierając się na elementy Windows Presentation Foundation (WPF) i właściwości podstawowe prezentacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement> stanowi punkt wyjścia dla elementu layout charakterystyki i ujawnia, którą można przesłonić metody wirtualne, które klasy pochodne, które mogą wpływać na układ renderowanie elementów zachowanie elementu i jego podrzędny.  
  
 Większość danych wejściowych i skoncentrowanie zachowanie dla elementów, ogólnie rzecz biorąc również jest zdefiniowany w <xref:System.Windows.UIElement> klasy. Obejmuje to zdarzenia klawiatury, myszy wejście pióra i właściwości powiązanych stanu. Wiele z tych zdarzeń są zdarzenia trasowane i mają wiele zdarzeń związanych z danych wejściowych, zarówno propagacji routingu wersji, a także tunelowania wersję zdarzenia. Te zdarzenia sparowane zwykle są interesujące największy autorom kontroli zdarzenia.  
  
 <xref:System.Windows.UIElement> zawiera również [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] wydania [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modelu zdarzeń, łącznie z metod, które można podnieść określony kierowane zdarzenia, które pochodzą z wystąpienia elementu.  
  
 Pod względem architektury <xref:System.Windows.UIElement> mogą zostać uwzględnione w przybliżeniu równa uchwyt okna w [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] programowania lub elementu [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] programowania. <xref:System.Windows.UIElement> to podstawowy element na poziomie core WPF.  
  
 A <xref:System.Windows.UIElement> ma następujące możliwości, które w szczególności są definiowane przez <xref:System.Windows.UIElement> klasy:  
  
-   Można renderować jako element podrzędny (<xref:System.Windows.UIElement> pochodzi od klasy <xref:System.Windows.Media.Visual>, klasa wysokiego poziomu grafiki)  
  
-   Zawiera logikę, która jest używany rozmiar i położenie elementów podrzędnych możliwe <xref:System.Windows.UIElement> (jeśli jest to interpretowane przez system układu)  
  
-   Może reagować na dane wejściowe użytkownika (w tym kontrolę nad dane wejściowe wprowadzenie wysyłania do za pośrednictwem ich obsługi zdarzenia, routing lub routingu poleceń)  
  
-   Można zgłosić zdarzenia trasowane, używane podczas podróży trasę przez drzewo logiczne elementów  
  
-   Obsługuje niektóre aspekty systemu animacji  
  
 <xref:System.Windows.FrameworkElement> jest klasa poziomie struktury implementacji WPF, która opiera się na <xref:System.Windows.UIElement>i dodaje specyficznych interakcji z poziomu framework WPF. <xref:System.Windows.FrameworkElement> dodaje i definiuje następujące możliwości:  
  
-   Dodatkowe właściwa dla struktury layout charakterystyki  
  
-   Obsługa metadanych bardziej rozbudowane raporty dotyczące właściwości  
  
-   Implementacja specyficzna dla klasy niektórych wejściowe klas podstawowych i ich dołączone właściwości lub zdarzeń dołączonych  
  
-   Obsługa stylów  
  
-   Uzyskania dalszej pomocy animacji  
  
 Inny powiązane, klasa jest <xref:System.Windows.ContentElement>. <xref:System.Windows.ContentElement> Klasa implementuje wiele z tych samych członków, jak <xref:System.Windows.UIElement>; różnicy między tymi dwoma klasami musiał z ich zamierzone należy umieszczać w modelu ogólnej zawartości. A <xref:System.Windows.UIElement> Klasa pochodna definiuje zazwyczaj stosunkowo sztywne model zawartości, co oznacza, że nie istnieją ograniczenia dotyczące elementy mogą być elementy podrzędne w znacznikach. Może to być pojemność przyjęcie mniej restrykcyjny zawartość elementu podrzędnego <xref:System.Windows.UIElement>, ale ta pojemność jest zazwyczaj scentralizowane w wyznaczonym właściwości zawartości. A <xref:System.Windows.ContentElement> zazwyczaj klasy pochodnej nie jest tak restrykcyjne o zawartości do obsługi scenariuszy, takich jak dokumenty w formacie przepływu.  
  
> [!IMPORTANT]
>  <xref:System.Windows.UIElement.Visibility%2A> stan ma wpływ na wszystkie dane wejściowe, przetwarzane przez ten element. Elementy, które nie są widoczne nie biorą udziału w zakresie testowania trafień i nie otrzymywać zdarzeń wejściowych, nawet, jeśli kursor znajduje się nad zakresem jeżeli byłoby elementu jeśli były widoczne.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UIElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.UIElement" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tworzenie nowego wystąpienia, które jest typu <xref:System.Windows.UIElement> jest nietypowy w kodzie aplikacji, ponieważ <xref:System.Windows.UIElement> to podstawowy element. Zobacz [podstawowy przegląd elementy](~/docs/framework/wpf/advanced/base-elements-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje program obsługi zdarzenia trasowanego określonego zdarzenia trasowane, dodanie obsługi kolekcji programu obsługi dla bieżącego elementu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement.AddHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identyfikator zdarzenia trasowanego mają być obsługiwane.</param>
        <param name="handler">Odwołanie do implementacji programu obsługi.</param>
        <summary>Dodaje program obsługi zdarzenia trasowanego określonego zdarzenia trasowane, dodanie obsługi kolekcji programu obsługi dla bieżącego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tę samą procedurę obsługi zdarzenie, dla którego można dodać wiele razy bez zgłaszania wyjątku. Jednak program obsługi jest faktycznie wywoływana wiele razy, gdy zdarzenie jest obsługiwane. W związku z tym należy rozważyć, jak to zachowanie może mieć skutki uboczne, które należy uwzględnić w implementację programu obsługi.  
  
 Zazwyczaj ta metoda umożliwia implementację metody dostępu "add", aby uzyskać [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] wzorzec dostępu do zdarzenia niestandardowe zdarzenie trasowane.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="uIElement.AddHandler (routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identyfikator zdarzenia trasowanego mają być obsługiwane.</param>
        <param name="handler">Odwołanie do implementacji programu obsługi.</param>
        <param name="handledEventsToo">
          <see langword="true" /> można zarejestrować program obsługi w taki sposób, że jest wywoływana, nawet wtedy, gdy zdarzenie trasowane jest oznaczony jako obsługiwane w jej danych zdarzeń; <see langword="false" /> zarejestrować program obsługi z warunkiem domyślne, które nie będą wywoływane, jeśli zdarzenie trasowane jest oznaczona jako obsługiwane.  Wartość domyślna to <see langword="false" />.  Nie rutynowo poproś o rehandle zdarzenia trasowanego.</param>
        <summary>Dodaje program obsługi zdarzenia trasowanego określonego zdarzenia trasowane, dodanie obsługi kolekcji programu obsługi dla bieżącego elementu. Określ <paramref name="handledEventsToo" /> jako <see langword="true" /> zapewnienie podana program obsługi, można wywołać dla zdarzenia trasowanego, który już został oznaczony jako obsługiwane w innym elemencie wzdłuż trasy zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przetwarzanie zdarzeń wejściowych niskiego poziomu w praktycznym sposobem jest złożonym zadaniem. Wiele kontrolek zaimplementować zachowanie, gdzie określone zdarzenie jest oznaczony jako obsłużony i zastępuje inne zdarzenie bardziej intuicyjne. Ogólnie rzecz biorąc kontrolki tylko oznaczy zdarzenie wejściowe platformy jako obsługiwane w przypadku niektórych zamiar projekt, aby to zrobić. W niektórych scenariuszach te zamiarach projekt może nie być, wymaga usługi określonego obsługi zdarzeń wejściowych. Jest on przeznaczony dla tych scenariuszy tego rejestrowanie obsługi za pomocą `handledEventsToo` jako `true` jest odpowiednia. Jednak możesz nie należy tego robić regularnie. Wywoływanie programów obsługi w odpowiedzi na wszystkie zdarzenia, nawet jeśli obsługiwany będzie skomplikować własnych zdarzeń aplikacji logiki przetwarzania. Jeśli logika obsługi jest istotne, mogą pojawić się spadek wydajności. Należy zarezerwować użytkowania dołączanie programy obsługi dla już obsługi zdarzeń dla sytuacji, w którym możesz mieć już odnaleziony podczas procesu projektowania, że niektóre formanty obsługi zdarzeń, które chcesz nadal obsługiwać za pomocą aplikacji logiki.  
  
 Inna technika unikanie klasy zachowania niektórych kombinacji kontroli zdarzenie obsługi polega na użyciu alternatywne (wersja zapoznawcza) to zdarzenie. Na przykład jeśli <xref:System.Windows.UIElement.MouseLeftButtonDown> jest oznaczony jako obsłużonych Obsługa klasy może być możliwe dodanie obsługi <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> zamiast tego.  
  
 Tę samą procedurę obsługi zdarzenie, dla którego można dodać wiele razy bez zgłaszania wyjątku. Jednak program obsługi jest faktycznie wywoływana wiele razy, gdy zdarzenie jest obsługiwane. W związku z tym należy rozważyć, jak to zachowanie może mieć skutki uboczne, które należy uwzględnić w implementację programu obsługi.  
  
 Zazwyczaj ta metoda umożliwia implementację metody dostępu "add", aby uzyskać [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] wzorzec dostępu do zdarzenia niestandardowe zdarzenie trasowane.  
  
   
  
## Examples  
 Poniższy przykład wykonuje program obsługi wywoływane na <xref:System.Windows.FrameworkElement.Initialized> zdarzenie na stronie, która dołącza obsługę zdefiniowanych do jednego z nazwanych elementów na stronie za pomocą `handledEventsToo` `true`. Czy można wywołać ten program obsługi, nawet wtedy, gdy inny element wzdłuż trasy oznaczone dane zdarzenia udostępnionego jako obsłużony przed osiągnięciem element obsługi dla trasy.  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AddToEventRoute : System.Windows.EventRoute * System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.AddToEventRoute (route, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route">Programy obsługi są dodawane do trasy zdarzeń.</param>
        <param name="e">Dane zdarzenia, które służy do dodawania obsługi. Ta metoda używa <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> właściwości danych zdarzenia, aby utworzyć procedury obsługi.</param>
        <summary>Dodaje obsługi do określonego <see cref="T:System.Windows.EventRoute" /> dla bieżącego <see cref="T:System.Windows.UIElement" /> kolekcję procedur obsługi zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda może być używana przez elementy host zawartości (albo te, które implementują <xref:System.Windows.IContentHost> lub tych, które nie) można dodać procedury obsługi dla elementów podrzędnych do <xref:System.Windows.EventRoute>. Zazwyczaj nie jest to wymagane dla <xref:System.Windows.UIElement>, ponieważ programy obsługi są automatycznie dodawane dla wszystkich elementów w ukończonej drzewo logiczne. W niektórych przypadkach, gdzie <xref:System.Windows.ContentElement> i <xref:System.Windows.UIElement> są zmieszane w drzewach oparte na szablonach, aktywne elementów pochodzących z konieczności szablon ma zostać dodany do trasy. Zarówno <xref:System.Windows.ContentElement> i <xref:System.Windows.UIElement> obsługuje wersję tej metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.UIElement.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy ten element może służyć jako obiekt docelowy operacji przeciągania i upuszczania.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli ten element może być używany jako obiekt docelowy operacji przeciągania i upuszczania. w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacje przeciągania i upuszczania nie są domyślnie włączone i musi być włączona celowo <xref:System.Windows.UIElement.AllowDrop%2A> do `true`. Po przekroczeniu tego ustawienia podstawowe, przeciągnij i upuść działanie zależy wyłącznie od implementacji i nie jest zdefiniowany przez <xref:System.Windows.UIElement> lub dowolnej klasy elementu podstawowego. Niektóre kontrolki, na przykład <xref:System.Windows.Controls.RichTextBox>, mają zachowanie domyślne. Aby uzyskać więcej informacji na temat przeciągania i upuszczania, zobacz [przeciągania i upuszczania Przegląd](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).  
  
 <xref:System.Windows.FrameworkElement> zastępuje metadanych dla tej właściwości zależności w swojej implementacji. W szczególności <xref:System.Windows.FrameworkElement> wyznacza tę właściwość, aby zezwolić na przejęcie wartości właściwości (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> jest `true` w metadanych). Dziedziczenie wartości właściwości w tym kontekście oznacza, że jeśli są elementami podrzędnymi bez innych wartości dla <xref:System.Windows.UIElement.AllowDrop%2A> przypisane przy użyciu wartości lokalnych lub style, wartość przypisaną wartość (ponownie, albo w stylach domyślnie najbliższym elemencie nadrzędnym wartości lub wartości lokalnej), a następnie będzie można przypisać wartości z elementu nadrzędnego do wszystkie elementy podrzędne wcześniej nieprzypisane przez system właściwości. W praktyce oznacza to, że można określić, czy zezwalać na operacje listy w elemencie głównym i że wartość będzie propagowany do wszystkich elementów podrzędnych, które nie mają przypisanych go jako `false`.  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.AllowDropProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład ustawia znaczników <xref:System.Windows.UIElement.AllowDrop%2A> właściwość `true` przy użyciu atrybutu na <xref:System.Windows.Controls.TextBox>, jak również niektóre inne ustawienie powiązane właściwości umożliwiające w agregacji, które <xref:System.Windows.Controls.TextBox> jako obiekt docelowy obiekt danych Tekst wielowierszowy po zostanie przesunięte. Aby uzyskać pełny przykład, zobacz [Załaduj przykład pliku porzucony](http://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7).  
  
 [!code-xaml[DragDrop_DropOpenTextFile#UIElementAllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DropOpenTextFile/CS/window1.xaml#uielementallowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowDropProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AllowDropProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.AllowDrop" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Stosuje animacji z właściwością określona zależność, w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest zapieczętowany i nie może być zastąpiona.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit" Usage="uIElement.ApplyAnimationClock (dp, clock)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">Identyfikator właściwości animować.</param>
        <param name="clock">Zegar animacji, formantów, która deklaruje animacji.</param>
        <summary>Stosuje animacji z właściwością określona zależność, w tym elemencie. Istniejących animacjach zostaną zatrzymane i zastąpione nowej animacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby usunąć animacji z właściwością, należy określić identyfikator dla tej właściwości jako `dp` i określ `clock` jako `null`. Spowoduje to usunięcie animacji i animowany właściwość jest ustawiona na wartość podstawowa. Zegar pierwotnie skojarzone animacji nie jest wyłączana. Inne animacji przypisane do tego zegara będzie kontynuował pracę.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` ma określonego czasu Animacja przez wywołanie metody <xref:System.Windows.UIElement.ApplyAnimationClock%2A> .  
  
 [!code-csharp[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/ClockControllerSpeedRatioExample.cs#uielementapplyanimationclock)]
 [!code-vb[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/clockcontrollerspeedratioexample.vb#uielementapplyanimationclock)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="uIElement.ApplyAnimationClock (dp, clock, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość animować.</param>
        <param name="clock">Zegar animacji, formantów, która deklaruje animacji.</param>
        <param name="handoffBehavior">Wartość wyliczenia. Wartość domyślna to <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, co spowoduje zatrzymanie wszelkich istniejących animacji i Zastąp nowym plikiem.</param>
        <summary>Dotyczy animacji właściwości określonej zależności w tym elemencie, umożliwiającym określenie, co się stanie, jeśli właściwość jest już uruchomiona Animacja.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby usunąć animacji z właściwością, należy określić identyfikator dla tej właściwości jako `dp` i określ `clock` jako `null`. Spowoduje to usunięcie animacji i animowany właściwość jest ustawiona na wartość podstawowa. Zegar pierwotnie skojarzone animacji nie jest wyłączana. Inne animacji przypisane do tego zegara będzie kontynuował pracę.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCaptured : bool" Usage="System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy co najmniej jednego dotknięcia są przechwytywane do tego elementu.</summary>
        <value>
          <see langword="true" /> Jeśli co najmniej jeden touch, które są przechwytywane do tego elementu; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCapturedWithin : bool" Usage="System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy co najmniej jednego dotknięcia są przechwytywane do tego elementu lub wszystkie elementy podrzędne w jego drzewa wizualnego.</summary>
        <value>
          <see langword="true" /> Jeśli co najmniej jeden touch, które są przechwytywane do tego elementu lub wszystkie elementy podrzędne w jego drzewa wizualnego; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesDirectlyOver : bool" Usage="System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy co najmniej jednego dotknięcia wciśnięto się nad tym elementem.</summary>
        <value>
          <see langword="true" /> Jeśli co najmniej jednego dotknięcia jest wciśnięty nad tym elementem; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesOver : bool" Usage="System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy co najmniej jednego dotknięcia naciśnięciu za pośrednictwem tego elementu lub wszystkie elementy podrzędne w jego drzewa wizualnego.</summary>
        <value>
          <see langword="true" /> Jeśli co najmniej jednego dotknięcia jest wciśnięty za pośrednictwem tego elementu lub wszystkie elementy podrzędne w jego drzewa wizualnego; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arrange">
      <MemberSignature Language="C#" Value="public void Arrange (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Arrange(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Arrange (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Arrange(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="member this.Arrange : System.Windows.Rect -&gt; unit" Usage="uIElement.Arrange finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">Rozmiaru końcowego, który element nadrzędny oblicza elementu podrzędnego, podana jako <see cref="T:System.Windows.Rect" /> wystąpienia.</param>
        <summary>Określa położenie elementów podrzędnych i określa rozmiar dla <see cref="T:System.Windows.UIElement" />. Elementy nadrzędne wywołanie tej metody z ich <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> implementacji (lub równoważne poziomie struktury WPF) w celu utworzenia aktualizację układu cykliczne. Ta metoda tworzy drugi przebieg aktualizacji układu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla elementu poziomie struktury WPF, wynikające zachowanie dla scenariuszy <xref:System.Windows.UIElement.Arrange%2A> nie powinien i nie może, chyba że użytkownik w tle można zmienić. Zamiast tego należy zastąpić <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementacji w klasie. Twoje <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementacja jest wywoływana wewnętrznie przez <xref:System.Windows.UIElement.Arrange%2A> jako część operacji układu poziomie struktury WPF domyślne. Twoje <xref:System.Windows.UIElement.ArrangeCore%2A> także wywołać implementację <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> dla każdego elementu podrzędnego, jeśli ma on elementy podrzędne.  
  
 Dla elementu podstawowego poziomu WPF wynikające zachowanie dla scenariuszy <xref:System.Windows.UIElement.Arrange%2A> nie powinien i nie może, chyba że użytkownik w tle można zmienić. Zamiast tego należy zastąpić <xref:System.Windows.UIElement.ArrangeCore%2A> w klasie. Twoje <xref:System.Windows.UIElement.ArrangeCore%2A> implementacja jest wywoływana wewnętrznie przez <xref:System.Windows.UIElement.Arrange%2A> jako część operacji układu poziomie struktury WPF domyślne. Jednak założono, że używasz układ poziomie struktury platformy WPF i jego system układu, który często nie jest tak, jeśli są specjalnie wyprowadzanie elementy w WPF poziomie core z <xref:System.Windows.UIElement> element klasy bazowej. Twoje <xref:System.Windows.UIElement.ArrangeCore%2A> także wywołać implementację <xref:System.Windows.UIElement.Arrange%2A> dla każdego elementu podrzędnego, jeśli ma on elementy podrzędne. Uwaga scenariusz poziom core WPF oznacza, że nie używasz <xref:System.Windows.FrameworkElement> pochodne klasy, ponieważ <xref:System.Windows.FrameworkElement> zamknięcia <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.  
  
 Obliczenie WPF poziomie struktury układzie strony [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] składa się z <xref:System.Windows.UIElement.Measure%2A> wywołania i <xref:System.Windows.UIElement.Arrange%2A> wywołania. Podczas <xref:System.Windows.UIElement.Measure%2A> wywołanie, system układu określa wymagań dotyczących rozmiaru elementu przy użyciu podanego <xref:System.Windows.Size> (`availableSize`) argumentów. Podczas <xref:System.Windows.UIElement.Arrange%2A> wywołanie, system układu Kończenie znajdujących się rozmiar i położenie elementu obwiedni.  Aby uzyskać więcej informacji, zobacz [układ](~/docs/framework/wpf/advanced/layout.md).  
  
 `availableSize` może być dowolną liczbę od 0 do nieskończoności. Elementy, aby zostać rozmieszczony Zwróć minimum <xref:System.Windows.Size> potrzebują za pośrednictwem `availableSize` parametru.  
  
 Gdy układ najpierw zostanie uruchomiony, zawsze otrzymuje <xref:System.Windows.UIElement.Measure%2A> wywołanie przed <xref:System.Windows.UIElement.Arrange%2A>. Jednak po pierwszym przebiegu układ go może zostać wyświetlony <xref:System.Windows.UIElement.Arrange%2A> wywołania bez <xref:System.Windows.UIElement.Measure%2A>; może się to zdarzyć, gdy właściwość, która ma wpływ tylko na <xref:System.Windows.UIElement.Arrange%2A> zmianie (na przykład wyrównanie), lub gdy odbierze element nadrzędny <xref:System.Windows.UIElement.Arrange%2A> bez <xref:System.Windows.UIElement.Measure%2A>. A <xref:System.Windows.UIElement.Measure%2A> wywołanie automatycznie spowoduje unieważnienie <xref:System.Windows.UIElement.Arrange%2A> wywołania.  
  
 Aktualizacje układu są zazwyczaj wykonywane asynchronicznie (o godzinie określany przez system układu). Element nie może być odzwierciedla natychmiast zmiany właściwości, które wpływają na zmiany rozmiaru elementu (takie jak <xref:System.Windows.FrameworkElement.Width%2A>).  
  
> [!NOTE]
>  Aktualizacje układu aktualizację można wymusić przy użyciu <xref:System.Windows.UIElement.UpdateLayout%2A> metody; jednak wywołaniu tej funkcji nie jest zalecane, ponieważ jest zazwyczaj zbędna i mogą powodować spadek wydajności. W wielu sytuacjach, w przypadku, gdy wywołanie <xref:System.Windows.UIElement.UpdateLayout%2A> może być odpowiednie, system układu będzie prawdopodobnie już przetwarzanie aktualizacji. System układu może przetwarzać zmiany układu w taki sposób, który można zoptymalizować wszystkie niezbędne aktualizacje w ramach pakietu.  
  
 System układu przechowuje dwie oddzielne kolejki nieprawidłowy układów, jeden dla <xref:System.Windows.UIElement.Measure%2A> i jeden dla <xref:System.Windows.UIElement.Arrange%2A>. Kolejka układu są sortowane na podstawie kolejności elementów w drzewie wizualnym. Wyżej w drzewie elementów znajdują się na początku kolejki, aby uniknąć nadmiarowe układy spowodowany przez powtarzające zmiany elementów nadrzędnych. Zduplikowane wpisy są automatycznie usuwane z kolejki, a elementy zostaną automatycznie usunięte z kolejki, jeśli są one już prawidłowe.  
  
 Podczas aktualizowania układu <xref:System.Windows.UIElement.Measure%2A> kolejki jest opróżniany najpierw następuje <xref:System.Windows.UIElement.Arrange%2A> kolejki. Element <xref:System.Windows.UIElement.Arrange%2A> kolejki nigdy nie będą ułożone, jeśli element <xref:System.Windows.UIElement.Measure%2A> kolejki.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected virtual void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="abstract member ArrangeCore : System.Windows.Rect -&gt; unit&#xA;override this.ArrangeCore : System.Windows.Rect -&gt; unit" Usage="uIElement.ArrangeCore finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">Końcowe obszaru nadrzędnym tego elementu należy używać rozmieścić wraz z jego elementów podrzędnych.</param>
        <summary>Określa szablon dla poziomu core WPF Rozmieść definicji układu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Zastąpienie tej metody przydaje się, tylko jeśli są wyprowadzanie na poziomie core WPF i nie używasz system poziomie struktury układu WPF i <xref:System.Windows.FrameworkElement> pochodne klasy, ponieważ <xref:System.Windows.FrameworkElement> zamknięcia <xref:System.Windows.FrameworkElement.ArrangeCore%2A>. Jeśli używasz systemu układów poziomie struktury WPF odpowiedniej metody do przesłonięcia dla układu swoiste dla klas Rozmieść zachowanie jest <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.  
  
   
  
## Examples  
 <xref:System.Windows.UIElement.ArrangeCore%2A> implementacje powinny wywoływać implementację podstawową, aby zwrócić rozmiar, następnie wywołać <xref:System.Windows.UIElement.Arrange%2A> metoda każdego elementu podrzędnego widoczne i uzgadniają rozmiary zwrócone przez te <xref:System.Windows.UIElement.Arrange%2A> wywołania z rozmiarem implementację podstawową. Logika uzgadniania aspektów <xref:System.Windows.UIElement.ArrangeCore%2A> wdrażania może się różnić w zależności od layout charakterystyki elementu. W poniższym przykładowym szablonie `VisualChildren` jest właściwością hipotetyczny, nazwę elementu może zdefiniować ułatwiające wyliczyć jego zawartości; <xref:System.Windows.UIElement> nie definiuje kolekcje zawartości na tym poziomie architektura poziomie struktury WPF odracza zachowania zawartości do elementów pochodnych, takich jak określonych kontrolek lub klas bazowych kontroli.  
  
 [!code-csharp[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementarrangeoverride)]
 [!code-vb[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementarrangeoverride)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli tworzysz elementów na poziomie core WPF, należy zastąpić to metodę, aby nadać unikatową nazwę elementu podstawowego poziomu WPF rozmieszczanie układu zachowanie lub się układ właściwe decyzje dotyczące elementów podrzędnych elementów. Zastąpienie może być konieczne, jeśli te elementy podrzędne nie są takie jak rozpoznać ze zdefiniowanym wzorzec <see cref="T:System.Windows.Controls.ItemCollection" />.  Element nadrzędny musi wywołać swoiste dla klas <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> dla każdego elementu podrzędnego, w przeciwnym razie te elementy podrzędne nie są renderowane.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>W tym elemencie, rozpoczyna się animacji dla określonej właściwości animowany.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit" Usage="uIElement.BeginAnimation (dp, animation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość, animować, określany jako identyfikator właściwości zależności.</param>
        <param name="animation">Oś czasu animacji, aby rozpocząć.</param>
        <summary>W tym elemencie, rozpoczyna się animacji dla określonej właściwości animowany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas sprawdzania, czy właściwość jest animowany, pamiętaj, że animacja rozpocznie się i uznaje się animowany podczas renderowania pierwszej ramki poza — animowane punkt początkowy.  
  
 Jeśli <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> dla `animation` jest `null`, a następnie zostaną usunięte wszystkie bieżące animacji i bieżącą wartość właściwości jest utrzymywana.  
  
 Jeśli cały `animation` wartość `null`wszystkich animacji są usuwane z właściwości i wartości właściwości wraca do swojej wartości podstawowej. Oś czasu animacji pierwotnie skojarzone nie jest wyłączana. Inne animacji, przypisany do tej osi czasu będzie kontynuował pracę.  
  
   
  
## Examples  
 Poniższy przykład tworzy animacji, przypisuje do niego, a następnie wywołuje <xref:System.Windows.UIElement.BeginAnimation%2A> go uruchomić.  
  
 [!code-csharp[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#beginanimation)]
 [!code-vb[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#beginanimation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="uIElement.BeginAnimation (dp, animation, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość, animować, określany jako identyfikator właściwości zależności.</param>
        <param name="animation">Oś czasu animacji, które mają być stosowane.</param>
        <param name="handoffBehavior">Wartość wyliczenia, która określa, jak nowej animacji współdziała z dowolnego animacji bieżącego (uruchomione), które już mają wpływ na wartość właściwości.</param>
        <summary>Rozpoczyna się, które określonych animacji dla określonej właściwości animowany, w tym elemencie, przy użyciu opcji określania, co się stanie, jeśli właściwość jest już uruchomiona Animacja.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas sprawdzania, czy właściwość jest animowany, pamiętaj, że animacja rozpocznie się i uznaje się animowany podczas renderowania pierwszej ramki poza — animowane punkt początkowy.  
  
 Jeśli <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> dla `animation` jest `null`, a następnie zostaną usunięte wszystkie bieżące animacji i bieżącą wartość właściwości jest utrzymywana.  
  
 Jeśli cały `animation` wartość `null`wszystkich animacji są usuwane z właściwości i wartości właściwości wraca do swojej wartości podstawowej. Oś czasu animacji pierwotnie skojarzone nie jest wyłączana. Inne animacji, przypisany do tej osi czasu będzie kontynuował pracę.  
  
   
  
## Examples  
 Poniższy przykład wykonuje program obsługi, który uzyskuje dostęp do istniejących animacji z zasobem, a następnie wywołuje <xref:System.Windows.UIElement.BeginAnimation%2A> z działaniem określonym przekazywanie.  
  
 [!code-csharp[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/csharp/VS_Snippets_Wpf/BrushesIntroduction/CSharp/SampleViewer.xaml.cs#beginanimationhandoff)]
 [!code-vb[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BrushesIntroduction/visualbasic/sampleviewer.xaml.vb#beginanimationhandoff)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffect BitmapEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffect" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffect As BitmapEffect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffect ^ BitmapEffect { System::Windows::Media::Effects::BitmapEffect ^ get(); void set(System::Windows::Media::Effects::BitmapEffect ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BitmapEffect : System.Windows.Media.Effects.BitmapEffect with get, set" Usage="System.Windows.UIElement.BitmapEffect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia efekt mapy bitowej stosowanego bezpośrednio do renderowanej zawartości dla tego elementu.  Jest to właściwość zależności.</summary>
        <value>Efekt mapy bitowej do zastosowania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Effects.BitmapEffect> Dlatego jest typem abstrakcyjnym [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] użycie wymaga zaimplementowano klasy pochodnej <xref:System.Windows.Media.Effects.BitmapEffect>, takich jak <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>. Uwaga jeden implementowana Klasa pochodna jest typ kolekcji, który służy do określenia więcej niż jedną sekwencyjne <xref:System.Windows.Media.Effects.BitmapEffect>, przy użyciu składni tagów zagnieżdżonych.  
  
 Nie istniejących pochodne klasy <xref:System.Windows.Media.Effects.BitmapEffect> obsługuje konwertera typów więc [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] składnia używana dla tej właściwości jest ogólnie składni elementu właściwości.  
  
<a name="dependencyPropertyInfo_BitmapEffect"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.BitmapEffectProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 W poniższym przykładzie ustawiono mapy bitowej efektu, za pomocą <xref:System.Windows.Media.Effects.BlurBitmapEffect>.  
  
 [!code-csharp[EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline](~/samples/snippets/csharp/VS_Snippets_Wpf/EffectsGallery_snip/CSharp/blurcodebehindexample.xaml.cs#codebehindblurcodebehindexampleinline)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInput">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffectInput" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffectInput As BitmapEffectInput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffectInput ^ BitmapEffectInput { System::Windows::Media::Effects::BitmapEffectInput ^ get(); void set(System::Windows::Media::Effects::BitmapEffectInput ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BitmapEffectInput : System.Windows.Media.Effects.BitmapEffectInput with get, set" Usage="System.Windows.UIElement.BitmapEffectInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffectInput</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia źródło wejścia dla efektu mapy bitowej stosowanego bezpośrednio do renderowanej zawartości dla tego elementu.  Jest to właściwość zależności.</summary>
        <value>Źródło dla efektów mapy bitowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_BitmapEffectInput"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.BitmapEffectInputProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInputProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectInputProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectInputProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectInputProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BitmapEffectInputProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BitmapEffectProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.BitmapEffectProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.BitmapEffect" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMode">
      <MemberSignature Language="C#" Value="public System.Windows.Media.CacheMode CacheMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.CacheMode CacheMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CacheMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CacheMode As CacheMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::CacheMode ^ CacheMode { System::Windows::Media::CacheMode ^ get(); void set(System::Windows::Media::CacheMode ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheMode : System.Windows.Media.CacheMode with get, set" Usage="System.Windows.UIElement.CacheMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.CacheMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia pamięci podręcznej reprezentację <see cref="T:System.Windows.UIElement" />.</summary>
        <value>A <see cref="T:System.Windows.Media.CacheMode" /> zawierający reprezentację pamięci podręcznej <see cref="T:System.Windows.UIElement" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustaw <xref:System.Windows.UIElement.CacheMode%2A> właściwość, jeśli zachodzi konieczność zwiększenia wydajności dla zawartości, która jest czasochłonne do renderowania. Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Media.BitmapCache>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.CacheMode" />
        <altmember cref="T:System.Windows.Media.BitmapCache" />
        <altmember cref="T:System.Windows.Media.BitmapCacheBrush" />
      </Docs>
    </Member>
    <Member MemberName="CacheModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CacheModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CacheModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.CacheModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CacheModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CacheModeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CacheModeProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.CacheModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.CacheMode" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberSignature Language="F#" Value="abstract member CaptureMouse : unit -&gt; bool&#xA;override this.CaptureMouse : unit -&gt; bool" Usage="uIElement.CaptureMouse " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Próbuje wymusić przechwytywanie myszy do tego elementu.</summary>
        <returns>
          <see langword="true" /> Jeśli przycisk myszy jest pomyślnie przechwycono; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mają być przechwycone, element musi być włączona. Sprawdź, czy <xref:System.Windows.UIElement.IsEnabled%2A> jest `true` przed wywołaniem <xref:System.Windows.UIElement.CaptureMouse%2A>.  
  
 Jeśli wywołanie <xref:System.Windows.UIElement.CaptureMouse%2A> zwraca `true`, następnie <xref:System.Windows.UIElement.IsMouseCaptured%2A> jest również `true`.  
  
 Wywołanie <xref:System.Windows.UIElement.CaptureMouse%2A> zwraca `true`, a następnie <xref:System.Windows.UIElement.GotMouseCapture> i <xref:System.Windows.UIElement.IsMouseCapturedChanged> zdarzenia są wywoływane, za pomocą <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> w zdarzeniu dane raportowane jako element gdzie <xref:System.Windows.UIElement.CaptureMouse%2A> metoda jest wywoływana. Jeśli wymusisz przechwytywania, może zakłócać istniejącego przechwycenia — szczególnie w przypadku przechwytywania, które odnoszą się do przeciągania i upuszczania za pomocą myszy.  
  
 Aby wyczyścić przechwytywanie myszy ze wszystkich elementów, należy wywołać <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> z `element` podana jako parametr `null`.  
  
   
  
## Examples  
 Poniższy przykład implementuje parę obsługi myszy i kombinacji klawiszy danych wejściowych, które przechwytywania (i uncapture) myszy i włączyć myszy specjalnego trybu wyświetlania modelu 3D.  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberSignature Language="F#" Value="abstract member CaptureStylus : unit -&gt; bool&#xA;override this.CaptureStylus : unit -&gt; bool" Usage="uIElement.CaptureStylus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Próbuje wymusić Przechwytywanie pióra do tego elementu.</summary>
        <returns>
          <see langword="true" /> Jeśli pióro została pomyślnie przechwycona; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja oparte na podstawowej domyślnego urządzenia pióro zawsze zwraca `true`. Jednak jeśli rozszerzania wejściowych urządzeń, które zapewniają implementację urządzenia wejściowego systemu jest możliwe utworzenie systemu z implementacją urządzenia alternatywnych pióra, która może zwracać różne wyniki.  
  
 Po przechwyceniu pióra przez element, odbierze wejście pióra, nawet wtedy, gdy pióro znajduje się poza jej granicami. Pióro są zazwyczaj przechwytywane tylko podczas operacji przeciągania i upuszczania.  
  
 Wywołanie tej metody wywołuje odpowiednią statyczne <xref:System.Windows.Input.Stylus> metoda <xref:System.Windows.Input.Stylus.Capture%2A>. Zachowanie rzeczywistego przechwytywania jest implementowany przez wdrożenia urządzeniami active pióra.  
  
 Mają być przechwycone, element musi być włączona. Sprawdź, czy <xref:System.Windows.UIElement.IsEnabled%2A> jest `true` zwrócić przed wywołaniem <xref:System.Windows.UIElement.CaptureStylus%2A>.  
  
 Jeśli wywołanie <xref:System.Windows.UIElement.CaptureStylus%2A> zwraca `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A> jest również `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.CaptureTouch : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement.CaptureTouch touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Urządzenie do przechwytywania.</param>
        <summary>Próbuje wymusić przechwytywania touch do tego elementu.</summary>
        <returns>
          <see langword="true" /> Jeśli określony touch są przechwytywane do tego elementu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.CaptureTouch%2A> zwróci `false` Jeśli <xref:System.Windows.Input.TouchDevice> aktualnie są przechwytywane do innego elementu.  
  
 Jeśli <xref:System.Windows.UIElement.CaptureTouch%2A> zwraca `true`, a następnie <xref:System.Windows.UIElement.GotTouchCapture> zdarzenie jest wywoływane.  
  
 Aby zwolnić przechwytywania jednym naciśnięciem przycisku z tego elementu, należy użyć <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> metodę i określić urządzeń dotykowych do wydania. Aby zwolnić wszystkie ma z tego elementu, należy użyć <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="touchDevice" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Geometry Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Geometry Clip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Geometry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Geometry ^ Clip { System::Windows::Media::Geometry ^ get(); void set(System::Windows::Media::Geometry ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Clip : System.Windows.Media.Geometry with get, set" Usage="System.Windows.UIElement.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia geometrię użytą do zdefiniowania konturu zawartości elementu.  Jest to właściwość zależności.</summary>
        <value>Geometria służący do zmiany rozmiaru obszaru przycinania. Wartość domyślna to null <see cref="T:System.Windows.Media.Geometry" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy spoza geometrii zostaną graficznie przycięte w renderowanym układzie. Geometria nie ma być prostokątny.  
  
<a name="dependencyPropertyInfo_Clip"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ClipProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Ten przykład pokazuje jak zdefiniować framework element <xref:System.Windows.UIElement.Clip%2A> regionu. Aby zdefiniować klipu, należy użyć <xref:System.Windows.Media.Geometry> (na przykład <xref:System.Windows.Media.EllipseGeometry> można ustawić elementu <xref:System.Windows.UIElement.Clip%2A> właściwości. Widoczne będą tylko obszar, który znajduje się w regionie geometrii.  
  
 W poniższym przykładzie przedstawiono <xref:System.Windows.Controls.Image> elementu bez zdefiniowanym obszarem przycinania. Ponieważ nie zdefiniowano żadnych obszar przycinania, cały obraz jest wyświetlany.  
  
 [!code-xaml[ClipPathExample#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#2)]  
  
 ![Obiekt przed zastosowaniem obszar przycinania](~/add/media/mil-task-clip-region-noclip.png "obiekt przed zastosowaniem obszar przycinania")  
Obraz z nie obszar przycinania  
  
 W następnym przykładzie jest tworzony obraz identyczne, z tą różnicą, że ma region zdefiniowany klipu. Tylko część obrazu, który znajduje się w obszarze <xref:System.Windows.Media.EllipseGeometry> będą wyświetlane.  
  
 [!code-xaml[ClipPathExample#4](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#4)]  
  
 ![Przycięty obiekt](~/add/media/mil-task-clip-region-ellispe.PNG "przycięty obiekt")  
Obraz z regionem klipu eliptycznego  
  
 Poniższy przykład pokazuje, jak animowanie framework elementu <xref:System.Windows.UIElement.Clip%2A> regionu. W tym przykładzie <xref:System.Windows.Media.EllipseGeometry> służy do definiowania region eliptycznego klipu <xref:System.Windows.Controls.Image> elementu. A <xref:System.Windows.Media.Animation.PointAnimation> animuje geometrii elipsy <xref:System.Windows.Media.EllipseGeometry.Center%2A> właściwość (0, 0) do (200, 150). Animacja rozpoczyna odtwarzanie po obraz, który jest ładowany i jest powtarzany na czas nieokreślony.  
  
 [!code-xaml[ClipPathExample#5](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#5)]  
  
 Aby uzyskać pełny przykład, zobacz [przykładowe Region klipu](http://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="ClipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.ClipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.Clip" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToBounds">
      <MemberSignature Language="C#" Value="public bool ClipToBounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipToBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.ClipToBounds" />
      <MemberSignature Language="VB.NET" Value="Public Property ClipToBounds As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ClipToBounds { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ClipToBounds : bool with get, set" Usage="System.Windows.UIElement.ClipToBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy należy przyciąć zawartość tego elementu (lub zawartość pochodzącą z elementy podrzędne tego elementu) aby dopasować do rozmiarów elementu zawierającego.   Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli przycinania zawartości; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla elementów podrzędnych <xref:System.Windows.UIElement.ClipToBounds%2A> ma inny wpływ na układ zachowań w zależności od tego, czy wysokość i szerokość elementu nadrzędnego jest zależą od <xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A> lub <xref:System.Windows.FrameworkElement.MaxHeight%2A>  /  <xref:System.Windows.FrameworkElement.MaxWidth%2A>. <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> elementu nadrzędnego zawsze są przestrzegane niezależnie od wartości <xref:System.Windows.UIElement.ClipToBounds%2A> i skuteczne wycinka będzie zawsze zawartości, w oparciu o te maksymalne wartości. Nadrzędnego <xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A> ustawienia nie będą przyciąć zawartość po <xref:System.Windows.UIElement.ClipToBounds%2A> jest `false`, ale będzie obcina zawartości if <xref:System.Windows.UIElement.ClipToBounds%2A> jest `true`.  
  
 Należy pamiętać, że przyjęto wartość domyślną `false` jest ogólne zachowanie zaimplementowanego w <xref:System.Windows.UIElement> klasy. Istnieje możliwość, że dany element, który pochodzi od klasy <xref:System.Windows.UIElement> zastąpić metadane zależności właściwości dla tej właściwości, w tym wystąpieniu na domyślne `true` zamiast tego. Kilka istniejących klas pochodnych zastępują te metadane i/lub dostosować wartość domyślna właściwości zależności.  
  
 <xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter>, i <xref:System.Windows.Controls.Primitives.Popup> każdego zastąpić wartość domyślna ma być `true`.  
  
 <xref:System.Windows.FrameworkElement> zastępuje metadanych dla tej właściwości zależności. W szczególności <xref:System.Windows.FrameworkElement> wyznacza tę właściwość, aby zezwolić na przejęcie wartości właściwości (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> jest `true` w metadanych). Dziedziczenie wartości właściwości w tym kontekście oznacza, że jeśli są elementami podrzędnymi bez innych wartości dla <xref:System.Windows.UIElement.ClipToBounds%2A> przypisane przy użyciu wartości lokalnych lub style, wartość przypisaną wartość (ponownie, albo w stylach domyślnie najbliższym elemencie nadrzędnym wartości, lub wartość lokalnie), a następnie będzie można przypisać wartości z elementu nadrzędnego do wszystkich elementów podrzędnych nieprzypisane przez system właściwości. W praktyce oznacza to, że można określić, czy zezwalać na klip granice w elemencie głównym i że wartość będzie propagowany do wszystkich elementów podrzędnych, które nie mają przypisanych go jako `false`.  
  
<a name="dependencyPropertyInfo_ClipToBounds"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ClipToBoundsProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Clip" />
      </Docs>
    </Member>
    <Member MemberName="ClipToBoundsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipToBoundsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipToBoundsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipToBoundsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipToBoundsProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.ClipToBounds" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandBindings : System.Windows.Input.CommandBindingCollection" Usage="System.Windows.UIElement.CommandBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję <see cref="T:System.Windows.Input.CommandBinding" /> obiektów skojarzonych z tym elementem. A <see cref="T:System.Windows.Input.CommandBinding" /> umożliwia obsługę dla tego elementu oraz deklaruje powiązanie między poleceniem, jego zdarzeniami i procedurami obsługi dołączonymi przez ten element.</summary>
        <value>Kolekcja wszystkich <see cref="T:System.Windows.Input.CommandBinding" /> obiektów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inny typowy sposób, aby wypełnić <xref:System.Windows.UIElement.CommandBindings%2A> kolekcji jest użycie <xref:System.Windows.Input.CommandManager> metody programowo.  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  
  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *oneOrMoreCommandBindings*  
 Co najmniej jeden <xref:System.Windows.Input.CommandBinding> elementów. Każdy z nich powinien mieć <xref:System.Windows.Input.CommandBinding.Command%2A> znane polecenie ustawioną wartość atrybutu i atrybuty ustawione dla <xref:System.Windows.Input.CommandBinding.CanExecute> i <xref:System.Windows.Input.CommandBinding.Executed> implementacji programu obsługi. Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Input.CommandBinding>.  
  
   
  
## Examples  
 W poniższym przykładzie dodano <xref:System.Windows.Input.CommandBinding> do okna przy użyciu znaczników. Należy pamiętać, że w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], <xref:System.Windows.Input.CommandBindingCollection> nie został zadeklarowany w znacznikach jako element; obiekt kolekcji jest wnioskowany według typu, który pobiera właściwości i możesz wypełnić element właściwości z co najmniej <xref:System.Windows.Input.CommandBinding> elementy:  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 Aby uzyskać więcej informacji na temat [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] składni dla kolekcji, zobacz [składnia XAML w szczegółów](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).  
  
 Poniższy przykład działa zasadniczo tak samo w kodzie:  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="DesiredSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size DesiredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size DesiredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.DesiredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DesiredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size DesiredSize { System::Windows::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DesiredSize : System.Windows.Size" Usage="System.Windows.UIElement.DesiredSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera rozmiar, który ten element obliczone podczas przebiegu miary procesu układu.</summary>
        <value>Obliczona rozmiar, który będzie wymagany rozmiar Rozmieść — dostęp próbny.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwrócona przez tę właściwość tylko będzie prawidłowa, jeśli wartość <xref:System.Windows.UIElement.IsMeasureValid%2A> właściwość `true`.  
  
 <xref:System.Windows.UIElement.DesiredSize%2A> jest zazwyczaj sprawdzana zgodnie z jednym z czynników pomiaru podczas implementowania zachowanie układu zastępuje takich jak <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, lub <xref:System.Windows.UIElement.OnRender%2A> (w <xref:System.Windows.UIElement.OnRender%2A> zamierzone, Zapisz, użytkownik może również obejmować kontrolę <xref:System.Windows.UIElement.RenderSize%2A> zamiast tego, ale zależy to od usługi Implementacja). W zależności od scenariusza <xref:System.Windows.UIElement.DesiredSize%2A> może być w pełni przestrzegane przez logika implementacji ograniczenia na <xref:System.Windows.UIElement.DesiredSize%2A> może być stosowana, i takie ograniczenia mogą również zmienić inne cechy elementu nadrzędnego lub element podrzędny. Na przykład formant, który obsługuje przewijany regionach (ale nie będzie dziedziczyć z formantów WPF poziomie struktury, umożliwiające już przewijany regionów) można porównać dostępny rozmiar do <xref:System.Windows.UIElement.DesiredSize%2A>. Kontrolki, następnie można ustawić stanu wewnętrznego, która umożliwiała paski przewijania w [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] dla tej kontrolki. Ewentualnie <xref:System.Windows.UIElement.DesiredSize%2A> potencjalnie może zostać zignorowane również w niektórych scenariuszach.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono <xref:System.Windows.UIElement.DesiredSize%2A> jako część <xref:System.Windows.FrameworkElement.MeasureOverride%2A> implementacji. Zwróć uwagę jak <xref:System.Windows.UIElement.Measure%2A> jest wywoływana bezpośrednio przed uzyskiwanie <xref:System.Windows.UIElement.DesiredSize%2A>. Gwarantuje to, że <xref:System.Windows.UIElement.DesiredSize%2A> przechowuje wartość uzasadnione.  
  
 [!code-cpp[PlotPanel#2](~/samples/snippets/cpp/VS_Snippets_Wpf/PlotPanel/CPP/PlotPanel.cpp#2)]
 [!code-csharp[PlotPanel#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PlotPanel/CSharp/PlotPanel.cs#2)]
 [!code-vb[PlotPanel#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PlotPanel/VisualBasic/PlotPanel.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.DragEventHandler " Usage="member this.DragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie przeciągania przy użyciu tego elementu jako element docelowy przeciągania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.DragEnter> zdarzeń dołączonych do podstawowych <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.DragEnterEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewDragEnter>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnDragEnter%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.DragEnter" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.DragEventHandler " Usage="member this.DragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie przeciągania przy użyciu tego elementu jako element źródłowy przeciągania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.DragLeave> zdarzeń dołączonych do podstawowych <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.DragLeaveEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.DragDrop.PreviewDragLeave>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnDragLeave%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.DragLeave" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.DragEventHandler " Usage="member this.DragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie przeciągania z ten element to potencjalny element docelowy upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie występuje nawet wtedy, gdy przeciągania pochodzi z granicami elementu. Jeśli przeciąganie rozpoczyna się poza granicami i przenosi wewnątrz, to zdarzenie jest również inicjowane, jak również <xref:System.Windows.UIElement.DragEnter> i powiązane zdarzenia (wersja zapoznawcza).  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.DragOver> zdarzeń dołączonych do podstawowych <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.DragOverEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.DragDrop.PreviewDragOver>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnDragOver%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.DragOver" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberSignature Language="F#" Value="member this.Drop : System.Windows.DragEventHandler " Usage="member this.Drop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie upuszczania za pomocą tego elementu jako element docelowy upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.Drop?displayProperty=nameWithType> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.Drop> zdarzeń dołączonych do podstawowych <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.DropEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewDrop>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnDrop%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.Drop" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.Effect Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.Effect Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As Effect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::Effect ^ Effect { System::Windows::Media::Effects::Effect ^ get(); void set(System::Windows::Media::Effects::Effect ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Media.Effects.Effect with get, set" Usage="System.Windows.UIElement.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.Effect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia efekt mapy bitowej do zastosowania do <see cref="T:System.Windows.UIElement" />. Jest to właściwość zależności.</summary>
        <value>
          <see cref="T:System.Windows.Media.Effects.Effect" /> Reprezentujący efekt mapy bitowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.UIElement.Effect%2A> właściwości, aby zastosować efekt mapy bitowej do <xref:System.Windows.UIElement>.  
  
<a name="dependencyPropertyInfo_Effect"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.EffectProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Następujące XAML pokazuje, jak przypisać niestandardowe <xref:System.Windows.Media.Effects.ShaderEffect> do <xref:System.Windows.UIElement.Effect%2A> właściwości.  
  
 [!code-xaml[System.Windows.Media.Effects.ShaderEffect#1000](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Media.Effects.ShaderEffect/CS/Window1.xaml#1000)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Effects.Effect" />
        <altmember cref="T:System.Windows.Media.Effects.ShaderEffect" />
      </Docs>
    </Member>
    <Member MemberName="EffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty EffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty EffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.EffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ EffectProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable EffectProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.EffectProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.Effect" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberSignature Language="F#" Value="abstract member Focus : unit -&gt; bool&#xA;override this.Focus : unit -&gt; bool" Usage="uIElement.Focus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Próbuje ustawić fokus na ten element.</summary>
        <returns>
          <see langword="true" /> Jeśli ustawiono fokus klawiatury i logiczny fokus do tego elementu; <see langword="false" /> czy tylko fokus logiczny została ustawiona na ten element, czy wywołanie tej metody nie wymuszać fokus do zmiany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jako focusable, <xref:System.Windows.UIElement.Focusable%2A> i <xref:System.Windows.UIElement.IsEnabled%2A> muszą być `true`.  
  
 Nawet, jeśli element jest obsługa zdarzeń focusable i włączony, w obrębie określonego drzewa, (takie jak w przypadku kontrolek złożonych) może odpowiadać na zdarzenia fokusu w wersji zapoznawczej, nie zezwalając fokus, więc ta metoda zwróci `false`.  
  
 Fokus na ogół jest regulowane przez dwie oddzielne koncepcje: za pomocą klawiatury fokus i fokus logiczny, które nie zawsze są identyczne.  Aby uzyskać więcej informacji, zobacz [Przegląd fokus](~/docs/framework/wpf/advanced/focus-overview.md) lub [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
 Jeśli wywołanie <xref:System.Windows.UIElement.Focus%2A> zwraca `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A> i <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> są również `true`.  
  
 Jeśli powiązane właściwości nie są już `true`, gdy wywołujesz <xref:System.Windows.UIElement.Focus%2A>, co najmniej jeden z następujących zdarzeń, które są wywoływane w następującej kolejności: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (źródło jest nowy obiekt docelowy fokus), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus> (źródło jest nowy obiekt docelowy koncentracji uwagi).  
  
 Aby to wywołanie zakończy się powodzeniem innego elementu w aplikacji niezbędnych do wcześniej fokus.  
  
   
  
## Examples  
 W poniższym przykładzie ustawiono fokus <xref:System.Windows.Controls.TextBox> odwołuje <xref:System.Windows.FrameworkElement.Name%2A>, a następnie dopasowuje pozycję kursora w ramach <xref:System.Windows.Controls.TextBox>.  
  
 [!code-csharp[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/TextBox_CursorToEnd/CSharp/Window1.xaml.cs#uielementfocus)]
 [!code-vb[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextBox_CursorToEnd/VisualBasic/Window1.xaml.vb#uielementfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Focusable : bool with get, set" Usage="System.Windows.UIElement.Focusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy element może odebrać fokus.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli element jest focusable; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko wąsko zdefiniowany element otrzymuje dane wejściowe z klawiatury.  
  
 <xref:System.Windows.UIElement.Focusable%2A> jest [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] metody dostępu właściwości w celu przedstawienia w rzeczywistości właściwość zależności. Ta właściwość określonej zależności dość często ma wartość jawnego "domyślna" ustawione inaczej w element pochodny klas, zwłaszcza w kontrolkach. Zwykle dzieje się to jeden z dwóch sposobów:  
  
-   Właściwość zależności jest dziedziczona przez konkretnej klasy pochodnej, ale pochodnych przesłonięć klasy metadanych właściwości zależności i zmienia wartość domyślna właściwości.  
  
-   Stylu lub szablonu jest stosowana do elementu, który ustawia tę wartość właściwości zależności inaczej.  
  
 Na przykład jawnego "domyślną" <xref:System.Windows.UIElement.Focusable%2A> dla <xref:System.Windows.Controls.Button> formant będzie `true`, nawet jeśli <xref:System.Windows.Controls.Button> dziedziczy <xref:System.Windows.UIElement.Focusable%2A> jako [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] właściwość bezpośrednio z <xref:System.Windows.UIElement>. Jest to spowodowane stosowanie metadanych wartość <xref:System.Windows.UIElement.Focusable%2A> właściwość zależności została zastąpiona w konstruktorze statycznym z <xref:System.Windows.Controls.Control> podstawowej klasy, która znajduje się między <xref:System.Windows.Controls.Button> i <xref:System.Windows.UIElement> w hierarchii klas.  
  
 W przypadku dziedziczonych przez <xref:System.Windows.Controls.Control> lub jej klasy pochodne <xref:System.Windows.Controls.Control> redefiniuje wartość domyślna tej właściwości to `true`.  
  
 W przypadku dziedziczonych przez <xref:System.Windows.Controls.Label> (czyli <xref:System.Windows.Controls.Control> klasy pochodnej), wartością domyślną jest ponownie zdefiniować jej ponownie jako `false`.  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.FocusableProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje szablonu kontrolki dla określonego formantu niestandardowego, który ustawia <xref:System.Windows.UIElement.Focusable%2A> `false` na jeden z elementów w ramach szablonu.  
  
 [!code-xaml[RichTextBox_NoScrollViewer#_ControlTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBox_NoScrollViewer/CS/window1.xaml#_controltemplate)]
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Podczas wyprowadzania z <see cref="T:System.Windows.UIElement" /> bezpośrednio (w przeciwieństwie do z <see cref="T:System.Windows.Controls.Control" />), należy wziąć pod uwagę, czy chcesz, aby Twoje element ma być focusable, ponieważ domyślny element nie będzie focusable. W razie potrzeby swojej element ma być focusable przesłanianie metadanych dla tej właściwości w konstruktorze statycznym danego typu w następujący sposób: [! code-csharp — CorePseudocode #UIElementShortOverride (~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/ CSharp/corepseudocode.cs#uielementshortoverride)] [! code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)] gdzie <paramref name="myElement" /> powinna być nazwą klasy typu, który jest zastąpienie wartości metadanych na.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberSignature Language="F#" Value="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.Focusable" /> zmiany właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusableProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.FocusableProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.Focusable" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj&#xA;override this.GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj" Usage="uIElement.GetAnimationBaseValue dp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość zależności do sprawdzenia.</param>
        <summary>Zwraca wartość właściwości podstawowej dla określonej właściwości dla tego elementu, bez uwzględnienia wszelkie animowane wartość z bieżącą lub zatrzymać animację.</summary>
        <returns>Właściwość wartości tak, jakby nie animacji są dołączone do właściwości określonej zależności.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie animacje są dołączone do właściwości, a następnie <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> wartość zwracana jest zawsze taka sama jak <xref:System.Windows.DependencyObject.GetValue%2A> zwracają wartość. W przypadku dołączonych animacji, następnie wszystkie możliwe animacje uzyskane wartości w tym początek wartości są ignorowane i wartość właściwości jest ustalana na wszystkich innych możliwych danych wejściowych. Aby uzyskać więcej informacji, zobacz [następstwo wartości właściwości](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).  
  
   
  
## Examples  
 Poniższy przykład wykonuje program obsługi, który zgłasza wartość podstawową animowany <xref:System.Windows.FrameworkElement.Width%2A> właściwość <xref:System.Windows.Controls.Button>, a także wartości bazowej przekształcenia.  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalue)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalue)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberSignature Language="F#" Value="abstract member GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry&#xA;override this.GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry" Usage="uIElement.GetLayoutClip layoutSlotSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">Dostępny rozmiar podane przez element.</param>
        <summary>Zwraca geometrię wycinka alternatywne, która reprezentuje region, który może zostać obcięty, jeśli <see cref="P:System.Windows.UIElement.ClipToBounds" /> ustawiono <see langword="true" />.</summary>
        <returns>Potencjalne geometrii wycinka.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja zwróci wartość uzasadnione, ale nie używa `layoutSlotSize` parametru w obliczeniach. Zamiast tego wykorzystuje wartość <xref:System.Windows.UIElement.RenderSize%2A>.  
  
 Ta metoda jest znacznie zastąpiona przez natychmiastowe pochodnej <xref:System.Windows.FrameworkElement> klasy i <xref:System.Windows.FrameworkElement> zastąpienie tworzy dokładniejsze zachowanie ogólne WPF poziomie struktury elementów. Aby uzyskać więcej informacji, zobacz <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="abstract member GetUIParentCore : unit -&gt; System.Windows.DependencyObject&#xA;override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="uIElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Po przesłonięciu w klasie pochodnej zwraca alternatywę [! Element nadrzędny include[TLA#tla_ui](~/includes/tlasharptla-UI-MD.MD)] dla tego elementu, jeśli istnieje visual elementu nadrzędnego.</summary>
        <returns>Obiekt, który, jeśli implementacja klasy pochodnej z połączeniem alternatywny nadrzędny do raportu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja wirtualnych tej metody zwraca `null`. <xref:System.Windows.FrameworkElement> udostępnia implementację praktyczne.  
  
 Alternatywne nadrzędnych są używane do routingu zdarzeń, w przypadkach, gdy element tworzy alternatywnych nadrzędnej struktury tak, aby jego zdarzeń są kierowane w taki sposób, że diverges ze standardowego wzorca routingu w górę drzewa wizualnego do standardowego elementu nadrzędnego, lub w dół w Wyświetl podgląd strategii routingu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie przeciągania i upuszczania, które obejmuje ten element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.GiveFeedback> Zdarzeń umożliwia źródło zdarzenia przeciągania, aby modyfikować wygląd wskaźnika myszy, aby dać wizualną opinię użytkownika podczas operacji przeciągania i upuszczania. Wizualną opinię wzmacnia to, że trwa operacja przeciągania i upuszczania.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.GiveFeedback> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.GiveFeedback> zdarzeń dołączonych do podstawowych <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.GiveFeedbackEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewGiveFeedback>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnGiveFeedback%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.GiveFeedback" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.RoutedEventHandler " Usage="member this.GotFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element pobiera fokus logiczny.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fokus logiczny różni się od fokus klawiatury, gdy fokus jest celowo wymuszone za pomocą wywołania metody, ale poprzednie fokus klawiatury nie istnieje w innym zakresie. W tym scenariuszu fokus klawiatury pozostaje, gdzie jest i element gdzie <xref:System.Windows.UIElement.Focus%2A> wywoływana jest metoda nadal pobiera fokus logiczny.  
  
 Bardziej precyzyjne interpretacji to zdarzenie jest jej jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsFocused%2A> zmiany właściwości elementu w trasie z `false` do `true`.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który otrzymuje fokus może być nie zawiera elementu podrzędnego zamiast elementu gdzie faktycznie dołączony program obsługi zdarzeń. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w dane zdarzeń, aby określić rzeczywisty element, który zdobyte fokus.  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.GotFocusEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.RoutedEventHandler>|  
  
-   Nie ma żadnego odpowiedniego zdarzenia tunelowania.  
  
-   Zastąp <xref:System.Windows.UIElement.OnGotFocus%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.GotFocus" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klawiatura ma fokus w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> jest podobne zdarzenie, który śledzi zmiany stanu we właściwości, która przechowuje stan aktywny elementu; <xref:System.Windows.UIElement.GotKeyboardFocus> zdarzenie jest zgłaszane w wielu z tych samych warunkach.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który ma fokus może być nie zawiera elementu podrzędnego zamiast elementu gdzie faktycznie dołączony program obsługi zdarzeń. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w dane zdarzeń, aby określić rzeczywisty element, który jest ustawiony fokus.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.GotKeyboardFocus> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.GotKeyboardFocus> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.GotKeyboardFocusEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element przechwytuje mysz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy element przechwytuje mysz, otrzymuje wejście myszy nawet wtedy, gdy wskaźnik myszy znajduje się poza jej granicami. Mysz są zazwyczaj przechwytywane tylko podczas operacji przeciągania i upuszczania i pozostaje przechwycone, dopóki nie wystąpi akcja upuszczania operacji przeciągania i upuszczania.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który ma przechwytywania może być nie zawiera elementu podrzędnego zamiast elementu gdzie faktycznie dołączony program obsługi zdarzeń. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w zdarzeniu przechwytywania danych, aby określić rzeczywisty element, który ma myszy.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.GotMouseCapture> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.GotMouseCapture> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.GotMouseCaptureEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Nie ma żadnego zdefiniowanych odpowiednie zdarzenia tunelowania.  
  
-   Zastąp <xref:System.Windows.UIElement.OnGotMouseCapture%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.GotMouseCapture" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element przechwytuje pióro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po przechwyceniu pióra przez element, odbierze wejście pióra, nawet jeśli kursor znajduje się poza jej granicami. Pióro są zazwyczaj przechwytywane tylko podczas operacji przeciągania i upuszczania i zachowuje przechwytywania, dopóki nie wystąpi akcja upuszczania operacji przeciągania i upuszczania.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który ma przechwytywania może być nie zawiera elementu podrzędnego zamiast elementu gdzie faktycznie dołączony program obsługi zdarzeń. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w dane zdarzeń, aby określić rzeczywisty element, który ma przechwytywania.  
  
 To zdarzenie tworzy alias dla dołączone zdarzenie dla tej klasy, aby <xref:System.Windows.UIElement.GotStylusCapture> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.GotStylusCapture> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.GotStylusCaptureEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Nie ma żadnego zdefiniowanych odpowiednie zdarzenia tunelowania.  
  
-   Zastąp <xref:System.Windows.UIElement.OnGotStylusCapture%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.GotStylusCapture" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.GotTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.GotTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy touch są przechwytywane do tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.GotTouchCaptureEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Zastąp <xref:System.Windows.UIElement.OnGotTouchCapture%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.GotTouchCapture" /> zdarzenia trasowanego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAnimatedProperties : bool" Usage="System.Windows.UIElement.HasAnimatedProperties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy ten element ma wszystkie właściwości animowany.</summary>
        <value>
          <see langword="true" /> Jeśli ten element ma animacji dołączone do żadnej z jej właściwości; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca `true` zarówno dla trwałego animacji (unclocked, zawsze uruchomiona), i animacji, które mają szczególne osi czasu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEffectiveKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual bool HasEffectiveKeyboardFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasEffectiveKeyboardFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property HasEffectiveKeyboardFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool HasEffectiveKeyboardFocus { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasEffectiveKeyboardFocus : bool" Usage="System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Windows.UIElement" /> jest ustawiony fokus.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Windows.UIElement" /> ma fokus; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podklasy mogą przesłaniać tę właściwość, aby określić, kiedy element ma fokus klawiatury.  To jest przydatne, gdy Twoje <xref:System.Windows.UIElement> zawiera elementy, które mogą mieć fokus klawiatury i chcesz, aby Twoje element do raportu, że ma ona fokus.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTestCore">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Implementuje <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> umożliwiają określanie wartości podstawowy element trafień zachowanie testowania.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.GeometryHitTestResult HitTestCore(class System.Windows.Media.GeometryHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As GeometryHitTestParameters) As GeometryHitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::GeometryHitTestResult ^ HitTestCore(System::Windows::Media::GeometryHitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="override this.HitTestCore : System.Windows.Media.GeometryHitTestParameters -&gt; System.Windows.Media.GeometryHitTestResult" Usage="uIElement.HitTestCore hitTestParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.GeometryHitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.GeometryHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">W tym artykule opisano trafień testów do wykonania, łącznie z pierwszym punktem trafień.</param>
        <summary>Implementuje <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> umożliwiają określanie wartości podstawowy element trafień testowania zachowanie (zwracanie <see cref="T:System.Windows.Media.GeometryHitTestResult" />).</summary>
        <returns>Wyniki testu, w tym geometrycznych oceniono.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zobacz oryginalnej metody wirtualnej <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> dla informacji w przypadku przesłaniania tej metody w dalszych klas pochodnych. Należy pamiętać, że kilku określonych kontrolek (<xref:System.Windows.Controls.TextBlock>, na przykład) mają różne implementacji, które zastąpią ten zestaw.  
  
 Ta metoda nie jest przeznaczona do wywoływania z kodu aplikacji. Ta metoda obsługuje zachowania wewnętrznego testowania trafień, udostępnianych przez różne aspekty systemu wprowadzania (czy wskaźnik myszy nad elementem, na przykład).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.HitTestResult HitTestCore(class System.Windows.Media.PointHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As PointHitTestParameters) As HitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::HitTestResult ^ HitTestCore(System::Windows::Media::PointHitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="override this.HitTestCore : System.Windows.Media.PointHitTestParameters -&gt; System.Windows.Media.HitTestResult" Usage="uIElement.HitTestCore hitTestParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.HitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.PointHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">W tym artykule opisano trafień testów do wykonania, łącznie z pierwszym punktem trafień.</param>
        <summary>Implementuje <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> umożliwiają określanie wartości podstawowy element trafień testowania zachowanie (zwracanie <see cref="T:System.Windows.Media.HitTestResult" />).</summary>
        <returns>Wyniki testu, w tym ocenianą punktu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zobacz oryginalnej metody wirtualnej <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> dla informacji w przypadku przesłaniania tej metody w dalszych klas pochodnych. Należy pamiętać, że kilku określonych kontrolek (<xref:System.Windows.Controls.TextBlock>, na przykład) mają różne implementacje, które zastąpią <xref:System.Windows.UIElement.HitTestCore%2A> zgodnie z definicją <xref:System.Windows.UIElement>.  
  
 Ta metoda nie jest przeznaczona do wywoływania z kodu aplikacji. Ta metoda obsługuje zachowania wewnętrznego testowania trafień, udostępnianych przez różne aspekty systemu wprowadzania (czy wskaźnik myszy nad elementem, na przykład).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBindings : System.Windows.Input.InputBindingCollection" Usage="System.Windows.UIElement.InputBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję powiązań wejściowych skojarzonych z tym elementem.</summary>
        <value>Kolekcja powiązania danych wejściowych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powiązania danych wejściowych obsługuje powiązanie polecenia, aby urządzenia wejściowe. Na przykład <xref:System.Windows.Input.MouseBinding> implementuje wejściowych powiązania, które zawierają właściwości, które są urządzeń myszy.  
  
 Kolekcja powiązania danych wejściowych będzie zawierać zarówno powiązania danych wejściowych, które odnoszą się do typu, jak i powiązania danych wejściowych, które są zadeklarowane w wystąpieniu.  
  
 Powiązaną właściwość <xref:System.Windows.UIElement.CommandBindings%2A>, przechowuje kolekcję powiązań polecenia. Różnią się od powiązania danych wejściowych, w tym, że reprezentują wyższy poziom szczegółów przetwarzania polecenia - akcje, które są powiązane z znanych poleceń.  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  
  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *oneOrMoreInputBindings*  
 Co najmniej jeden <xref:System.Windows.Input.InputBinding> elementów (zazwyczaj <xref:System.Windows.Input.KeyBinding> lub <xref:System.Windows.Input.MouseBinding> klas pochodnych). Każdy z nich powinny mieć <xref:System.Windows.Input.InputBinding.Command%2A> i <xref:System.Windows.Input.InputBinding.Gesture%2A> atrybut.  
  
   
  
## Examples  
 Poniższy przykład powoduje wypełnienie tej właściwości na <xref:System.Windows.Window>, za pomocą jednego <xref:System.Windows.Input.KeyBinding>.  
  
 [!code-xaml[CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 Aby uzyskać więcej informacji na temat [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] składni dla kolekcji, zobacz [składnia XAML w szczegółów](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InputHitTest">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement InputHitTest (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.IInputElement InputHitTest(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::IInputElement ^ InputHitTest(System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="member this.InputHitTest : System.Windows.Point -&gt; System.Windows.IInputElement" Usage="uIElement.InputHitTest point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">Przesunięcie współrzędne w ramach tego elementu.</param>
        <summary>Zwraca element input w bieżącym elemencie, który znajduje się na określonych współrzędnych, względem bieżącego elementu początkowego.</summary>
        <returns>Element podrzędny, która znajduje się na pozycji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.IInputElement> jest zwracana jako typ zwracany, ponieważ ten typ jest wspólny interfejs dla obu <xref:System.Windows.UIElement> i <xref:System.Windows.ContentElement>. Można następnie odpowiednio rzutować zwracany typ lub użyć wystąpienia interfejsu dla niektórych elementów członkowskich, które są definiowane przez <xref:System.Windows.IInputElement> interfejsu.  
  
 Ta metoda nie jest zazwyczaj wywoływana z kodu aplikacji. Wywołanie tej metody jest tylko jeśli zamierzasz potrzebę ponownego zaimplementowania rozległe niskopoziomowy odpowiedzialny funkcje danych wejściowych, które już istnieją, takie jak ponowne tworzenie logiki urządzeń myszy.  
  
 <xref:System.Windows.IContentHost> kontrakty <xref:System.Windows.IContentHost.InputHitTest%2A> metody z tym samym podpisie, niektóre elementy zadecydować o stosowaniu jawnie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateArrange">
      <MemberSignature Language="C#" Value="public void InvalidateArrange ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateArrange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateArrange" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateArrange ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateArrange();" />
      <MemberSignature Language="F#" Value="member this.InvalidateArrange : unit -&gt; unit" Usage="uIElement.InvalidateArrange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unieważnia stanu Rozmieść (układ) dla elementu. Po unieważniania, element mieć jej układ zaktualizowane, będzie występować asynchronicznie, chyba że następnie wymuszone przez <see cref="M:System.Windows.UIElement.UpdateLayout" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Częste wywołania <xref:System.Windows.UIElement.InvalidateArrange%2A> lub, w szczególności <xref:System.Windows.UIElement.UpdateLayout%2A> mieć konsekwencje istotnie poprawiającą wydajność. W związku z tym, należy unikać wywołanie tej metody, chyba że potrzebujesz absolutnie stanu dokładny układ dla kolejnych wywołań do innych [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] w kodzie. Zaawansowany scenariusz, w którym może wywołać <xref:System.Windows.UIElement.InvalidateArrange%2A> jest, jeśli tworzysz <xref:System.Windows.PropertyChangedCallback> dla właściwości zależności, który nie jest włączony <xref:System.Windows.Freezable> lub <xref:System.Windows.FrameworkElement> pochodne klasy, która nadal ma wpływ przebiegu rozmieszczanie układu, gdy zmienia się.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateMeasure">
      <MemberSignature Language="C#" Value="public void InvalidateMeasure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateMeasure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateMeasure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateMeasure();" />
      <MemberSignature Language="F#" Value="member this.InvalidateMeasure : unit -&gt; unit" Usage="uIElement.InvalidateMeasure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unieważnia stanu pomiaru (układ) dla elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie tej metody także wywołania <xref:System.Windows.UIElement.InvalidateArrange%2A> wewnętrznie, nie ma potrzeby wywołać <xref:System.Windows.UIElement.InvalidateMeasure%2A> i <xref:System.Windows.UIElement.InvalidateArrange%2A> w odstępie czasu. Po unieważniania, element będzie mieć jej układ zaktualizowany, nastąpi asynchronicznie, chyba że <xref:System.Windows.UIElement.UpdateLayout%2A> jest wywoływana, aby wymusić zmianę układu synchroniczne.  
  
 System układu poziomie struktury WPF nie obchodzenie zmian w drzewie wizualnym elementu, a w typowych przypadkach unieważniania układu systemu układów wywołuje wielokrotność tej metody, gdy jest to konieczne. Tej metody powinny wywoływać tylko w przypadku, jeśli eksportują implementacji układ pełny bezpośrednie manipulowanie drzewo elementów lub podobne zaawansowanych scenariuszy. Taki scenariusz zaawansowane jest, jeśli tworzysz <xref:System.Windows.PropertyChangedCallback> dla właściwości zależności, który nie jest włączony <xref:System.Windows.Freezable> lub <xref:System.Windows.FrameworkElement> pochodne klasy, która nadal ma wpływ przebiegu miary układu, gdy zmienia.  
  
 Częste wywołania <xref:System.Windows.UIElement.InvalidateMeasure%2A> lub, w szczególności <xref:System.Windows.UIElement.UpdateLayout%2A> mieć konsekwencje istotnie poprawiającą wydajność. W związku z tym, należy unikać wywołanie tej metody, chyba że potrzebujesz absolutnie stanu dokładny układ dla kolejnych wywołań do innych [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] w kodzie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateVisual">
      <MemberSignature Language="C#" Value="public void InvalidateVisual ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateVisual() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateVisual" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateVisual ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateVisual();" />
      <MemberSignature Language="F#" Value="member this.InvalidateVisual : unit -&gt; unit" Usage="uIElement.InvalidateVisual " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Renderowanie elementu unieważnia i wymusza pełną nowe przekazanie układu. <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> jest wywoływana po zakończeniu cyklu układu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wywołuje <xref:System.Windows.UIElement.InvalidateArrange%2A> wewnętrznie.  
  
 Ta metoda nie jest zazwyczaj wywoływana z kodu aplikacji. System układu poziomie struktury WPF nie obchodzenie zmian w drzewie wizualnym elementu, a będzie wywoływać wielokrotność tej metody, gdy jest to konieczne już. Wywołanie tej metody jest niezbędne tylko w przypadku zaawansowanych scenariuszy. Taki scenariusz zaawansowane jest, jeśli tworzysz <xref:System.Windows.PropertyChangedCallback> dla właściwości zależności, który nie jest włączony <xref:System.Windows.Freezable> lub <xref:System.Windows.FrameworkElement> pochodne klasy, która nadal ma wpływ układ, gdy zmienia się.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
      </Docs>
    </Member>
    <Member MemberName="IsArrangeValid">
      <MemberSignature Language="C#" Value="public bool IsArrangeValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArrangeValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsArrangeValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArrangeValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArrangeValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArrangeValid : bool" Usage="System.Windows.UIElement.IsArrangeValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy obliczanej rozmiar i położenie elementów podrzędnych w układzie tego elementu są prawidłowe.</summary>
        <value>
          <see langword="true" /> Jeśli rozmiar i położenie układu są ważne. w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można wymusić rozwiązań do unieważniony przez wywołanie metody <xref:System.Windows.UIElement.InvalidateArrange%2A> tego elementu (lub jego elementów nadrzędnych). Flagi układ recomposition, w czasie, gdy system układ określa. Alternatywnie natychmiastowego wywołania <xref:System.Windows.UIElement.UpdateLayout%2A> można ustanowić, ale to powinno mieć miejsce tylko, gdy jest pewność, że nie dalsze invalidations pochodzą oczekujące (konsekwencje wydajności ma dużą liczbę aktualizacji niepotrzebnie wymuszonego).  
  
 <xref:System.Windows.UIElement.IsArrangeValid%2A> nie może być `true` chyba że <xref:System.Windows.UIElement.IsMeasureValid%2A> jest również `true` (w procesie układ rozmieszczenie nie może być nieprawidłowy bez miary, najpierw jest nieprawidłowy).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
        <altmember cref="P:System.Windows.UIElement.IsMeasureValid" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.UIElement.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy ten element jest włączony w [! INCLUDE[TLA#tla_ui](~/includes/tlasharptla-UI-MD.MD)].  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli element jest włączony; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy pamiętać, ta właściwość ma wpływ implementacje swoiste dla klas <xref:System.Windows.UIElement.IsEnabledCore%2A> na konkretne elementy, często w czasie wykonywania. W związku z tym wartość domyślną, wskazane jest czasami nie skuteczne. Na przykład <xref:System.Windows.Controls.Primitives.ScrollBar> będzie <xref:System.Windows.UIElement.IsEnabled%2A> `false` zawsze, gdy okaże się, że nie ma potrzeby obsługi paska przewijania. Trwa próba skonfigurowania tej wartości, również potencjalnie zostanie przesłonięta przez wartość zwrócona przez obiekt <xref:System.Windows.UIElement.IsEnabledCore%2A>.  
  
 Elementy, które nie są włączone nie uczestniczą w testowania trafień lub koncentracji uwagi i w związku z tym nie będzie źródeł zdarzeń wejściowych.  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsEnabledProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 W poniższym przykładzie pokazano program obsługi na jednym przycisku, gdy wartość zostanie wykonany <xref:System.Windows.UIElement.IsEnabled%2A> `false` na inny przycisk o nazwie `b1`.  
  
 [!code-csharp[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/CSharp/default.xaml.cs#handler)]
 [!code-vb[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/VisualBasic/default.xaml.vb#handler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsEnabled" /> właściwość zmiany tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabledCore : bool" Usage="System.Windows.UIElement.IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która staje się wartość zwracaną przez <see cref="P:System.Windows.UIElement.IsEnabled" /> w klasach pochodnych.</summary>
        <value>
          <see langword="true" /> Jeśli element jest włączony; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Domyślna implementacja tej właściwości przechowuje wartość i oblicza również, czy element nadrzędny tego elementu jest włączony. (Jeśli element nadrzędny nie jest włączona, element podrzędny nie może skutecznie włączone w praktyczne [! INCLUDE[TLA#tla_ui](~/includes/tlasharptla-UI-MD.MD)].) Jeśli chcesz przesłonić tę implementację, należy upewnić się, że wywoływać implementację podstawową, aby zachować to zachowanie.  <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> Klasa udostępnia istniejącą implementację zastąpienie tej właściwości. To zastąpienie Określa, czy zawartość wewnątrz obszaru zawartości prezentację przekracza dostępny obszar. Jeśli zawartość jest większa niż obszar, część paska przewijania jest włączona. W przeciwnym razie nie włączono paska przewijania.</para>
        </block>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
        <altmember cref="P:System.Windows.UIElement.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsEnabled" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFocused : bool" Usage="System.Windows.UIElement.IsFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą, czy ten element ma fokus logiczny.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli ten element ma fokus logiczny; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fokus logiczny może różnić się od fokus klawiatury, jeśli aplikacja ma wiele działów fokus, takich jak między zawartość menu i pozostałą częścią aplikacji. W tym scenariuszu fokus klawiatury może być tylko na jednym z elementów interfejsu użytkownika aplikacji, jednak niektóre elementy w innych działów fokus może nadal przechowywać fokus logiczny. Aby uzyskać więcej informacji na temat logiczny fokus, zobacz [Przegląd fokus](~/docs/framework/wpf/advanced/focus-overview.md).  
  
 Nie należy ustawiać fokus przez ustawienie tej właściwości (jest tylko do odczytu). Typowym zastosowaniem dla tej właściwości jest używana jako właściwość zależności <xref:System.Windows.Setter> lub <xref:System.Windows.EventTrigger>. Aby programowo ustawić fokus, należy wywołać <xref:System.Windows.UIElement.Focus%2A>. Fokus można również ustawić wyniku akcji użytkownika lub przez implementacje kontrolki, które prawdopodobnie obejmować zachowanie przechwytywanie myszy.  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsFocusedProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład dotyczy programu obsługi kodu, który zmienia tła kontrolki, gdy koncentruje się.  
  
 [!code-csharp[PopupSimple#IsFocused](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSimple/CSharp/Window1.xaml.cs#isfocused)]  
  
 Inny typowy sposób, aby osiągnąć ten sam efekt jest umieszczenie <xref:System.Windows.Trigger> w <xref:System.Windows.Style> kontrolki; to podejście nie wymaga obsługi określonych zdarzeń z kodem i pozwala projektantom lepszy dostęp do interaktywnych i graficzny rodzaj [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. Aby uzyskać przykład, zobacz [jak: utworzyć zewnętrzne efekt poświata](http://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsFocused" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisible">
      <MemberSignature Language="C#" Value="public bool IsHitTestVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsHitTestVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHitTestVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHitTestVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisible : bool with get, set" Usage="System.Windows.UIElement.IsHitTestVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość, która deklaruje, czy ten element może być zwrócony jako wynik testu trafienia z niektórych części zrenderowanej zawartości. Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli ten element mogą być zwracane jako wynik testu trafienia z co najmniej jeden punkt; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Skuteczne wartość tej właściwości jest wpływ względne położenie trafień sprawdzalnego działa zgodnie elementy w drzewie logicznym. Na przykład, jeśli element jest elementem podrzędnym elementu element, który jest nie przeprowadzanie testu trafienia widoczne, będą nadal obowiązywać wartość właściwości w elemencie podrzędnym `false`nawet wtedy, gdy lokalnie ustawieniem tej wartości. Z tego powodu ważne jest, że nie zostanie ustawiony <xref:System.Windows.UIElement.IsHitTestVisible%2A> do `false` sterowanie złożone chyba, że nie ma żadnych danych wejściowych lub testowania kontrolkę trafień. Aby uzyskać więcej informacji na temat testowania trafień, zobacz [trafień testowania w warstwie wizualnej](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).  
  
<a name="dependencyPropertyInfo_IsHitTestVisible"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsHitTestVisibleProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsHitTestVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsHitTestVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> zmiany właściwości zależności w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsHitTestVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHitTestVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsHitTestVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHitTestVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputMethodEnabled : bool" Usage="System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy system metodę wprowadzania, takich jak [! INCLUDE[TLA#tla_ime](~/includes/tlasharptla-IME-MD.MD)] jest włączone do przetwarzania danych wejściowych do tego elementu.</summary>
        <value>
          <see langword="true" /> Jeśli metoda wprowadzania danych jest aktywna; w przeciwnym razie <see langword="false" />. Wartość domyślna właściwości dołączone to <see langword="true;" /> jednak to będzie zależeć od rzeczywistego stanu metody wprowadzania danych w czasie wykonywania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca wartość, która jest zwracana przez właściwość dołączonych <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> dla aktualnie włączonego metody wprowadzania (klawiatury, mowy i inne urządzenia wejściowego).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocused : bool" Usage="System.Windows.UIElement.IsKeyboardFocused" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy ten element ma fokus klawiatury.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli ten element ma fokus klawiatury; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zmiany ustalona wartość tej właściwości może towarzyszyć zdarzeń związanych z fokusem.  
  
 <xref:System.Windows.UIElement.IsKeyboardFocused%2A> i <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> są często używane w ramach procedury obsługi zdarzeń klasy dla innych zdarzeń związanych z danych wejściowych, na przykład aby ustalić, czy element jest już ma fokus klawiatury lub aby oznaczeń, gdy wskaźnik myszy zdarzeń i zdarzeń klawiatury występują w połączeniu.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
        <altmember cref="E:System.Windows.UIElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> zmiany właściwości, w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithin : bool" Usage="System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy fokus klawiatury mieści się w dowolnym miejscu elementu lub jego elementy podrzędne drzewa wizualnego.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli fokus klawiatury jest ustawiony na element lub jego elementy podrzędne; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zmiana wartości tej właściwości zwykle podnieść <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> zdarzeń, chyba że klasa pochodna przesłoniła <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> do pomijania zdarzenia.  
  
 Ta właściwość nie zostanie ustawiony bezpośrednio, ale można ustawić fokus na element przez wywołanie metody <xref:System.Windows.UIElement.Focus%2A>, lub przez dokonywanie <xref:System.Windows.UIElement.MoveFocus%2A> żądania. Jedną z tych wywołań metody wywołuje może zmienić wartość tej właściwości.  
  
 <xref:System.Windows.UIElement.IsKeyboardFocused%2A> i <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> są zwykle używane w ramach procedury obsługi zdarzeń klasy dla innych zdarzeń związanych z danych wejściowych, na przykład aby ustalić, czy element jest już ma fokus klawiatury lub aby oznaczeń, gdy wskaźnik myszy zdarzeń i zdarzeń klawiatury występują w połączeniu.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> zmiany właściwości, w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabled">
      <MemberSignature Language="C#" Value="public bool IsManipulationEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManipulationEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsManipulationEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsManipulationEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManipulationEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsManipulationEnabled : bool with get, set" Usage="System.Windows.UIElement.IsManipulationEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy do manipulowania zdarzenia są włączone na tym <see cref="T:System.Windows.UIElement" />.</summary>
        <value>
          <see langword="true" /> Jeśli do manipulowania zdarzenia są włączone na tym <see cref="T:System.Windows.UIElement" />; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustaw tę właściwość na true, jeśli chcesz, aby <xref:System.Windows.UIElement> do odbierania <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, i <xref:System.Windows.UIElement.ManipulationCompleted> zdarzenia. Aby uzyskać więcej informacji na temat manipulacje zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  Na przykład aplikację, która odpowiada na manipulacje zobacz [wskazówki: tworzenie pierwszej funkcji Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
   
  
## Examples  
 Poniższy przykład tworzy aplikację, która ma czerwonym prostokątem.  <xref:System.Windows.UIElement.IsManipulationEnabled%2A> Prostokąta zostaje ustalona wartość PRAWDA, a aplikacja subskrybuje okna <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, i <xref:System.Windows.UIElement.ManipulationInertiaStarting> zdarzenia. W tym przykładzie jest częścią większego przykładu w [wskazówki: tworzenie pierwszej funkcji Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-xaml[BasicManipulation#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsManipulationEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsManipulationEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsManipulationEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsManipulationEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMeasureValid">
      <MemberSignature Language="C#" Value="public bool IsMeasureValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMeasureValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMeasureValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMeasureValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMeasureValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMeasureValid : bool" Usage="System.Windows.UIElement.IsMeasureValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy bieżący rozmiar zwrócony przez miarę układu jest prawidłowa.</summary>
        <value>
          <see langword="true" /> Jeśli miara zakończy się pomyślnie z układu zwróciła wartość prawidłowe i aktualne; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można wymusić pomiaru i rozmieszczenie do unieważniony przez wywołanie metody <xref:System.Windows.UIElement.InvalidateMeasure%2A> tego elementu (lub dowolnego elementu nadrzędnego w górę drzewa wizualnego). Określa układ recomposition asynchronicznie, występujące w danym momencie określany przez system układu. Alternatywnie, można dokonać natychmiastowego wywołania <xref:System.Windows.UIElement.UpdateLayout%2A>. Jednakże, należy wywołać tylko <xref:System.Windows.UIElement.UpdateLayout%2A> Jeśli prawdopodobnie oczekujących nie dalsze invalidations (dużą liczbę aktualizacji niepotrzebnie wymuszonego będą mieć konsekwencje wydajności).  
  
 Jeśli <xref:System.Windows.UIElement.IsMeasureValid%2A> jest `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A> musi być także `false` (przez wymuszone logiki procesu układ rozmieszczenie nie może być prawidłowy bez miary, najpierw jest nieprawidłowy).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptured : bool" Usage="System.Windows.UIElement.IsMouseCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy przycisk myszy jest przechwytywane do tego elementu.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli element ma przechwytywanie myszy; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Stanu przechwytywanie myszy powiązany jest w trakcie operacji przeciągania i upuszczania.  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsMouseCapturedProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład włącza stanu przechwytywanie myszy lub wyłącza zależnie od tego, czy wskaźnik myszy jest już przechwytywany dla elementu.  
  
 Przechwytywanie myszy czy gdzie indziej, przechwytywanie myszy jest ustawiona na ten element. Jeśli element przechwytywanie myszy, jest wyczyszczone, wywołując <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> przy użyciu wartości null danych wejściowych.  
  
 [!code-csharp[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#ismousecaptured)]
 [!code-vb[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> zmiany właściwości, w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithin : bool" Usage="System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą, czy przechwytywanie myszy są przechowywane przez ten element lub elementy podrzędne w jego drzewa wizualnego. Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli ten element lub element zawarty ma przechwytywanie myszy; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> zmiany w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOver : bool" Usage="System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy pozycji wskaźnika myszy odpowiada trafień wyniki testu, przyjmujących składania elementu pod uwagę.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli wskaźnik myszy znajduje się nad ten sam wynik elementu jako hit test; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W odróżnieniu od <xref:System.Windows.UIElement.IsMouseOver%2A>, ta właściwość jest tylko `true` gdy wskaźnik myszy znajduje się nad elementem literału — podobnie jak w przypadku hit test. Jeśli zamiast tego wskaźnik myszy znajduje się za pośrednictwem elementu podrzędnego, w szczególności za pośrednictwem elementy, które są częścią szablonu bardziej elementu i składania, ta właściwość będzie miał `false`. Jeśli nie masz pewności, jak kontrolka jest złożone (na przykład użyć tej właściwości w szablonie formantu niestandardowego formantu, który zdefiniujesz), ta właściwość może zwrócić nieoczekiwane wyniki. W przypadku większości scenariuszy, w którym nie tworzenia formantów, należy użyć <xref:System.Windows.UIElement.IsMouseOver%2A> zamiast tego.  
  
 Jeśli przycisk myszy jest przechwytywany przez ten element, a ta właściwość jest `true` w czasie przechwytywania, ta właściwość będzie zwracać `true` dopóki przechwytywanie myszy zostanie utracone i wskaźnik nie znajduje się nad jej zakresem.  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> zmiany właściwości, w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseOver : bool" Usage="System.Windows.UIElement.IsMouseOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy wskaźnik myszy znajduje się nad tym elementem (w tym elementy podrzędne w drzewie wizualnym).  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli wskaźnik myszy znajduje się za pośrednictwem elementu lub jego elementy podrzędne; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Formanty są zazwyczaj złożone taki sposób, że wszystkie różne elementy wewnątrz formantu (drzewo wizualne) będzie zgłaszać stan myszy zawierający kontrolki. Na przykład <xref:System.Windows.Controls.ListBox> zgłosi kontrolka stylu <xref:System.Windows.UIElement.IsMouseOver%2A> jako `true` w przypadku myszy dowolnego miejsca za pośrednictwem jego geometrii, wraz ze wszystkimi <xref:System.Windows.Controls.ListBoxItem>.  
  
 Chociaż analogiczne zdarzenie "IsMouseOverChanged" nie istnieje, są w kilku podobne zdarzenia. Na przykład, można obsługiwać <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, i <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.  
  
 Jeśli ten element przechwytuje mysz, ta właściwość pozostaje `true` dopóki przechwytywanie myszy zostanie utracona i opuszczeniu granic elementu przez wskaźnik myszy.  
  
 Niektóre kontrolki celowo przechwytywanie myszy w pewnych działań, które nie są wyświetlane bezpośrednio obejmować myszy. Może to prowadzić do <xref:System.Windows.UIElement.IsMouseOver%2A> trwa `true` nawet, jeśli nie przeniósł najwyraźniej myszy.  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsMouseOverProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład odwołuje się do tej właściwości jako typ właściwości <xref:System.Windows.Trigger>stanowiący część \<v sekci > bloku. Jeśli wskaźnik myszy nad kontrolką niebieskie tekst formantu i postać dłoni.  
  
 [!code-xaml[ListViewChkBox#Trigger](~/samples/snippets/csharp/VS_Snippets_Wpf/ListViewChkBox/CS/window1.xaml#trigger)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsMouseOver" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptured : bool" Usage="System.Windows.UIElement.IsStylusCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy pióro są przechwytywane przez ten element.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli element ma Przechwytywanie pióra; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsStylusCapturedProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> zmiany właściwości, w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithin : bool" Usage="System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą, czy przechwytywanie pióra jest przechowywany przez ten element lub elemencie granice elementu i jego drzewa wizualnego. Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli ten element lub element zawarty ma Przechwytywanie pióra; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [Touch obsługi danych wejściowych w Windows Vista](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) i [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="P:System.Windows.UIElement.IsStylusCaptured" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> zmiany właściwości, w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOver : bool" Usage="System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy pozycja Pióro odpowiada trafień wyniki testu, przyjmujących składania elementu pod uwagę.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli wskaźnik Pióro znajduje się nad ten sam wynik elementu jako hit test; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W odróżnieniu od <xref:System.Windows.UIElement.IsStylusOver%2A>, ta właściwość jest tylko `true` , gdy pióro znajduje się nad elementem. W przypadku pióro zamiast za pośrednictwem elementu podrzędnego lub elementy, które są częścią elementu bardziej składania (drzewo wizualne), ta właściwość będzie miał `false`.  
  
 Jeśli nie masz pewności, jak kontrolka jest złożone (na przykład użyć tej właściwości w szablonie formantu niestandardowego formantu, który zdefiniujesz), ta właściwość może zwrócić nieoczekiwane wyniki. W przypadku większości scenariuszy, w którym nie tworzenia formantów, należy użyć <xref:System.Windows.UIElement.IsStylusOver%2A> zamiast tego.  
  
 Jeśli ten element ma Przechwytywanie pióra, ta właściwość jest `true` w czasie przechwytywania, ta właściwość pozostaje `true` aż do przechwycenia pióra zostaną utracone i pióro nie znajduje się nad jej zakresem.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> zmiany właściwości, w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusOver : bool" Usage="System.Windows.UIElement.IsStylusOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kursor pióra znajduje się nad tym elementem (w tym elementy podrzędne visual).  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli kursor pióra przez element lub jego elementy podrzędne; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ten element ma Przechwytywanie pióra, ta właściwość będzie w dalszym ciągu zwracają `true` aż do przechwycenia pióra zostaną utracone i wskaźnik znajduje się poza jej granicami.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsStylusOverProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsStylusOver" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Windows.UIElement.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy ten element jest widoczny w [! INCLUDE[TLA#tla_ui](~/includes/tlasharptla-UI-MD.MD)].  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli element jest widoczny; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oznaczanie <xref:System.Windows.UIElement.IsVisible%2A> wartość uwzględnia wszystkie czynniki układu. Z kolei <xref:System.Windows.UIElement.Visibility%2A>, czyli konfigurowalną właściwość tylko wskazuje zamiar programowo uczynienia elementu widoczny lub niewidoczny.  
  
 Elementy gdzie <xref:System.Windows.UIElement.IsVisible%2A> jest `false` nie uczestniczą w zdarzenia wejściowe (lub poleceń), czy nie mają wpływ na obu miary lub Rozmieść przebiegów układ, nie są focusable, nie są w kolejności karty i nie będą raportowane podczas testowania trafień. Z drugiej strony, elementy gdzie <xref:System.Windows.UIElement.IsEnabled%2A> jest `false` nadal będą uczestniczyć w zdarzeniach i poleceń i testowania trafień, ale nie są również focusable.  
  
<a name="dependencyPropertyInfo_IsVisible"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsVisibleProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsVisible" /> zmiany właściwości, w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie nie jest inicjowane, jeśli element nie jest renderowany przez system układu, z powodów innych niż wartość <xref:System.Windows.UIElement.IsVisible%2A> właściwości. Na przykład element nie może być skojarzone wizualizacji.  
  
 Ten element jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsVisible" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu klawisza, gdy fokus znajduje się w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa klucza współdziała z innymi funkcjami platformy, takich jak polecenia i tekst. <xref:System.Windows.UIElement.KeyDown> Zdarzeń jest tekst niższego poziomu zdarzenie danych wejściowych, które mogą nie zachowywać się, zgodnie z oczekiwaniami na niektórych kontrolek. Jest to, ponieważ niektóre kontrolki zostały składania do sterowania lub obsługa klasy, zapewniająca wyższego poziomu wersję tekst wejściowy obsługi i zdarzenia związane z.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.KeyDown> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.KeyDown> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.KeyDownEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewKeyDown>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnKeyDown%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.KeyDown" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu klawisza gdy fokus znajduje się w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.KeyUp> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.KeyUp> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.KeyUpEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewKeyUp>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnKeyUp%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.KeyUp" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler LayoutUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LayoutUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LayoutUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LayoutUpdated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LayoutUpdated;" />
      <MemberSignature Language="F#" Value="member this.LayoutUpdated : EventHandler " Usage="member this.LayoutUpdated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy układ różnych elementów wizualnych skojarzone z bieżącym <see cref="T:System.Windows.Threading.Dispatcher" /> zmiany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aktualizacja układ może wystąpić w wyniku zmiany właściwości, zmiana rozmiaru okna lub żądania użytkownika.  
  
 Ten element jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.RoutedEventHandler " Usage="member this.LostFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po utracie fokusu logicznego przez ten element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fokus logiczny różni się od fokus klawiatury, gdy fokus jest celowo wymuszone natychmiast za pomocą wywołania metody, ale poprzednie fokus klawiatury nie istnieje w innym zakresie. W tym scenariuszu, pozostaje fokus klawiatury, gdzie jest i element gdzie <xref:System.Windows.UIElement.Focus%2A> wywoływana jest metoda nadal pobiera fokus logiczny.  
  
 Bardziej precyzyjne interpretacji to zdarzenie jest jej jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsFocused%2A> właściwość elementu w trasie zmieni się z `true` do `false`.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który traci fokus może być nie zawiera elementu podrzędnego zamiast elementu gdzie faktycznie dołączony program obsługi zdarzeń. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w dane zdarzeń, aby określić rzeczywisty element, który zdobyte fokus.  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.LostFocusEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.RoutedEventHandler>|  
  
-   Nie ma żadnego odpowiedniego zdarzenia tunelowania.  
  
-   Zastąp <xref:System.Windows.UIElement.OnLostFocus%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.LostFocus" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klawiatura nie ma już fokusu w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ to zdarzenie używa routingu propagacji, element, który utraty fokus może być nie zawiera elementu podrzędnego zamiast elementu gdzie faktycznie dołączony program obsługi zdarzeń. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w dane zdarzeń, aby określić rzeczywisty element, który utraty fokus.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.LostKeyboardFocus> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.LostKeyboardFocus> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.LostKeyboardFocusEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element utraci przechwytywanie myszy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy element przechwytuje mysz, otrzymuje wejście myszy nawet wtedy, gdy wskaźnik myszy znajduje się poza jej granicami. Mysz są zazwyczaj przechwytywane tylko podczas operacji przeciągania i upuszczania.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element utraci Przechwytywanie może być nie zawiera elementu podrzędnego zamiast elementu gdzie faktycznie dołączony program obsługi zdarzeń. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w dane zdarzeń, aby określić rzeczywisty element, który utraty przechwytywania.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.LostMouseCapture> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.LostMouseCapture> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.LostMouseCaptureEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Nie ma żadnego zdefiniowanych odpowiednie zdarzenia tunelowania.  
  
-   Zastąp <xref:System.Windows.UIElement.OnLostMouseCapture%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.LostMouseCapture" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element utraci Przechwytywanie pióra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po przechwyceniu pióra przez element, odbierze wejście pióra, nawet jeśli kursor znajduje się poza jej granicami. Pióro są zazwyczaj przechwytywane tylko podczas operacji przeciągania i upuszczania.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który traci fokus może być nie zawiera elementu podrzędnego zamiast elementu gdzie faktycznie dołączony program obsługi zdarzeń. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w dane zdarzeń, aby określić rzeczywisty element, który utraty fokus.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.LostStylusCapture> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.LostStylusCapture> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.LostStylusCaptureEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Nie ma żadnego zdefiniowanych odpowiednie zdarzenia tunelowania.  
  
-   Zastąp <xref:System.Windows.UIElement.OnLostStylusCapture%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.LostStylusCapture" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.LostTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.LostTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element utraci Przechwytywanie touch.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.LostTouchCaptureEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Zastąp <xref:System.Windows.UIElement.OnLostTouchCapture%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.LostTouchCapture" /> zdarzenia trasowanego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationBoundaryFeedback As EventHandler(Of ManipulationBoundaryFeedbackEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^&gt; ^ ManipulationBoundaryFeedback;" />
      <MemberSignature Language="F#" Value="member this.ManipulationBoundaryFeedback : EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; " Usage="member this.ManipulationBoundaryFeedback : System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy operowanie napotka granicy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_ManipulationBoundaryFeedback"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationBoundaryFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationBoundaryFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> zdarzeń.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationCompleted As EventHandler(Of ManipulationCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationCompletedEventArgs ^&gt; ^ ManipulationCompleted;" />
      <MemberSignature Language="F#" Value="member this.ManipulationCompleted : EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; " Usage="member this.ManipulationCompleted : System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy manipulacji i bezwładności w <see cref="T:System.Windows.UIElement" /> obiektu zostało zakończone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie można użyć, aby uzyskać informacje dotyczące modyfikowania, po jego ukończeniu.  Na przykład, można użyć <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType> zmienione właściwości w celu określenia łączna kwota pozycji manipulacji.  
  
 Aby uzyskać więcej informacji na temat manipulacje zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  Na przykład aplikację, która odpowiada na manipulacje zobacz [wskazówki: tworzenie pierwszej funkcji Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationCompleted"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ManipulationCompletedEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.ManipulationCompletedEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompletedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationCompletedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationCompletedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationCompletedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationCompletedEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> zdarzenia trasowanego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDelta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationDelta" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationDelta As EventHandler(Of ManipulationDeltaEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationDeltaEventArgs ^&gt; ^ ManipulationDelta;" />
      <MemberSignature Language="F#" Value="member this.ManipulationDelta : EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; " Usage="member this.ManipulationDelta : System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy urządzenie wejściowe pozycji podczas manipulowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.ManipulationDelta> Zdarzeń powtarza się wielokrotnie, gdy użytkownik przeciągnie palców za pośrednictwem ekranu podczas manipulowania, i ponownie po wystąpieniu bezwładności.  Możesz użyć <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> właściwość do sprawdzenia, czy zdarzenie ma miejsce podczas bezwładności.  
  
 Element na z <xref:System.Windows.UIElement.ManipulationDelta> wystąpi zdarzenie nie występuje w jakikolwiek sposób po wystąpieniu zdarzenia.  Należy podać logikę do elementu, który ma być zmieniane.  <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> i <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> właściwości, które są typu <xref:System.Windows.Input.ManipulationDelta>, zawiera dane o jak zmienić położenie manipulacje i interpretowane jako przenoszenie, zmienianie rozmiaru lub obracanie obiektu.  Te informacje można zastosować do elementu, który ma być zmieniane.  
  
 Aby uzyskać więcej informacji na temat manipulacje zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  Na przykład aplikację, która odpowiada na manipulacje zobacz [wskazówki: tworzenie pierwszej funkcji Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationDelta"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ManipulationDeltaEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.ManipulationDeltaEventArgs>.|  
  
   
  
## Examples  
 W poniższym przykładzie pokazano program obsługi zdarzeń dla <xref:System.Windows.UIElement.ManipulationDelta> zdarzeń. W przykładzie użyto <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> właściwość przenoszenie, zmienianie rozmiaru i Obróć <xref:System.Windows.Shapes.Rectangle>.  Przykład również sprawdza, czy <xref:System.Windows.UIElement.ManipulationDelta> zdarzenie wystąpiło podczas bezwładności i czy prostokąt zachodzi krawędzi okna.  Jeśli te przypadki są spełnione, aplikacja przestaje manipulowania, aby zapobiec prostokąta od opuszczenia obszaru aplikacji. W tym przykładzie jest częścią większego przykładu w [wskazówki: tworzenie pierwszej funkcji Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDeltaEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationDeltaEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationDeltaEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationDeltaEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationDeltaEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.ManipulationDelta" /> zdarzenia trasowanego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationInertiaStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationInertiaStarting As EventHandler(Of ManipulationInertiaStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationInertiaStartingEventArgs ^&gt; ^ ManipulationInertiaStarting;" />
      <MemberSignature Language="F#" Value="member this.ManipulationInertiaStarting : EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; " Usage="member this.ManipulationInertiaStarting : System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy urządzenie wejściowe traci kontaktu z <see cref="T:System.Windows.UIElement" /> obiektu podczas manipulacji i bezwładności rozpoczyna się.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.ManipulationInertiaStarting> Zdarzenie występuje, gdy użytkownik wind wszystkich palców od ekranu podczas manipulowania. Na przykład, jeśli użytkownik "zgłasza" <xref:System.Windows.UIElement> po powierzchni, użytkownik będzie w ogóle <xref:System.Windows.UIElement> można rozpocząć akcji, na ekranie poruszają się palcem na krótką odległość, a następnie zwolnij <xref:System.Windows.UIElement>. Gdy użytkownik zwolni elementu, bezwładności rozpoczyna się i <xref:System.Windows.UIElement.ManipulationInertiaStarting> wystąpi zdarzenie.  <xref:System.Windows.UIElement> Będzie nadal otrzymywać <xref:System.Windows.UIElement.ManipulationDelta> zdarzenia w celu wskazania, że bezwładności odbywa się w elemencie.  
  
 To zdarzenie służy do określania zachowania bezwładności.  Na przykład można ustawić prędkości początkowej używany, gdy rozpoczyna się bezwładności.  Można również określić ilość bezwładności, ustawiając żądany opóźnienia lub poprzez skonfigurowanie żądanego położenia.  Te wartości dla każdego typu manipulowania (tłumaczenia, rozszerzenia lub obrót) można ustawić niezależnie.  Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.  
  
 Aby uzyskać więcej informacji na temat manipulacje zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  Na przykład aplikację, która odpowiada na manipulacje zobacz [wskazówki: tworzenie pierwszej funkcji Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationInertiaStarting"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.|  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono <xref:System.Windows.UIElement.ManipulationInertiaStarting> program obsługi zdarzeń i ustawia żądany prędkości dla translacji, rozszerzenia i obrót, który jest używany podczas bezwładności. W tym przykładzie jest częścią większego przykładu w [wskazówki: tworzenie pierwszej funkcji Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]
 [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationInertiaStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationInertiaStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationInertiaStartingEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> zdarzenia trasowanego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarted As EventHandler(Of ManipulationStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartedEventArgs ^&gt; ^ ManipulationStarted;" />
      <MemberSignature Language="F#" Value="member this.ManipulationStarted : EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; " Usage="member this.ManipulationStarted : System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy urządzenie wejściowe rozpoczyna się manipulowania <see cref="T:System.Windows.UIElement" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.ManipulationStarted> Zdarzenie występuje po <xref:System.Windows.UIElement.ManipulationStarting> zdarzeń.  Możesz skorzystać z poniższej procedury z <xref:System.Windows.Input.ManipulationStartedEventArgs>:  
  
-   Pobierz element manipulowania pozycja względem przy użyciu <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> właściwości.  
  
-   Uzyskiwanie źródła operowanie przy użyciu <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> właściwości.  
  
-   Anuluj operowanie przez wywołanie metody <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> metody.  
  
 Aby uzyskać więcej informacji na temat manipulacje zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  Na przykład aplikację, która odpowiada na manipulacje zobacz [wskazówki: tworzenie pierwszej funkcji Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationStarted"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ManipulationStartedEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.ManipulationStartedEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationStartedEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.ManipulationStarted" /> zdarzenia trasowanego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarting As EventHandler(Of ManipulationStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartingEventArgs ^&gt; ^ ManipulationStarting;" />
      <MemberSignature Language="F#" Value="member this.ManipulationStarting : EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; " Usage="member this.ManipulationStarting : System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy tworzona jest najpierw procesora manipulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.ManipulationStarting> Wystąpieniu zdarzenia na element, który ma <xref:System.Windows.UIElement.IsManipulationEnabled%2A> właściwością `true` po użytkownik umieszcza palcem na nim. Domyślnie zdarzenia manipulowania kolejnych raportu położenie operowanie atrybutami względem elementu, który ma <xref:System.Windows.UIElement.IsManipulationEnabled%2A> równa `true`.  Można określić, czy pozycja powinna być określona względem innego elementu, ustawiając <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> właściwości. Na przykład można wprowadzić operowanie atrybutami względem nadrzędnego elementu.  
  
 Możesz również wykonać następujące czynności w obsłudze zdarzeń dla <xref:System.Windows.UIElement.ManipulationStarting>:  
  
-   Określ, czy użytkownik potrzebuje więcej niż jeden finger przeprowadzić manipulacje, ustawiając <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> właściwości.  
  
-   Określ, jakie typy manipulowania są włączone, ustawiając <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> właściwość <xref:System.Windows.Input.ManipulationModes> wyliczenia.  
  
-   Określ środek obrotu pojedynczego finger, ustawiając <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> właściwości.  
  
-   Anuluj operowanie przez wywołanie metody <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> metody.  
  
 Aby uzyskać więcej informacji na temat manipulacje zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  Na przykład aplikację, która odpowiada na manipulacje zobacz [wskazówki: tworzenie pierwszej funkcji Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationStarting"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ManipulationStartingEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.ManipulationStartingEventArgs>.|  
  
   
  
## Examples  
 W poniższym przykładzie pokazano program obsługi zdarzeń dla <xref:System.Windows.UIElement.ManipulationStarting> zdarzenia i ustawia <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> do elementu nadrzędnego, który odbiera zdarzenia manipulowania, tak aby były współrzędne operowanie atrybutami względem elementu nadrzędnego.  W tym przykładzie jest częścią większego przykładu w [wskazówki: tworzenie pierwszej funkcji Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationstarting)]
 [!code-vb[BasicManipulation#ManipulationStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationstarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationStartingEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.ManipulationStarting" /> zdarzenia trasowanego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Measure">
      <MemberSignature Language="C#" Value="public void Measure (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Measure(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Measure (availableSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Measure(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="member this.Measure : System.Windows.Size -&gt; unit" Usage="uIElement.Measure availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">Dostępne miejsce przydzielić element podrzędny elementu nadrzędnego. Element podrzędny może żądać obszaru większego niż dostępna; Podany rozmiar może pomieścić, jeśli przewijanie jest możliwe w modelu zawartości dla bieżącego elementu.</param>
        <summary>Aktualizacje <see cref="P:System.Windows.UIElement.DesiredSize" /> z <see cref="T:System.Windows.UIElement" />. Elementy nadrzędne wywołać tej metody z własnych <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> implementacji w celu utworzenia układu cyklicznych aktualizacji. Wywołanie tej metody stanowi pierwszym przebiegu aktualizacji układu (pass "Środki").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obliczenie układzie strony [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] składa się z <xref:System.Windows.UIElement.Measure%2A> wywołania i <xref:System.Windows.UIElement.Arrange%2A> wywołania. Podczas <xref:System.Windows.UIElement.Measure%2A> wywołań i element określa jej wymagań dotyczących rozmiaru przy użyciu `availableSize` danych wejściowych. Podczas <xref:System.Windows.UIElement.Arrange%2A> wywołaniu, rozmiar elementu jest aktualnie finalizowana.  
  
 `availableSize` może być dowolną liczbę od 0 do nieskończone. Elementów uczestniczących w układzie powinna zwrócić minimum <xref:System.Windows.Size> wymagają one dla danego `availableSize`.  
  
 Gdy układ najpierw zostanie uruchomiony, zawsze otrzymuje <xref:System.Windows.UIElement.Measure%2A> wywołanie przed <xref:System.Windows.UIElement.Arrange%2A>. Jednak po pierwszym przebiegu układ go może zostać wyświetlony <xref:System.Windows.UIElement.Arrange%2A> wywołania bez <xref:System.Windows.UIElement.Measure%2A>; może się to zdarzyć, gdy właściwość, która ma wpływ tylko na <xref:System.Windows.UIElement.Arrange%2A> zmianie (na przykład wyrównanie), lub gdy odbierze element nadrzędny <xref:System.Windows.UIElement.Arrange%2A> bez <xref:System.Windows.UIElement.Measure%2A>. A <xref:System.Windows.UIElement.Measure%2A> wywołanie automatycznie spowoduje unieważnienie <xref:System.Windows.UIElement.Arrange%2A> wywołania.  
  
 Aktualizacje układu nastąpić asynchronicznie, tak, aby główny wątek nie oczekuje na każdej zmiany układu możliwe. Podczas badania elementu za pomocą związanym z kodem sprawdzania wartości właściwości mogą nie odzwierciedla natychmiast zmiany właściwości, które współdziałają z właściwości ustalania rozmiaru ani układu ( <xref:System.Windows.FrameworkElement.Width%2A> właściwości, na przykład).  
  
> [!NOTE]
>  Aktualizacje układu aktualizację można wymusić przy użyciu <xref:System.Windows.UIElement.UpdateLayout%2A> metody. Jednak wywołanie tej metody jest zazwyczaj zbędna i mogą powodować spadek wydajności.  
  
 System układu przechowuje dwie oddzielne kolejki nieprawidłowy układów, jeden dla <xref:System.Windows.UIElement.Measure%2A> i jeden dla <xref:System.Windows.UIElement.Arrange%2A>. Kolejka układu są sortowane na podstawie kolejności elementów w drzewie wizualnym elementu wykonywania układ; wyżej w drzewie elementów znajdują się na początku kolejki, aby uniknąć nadmiarowe układy spowodowany przez powtarzające zmiany elementów nadrzędnych. Zduplikowane wpisy są automatycznie usuwane z kolejki, a elementy zostaną automatycznie usunięte z kolejki, jeśli są one już zweryfikowane układu.  
  
 Podczas aktualizowania układu <xref:System.Windows.UIElement.Measure%2A> kolejki jest opróżniany najpierw następuje <xref:System.Windows.UIElement.Arrange%2A> kolejki. Element <xref:System.Windows.UIElement.Arrange%2A> kolejki nigdy nie będą ułożone, jeśli element <xref:System.Windows.UIElement.Measure%2A> kolejki.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="abstract member MeasureCore : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.MeasureCore : System.Windows.Size -&gt; System.Windows.Size" Usage="uIElement.MeasureCore availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">Dostępny rozmiar elementu nadrzędnego może przydzielić do elementu podrzędnego.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, udostępnia logikę miary, dotyczące ustalania rozmiaru tego elementu prawidłowo, z uwzględnieniem rozmiaru zawartość elementu podrzędnego.</summary>
        <returns>Wymagany rozmiar tego elementu w układzie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to bardziej powszechne, aby utworzyć pochodny element z <xref:System.Windows.FrameworkElement> zamiast <xref:System.Windows.UIElement>. Jeśli są pochodząca od <xref:System.Windows.FrameworkElement>, należy pamiętać, że nadpisanie <xref:System.Windows.UIElement.MeasureCore%2A> na <xref:System.Windows.FrameworkElement> zamknięcia <xref:System.Windows.UIElement.MeasureCore%2A> metody. W związku z tym, tylko zastąpić <xref:System.Windows.UIElement.MeasureCore%2A> jako środek do zmiany layout charakterystyki miary w przypadku klasy wyprowadzonej z <xref:System.Windows.UIElement> poprzez dziedziczenie, który nie obejmuje <xref:System.Windows.FrameworkElement>. Może to mieć miejsce, jeśli próbujesz Tworzenie własnej implementacji w [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] poziom core. W przeciwnym razie, jeśli są pochodząca od <xref:System.Windows.FrameworkElement>, Szablon wdrożenia miary zachowanie jest <xref:System.Windows.FrameworkElement> implementacji.<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.  
  
 Należy wywołać element nadrzędny, z elementami podrzędnymi <xref:System.Windows.UIElement.Measure%2A> na poszczególne elementy podrzędne, w przeciwnym razie te elementy podrzędne nie są o rozmiarze lub uporządkowane i skutecznie znikną z układu.  
  
   
  
## Examples  
 Typowe zastępowania metody <xref:System.Windows.UIElement.MeasureCore%2A> wzorcem przybliżony (nie ma wbudowanej kolekcji o nazwie `VisualChildren`; `VisualChildren` jest symbolem zastępczym reprezentującym niezależnie od kolekcji podrzędnej przechowuje nazwę elementu).  
  
 [!code-csharp[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementmeasureoverride)]
 [!code-vb[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementmeasureoverride)]  
  
-   Należy wywołać <xref:System.Windows.UIElement.Measure%2A> dla każdego elementu podrzędnego.  
  
-   Ogólnie rzecz biorąc, implementacji należy pamięci podręcznej informacji dotyczących pomiarów między <xref:System.Windows.UIElement.MeasureCore%2A> i <xref:System.Windows.UIElement.ArrangeCore%2A> metoda wywołuje w tym samym elemencie.  
  
-   Wywoływanie podstawowe implementacje <xref:System.Windows.UIElement.MeasureCore%2A> nie jest wymagana, ale może być odpowiednie, jeśli podstawowa implementacja udostępnia funkcję żądany układ.  
  
-   Wywołania <xref:System.Windows.UIElement.Measure%2A> w podrzędnych elementów należy przekazywać taki sam `availableSize` jako element nadrzędny lub podzbiór obszaru, w zależności od typu układu elementu nadrzędnego obsługuje. Na przykład będzie można usunąć obszar obramowania specyficzne dla elementu dopełnienie, pasek przewijania lub formant niestandardowy.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Implementacje musi być w stanie przetworzyć wartość parametru <paramref name="availableSize" /> jest nieskończona. Nieskończona wartość oznacza nie żądanych ograniczeń i skutecznie odracza wybranej miary do elementu nadrzędnego, za pośrednictwem cyklicznych wywoływanych w miarę.  Implementacje można wziąć pod uwagę wartości podanej dla <paramref name="availableSize" /> jako ograniczenia typu nietrwałego. Element podrzędny może określić większy rozmiar, nawet wtedy, gdy inne aspekty kodu aplikacji udało się ustalić, bieżący rozmiar rzeczywisty element nadrzędny. Żądanie duży rozmiar jest z Konwencją, która wskazuje, że element podrzędny sprawdza czy Twoje element nadrzędny może obsługiwać przewijanie zawartości w obrębie regionu wyświetlanie zawartości.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu dowolnego przycisku myszy, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.MouseDown> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.MouseDown> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 <xref:System.Windows.UIElement.MouseDown> Zdarzenie jest zgłaszane w często razem z wartościami <xref:System.Windows.UIElement.MouseLeftButtonDown> lub <xref:System.Windows.UIElement.MouseRightButtonDown>, które odpowiadają naciśnij jednego z dwóch przycisków myszy standard. <xref:System.Windows.UIElement.MouseLeftButtonDown> i <xref:System.Windows.UIElement.MouseRightButtonDown> są również zdarzenia trasowane, ale są bezpośrednie zdarzenia trasowane, a odpowiednie zdarzenie specyficzne dla przycisku jest wywoływane podczas <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzeń osiągnie ten element wzdłuż trasy zdarzeń. Zobacz uwagi, na <xref:System.Windows.UIElement.MouseLeftButtonDown> lub <xref:System.Windows.UIElement.MouseRightButtonDown>.  
  
> [!IMPORTANT]
>  Niektóre formanty może być zarezerwowanymi obsługę klasy dla zdarzenia przycisku myszy. Lewy przycisk myszy wciśnięty zdarzeń jest najbardziej prawdopodobne zdarzenie, aby mieć klasę, obsługa w formancie. Klasy obsługi często oznacza bazowego <xref:System.Windows.Input.Mouse> zdarzenia klasy jako obsługiwane. Gdy zdarzenie jest oznaczony jako obsługiwany, innych programów obsługi wystąpienia, które są dołączone do tego elementu nie są zwykle zgłaszane. Wszystkie inne klasy lub wystąpienia programów obsługi, które są dołączone do elementów w propagacji kierunku ku główny w drzewie interfejsu użytkownika również nie zazwyczaj są wywoływane.  
  
 Możesz rozwiązać ten problem, który jest opisany w poprzednim ważne i nadal otrzymywać <xref:System.Windows.UIElement.MouseDown> zdarzeń związanych z lewego przycisku myszy w dół do zdarzenia w klasie pochodnej, która ma klasę obsługi przy użyciu jednej z tych rozwiązań:  
  
-   Dołącz programy obsługi dla <xref:System.Windows.UIElement.PreviewMouseDown> zdarzenie, które nie jest oznaczony jako obsługiwane przez formanty. Zwróć uwagę, że ponieważ jest to zdarzenie (wersja zapoznawcza), trasy rozpoczyna się w katalogu głównym i tunele do formantu.  
  
-   Rejestrowanie programu obsługi w kontrolce proceduralnie przez wywołanie metody <xref:System.Windows.UIElement.AddHandler%2A> i wybranie opcji podpisu, która umożliwia obsługi do nasłuchiwania zdarzeń nawet wtedy, gdy są one już oznaczone jako obsługiwane w danych zdarzenia trasowanego.  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseDownEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewMouseDown>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnMouseDown%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseDown" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Input.MouseEventHandler " Usage="member this.MouseEnter : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po umieszczeniu wskaźnika myszy granic tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseEnter> to, że bezpośredniej obsługi strategii routingu zdarzeń, który używa. Zdarzenia trasowane bezpośrednie nie są zgłaszane wzdłuż trasy; Zamiast tego są są obsługiwane w tym samym elemencie gdzie są one inicjowane. Jednakże umożliwiają one innych aspektów zachowania zdarzenie trasowane, takich jak wyzwalacze zdarzeń w stylach.  
  
 Mimo że <xref:System.Windows.UIElement.MouseEnter> ścieżki po wejściu wskaźnika myszy w granice elementu, to zdarzenie więcej dosłownie zgłasza, że <xref:System.Windows.UIElement.IsMouseOver%2A> wartość właściwości została zmieniona z `false` do `true` w tym elemencie.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.MouseEnter> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.MouseEnter> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 A <xref:System.Windows.Controls.Button> (lub dowolnego <xref:System.Windows.Controls.Primitives.ButtonBase> klasy pochodnej) ma obsługę natywnych <xref:System.Windows.UIElement.KeyDown> zdarzenie, gdy przycisk ma fokus, a naciśnięty klawisz spacji. Wywołuje natywnej obsługi <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzeń za pomocą przycisku jako źródło, a także przechwytuje mysz, nawet jeśli nie ma wskaźnik myszy do przenoszenia. W wyniku przechwytywanie myszy <xref:System.Windows.UIElement.MouseEnter> zdarzenie jest również zgłaszane za pomocą przycisku jako źródło. Ogólnie rzecz biorąc, jeśli element przechwytuje mysz, następnie <xref:System.Windows.UIElement.MouseEnter> jest inicjowane, jak również <xref:System.Windows.UIElement.GotMouseCapture> i ewentualnie inne zdarzenia specyficzne dla kontrolki.  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseEnterEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Zastąp <xref:System.Windows.UIElement.OnMouseEnter%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseEnter" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Input.MouseEventHandler " Usage="member this.MouseLeave : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po opuszczeniu przez wskaźnik myszy granic tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseLeave> to, że bezpośredniej obsługi strategii routingu zdarzeń, który używa. Zdarzenia trasowane bezpośrednie nie są zgłaszane wzdłuż trasy; Zamiast tego są są obsługiwane w tym samym elemencie gdzie są one inicjowane. Jednakże umożliwiają one innych aspektów zachowania zdarzenie trasowane, takich jak wyzwalacze zdarzeń w stylach.  
  
 Mimo że <xref:System.Windows.UIElement.MouseLeave> ścieżki, gdy wskaźnik myszy opuszcza elementu, to zdarzenie więcej dosłownie zgłasza, że <xref:System.Windows.UIElement.IsMouseOver%2A> wartość właściwości została zmieniona z `true` do `false` w tym elemencie.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.MouseLeave> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.MouseLeave> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseLeaveEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Zastąp <xref:System.Windows.UIElement.OnMouseLeave%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseLeave" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu lewego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż wydaje się to wykonaj propagacji trasy za pośrednictwem obrębu drzewa, faktycznie jest bezpośrednie zdarzenia trasowanego podniesione i reraised wzdłuż drzewo elementów przez każdy <xref:System.Windows.UIElement>.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportu specyfikę przyciskiem myszy odpowiednią <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzenie, które jest dołączone zdarzenia, które są przetwarzane przez każdy element wzdłuż trasę w protokole zdarzeń.  
  
 Dane zdarzenia tego zdarzenia udostępnia dane zdarzenia podstawowych <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzeń. Jeśli to zdarzenie jest oznaczony jako obsłużony, wzdłuż trasy zdarzeń, określone zdarzenia przycisku myszy nadal są wywoływane; jednak należy dodać procedury obsługi zdarzeń określonego przycisku myszy przez jawne wywołanie <xref:System.Windows.UIElement.AddHandler%2A>, przy użyciu opcji do obsługi zdarzeń, które są już oznaczone jako obsłużony, aby detektory zdarzenia. Po oznaczeniu <xref:System.Windows.UIElement.MouseLeftButtonDown> obsługi, możesz to zasadniczo oznaczanie <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> obsługiwana za wszelkie dalsze detektorów trasy i we wszystkich powiązanych zdarzeń. Prawdopodobnie obejmuje to zdarzenia generowane obsługi klasy takie jak <xref:System.Windows.Controls.Control.MouseDoubleClick>.  
  
 Model traktować to zdarzenie (oraz inne zdarzenia przycisku myszy w <xref:System.Windows.UIElement>) jako myszy "Usługa" (przy użyciu definicji usługi udostępniane przez <xref:System.Windows.Input.Mouse> klasy). Zdarzenie dodaje wygodę wyeliminowanie konieczności Sprawdź Stany przycisku myszy (lewo i w prawo, góra dół) w oryginalnej zdarzeń myszy w danych zdarzeń. Dla bardziej zaawansowanych scenariuszy, takich jak sprawdzanie dla stanów niestandardowych przyciski, użytkownik może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] na <xref:System.Windows.Input.Mouse> klasy zamiast tych na <xref:System.Windows.UIElement>.  
  
> [!IMPORTANT]
>  Niektóre klasy formantu może być zarezerwowanymi obsługę klasy dla zdarzenia przycisku myszy. Lewy przycisk myszy wciśnięty zdarzeń jest najbardziej prawdopodobne zdarzenie, aby mieć klasę, obsługa w formancie. Klasy obsługi często oznacza bazowego <xref:System.Windows.Input.Mouse> zdarzenia klasy jako obsługiwane. Gdy zdarzenie jest oznaczony jako obsługiwany, innych programów obsługi wystąpienia, które są dołączone do tego elementu nie są zwykle zgłaszane. Wszystkie inne klasy lub wystąpienia programów obsługi, które są dołączone do elementów w propagacji kierunku ku główny w drzewie interfejsu użytkownika również nie zazwyczaj są wywoływane.  
  
 Możesz rozwiązać ten problem, który jest opisany w poprzednim ważne i nadal otrzymywać <xref:System.Windows.UIElement.MouseLeftButtonDown> zdarzeń związanych z lewego przycisku myszy w dół do zdarzenia w klasie pochodnej, która ma klasę obsługi przy użyciu jednej z tych rozwiązań:  
  
-   Dołącz programy obsługi dla <xref:System.Windows.UIElement.PreviewMouseDown> zdarzenie, które nie jest oznaczony jako obsługiwane przez formanty. Zwróć uwagę, że ponieważ jest to zdarzenie (wersja zapoznawcza), trasy rozpoczyna się w katalogu głównym i tunele do formantu.  
  
-   Rejestrowanie programu obsługi w kontrolce proceduralnie przez wywołanie metody <xref:System.Windows.UIElement.AddHandler%2A> i wybranie opcji podpisu, która umożliwia obsługi do nasłuchiwania zdarzeń nawet wtedy, gdy są one już oznaczone jako obsługiwane w danych zdarzenia trasowanego.  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Zastąp <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu lewego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż wydaje się to wykonaj propagacji trasy za pośrednictwem obrębu drzewa, faktycznie jest bezpośrednie zdarzenia trasowanego podniesione i reraised wzdłuż drzewo elementów przez każdy <xref:System.Windows.UIElement>.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportu specyfikę przyciskiem myszy odpowiednią <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> zdarzenie, które jest dołączone zdarzenia, które są przetwarzane przez każdy element wzdłuż trasę w protokole zdarzeń.  
  
 Dane zdarzenia tego zdarzenia udostępnia dane zdarzenia podstawowych <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> zdarzeń. Jeśli to zdarzenie jest oznaczony jako obsłużony, wzdłuż trasy zdarzeń, określone zdarzenia przycisku myszy nadal są wywoływane; jednak należy dodać procedury obsługi zdarzeń określonego przycisku myszy przez jawne wywołanie <xref:System.Windows.UIElement.AddHandler%2A>, przy użyciu opcji do obsługi zdarzeń, które są już oznaczone jako obsłużony, aby detektory zdarzenia. Po oznaczeniu <xref:System.Windows.UIElement.MouseLeftButtonUp> obsługi, możesz to zasadniczo oznaczanie <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> obsługiwana za wszelkie dalsze detektorów trasy i we wszystkich powiązanych zdarzeń.  
  
 Model traktować to zdarzenie (oraz inne zdarzenia przycisku myszy w <xref:System.Windows.UIElement>) jako myszy "Usługa" (przy użyciu definicji usługi udostępniane przez <xref:System.Windows.Input.Mouse> klasy). Zdarzenie dodaje wygodę wyeliminowanie konieczności Sprawdź Stany przycisku myszy (lewo i w prawo, góra dół) w oryginalnej zdarzeń myszy w danych zdarzeń. Dla bardziej zaawansowanych scenariuszy, takich jak sprawdzanie dla stanów niestandardowych przyciski, użytkownik może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] na <xref:System.Windows.Input.Mouse> klasy zamiast tych na <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Zastąp <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wskaźnik myszy porusza się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.MouseMove> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.MouseMove> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseMoveEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewMouseMove>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnMouseMove%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseMove" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu prawego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż wydaje się to wykonaj propagacji trasy za pośrednictwem obrębu drzewa, faktycznie jest bezpośrednie zdarzenia trasowanego podniesione i reraised wzdłuż drzewo elementów przez każdy <xref:System.Windows.UIElement>.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportu specyfikę przyciskiem myszy odpowiednią <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzenie, które jest dołączone zdarzenia, które są przetwarzane przez każdy element wzdłuż trasę w protokole zdarzeń.  
  
 Dane zdarzenia tego zdarzenia udostępnia dane zdarzenia podstawowych <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzeń. Jeśli to zdarzenie jest oznaczony jako obsłużony, wzdłuż trasy zdarzeń, określone zdarzenia przycisku myszy nadal są wywoływane; jednak należy dodać procedury obsługi zdarzeń określonego przycisku myszy przez jawne wywołanie <xref:System.Windows.UIElement.AddHandler%2A>, przy użyciu opcji do obsługi zdarzeń, które są już oznaczone jako obsłużony, aby detektory zdarzenia. Po oznaczeniu <xref:System.Windows.UIElement.MouseRightButtonDown> obsługi, możesz to zasadniczo oznaczanie <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> obsługiwana za wszelkie dalsze detektorów trasy i we wszystkich powiązanych zdarzeń. Prawdopodobnie obejmuje to zdarzenia generowane obsługi klasy takie jak <xref:System.Windows.Controls.Control.MouseDoubleClick>.  
  
 Model traktować to zdarzenie (oraz inne zdarzenia przycisku myszy w <xref:System.Windows.UIElement>) jako myszy "Usługa" (przy użyciu definicji usługi udostępniane przez <xref:System.Windows.Input.Mouse> klasy). Zdarzenie dodaje wygodę wyeliminowanie konieczności Sprawdź Stany przycisku myszy (lewo i w prawo, góra dół) w oryginalnej zdarzeń myszy w danych zdarzeń. Dla bardziej zaawansowanych scenariuszy, takich jak sprawdzanie dla stanów niestandardowych przyciski, użytkownik może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] na <xref:System.Windows.Input.Mouse> klasy zamiast tych na <xref:System.Windows.UIElement>.  
  
 Zdarzenia myszy w prawy przycisk często mają natywnej obsługi w scenariuszach aplikacji. Na przykład prawym przyciskiem myszy w dół, może wyświetlić menu kontekstowe. Zobacz [ContextMenu — Przegląd](~/docs/framework/wpf/controls/contextmenu-overview.md).  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseRightButtonDownEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Zastąp <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu prawego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż wydaje się to wykonaj propagacji trasy za pośrednictwem obrębu drzewa, faktycznie jest bezpośrednie zdarzenia trasowanego podniesione i reraised wzdłuż drzewo elementów przez każdy <xref:System.Windows.UIElement>.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportu specyfikę przyciskiem myszy odpowiednią <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> zdarzenie, które jest dołączone zdarzenia, które są przetwarzane przez każdy element wzdłuż trasę w protokole zdarzeń.  
  
 Dane zdarzenia tego zdarzenia udostępnia dane zdarzenia podstawowych <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> zdarzeń. Jeśli to zdarzenie jest oznaczony jako obsłużony, wzdłuż trasy zdarzeń, określone zdarzenia przycisku myszy nadal są wywoływane; jednak należy dodać procedury obsługi zdarzeń określonego przycisku myszy przez jawne wywołanie <xref:System.Windows.UIElement.AddHandler%2A>, przy użyciu opcji do obsługi zdarzeń, które są już oznaczone jako obsłużony, aby detektory zdarzenia. Po oznaczeniu <xref:System.Windows.UIElement.MouseRightButtonUp> obsługi, możesz to zasadniczo oznaczanie <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> obsługiwana za wszelkie dalsze detektorów trasy i we wszystkich powiązanych zdarzeń.  
  
 Model traktować to zdarzenie (oraz inne zdarzenia przycisku myszy w <xref:System.Windows.UIElement>) jako myszy "Usługa" (przy użyciu definicji usługi udostępniane przez <xref:System.Windows.Input.Mouse> klasy). Zdarzenie dodaje wygodę wyeliminowanie konieczności Sprawdź Stany przycisku myszy (lewo i w prawo, góra dół) w oryginalnej zdarzeń myszy w danych zdarzeń. Dla bardziej zaawansowanych scenariuszy, takich jak sprawdzanie dla stanów niestandardowych przyciski, użytkownik może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] na <xref:System.Windows.Input.Mouse> klasy zamiast tych na <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseRightButtonUpEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Zastąp <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu dowolnego przycisku myszy nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.MouseUp> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.MouseUp> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 <xref:System.Windows.UIElement.MouseUp> Zdarzenie jest zgłaszane w często razem z wartościami <xref:System.Windows.UIElement.MouseLeftButtonUp> lub <xref:System.Windows.UIElement.MouseRightButtonUp>, które odpowiadają wersji jednej z dwóch przycisków myszy standard. <xref:System.Windows.UIElement.MouseLeftButtonUp> i <xref:System.Windows.UIElement.MouseRightButtonUp> są również zdarzenia trasowane, ale są bezpośrednie zdarzenia trasowane, a odpowiednie zdarzenie specyficzne dla przycisku jest wywoływane podczas <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzeń osiągnie ten element wzdłuż trasy zdarzeń. Zobacz uwagi, na <xref:System.Windows.UIElement.MouseLeftButtonUp> lub <xref:System.Windows.UIElement.MouseRightButtonUp>.  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseUpEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewMouseUp>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnMouseUp%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseUp" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik obraca kółko myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zespół lub myszy przechwytywania pierwszeństwo gdy wskaźnik myszy znajduje się; w związku z tym jeśli zostanie wyświetlony <xref:System.Windows.UIElement.MouseWheel> zdarzeń z elementu wąsko zdefiniowany lub przechwycone, wskaźnik myszy może mieć w rzeczywistości za pośrednictwem innego elementu.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.MouseWheel> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.MouseWheel> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseWheelEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewMouseWheel>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnMouseWheel%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseWheel" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool&#xA;override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="uIElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">Żądanie przechodzenia, który zawiera właściwość, która wskazuje trybie przechodzenia w istniejących kolejność tabulacji, lub kierunku, aby przenieść wizualnie.</param>
        <summary>Próbuje przenieść fokus z tego elementu do innego elementu. Kierunek, aby przenieść fokus jest określona przez kierunku orientacji, jest interpretowany w ramach organizacji visual element nadrzędny tego elementu.</summary>
        <returns>
          <see langword="true" /> Jeśli żądana przechodzenie została wykonana; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Upewnij się, że wartość zwracana przez tę metodę. Zwracana wartość wynosząca `false` może zostać zwrócona, jeśli podczas przechodzenia działa w tabulatora, który jest definiowany przez kompozycji formantu, a żądania przechodzenia nie zażądał opakowywania.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit&#xA;override this.OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit" Usage="uIElement.OnAccessKey e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia do zdarzenia klucza dostępu. Raporty danych zdarzeń, który klucz został wywołany i wskazują, czy <see cref="T:System.Windows.Input.AccessKeyManager" /> obiekt, który kontroluje, wysyłając te zdarzenia również wysyłane to wywołanie klucza dostępu do innych elementów.</param>
        <summary>Zapewnia obsługę klasy dla przypadku klucz dostępu, który ma znaczenie dla tego elementu jest wywoływana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie ma żadnego rzeczywiste zdarzenia AccessKey w <xref:System.Windows.UIElement> klasy lub w innym miejscu, które mogą zgłosić lub dołączyć programy obsługi dla. Zamiast tego zdarzenia jest pochodzi za pośrednictwem klasy dedykowanych Menedżera <xref:System.Windows.Input.AccessKeyManager>, który po przetwarza wszystkie dane wejściowe, aby wyszukać klucze dostępu, które mają zastosowanie do całego modelu danych wejściowych.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Domyślna implementacja tej metody w <see cref="T:System.Windows.UIElement" /> zestawy za pomocą klawiatury fokus do tego elementu (przez wywołanie metody <see cref="M:System.Windows.UIElement.Focus" />). Implementacje powinny widoczny przy obsłudze często to zachowanie, jeśli są one focusable, ponieważ jest to oczekiwane zachowanie dla scenariuszy ułatwień dostępu. Pamiętaj, że podstawowa implementacja nie działają z danymi przekazane zdarzenia i zgłasza nie dalszych zdarzeń; po prostu ustawia fokus.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnChildDesiredSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildDesiredSizeChanged(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChildDesiredSizeChanged (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChildDesiredSizeChanged(System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="abstract member OnChildDesiredSizeChanged : System.Windows.UIElement -&gt; unit&#xA;override this.OnChildDesiredSizeChanged : System.Windows.UIElement -&gt; unit" Usage="uIElement.OnChildDesiredSizeChanged child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">Element podrzędny, który jest zmieniany.</param>
        <summary>Obsługuje układ zachowanie, gdy zmieniany jest rozmiar elementu podrzędnego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie jest zazwyczaj wywoływana przez kod aplikacji. Jest narażony, więc ten element pochodny klasy wprowadzić dodatkowe kontrole stanu układu prawdopodobnie nieprawidłowy. Klasy może również próbować optymalizacje, aby zminimalizować czas przetwarzania przekazanie układu, w oparciu o zmiany rozmiaru do elementów podrzędnych. Przykład pochodne klasy elementu, który implementuje <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> jest <xref:System.Windows.Controls.Grid> kontroli.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> Metoda ma Domyślna implementacja wywołania metody <see cref="M:System.Windows.UIElement.InvalidateMeasure" /> na siebie. Typowa implementacja będzie: wykonaj niezależnie od optymalizacji własnych element obsługuje, a następnie zwykle wywołują podstawowy <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> z co najmniej jednej z gałęzi kodu (jedna wskazany stan "zanieczyszczony" na własne miary, buforowanie logiki).  Ta metoda jest wywoływana tylko w podczas przetwarzania układ, jeśli jest podrzędny siebie, która pochodzi zmiany rozmiaru. W przeciwnym razie, jeśli element nadrzędny inicjuje <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> przekazać, zgodnie z regułami systemu układ obiektu nadrzędnego jest obliczanie układu już. System układu przetwarza układ zgodnie z kolejnością podrzędnej do nadrzędnej, dzięki czemu nie powróć do rozmiaru elementu nadrzędnego z wywołań układu elementu podrzędnego.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer&#xA;override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="uIElement.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca swoiste dla klas <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementacje dla [! Infrastruktura include[TLA#tla_winclient](~/includes/tlasharptla-winclient-MD.MD)].</summary>
        <returns>Konkretny typ <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementacji.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Implementacja tej metody jest zwykle wywołanie konstruktora określonego <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementacji i zwracanie go jako wartość zwracaną.  Wszystkie <see cref="T:System.Windows.UIElement" /> klas pochodnych należy zaimplementować tę metodę w celu zapewnienia ich własnych określonych <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementacji w celu [! Infrastruktura include[TLA#tla_winclient](~/includes/tlasharptla-winclient-MD.MD)]. Szczegółowe informacje na temat implementowania tego wzorca, <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.DragEnter" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.DragLeave" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.DragOver" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.DragEnter" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement.OnGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.GiveFeedbackEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.GiveFeedback" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Element <see cref="T:System.Windows.RoutedEventArgs" /> zawierający dane zdarzenia. Te dane zdarzeń musi zawierać identyfikator <see cref="E:System.Windows.UIElement.GotFocus" /> zdarzeń.</param>
        <summary>Wywołuje <see cref="E:System.Windows.UIElement.GotFocus" /> zdarzenia trasowanego przy użyciu podanych danych zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody, mimo że jest to wirtualne, mają domyślną implementację, która wywołuje zdarzenia.  
  
 To na * implementacja metody jest przeznaczona do podniesienia zdarzenia i tej samej implementacji metody jest wywoływana wewnętrznie, aby wygenerować zdarzenie po <xref:System.Windows.UIElement.IsFocused%2A> zmiany wartości właściwości. <xref:System.Windows.UIElement.OnGotFocus%2A> Implementacji różni się od innych [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] na * implementacji, które tylko zapewniają wygodny sposób, aby dodać obsługę klasy dla tego zdarzenia.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli nie masz zamierzone i nietypowe potrzeby nie zgłaszać zdarzenia fokusu, upewnij się, że Twoja implementacja wywołuje implementację podstawową. W przeciwnym razie <see cref="E:System.Windows.UIElement.GotFocus" /> zdarzenie nie jest wywoływane podczas operacji typowy użytkownik, które zwykle ustawić fokus na ten element. Jeśli nie zamierzasz swoje element ma być focusable, użytkownik może uniemożliwić elementu focusable, ustawiając <see cref="P:System.Windows.UIElement.Focusable" /> do <see langword="false" />.</para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnGotMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnGotStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnGotTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Element <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.UIElement.GotTouchCapture" /> zdarzenia trasowane, które występuje, gdy touch są przechwytywane do tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnGotTouchCapture%2A> Metoda nie ma domyślnej implementacji. Zastąp <xref:System.Windows.UIElement.OnGotTouchCapture%2A> w klasie pochodnej do obsługi <xref:System.Windows.UIElement.GotTouchCapture> zdarzeń. Pamiętaj wywołać klasy bazowej <xref:System.Windows.UIElement.OnGotTouchCapture%2A> metodę, tak że klas bazowych otrzymają zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsKeyboardFocusedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody wirtualnej jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsKeyboardFocused%2A> zmiany właściwości zależności. Metoda wirtualna jest uruchamiany w pierwszy i można manipulować danymi zdarzeń zgodnie z potrzebami. A następnie <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> zdarzenie jest zgłaszane w tym samym wystąpienie danych zdarzeń. Należy zauważyć, że <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> zdarzenie nie jest zdarzenie trasowane. W związku z tym, nie można oznaczyć je jako obsłużony, klasy programu obsługi.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji. Użytkownik może wywołać podstawowej ani przed ani po swojej specjalnej obsługi w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsKeyboardFocusWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Element <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Wywoływane tuż przed <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> zdarzenie jest wywoływane przez ten element. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody wirtualnej jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> zmiany właściwości zależności. Metoda wirtualna jest uruchamiany w pierwszy i można manipulować danymi zdarzeń zgodnie z potrzebami. A następnie <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> zdarzenie jest zgłaszane w tym samym wystąpienie danych zdarzeń. Należy zauważyć, że <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> zdarzenie nie jest zdarzenie trasowane. W związku z tym, nie można oznaczyć je jako obsłużony, klasy programu obsługi.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji. Użytkownik może wywołać podstawowej ani przed ani po swojej specjalnej obsługi w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody wirtualnej jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsMouseCaptured%2A> właściwość zależności zmieniania jego wartości. Metoda wirtualna jest uruchamiany w pierwszy i można manipulować danymi zdarzeń zgodnie z potrzebami. A następnie <xref:System.Windows.UIElement.IsMouseCapturedChanged> zdarzenie jest zgłaszane w tym samym wystąpienie danych zdarzeń. Należy zauważyć, że <xref:System.Windows.UIElement.IsMouseCapturedChanged> zdarzenie nie jest zdarzenie trasowane; W związku z tym, nie można oznaczyć je jako obsłużony, klasy programu obsługi.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji. Użytkownik może wywołać podstawowej ani przed ani po swojej specjalnej obsługi w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Element <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Tej metody wirtualnej jest wywoływane, gdy wartość <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> właściwość zależności zmieniania jego wartości. Metoda wirtualna jest uruchamiany w pierwszy i można manipulować danymi zdarzeń zgodnie z potrzebami. A następnie <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> zdarzenie jest zgłaszane w tym samym wystąpienie danych zdarzeń. Należy zauważyć, że zdarzenie nie jest zdarzenie trasowane; W związku z tym, nie można oznaczyć je jako obsłużony, klasy programu obsługi.  Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji. Użytkownik może wywołać podstawowej ani przed ani po swojej specjalnej obsługi w zależności od wymagań.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody wirtualnej jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> właściwość zależności zmieniania jego wartości. Metoda wirtualna jest uruchamiany w pierwszy i można manipulować danymi zdarzeń zgodnie z potrzebami. A następnie <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> zdarzenie jest zgłaszane w tym samym wystąpienie danych zdarzeń. Należy zauważyć, że <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> zdarzenie nie jest zdarzenie trasowane. W związku z tym, nie można oznaczyć je jako obsłużony, klasy programu obsługi.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji. Użytkownik może wywołać podstawowej ani przed ani po swojej specjalnej obsługi w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Element <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody wirtualnej jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsStylusCaptured%2A> właściwość zależności zmieniania jego wartości. Metoda wirtualna jest uruchamiany w pierwszy i można manipulować danymi zdarzeń zgodnie z potrzebami. A następnie <xref:System.Windows.UIElement.IsStylusCapturedChanged> zdarzenie jest zgłaszane w tym samym wystąpienie danych zdarzeń. Należy zauważyć, że zdarzenie nie jest zdarzenie trasowane. W związku z tym, nie można oznaczyć je jako obsłużony, klasy programu obsługi.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji. Użytkownik może wywołać podstawowej ani przed ani po swojej specjalnej obsługi w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody wirtualnej jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> właściwość zależności zmieniania jego wartości. Metoda wirtualna jest uruchamiany w pierwszy i można manipulować danymi zdarzeń zgodnie z potrzebami. A następnie <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> zdarzenie jest zgłaszane w tym samym wystąpienie danych zdarzeń. Należy zauważyć, że zdarzenie nie jest zdarzenie trasowane. W związku z tym, nie można oznaczyć je jako obsłużony, klasy programu obsługi.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji. Użytkownik może wywołać podstawowej ani przed ani po swojej specjalnej obsługi w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody wirtualnej jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> właściwość zależności zmieniania jego wartości. Metoda wirtualna jest uruchamiany w pierwszy i można manipulować danymi zdarzeń zgodnie z potrzebami. A następnie <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> zdarzenie jest zgłaszane w tym samym wystąpienie danych zdarzeń. Należy zauważyć, że zdarzenie nie jest zdarzenie trasowane. W związku z tym nie można oznaczyć je jako obsłużony, klasy programu obsługi.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji. Użytkownik może wywołać podstawowej ani przed ani po swojej specjalnej obsługi w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.KeyEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Naciśnięć klawiszy są obsługiwane przez dedykowany Menedżera danych wejściowych. Inne funkcje programowania, które zależą od naciśnięć klawiszy, na przykład powiązania danych wejściowych i polecenia, może obsłużyć naciśnięcia klawisza, zanim jest ona uwidoczniona jako ogólne naciśnięcia klawisza. Te dane wejściowe funkcji systemu oznaczyć zdarzenia jako obsłużony, następnie <xref:System.Windows.UIElement.OnKeyDown%2A> nie jest wywoływany.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.KeyEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Naciśnięć klawiszy są obsługiwane przez dedykowany Menedżera danych wejściowych. Inne funkcje programowania, które zależą od naciśnięć klawiszy, na przykład powiązania danych wejściowych i polecenia, może obsłużyć naciśnięcia klawisza, zanim jest ona uwidoczniona jako ogólne naciśnięcia klawisza. Te dane wejściowe funkcji systemu oznaczyć zdarzenia jako obsłużony, następnie <xref:System.Windows.UIElement.OnKeyUp%2A> nie jest wywoływany.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Element <see cref="T:System.Windows.RoutedEventArgs" /> zawierający dane zdarzenia. Te dane zdarzeń musi zawierać identyfikator <see cref="E:System.Windows.UIElement.LostFocus" /> zdarzeń.</param>
        <summary>Wywołuje <see cref="E:System.Windows.UIElement.LostFocus" /> zdarzenia trasowanego przy użyciu dane zdarzenia, które są dostarczane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody, mimo że jest to wirtualne, mają domyślną implementację, która wywołuje zdarzenia.  
  
 To na * implementacja metody jest przeznaczona do podniesienia zdarzenia i tej samej implementacji metody jest wywoływana wewnętrznie, aby wygenerować zdarzenie po <xref:System.Windows.UIElement.IsFocused%2A> zmiany wartości właściwości. Ta implementacja różni się od innych [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] na * implementacji, które tylko zapewniają wygodny sposób, aby dodać obsługę klasy dla tego zdarzenia.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli nie masz zamierzone i nietypowe potrzeby nie zgłaszać zdarzenia fokusu, upewnij się, że Twoja implementacja wywołuje implementację podstawową. W przeciwnym razie <see cref="E:System.Windows.UIElement.LostFocus" /> zdarzenie nie jest wywoływane podczas operacji typowy użytkownik, które zwykle ustawić fokus na ten element. Jeśli nie zamierzasz swoje element ma być focusable, użytkownik może uniemożliwić elementu focusable, ustawiając <see cref="P:System.Windows.UIElement.Focusable" /> do <see langword="false" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnLostMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnLostStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnLostTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Element <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.UIElement.LostTouchCapture" /> zdarzenie trasowane, który występuje, gdy ten element utraci Przechwytywanie touch.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnLostTouchCapture%2A> Metoda nie ma domyślnej implementacji. Zastąp <xref:System.Windows.UIElement.OnLostTouchCapture%2A> w klasie pochodnej do obsługi <xref:System.Windows.UIElement.LostTouchCapture> zdarzeń. Pamiętaj wywołać klasy bazowej <xref:System.Windows.UIElement.OnLostTouchCapture%2A> metodę, tak że klas bazowych otrzymają zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit&#xA;override this.OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit" Usage="uIElement.OnManipulationBoundaryFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia.</param>
        <summary>Wywoływane, gdy <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> wystąpi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> Metoda nie ma domyślnej implementacji. Zastąp <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> w klasie pochodnej do obsługi <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> zdarzeń. Pamiętaj wywołać <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> metody klasy bazowej, tak że klas bazowych otrzymają zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationCompleted(class System.Windows.Input.ManipulationCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationCompleted (e As ManipulationCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationCompleted(System::Windows::Input::ManipulationCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationCompleted : System.Windows.Input.ManipulationCompletedEventArgs -&gt; unit&#xA;override this.OnManipulationCompleted : System.Windows.Input.ManipulationCompletedEventArgs -&gt; unit" Usage="uIElement.OnManipulationCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia.</param>
        <summary>Wywoływane, gdy <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> wystąpi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationCompleted%2A> Metoda nie ma domyślnej implementacji. Zastąp <xref:System.Windows.UIElement.OnManipulationCompleted%2A> w klasie pochodnej do obsługi <xref:System.Windows.UIElement.ManipulationCompleted> zdarzeń. Pamiętaj wywołać <xref:System.Windows.UIElement.OnManipulationCompleted%2A> metody klasy bazowej, tak że klas bazowych otrzymają zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationDelta">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationDelta(class System.Windows.Input.ManipulationDeltaEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationDelta (e As ManipulationDeltaEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationDelta(System::Windows::Input::ManipulationDeltaEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationDelta : System.Windows.Input.ManipulationDeltaEventArgs -&gt; unit&#xA;override this.OnManipulationDelta : System.Windows.Input.ManipulationDeltaEventArgs -&gt; unit" Usage="uIElement.OnManipulationDelta e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationDeltaEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia.</param>
        <summary>Wywoływane, gdy <see cref="E:System.Windows.UIElement.ManipulationDelta" /> wystąpi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationDelta%2A> Metoda nie ma domyślnej implementacji. Zastąp <xref:System.Windows.UIElement.OnManipulationDelta%2A> w klasie pochodnej do obsługi <xref:System.Windows.UIElement.ManipulationDelta> zdarzeń. Pamiętaj wywołać <xref:System.Windows.UIElement.OnManipulationDelta%2A> metody klasy bazowej, tak że klas bazowych otrzymają zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationInertiaStarting(class System.Windows.Input.ManipulationInertiaStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationInertiaStarting (e As ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationInertiaStarting(System::Windows::Input::ManipulationInertiaStartingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationInertiaStarting : System.Windows.Input.ManipulationInertiaStartingEventArgs -&gt; unit&#xA;override this.OnManipulationInertiaStarting : System.Windows.Input.ManipulationInertiaStartingEventArgs -&gt; unit" Usage="uIElement.OnManipulationInertiaStarting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationInertiaStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia.</param>
        <summary>Wywoływane, gdy <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> wystąpi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> Metoda nie ma domyślnej implementacji. Zastąp <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> w klasie pochodnej do obsługi <xref:System.Windows.UIElement.ManipulationInertiaStarting> zdarzeń. Pamiętaj wywołać <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> metody klasy bazowej, tak że klas bazowych otrzymają zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarted(class System.Windows.Input.ManipulationStartedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarted (e As ManipulationStartedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarted(System::Windows::Input::ManipulationStartedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationStarted : System.Windows.Input.ManipulationStartedEventArgs -&gt; unit&#xA;override this.OnManipulationStarted : System.Windows.Input.ManipulationStartedEventArgs -&gt; unit" Usage="uIElement.OnManipulationStarted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia.</param>
        <summary>Wywoływane, gdy <see cref="E:System.Windows.UIElement.ManipulationStarted" /> wystąpi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationStarted%2A> Metoda nie ma domyślnej implementacji. Zastąp <xref:System.Windows.UIElement.OnManipulationStarted%2A> w klasie pochodnej do obsługi <xref:System.Windows.UIElement.ManipulationStarted> zdarzeń. Pamiętaj wywołać <xref:System.Windows.UIElement.OnManipulationStarted%2A> metody klasy bazowej, tak że klas bazowych otrzymają zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarting(class System.Windows.Input.ManipulationStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarting (e As ManipulationStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarting(System::Windows::Input::ManipulationStartingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationStarting : System.Windows.Input.ManipulationStartingEventArgs -&gt; unit&#xA;override this.OnManipulationStarting : System.Windows.Input.ManipulationStartingEventArgs -&gt; unit" Usage="uIElement.OnManipulationStarting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Element <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.UIElement.ManipulationStarting" /> utworzone zdarzenie trasowane, gdy następuje procesora manipulacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationStarting%2A> Metoda nie ma domyślnej implementacji. Zastąp <xref:System.Windows.UIElement.OnManipulationStarting%2A> w klasie pochodnej do obsługi <xref:System.Windows.UIElement.ManipulationStarting> zdarzeń. Pamiętaj wywołać klasy bazowej <xref:System.Windows.UIElement.OnManipulationStarting%2A> metodę, tak że klas bazowych otrzymają zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Te dane zdarzeń raporty szczegółowe informacje o przycisku myszy, który został naciśnięty i obsługiwanego stanu.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.MouseDown" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Akcje przycisków myszy również są obsługiwane przez dedykowany Menedżera danych wejściowych. Inne funkcje programowania, które polegają na przycisku myszy, takich jak dane wejściowe i polecenia powiązania, może wywołać programy obsługi dla akcji, zanim jest ona uwidoczniona jako akcja przycisku myszy ogólne. Te dane wejściowe znacznik funkcje systemu <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzeń jako obsłużony, <xref:System.Windows.UIElement.OnMouseDown%2A> nie jest wywoływany.  
  
 Jeśli używasz tej obsługi klasy do oznaczenia zdarzeń jako obsłużony, możesz mogłoby to wpłynąć na następujących zdarzeń: <xref:System.Windows.UIElement.MouseLeftButtonDown> i <xref:System.Windows.UIElement.MouseRightButtonDown>. Jedną z tych zdarzeń mogą być wywoływane na elemencie odbieranie po <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> została odebrana.  
  
 Po oznaczeniu tego zdarzenia jako obsługiwane w klasie obsługi subevents nadal są wywoływane; jednak przekazać obsługiwanego stanu w danych zdarzenia. Jeśli zdarzenie jest obsługiwane w obsłudze klasy, chyba że jawnie użyć wystąpienia obsługi subevents nie są wywoływane <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> z `handledEventsToo` `true` Aby dołączyć programów obsługi. Funkcje obsługi klas również nie są wywoływane, chyba że te funkcje obsługi klas zostały zarejestrowane przy użyciu <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> podpis z `handledEventsToo` `true`. Obsługa <xref:System.Windows.UIElement.OnMouseDown%2A>, są obszaru obsługi swojej klasy uwzględnione wszystkie możliwe myszy szczegółów akcji. To zachowanie może być niepożądane; Dlatego należy zachować ostrożność, korzystając z tej metody wirtualnej do oznaczenia zdarzeń jako obsługiwane.  
  
 Wszystkich zdarzeń bezpośrednie specyficznych dla przycisku ma także wirtualnym na * metody. należy rozważyć, czy te funkcje obsługi klas specyficznych dla przycisku zastępowanie może być bardziej odpowiednie.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> dołączone zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji. Użytkownik może wywołać podstawowej ani przed ani po swojej specjalnej obsługi w zależności od wymagań.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego, za pomocą strategii routingu bezpośredniego. Oznaczanie zdarzenia jako obsłużony, nadal jest użyteczne w celu zapobiegania obsługi typowych wystąpienia (te, które nie należy określać `handledEventsToo`) wywoływanie.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> dołączone zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji. Użytkownik może wywołać podstawowej ani przed ani po swojej specjalnej obsługi w zależności od wymagań.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego, za pomocą strategii routingu bezpośredniego. Oznaczanie zdarzenia jako obsłużony, nadal jest użyteczne w celu zapobiegania obsługi typowych wystąpienia (te, które nie należy określać `handledEventsToo`) wywoływanie.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłasza, że naciśnięto lewy przycisk myszy.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> trasowane zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseLeftButtonDown> Zdarzenie wydaje się propagacji trasa podróży, ale faktycznie przybliżone ilości tych danych w sposób pośredni. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> bazowe zdarzenie, dla którego jest kierowany bąbelków, a każda <xref:System.Windows.UIElement> wzdłuż zdarzenia trasy używa obsługi identyczne do pozyskania bezpośredniego zdarzenie trasowane <xref:System.Windows.UIElement.MouseLeftButtonDown>. Mimo że można oznaczyć <xref:System.Windows.UIElement.MouseLeftButtonDown> zdarzenia jako obsługiwane na potrzeby tego elementu, obsługiwanego stanu nie widoczny przy obsłudze często do innych elementów wzdłuż trasy zdarzeń. Jednakże, możesz chcieć oznaczyć zdarzenia jako obsłużony, aby zapobiec wystąpieniu ogólne programy obsługi (te, które nie określiła `handledEventsToo`) wywoływanie.  
  
 Domyślna implementacja dla zdarzenia myszy ogólne, obsługa w <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> i konwertuje je do odpowiedniego zdarzenia lokalne. Jeśli chcesz zastąpić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej, zarejestruj alternatywnych klasy Obsługa <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Nie można zmienić Obsługa zachowanie myszy <xref:System.Windows.UIElement> przez zastąpienie <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.  
  
 Alternatywnie mogą przesłaniać tę metodę w celu zmiany obsługi stanu myszy określonych zdarzeń. Czy chcesz wywoływać implementację podstawową zależy od danego scenariusza. Nie można wywołać podstawowej wyłącza domyślne obsługi danych wejściowych dla tego zdarzenia myszy na klas nadrzędnych, które chcą również wywołać <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>. Na przykład może pochodzić z <xref:System.Windows.Controls.Button> i zastąpić <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> w klasie pochodnej bez wywoływania implementację podstawową; jednak to zastąpienie wyłącza <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia raportów zwolnienie lewego przycisku myszy.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> zdarzenia trasowanego osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseLeftButtonUp> Zdarzenie wydaje się propagacji trasa podróży, ale faktycznie przybliżone ilości tych danych w sposób pośredni. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> bazowe zdarzenie, dla którego jest kierowany bąbelków, a każda <xref:System.Windows.UIElement> wzdłuż zdarzenia trasy używa obsługi identyczne do pozyskania bezpośredniego zdarzenie trasowane <xref:System.Windows.UIElement.MouseLeftButtonUp>. Mimo że można oznaczyć <xref:System.Windows.UIElement.MouseLeftButtonUp> zdarzenia jako obsługiwane na potrzeby tego elementu, obsługiwanego stanu nie widoczny przy obsłudze często do innych elementów wzdłuż trasy zdarzeń. Jednakże, możesz chcieć oznaczyć zdarzenia jako obsłużony, aby zapobiec wystąpieniu ogólne programy obsługi (te, które nie określiła `handledEventsToo`) wywoływanie.  
  
 Domyślna implementacja dla zdarzenia myszy ogólne, obsługa w <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> i konwertuje je do odpowiedniego zdarzenia lokalne. Jeśli chcesz zastąpić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej, zarejestruj alternatywnych klasy Obsługa <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Nie można zmienić Obsługa zachowanie myszy <xref:System.Windows.UIElement> przez zastąpienie <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.MouseMove" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłasza, że naciśnięto prawy przycisk myszy.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> zdarzenia trasowanego osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseRightButtonDown> Zdarzenie wydaje się propagacji trasa podróży, ale faktycznie przybliżone ilości tych danych w sposób pośredni. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> bazowe zdarzenie, dla którego jest kierowany bąbelków, a każda <xref:System.Windows.UIElement> wzdłuż zdarzenia trasy używa obsługi identyczne do pozyskania bezpośredniego zdarzenie trasowane <xref:System.Windows.UIElement.MouseRightButtonDown>. Mimo że można oznaczyć <xref:System.Windows.UIElement.MouseRightButtonDown> zdarzenia jako obsługiwane na potrzeby tego elementu, obsługiwanego stanu nie widoczny przy obsłudze często do innych elementów wzdłuż trasy zdarzeń. Jednakże, możesz chcieć oznaczyć zdarzenia jako obsłużony, aby zapobiec wystąpieniu ogólne programy obsługi (te, które nie określiła `handledEventsToo`) wywoływanie.  
  
 Domyślna implementacja dla zdarzenia myszy ogólne, obsługa w <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> i konwertuje je do odpowiedniego zdarzenia lokalne. Jeśli chcesz zastąpić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej, zarejestruj alternatywnych klasy Obsługa <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Nie można zmienić Obsługa zachowanie myszy <xref:System.Windows.UIElement> przez zastąpienie <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.  
  
 Alternatywnie mogą przesłaniać tę metodę w celu zmiany obsługi stanu myszy określonych zdarzeń. Czy chcesz wywoływać implementację podstawową zależy od danego scenariusza. Nie można wywołać podstawowej wyłącza domyślne obsługi danych wejściowych dla tego zdarzenia myszy na klas nadrzędnych, które chcą również wywołać <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>. Na przykład może pochodzić z <xref:System.Windows.Controls.Control> i zastąpić <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> w klasie pochodnej bez wywoływania bazy; jednak to zastąpienie powoduje wyłączenie kontekstu menu usługi na kontrolki, które są dostępne w ramach programu <xref:System.Windows.Controls.Control> zachowanie domyślne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia raportów zwolnienie prawego przycisku myszy.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> zdarzenia trasowanego osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseRightButtonUp> Zdarzenie wydaje się propagacji trasa podróży, ale faktycznie przybliżone ilości tych danych w sposób pośredni. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> bazowe zdarzenie, dla którego jest kierowany bąbelków, a każda <xref:System.Windows.UIElement> wzdłuż zdarzenia trasy używa obsługi identyczne do pozyskania bezpośredniego zdarzenie trasowane <xref:System.Windows.UIElement.MouseRightButtonUp>. Mimo że można oznaczyć <xref:System.Windows.UIElement.MouseRightButtonUp> zdarzenia jako obsługiwane na potrzeby tego elementu, obsługiwanego stanu nie widoczny przy obsłudze często do innych elementów wzdłuż trasy zdarzeń. Jednakże, możesz chcieć oznaczyć zdarzenia jako obsłużony, aby zapobiec wystąpieniu ogólne programy obsługi (te, które nie określiła `handledEventsToo`) wywoływanie.  
  
 Domyślna implementacja dla zdarzenia myszy ogólne, obsługa w <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> i konwertuje je do odpowiedniego zdarzenia lokalne. Jeśli chcesz zastąpić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej, zarejestruj alternatywnych klasy Obsługa <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Nie można zmienić Obsługa zachowanie myszy <xref:System.Windows.UIElement> przez zastąpienie <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia raportów, czy przycisk myszy został wydany.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.MouseUp" /> zdarzenia trasowanego osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Akcje przycisków myszy również są obsługiwane przez dedykowany Menedżera danych wejściowych. Inne funkcje programowania, które polegają na przycisku myszy, takich jak dane wejściowe i polecenia powiązania, może wywołać programy obsługi dla akcji, zanim jest ona uwidoczniona jako akcja przycisku myszy ogólne. Te dane wejściowe znacznik funkcje systemu <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> zdarzeń jako obsłużony, <xref:System.Windows.UIElement.OnMouseUp%2A> nie jest wywoływany.  
  
 Jeśli używasz tej obsługi klasy do oznaczenia zdarzeń jako obsłużony, możesz mogłoby to wpłynąć na następujących zdarzeń: <xref:System.Windows.UIElement.MouseLeftButtonUp> i <xref:System.Windows.UIElement.MouseRightButtonUp>. Jedną z tych zdarzeń może zostać wywołane na odbieranie elementu po <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> została odebrana.  
  
 Po oznaczeniu tego zdarzenia jako obsługiwane w klasie obsługi subevents nadal są wywoływane; jednak przekazać obsługiwanego stanu w danych zdarzenia. Jeśli zdarzenie jest obsługiwane w obsłudze klasy, chyba że jawnie użyć wystąpienia obsługi subevents nie są wywoływane <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> z `handledEventsToo` `true` Aby dołączyć programów obsługi. Funkcje obsługi klas również nie są wywoływane, chyba że te funkcje obsługi klas zostały zarejestrowane przy użyciu <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> podpis z `handledEventsToo` `true`. Obsługa <xref:System.Windows.UIElement.OnMouseUp%2A>, są obszaru obsługi swojej klasy uwzględnione wszystkie możliwe myszy się akcje. To zachowanie może być niepożądane; Dlatego należy zachować ostrożność, korzystając z tej metody wirtualnej do oznaczenia zdarzeń jako obsługiwane.  
  
 Wszystkich zdarzeń bezpośrednie specyficznych dla przycisku ma także wirtualnym na * metody. należy rozważyć, czy te funkcje obsługi klas specyficznych dla przycisku zastępowanie może być bardziej odpowiednie.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.PreviewDrop" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement.OnPreviewGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.GiveFeedbackEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnPreviewGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.KeyEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnPreviewKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.KeyEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnPreviewLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłasza, że zostały naciśnięte przyciski myszy jeden lub więcej.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> dołączone zdarzenie trasowane osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Akcje przycisków myszy również są obsługiwane przez dedykowany Menedżera danych wejściowych. Inne funkcje programowania, które polegają na przycisku myszy, takich jak dane wejściowe i polecenia powiązania, może wywołać programy obsługi dla akcji, zanim jest ona uwidoczniona jako akcja przycisku myszy ogólne. Te dane wejściowe znacznik funkcje systemu <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> zdarzeń jako obsłużony, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> nie jest wywoływany.  
  
 Jeśli używasz tej obsługi klasy do oznaczenia zdarzeń jako obsłużony, możesz mogłoby to wpłynąć na następujących zdarzeń: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> i <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>. Jedną z tych zdarzeń mogą być wywoływane na elemencie odbieranie po <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> została odebrana.  
  
 Po oznaczeniu tego zdarzenia jako obsługiwane w klasie obsługi subevents nadal są wywoływane; jednak przekazać obsługiwanego stanu w danych zdarzenia. Jeśli zdarzenie jest obsługiwane w obsłudze klasy, chyba że jawnie użyć wystąpienia obsługi subevents nie są wywoływane <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> z `handledEventsToo` `true` Aby dołączyć programów obsługi. Funkcje obsługi klas również nie są wywoływane, chyba że te funkcje obsługi klas zostały zarejestrowane przy użyciu <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> podpis z `handledEventsToo` `true`. Obsługa <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>, są obszaru obsługi swojej klasy uwzględnione wszystkie możliwe myszy szczegółów akcji. To zachowanie może być niepożądane; Dlatego należy zachować ostrożność, korzystając z tej metody wirtualnej do oznaczenia zdarzeń jako obsługiwane.  
  
 Wszystkich zdarzeń bezpośrednie specyficznych dla przycisku ma także wirtualnym na * metody. należy rozważyć, czy te funkcje obsługi klas specyficznych dla przycisku zastępowanie może być bardziej odpowiednie.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłasza, że naciśnięto lewy przycisk myszy.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> zdarzenia trasowanego osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> Zdarzenie wydaje się tunelowania trasa podróży, ale faktycznie przybliżone ilości tych danych w sposób pośredni. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> jest bazowe zdarzenie, dla którego jest kierowany tunel i każdy <xref:System.Windows.UIElement> wzdłuż zdarzenia trasy używa obsługi identyczne do pozyskania bezpośredniego zdarzenie trasowane <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>. Mimo że można oznaczyć <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> zdarzenia jako obsługiwane na potrzeby tego elementu, obsługiwanego stanu nie widoczny przy obsłudze często do innych elementów wzdłuż trasy zdarzeń. Jednakże, możesz chcieć oznaczyć zdarzenia jako obsłużony, aby zapobiec wystąpieniu ogólne programy obsługi (te, które nie określiła `handledEventsToo`) wywoływanie.  
  
 Domyślna implementacja dla zdarzenia myszy ogólne, obsługa w <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> i konwertuje je do odpowiedniego zdarzenia lokalne. Jeśli chcesz zastąpić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej, zarejestruj alternatywnych klasy Obsługa <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Nie można zmienić Obsługa zachowanie myszy <xref:System.Windows.UIElement> przez zastąpienie <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.  
  
 Alternatywnie mogą przesłaniać tę metodę w celu zmiany obsługi stanu myszy określonych zdarzeń. Czy chcesz wywoływać implementację podstawową zależy od danego scenariusza. Nie można wywołać podstawowej wyłącza domyślne obsługi danych wejściowych dla tego zdarzenia myszy na klas nadrzędnych, które chcą również wywołać <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>. Na przykład może pochodzić z <xref:System.Windows.Controls.Button> i zastąpić <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> w klasie pochodnej bez wywoływania implementację podstawową; jednak to zastąpienie wyłącza <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia raportów zwolnienie lewego przycisku myszy.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> zdarzenia trasowanego osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> Zdarzenie wydaje się tunelowania trasa podróży, ale faktycznie przybliżone ilości tych danych w sposób pośredni. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> jest bazowe zdarzenie, dla którego jest kierowany tunel i każdy <xref:System.Windows.UIElement> wzdłuż zdarzenia trasy używa obsługi identyczne do pozyskania bezpośredniego zdarzenie trasowane <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>. Mimo że można oznaczyć <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> zdarzenia jako obsługiwane na potrzeby tego elementu, obsługiwanego stanu nie widoczny przy obsłudze często do innych elementów wzdłuż trasy zdarzeń. Jednakże, możesz chcieć oznaczyć zdarzenia jako obsłużony, aby zapobiec wystąpieniu ogólne programy obsługi (te, które nie określiła `handledEventsToo`) wywoływanie.  
  
 Domyślna implementacja dla zdarzenia myszy ogólne, obsługa w <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> i konwertuje je do odpowiedniego zdarzenia lokalne. Jeśli chcesz zastąpić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej, zarejestruj alternatywnych klasy Obsługa <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Nie można zmienić Obsługa zachowanie myszy <xref:System.Windows.UIElement> przez zastąpienie <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłasza, że naciśnięto prawy przycisk myszy.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> zdarzenia trasowanego osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> Zdarzenie wydaje się tunelowania trasa podróży, ale faktycznie przybliżone ilości tych danych w sposób pośredni. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> jest bazowe zdarzenie, dla którego jest kierowany tunel i każdy <xref:System.Windows.UIElement> wzdłuż zdarzenia trasy używa obsługi identyczne do pozyskania bezpośredniego zdarzenie trasowane <xref:System.Windows.UIElement.MouseRightButtonDown>. Mimo że można oznaczyć <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> zdarzenia jako obsługiwane na potrzeby tego elementu, obsługiwanego stanu nie widoczny przy obsłudze często do innych elementów wzdłuż trasy zdarzeń. Jednakże, możesz chcieć oznaczyć zdarzenia jako obsłużony, aby zapobiec wystąpieniu ogólne programy obsługi (te, które nie określiła `handledEventsToo`) wywoływanie.  
  
 Domyślna implementacja dla zdarzenia myszy ogólne, obsługa w <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> i konwertuje je do odpowiedniego zdarzenia lokalne. Jeśli chcesz zastąpić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej, zarejestruj alternatywnych klasy Obsługa <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Nie można zmienić Obsługa zachowanie myszy <xref:System.Windows.UIElement> przez zastąpienie <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.  
  
 Alternatywnie mogą przesłaniać tę metodę w celu zmiany obsługi stanu myszy określonych zdarzeń. Czy chcesz wywoływać implementację podstawową zależy od danego scenariusza. Nie można wywołać podstawowej wyłącza domyślne obsługi danych wejściowych dla tego zdarzenia myszy na klas nadrzędnych, które chcą również wywołać <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>. Na przykład może pochodzić z <xref:System.Windows.Controls.Control> i zastąpić <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> w klasie pochodnej bez wywoływania bazy; jednak to zastąpienie powoduje wyłączenie kontekstu menu usługi na kontrolki, które są dostępne w ramach programu <xref:System.Windows.Controls.Control> zachowanie domyślne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia raportów zwolnienie prawego przycisku myszy.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> zdarzenia trasowanego osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> Zdarzenie wydaje się tunelowania trasa podróży, ale faktycznie przybliżone ilości tych danych w sposób pośredni. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> jest bazowe zdarzenie, dla którego jest kierowany tunel i każdy <xref:System.Windows.UIElement> wzdłuż zdarzenia trasy używa obsługi identyczne do pozyskania bezpośredniego zdarzenie trasowane <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Mimo że można oznaczyć <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> zdarzenia jako obsługiwane na potrzeby tego elementu, obsługiwanego stanu nie widoczny przy obsłudze często do innych elementów wzdłuż trasy zdarzeń. Jednakże, możesz chcieć oznaczyć zdarzenia jako obsłużony, aby zapobiec wystąpieniu ogólne programy obsługi (te, które nie określiła `handledEventsToo`) wywoływanie.  
  
 Domyślna implementacja dla zdarzenia myszy ogólne, obsługa w <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> i konwertuje je do odpowiedniego zdarzenia lokalne. Jeśli chcesz zastąpić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej, zarejestruj alternatywnych klasy Obsługa <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Nie można zmienić Obsługa zachowanie myszy <xref:System.Windows.UIElement> przez zastąpienie <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia raportów, że jeden lub więcej przycisków myszy zostały wydane.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Akcje przycisków myszy również są obsługiwane przez dedykowany Menedżera danych wejściowych. Inne funkcje programowania, które polegają na przycisku myszy, takich jak dane wejściowe i polecenia powiązania, może wywołać programy obsługi dla akcji, zanim jest ona uwidoczniona jako akcja przycisku myszy ogólne. Te dane wejściowe znacznik funkcje systemu <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> zdarzeń jako obsłużony, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> nie jest wywoływany.  
  
 Jeśli używasz tej obsługi klasy do oznaczenia zdarzeń jako obsłużony, możesz mogłoby to wpłynąć na następujących zdarzeń: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> i <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Jedną z tych zdarzeń może zostać wywołane na odbieranie elementu po <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> została odebrana.  
  
 Po oznaczeniu tego zdarzenia jako obsługiwane w klasie obsługi subevents nadal są wywoływane; jednak przekazać obsługiwanego stanu w danych zdarzenia. Jeśli zdarzenie jest obsługiwane w obsłudze klasy, chyba że jawnie użyć wystąpienia obsługi subevents nie są wywoływane <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> z `handledEventsToo` `true` Aby dołączyć programów obsługi. Funkcje obsługi klas również nie są wywoływane, chyba że te funkcje obsługi klas zostały zarejestrowane przy użyciu <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> podpis z `handledEventsToo` `true`. Obsługa <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>, są obszaru obsługi swojej klasy uwzględnione wszystkie możliwe myszy się akcje. To zachowanie może być niepożądane; Dlatego należy zachować ostrożność, korzystając z tej metody wirtualnej do oznaczenia zdarzeń jako obsługiwane.  
  
 Wszystkich zdarzeń bezpośrednie specyficznych dla przycisku ma także wirtualnym na * metody. należy rozważyć, czy te funkcje obsługi klas specyficznych dla przycisku zastępowanie może być bardziej odpowiednie.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement.OnPreviewQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.QueryContinueDragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusDownEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement.OnPreviewTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane. Inny scenariusz, który jest specjalnie dla zdarzenia (wersja zapoznawcza) jest do oznaczania ich obsługi, tak aby pasujących propagacji funkcje obsługi klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.UIElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Element <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> zdarzenia trasowane, które występuje, gdy touch naciśnięcie tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> Metoda nie ma domyślnej implementacji. Zastąp <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> w klasie pochodnej do obsługi <xref:System.Windows.UIElement.PreviewTouchDown> zdarzeń. Pamiętaj wywołać klasy bazowej <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> metodę, tak że klas bazowych otrzymają zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Element <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> zdarzenie trasowane, która występuje po przemieszczeniu touch, gdy są połączeni z tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> Metoda nie ma domyślnej implementacji. Zastąp <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> w klasie pochodnej do obsługi <xref:System.Windows.UIElement.PreviewTouchMove> zdarzeń. Pamiętaj wywołać klasy bazowej <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> metodę, tak że klas bazowych otrzymają zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Element <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> zdarzenie trasowane, która występuje po zwolnieniu touch wewnątrz tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> Metoda nie ma domyślnej implementacji. Zastąp <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> w klasie pochodnej do obsługi <xref:System.Windows.UIElement.PreviewTouchUp> zdarzeń. Pamiętaj wywołać klasy bazowej <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> metodę, tak że klas bazowych otrzymają zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement.OnQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.QueryContinueDragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit&#xA;override this.OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit" Usage="uIElement.OnQueryCursor e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnRender">
      <MemberSignature Language="C#" Value="protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRender(class System.Windows.Media.DrawingContext drawingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRender(System::Windows::Media::DrawingContext ^ drawingContext);" />
      <MemberSignature Language="F#" Value="abstract member OnRender : System.Windows.Media.DrawingContext -&gt; unit&#xA;override this.OnRender : System.Windows.Media.DrawingContext -&gt; unit" Usage="uIElement.OnRender drawingContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawingContext" Type="System.Windows.Media.DrawingContext" />
      </Parameters>
      <Docs>
        <param name="drawingContext">Instrukcje rysowania określonego elementu. System układu zapewnia tego kontekstu.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, uczestniczy w operacjach renderowania, które są kierowane przez system układu. Instrukcje renderowania dla tego elementu nie są używane bezpośrednio, gdy ta metoda jest wywoływana, a zamiast tego są zachowywane do użytku później asynchronicznego, układ i rysowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji <xref:System.Windows.UIElement> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje potencjalne zastosowanie dla klasy pochodnej panelu.  
  
 [!code-csharp[LightWeightCustomPanel#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LightWeightCustomPanel/CSharp/OffsetPanel.cs#1)]
 [!code-vb[LightWeightCustomPanel#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LightWeightCustomPanel/visualbasic/offsetpanel.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> Metodę można przesłonić będzie dodawał kolejne elementy graficzne (wcześniej zdefiniowany w drzewo logiczne) renderowanego elementu, takiego jak efekty lub moduły definiowania układu. A <see cref="T:System.Windows.Media.DrawingContext" /> obiekt jest przekazywany jako argument, który udostępnia metody do rysowania kształtów, tekstu, obrazów lub wideo.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRenderSizeChanged (info As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ info);" />
      <MemberSignature Language="F#" Value="abstract member OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit&#xA;override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="uIElement.OnRenderSizeChanged info" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="info">Spakowane parametrów (<see cref="T:System.Windows.SizeChangedInfo" />), które zawierają stare i nowe rozmiary i który wymiar faktycznie zmiany.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, uczestniczy w operacjach renderowania, które są kierowane przez system układu. Ta metoda jest wywoływana po aktualizacji układu i przed renderowaniem, jeśli element <see cref="P:System.Windows.UIElement.RenderSize" /> został zmieniony w wyniku aktualizację układu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Typowy element poziomie struktury WPF używa implementację zastąpienie z <xref:System.Windows.FrameworkElement>. <xref:System.Windows.FrameworkElement> Unieważnia implementacji <xref:System.Windows.FrameworkElement.Width%2A> i <xref:System.Windows.FrameworkElement.Height%2A> właściwości i obsługuje podstawy remaking układu. Zastępowanie <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> na <xref:System.Windows.UIElement> poziomu oznacza, że implementacji elementu celowo nie korzysta z implementacji poziomie struktury WPF, a w związku z tym nazwę elementu musi obsługiwać logikę układu bardziej bezpośrednio, zwykle przez napisanie system układu zastępczy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement.OnStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusDownEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusDown" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> dołączone zdarzenie jest wywoływane przez ten element. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji. Użytkownik może wywołać podstawowej ani przed ani po swojej specjalnej obsługi w zależności od wymagań.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Oznaczanie zdarzenia jako obsłużony, nadal jest użyteczne w celu zapobiegania obsługi typowych wystąpienia (te, które nie należy określać `handledEventsToo`) wywoływanie.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> dołączone zdarzenie jest wywoływane przez ten element. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji. Użytkownik może wywołać podstawowej ani przed ani po swojej specjalnej obsługi w zależności od wymagań.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Oznaczanie zdarzenia jako obsłużony, nadal jest użyteczne w celu zapobiegania obsługi typowych wystąpienia (te, które nie należy określać `handledEventsToo`) wywoływanie.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusMove" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement.OnStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusUp" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement.OnTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> dołączone zdarzenie osiągnie elementu w jego trasy, który jest tworzony na podstawie tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia, mogą zaimplementować tę metodę, zaleca się wywoływać implementację podstawową w danej implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia oznacza, że do obsługi zdarzeń zgodnych z klas pochodnych, ustanawiając obsługi klasy, zamiast do obsługi wystąpienia. W tym przypadku pasującego zdarzenia to zdarzenia trasowanego. Wzorzec implementacji metody On * są różne dla zdarzenia trasowane, ponieważ zdarzenia trasowanego może zostać wywołane przez element podrzędny, który nie musi być element, który będzie wywoływać procedury obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise — zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub rejestrując klasy obsługi za pomocą <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodne klasy <xref:System.Windows.UIElement> można wywołać metody obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzeń. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulowanie danymi zdarzeń i oznaczanie zdarzenia trasowanego jako obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Element <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.UIElement.TouchDown" /> zdarzenia trasowane, które występuje, gdy touch naciśnie wewnątrz tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchDown%2A> Metoda nie ma domyślnej implementacji. Zastąp <xref:System.Windows.UIElement.OnTouchDown%2A> w klasie pochodnej do obsługi <xref:System.Windows.UIElement.TouchDown> zdarzeń. Pamiętaj wywołać klasy bazowej <xref:System.Windows.UIElement.OnTouchDown%2A> metodę, tak że klas bazowych otrzymają zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Element <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.UIElement.TouchEnter" /> zdarzenie trasowane, który występuje, gdy touch z zewnątrz do wewnątrz granic tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchEnter%2A> Metoda nie ma domyślnej implementacji. Zastąp <xref:System.Windows.UIElement.OnTouchEnter%2A> w klasie pochodnej do obsługi <xref:System.Windows.UIElement.TouchEnter> zdarzeń. Pamiętaj wywołać klasy bazowej <xref:System.Windows.UIElement.OnTouchEnter%2A> metodę, tak że klas bazowych otrzymają zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Element <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.UIElement.TouchLeave" /> zdarzenie trasowane, który występuje, gdy touch z wnętrza poza granicami tego <see cref="T:System.Windows.UIElement" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchLeave%2A> Metoda nie ma domyślnej implementacji. Zastąp <xref:System.Windows.UIElement.OnTouchLeave%2A> w klasie pochodnej do obsługi <xref:System.Windows.UIElement.TouchLeave> zdarzeń. Pamiętaj wywołać klasy bazowej <xref:System.Windows.UIElement.OnTouchLeave%2A> metodę, tak że klas bazowych otrzymają zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Element <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.UIElement.TouchMove" /> zdarzenie trasowane, która występuje po przemieszczeniu touch, gdy są połączeni z tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchMove%2A> Metoda nie ma domyślnej implementacji. Zastąp <xref:System.Windows.UIElement.OnTouchMove%2A> w klasie pochodnej do obsługi <xref:System.Windows.UIElement.TouchMove> zdarzeń. Pamiętaj wywołać klasy bazowej <xref:System.Windows.UIElement.OnTouchMove%2A> metodę, tak że klas bazowych otrzymają zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Element <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.UIElement.TouchUp" /> zdarzenie trasowane, która występuje po zwolnieniu touch wewnątrz tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchUp%2A> Metoda nie ma domyślnej implementacji. Zastąp <xref:System.Windows.UIElement.OnTouchUp%2A> w klasie pochodnej do obsługi <xref:System.Windows.UIElement.TouchUp> zdarzeń. Pamiętaj wywołać klasy bazowej <xref:System.Windows.UIElement.OnTouchUp%2A> metodę, tak że klas bazowych otrzymają zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="uIElement.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">Poprzedniego elementu nadrzędnego. To może być dostępna jako <see langword="null" /> Jeśli <see cref="T:System.Windows.DependencyObject" /> nie miał element nadrzędny wcześniej.</param>
        <summary>Wywoływane, gdy element nadrzędny <see cref="T:System.Windows.UIElement" /> raportów zmiany do elementu nadrzędnego visual bazowego.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Jeśli zastąpienie tej metody zawsze wywoływać implementację podstawową. Domyślną implementację podstawową wykonuje kilka wewnętrznych obsługi stanu właściwości dziedziczonych w odwrotnej kolejności. Nie można wywołać implementację podstawową spowoduje unieważnienie ten stan.  Ta metoda zastępuje <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />. <see cref="T:System.Windows.FrameworkElement" /> i <see cref="T:System.Windows.Window" /> zarówno także Przesłoń <see cref="T:System.Windows.UIElement" /> implementacji <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />, i <see cref="T:System.Windows.Window" /> zapieczętowuje go.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public double Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Opacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Opacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Opacity As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Opacity { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Opacity : double with get, set" Usage="System.Windows.UIElement.Opacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia współczynnik przezroczystości stosowane do całej <see cref="T:System.Windows.UIElement" /> gdy jest on renderowany w [! INCLUDE[TLA#tla_ui](~/includes/tlasharptla-UI-MD.MD)].  Jest to właściwość zależności.</summary>
        <value>Współczynnik nieprzezroczystości. Nieprzezroczystość domyślny to 1.0. Oczekiwane wartości należą do zakresu od 0,0 do 1,0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna 1.0 to domyślne, dostarczone przez początkowe metadane ta właściwość zależności na <xref:System.Windows.UIElement> klasy. Inne klasy pochodne potencjalnie może zmienić wartość domyślną przez zastąpienie metadanych z w ramach ich konstruktora klasy.  
  
 Wartość <xref:System.Windows.UIElement.Opacity%2A> nie zostanie zastosowany do rzeczywistego układu, chyba że element jest także widoczny (<xref:System.Windows.UIElement.IsVisible%2A> jest `true`).  
  
 <xref:System.Windows.UIElement.Opacity%2A> stosowanie z elementów nadrzędnych w dół drzewa elementów na elementy podrzędne, ale widoczne skutki nieprzezroczystość zagnieżdżonych, ustawienia nie są wskazane w wartości właściwości elementów podrzędnych poszczególnych. Na przykład jeśli lista ma nieprzezroczystość 50% (0,5) i jeden z jego elementów listy ma swój własny nieprzezroczystość równa 20% (0,2), net nieprzezroczystość widoczne dla tego elementu listy będą renderowane tak, jakby była 10% (0,1), ale wartość właściwości elementu listy <xref:System.Windows.UIElement.Opacity%2A> nadal będzie właściwości  0,2 po otrzymaniu kwerendy.  
  
 Nawet jeśli nieprzezroczystość zadeklarowane lub ocenianą wynosi 0, element nadal uczestniczy w danych wejściowych zdarzeń i poleceń i jest potencjalnie focusable. Ten aspekt może być przydatne, na przykład można użyć obiektu nieprzezroczystości od zera (na przykład kształt) maskowania obiekty źródłowe z elementami przezroczysty. Obiekt nieprzezroczystości od zera może następnie obsłużyć wszystkie dane wejściowe zdarzenia przetwarzania dla bazowego obszaru. Jednak `Background` lub `Fill` obiektu lub kształtu powinna być równa wartości, nawet jeśli jest on <xref:System.Windows.Media.Brushes.Transparent%2A>, w przeciwnym razie testowania trafień nie jest włączona i zdarzenia nie są odbierane.  
  
<a name="dependencyPropertyInfo_Opacity"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.OpacityProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.OpacityMask" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMask">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush OpacityMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush OpacityMask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.OpacityMask" />
      <MemberSignature Language="VB.NET" Value="Public Property OpacityMask As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ OpacityMask { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OpacityMask : System.Windows.Media.Brush with get, set" Usage="System.Windows.UIElement.OpacityMask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia maski nieprzezroczystości jako <see cref="T:System.Windows.Media.Brush" /> implementację, która jest stosowana do dowolnego maskowania kanał alfa do renderowanej zawartości tego elementu.  Jest to właściwość zależności.</summary>
        <value>Pędzel na potrzeby nieprzezroczystość maskowania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość używa tylko, niezależnie od wartości kanał alfa jest na podanie <xref:System.Windows.Media.Brush>. Inne kanały <xref:System.Windows.Media.Brush>użytkownika renderowana zawartość (czerwony, zielony lub niebieski), są ignorowane.  
  
 Najczęściej spotykaną <xref:System.Windows.Media.Brush> dla tego celu jest <xref:System.Windows.Media.ImageBrush>, który może służyć do różnych technik, takich jak winiet maskowania zdjęcia. Ale dowolny zdefiniowany <xref:System.Windows.Media.Brush> (takie jak <xref:System.Windows.Media.LinearGradientBrush>) mogą być używane.  
  
 W [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], wartość tej właściwości można użyć składnię w tekście, które są specyficzne dla każdego wykonania <xref:System.Windows.Media.Brush> klasy abstrakcyjnej. Aby uzyskać więcej informacji, zobacz [malowanie jednolitymi kolorami i gradientami — Przegląd](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md).  
  
<a name="dependencyPropertyInfo_OpacityMask"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.OpacityMaskProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono znaczników <xref:System.Windows.Media.ImageBrush> maski krycia stosowane do innego <xref:System.Windows.Controls.Image>.  
  
 [!code-xaml[OpacityMasksSnippet#UIElementOpacityMask](~/samples/snippets/csharp/VS_Snippets_Wpf/OpacityMasksSnippet/CS/ImageBrushExample.xaml#uielementopacitymask)]   
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Opacity" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMaskProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityMaskProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityMaskProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityMaskProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityMaskProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityMaskProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OpacityMaskProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.OpacityMaskProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.OpacityMask" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpacityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OpacityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.OpacityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.Opacity" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistId">
      <MemberSignature Language="C#" Value="public int PersistId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PersistId" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.PersistId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PersistId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PersistId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PersistId : int" Usage="System.Windows.UIElement.PersistId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("PersistId is an obsolete property and may be removed in a future release.  The value of this property is not defined.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która unikatowo identyfikuje ten element.</summary>
        <value>Unikatowy identyfikator dla tego elementu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PersistId%2A> jednoznacznie identyfikuje każdy element. Elementu zachowuje takie same <xref:System.Windows.UIElement.PersistId%2A> za każdym razem, gdy taka sama [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] jest ładowany (w tym reprezentacji binarnych). Ten identyfikator jest używany dla wewnętrznych wymagania dotyczące ładowania, analizowania i serializacji. Nie ma być używane przez kod aplikacji.  
  
 Ta właściwość nie ma relacji <xref:System.Object.GetHashCode%2A> wynik dla dowolnego danego wystąpienia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject&#xA;override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="uIElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">Kierunek przechodzenia przez żądany fokus.</param>
        <summary>Po przesłonięciu w klasie pochodnej zwraca element, który będzie fokus na kierunek przechodzenia przez określony fokus bez faktycznego przenosząc fokus do tego elementu.</summary>
        <returns>Element, który otrzymałby fokus <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> faktycznie została wywołana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody tej klasy jest niekompletne i zawsze zwraca `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragEnter : System.Windows.DragEventHandler " Usage="member this.PreviewDragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie przeciągania przy użyciu tego elementu jako element docelowy przeciągania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewDragEnter> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewDragEnter> zdarzeń dołączonych do podstawowych <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewDragEnterEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.DragEnter>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragLeave : System.Windows.DragEventHandler " Usage="member this.PreviewDragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie przeciągania przy użyciu tego elementu jako element źródłowy przeciągania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewDragLeave> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewDragLeave> zdarzeń dołączonych do podstawowych <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewDragLeaveEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.DragLeave>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragOver : System.Windows.DragEventHandler " Usage="member this.PreviewDragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie przeciągania z ten element to potencjalny element docelowy upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewDragOver> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewDragOver> zdarzeń dołączonych do podstawowych <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewDragOverEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.DragOver>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewDragOver%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewDragOver" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberSignature Language="F#" Value="member this.PreviewDrop : System.Windows.DragEventHandler " Usage="member this.PreviewDrop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie upuszczania za pomocą tego elementu jako element docelowy upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewDrop> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewDrop> zdarzeń dołączonych do podstawowych <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewDropEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.Drop>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewDrop%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewDrop" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po rozpoczęciu operacji przeciągania i upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewGiveFeedback> Zdarzeń umożliwia źródło zdarzenia przeciągania, aby modyfikować wygląd wskaźnika myszy, aby dać wizualną opinię użytkownika podczas operacji przeciągania i upuszczania.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewGiveFeedback> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewGiveFeedback> zdarzeń dołączonych do podstawowych <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.GiveFeedback>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klawiatura ma fokus w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ to zdarzenie używa tunelowania, routingu, element, który ma fokus może być nie zawiera elementu podrzędnego zamiast elementu gdzie faktycznie dołączony program obsługi zdarzeń. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w dane zdarzeń, aby określić rzeczywisty element, który jest ustawiony fokus.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.GotKeyboardFocus>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu klawisza, gdy fokus znajduje się w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa klucza współdziała z innymi funkcjami platformy, takich jak polecenia i tekst. <xref:System.Windows.UIElement.KeyDown> Zdarzeń jest tekst niższego poziomu zdarzenie danych wejściowych, które mogą nie zachowywać się, zgodnie z oczekiwaniami na niektórych kontrolek. Jest to, ponieważ niektóre kontrolki zostały składania do sterowania lub obsługa klasy, zapewniająca wyższego poziomu wersję tekst wejściowy obsługi i zdarzenia związane z.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewKeyDown> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewKeyDown> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewKeyDownEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.KeyDown>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu klawisza gdy fokus znajduje się w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa klucza współdziała z innymi funkcjami platformy, takich jak polecenia i tekst. <xref:System.Windows.UIElement.KeyUp> Zdarzeń jest tekst niższego poziomu zdarzenie danych wejściowych, które mogą nie zachowywać się, zgodnie z oczekiwaniami na niektórych kontrolek. Jest to, ponieważ niektóre kontrolki zostały składania do sterowania lub obsługa klasy, zapewniająca wyższego poziomu wersję tekst wejściowy obsługi i zdarzenia związane z. Aby uzyskać szczegółowe informacje Sprawdź w dokumentacji dotyczącej poszczególnych formantów.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewKeyUp> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewKeyUp> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewKeyUpEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.KeyUp>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klawiatura nie ma już fokusu w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ to zdarzenie używa tunelowania, routingu, element, który utraty fokus może być nie zawiera elementu podrzędnego zamiast elementu gdzie faktycznie dołączony program obsługi zdarzeń. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w dane zdarzeń, aby określić rzeczywisty element, który utraty fokus.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.LostKeyboardFocus>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu dowolnego przycisku myszy, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewMouseDown> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewMouseDown> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 <xref:System.Windows.UIElement.PreviewMouseDown> Zdarzenie jest zgłaszane w często razem z wartościami <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> lub <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, które odpowiadają naciśnij jednego z dwóch przycisków myszy standard. <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> i <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> są również zdarzenia trasowane, ale są bezpośrednie zdarzenia trasowane, a odpowiednie zdarzenie specyficzne dla przycisku jest wywoływane podczas <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> zdarzeń osiągnie ten element wzdłuż trasy zdarzeń. Zobacz uwagi, na <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> lub <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseDownEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.MouseDown>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu lewego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż wydaje się to wykonaj trasy tunelowania za pośrednictwem obrębu drzewa, faktycznie jest bezpośrednie zdarzenia trasowanego podniesione i reraised wzdłuż drzewo elementów przez każdy <xref:System.Windows.UIElement>.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportu specyfikę przyciskiem myszy odpowiednią <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> zdarzenie, które jest dołączone zdarzenia, które są przetwarzane przez każdy element wzdłuż trasę w protokole zdarzeń.  
  
 Dane zdarzenia tego zdarzenia udostępnia dane zdarzenia podstawowych <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> zdarzeń. Jeśli to zdarzenie jest oznaczony jako obsłużony, wzdłuż trasy zdarzeń, określone zdarzenia przycisku myszy nadal są wywoływane; jednak należy dodać procedury obsługi zdarzeń określonego przycisku myszy przez jawne wywołanie <xref:System.Windows.UIElement.AddHandler%2A>, przy użyciu opcji do obsługi zdarzeń, które są już oznaczone jako obsłużony, aby detektory zdarzenia. Po oznaczeniu <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> obsługi, możesz to zasadniczo oznaczanie <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> obsługiwana za wszelkie dalsze detektorów trasy i we wszystkich powiązanych zdarzeń. Prawdopodobnie obejmuje to zdarzenia generowane obsługi klasy takie jak <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.  
  
 Model traktować to zdarzenie (oraz inne zdarzenia przycisku myszy w <xref:System.Windows.UIElement>) jako myszy "Usługa" (przy użyciu definicji usługi udostępniane przez <xref:System.Windows.Input.Mouse> klasy). Zdarzenie dodaje wygodę wyeliminowanie konieczności Sprawdź Stany przycisku myszy (lewo i w prawo, góra dół) w oryginalnej zdarzeń myszy w danych zdarzeń. Dla bardziej zaawansowanych scenariuszy, takich jak sprawdzanie dla stanów niestandardowych przyciski, użytkownik może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] na <xref:System.Windows.Input.Mouse> klasy zamiast tych na <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu lewego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż wydaje się to wykonaj trasy tunelowania za pośrednictwem obrębu drzewa, faktycznie jest bezpośrednie zdarzenia trasowanego podniesione i reraised wzdłuż drzewo elementów przez każdy <xref:System.Windows.UIElement>.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportu specyfikę przyciskiem myszy odpowiednią <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> zdarzenie, które jest dołączone zdarzenia, które są przetwarzane przez każdy element wzdłuż trasę w protokole zdarzeń.  
  
 Dane zdarzenia tego zdarzenia udostępnia dane zdarzenia podstawowych <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> zdarzeń. Jeśli to zdarzenie jest oznaczony jako obsłużony, wzdłuż trasy zdarzeń, określone zdarzenia przycisku myszy nadal są wywoływane; jednak należy dodać procedury obsługi zdarzeń określonego przycisku myszy przez jawne wywołanie <xref:System.Windows.UIElement.AddHandler%2A>, przy użyciu opcji do obsługi zdarzeń, które są już oznaczone jako obsłużony, aby detektory zdarzenia. Po oznaczeniu <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> obsługi, możesz to zasadniczo oznaczanie <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> obsługiwana za wszelkie dalsze detektorów trasy i we wszystkich powiązanych zdarzeń.  
  
 Model traktować to zdarzenie (oraz inne zdarzenia przycisku myszy w <xref:System.Windows.UIElement>) jako myszy "Usługa" (przy użyciu definicji usługi udostępniane przez <xref:System.Windows.Input.Mouse> klasy). Zdarzenie dodaje wygodę wyeliminowanie konieczności Sprawdź Stany przycisku myszy (lewo i w prawo, góra dół) w oryginalnej zdarzeń myszy w danych zdarzeń. Dla bardziej zaawansowanych scenariuszy, takich jak sprawdzanie dla stanów niestandardowych przyciski, użytkownik może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] na <xref:System.Windows.Input.Mouse> klasy zamiast tych na <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po przemieszczeniu wskaźnika myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie występuje zarówno, gdy wskaźnik myszy po raz pierwszy najedzie na granice elementu, a także gdy wskaźnik myszy porusza się pozostając nadal w granicach elementu.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewMouseMove> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewMouseMove> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseMoveEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.MouseMove>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu prawego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż wydaje się to wykonaj trasy tunelowania za pośrednictwem obrębu drzewa, faktycznie jest bezpośrednie zdarzenia trasowanego podniesione i reraised wzdłuż drzewo elementów przez każdy <xref:System.Windows.UIElement>.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportu specyfikę przyciskiem myszy odpowiednią <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> zdarzenie, które jest dołączone zdarzenia, które są przetwarzane przez każdy element wzdłuż trasę w protokole zdarzeń.  
  
 Dane zdarzenia tego zdarzenia udostępnia dane zdarzenia podstawowych <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> zdarzeń. Jeśli to zdarzenie jest oznaczony jako obsłużony, wzdłuż trasy zdarzeń, określone zdarzenia przycisku myszy nadal są wywoływane; jednak należy dodać procedury obsługi zdarzeń określonego przycisku myszy przez jawne wywołanie <xref:System.Windows.UIElement.AddHandler%2A>, przy użyciu opcji do obsługi zdarzeń, które są już oznaczone jako obsłużony, aby detektory zdarzenia. Po oznaczeniu <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> obsługi, możesz to zasadniczo oznaczanie <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> obsługiwana za wszelkie dalsze detektorów trasy i we wszystkich powiązanych zdarzeń. Prawdopodobnie obejmuje to zdarzenia generowane obsługi klasy takie jak <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.  
  
 Model traktować to zdarzenie (oraz inne zdarzenia przycisku myszy w <xref:System.Windows.UIElement>) jako myszy "Usługa" (przy użyciu definicji usługi udostępniane przez <xref:System.Windows.Input.Mouse> klasy). Zdarzenie dodaje wygodę wyeliminowanie konieczności Sprawdź Stany przycisku myszy (lewo i w prawo, góra dół) w oryginalnej zdarzeń myszy w danych zdarzeń. Dla bardziej zaawansowanych scenariuszy, takich jak sprawdzanie dla stanów niestandardowych przyciski, użytkownik może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] na <xref:System.Windows.Input.Mouse> klasy zamiast tych na <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu prawego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż wydaje się to wykonaj trasy tunelowania za pośrednictwem obrębu drzewa, faktycznie jest bezpośrednie zdarzenia trasowanego podniesione i reraised wzdłuż drzewo elementów przez każdy <xref:System.Windows.UIElement>.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportu specyfikę przyciskiem myszy odpowiednią <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> zdarzenie, które jest dołączone zdarzenia, które są przetwarzane przez każdy element wzdłuż trasę w protokole zdarzeń.  
  
 Dane zdarzenia tego zdarzenia udostępnia dane zdarzenia podstawowych <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> zdarzeń. Jeśli to zdarzenie jest oznaczony jako obsłużony, wzdłuż trasy zdarzeń, określone zdarzenia przycisku myszy nadal są wywoływane; jednak należy dodać procedury obsługi zdarzeń określonego przycisku myszy przez jawne wywołanie <xref:System.Windows.UIElement.AddHandler%2A>, przy użyciu opcji do obsługi zdarzeń, które są już oznaczone jako obsłużony, aby detektory zdarzenia. Po oznaczeniu <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> obsługi, możesz to zasadniczo oznaczanie <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> obsługiwana za wszelkie dalsze detektorów trasy i we wszystkich powiązanych zdarzeń.  
  
 Model traktować to zdarzenie (oraz inne zdarzenia przycisku myszy w <xref:System.Windows.UIElement>) jako myszy "Usługa" (przy użyciu definicji usługi udostępniane przez <xref:System.Windows.Input.Mouse> klasy). Zdarzenie dodaje wygodę wyeliminowanie konieczności Sprawdź Stany przycisku myszy (lewo i w prawo, góra dół) w oryginalnej zdarzeń myszy w danych zdarzeń. Dla bardziej zaawansowanych scenariuszy, takich jak sprawdzanie dla stanów niestandardowych przyciski, użytkownik może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] na <xref:System.Windows.Input.Mouse> klasy zamiast tych na <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu dowolnego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewMouseUp> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewMouseUp> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 <xref:System.Windows.UIElement.PreviewMouseUp> Zdarzenie jest zgłaszane w często razem z wartościami <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> lub <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, które odpowiadają naciśnij jednego z dwóch przycisków myszy standard. <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> i <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> są również zdarzenia trasowane, ale są bezpośrednie zdarzenia trasowane, a odpowiednie zdarzenie specyficzne dla przycisku jest wywoływane podczas <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> zdarzeń osiągnie ten element wzdłuż trasy zdarzeń. Zobacz uwagi, na <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> lub <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseUpEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.MouseUp>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik obraca kółko myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zespół lub myszy przechwytywania pierwszeństwo gdy wskaźnik myszy znajduje się; w związku z tym jeśli zostanie wyświetlony to zdarzenie od elementu wąsko zdefiniowany lub przechwycone, wskaźnik myszy może mieć w rzeczywistości za pośrednictwem innego elementu.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewMouseMove> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewMouseMove> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseWheelEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.MouseWheel>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zmianie stanu przycisku klawiatury lub myszy podczas operacji przeciągania i upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewQueryContinueDrag> Zdarzeń umożliwia źródłom przeciągania zadeklarować, czy operacja przeciągania i upuszczania powinna zostać anulowana.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewQueryContinueDrag> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewQueryContinueDrag> zdarzeń dołączonych do podstawowych <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.QueryContinueDrag>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewQueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu przycisku pióra, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewStylusButtonDown> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewStylusButtonDown> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [Touch obsługi danych wejściowych w Windows Vista](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) i [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.StylusButtonDown>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu przycisku pióra, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewStylusButtonUp> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewStylusButtonUp> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.StylusButtonUp>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po dotknięciu dyskretyzatora jest przemieszczany nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewStylusDown> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewStylusDown> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusDownEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.StylusDown>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest przemieszczane nad elementem bez dotykania dyskretyzatora.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewStylusInAirMove> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewStylusInAirMove> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.StylusInAirMove>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest wystarczająco blisko dyskretyzatora, aby wykryć, znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewStylusInRange> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewStylusInRange> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.StylusInRange>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest przemieszczane nad elementem. Pióro musi być przemieszczane podczas wykrywania przez Dyskretyzator Aby zgłosić to zdarzenie, w przeciwnym razie <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> jest zgłaszane w zamian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewStylusMove> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewStylusMove> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusMoveEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.StylusMove>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest zbyt daleko od dyskretyzatora, aby zostało wykryte.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewStylusOutOfRange> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewStylusOutOfRange> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.StylusOutOfRange>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik wykonuje jeden z kilku gestów pióra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać informacji na temat gestów pióra, zobacz <xref:System.Windows.Input.SystemGesture>.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewStylusSystemGesture> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewStylusSystemGesture> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.StylusSystemGesture>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik zgłasza pióra od dyskretyzatora, gdy pióro znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewStylusDown> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewStylusDown> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusUpEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.StylusUp>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberSignature Language="F#" Value="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element pobiera tekst w sposób niezależny od urządzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewTextInput> Zdarzeń umożliwia składnik lub aplikację do nasłuchiwania pod kątem wprowadzanie tekstu w sposób niezależny od urządzenia. Klawiatura jest podstawowym sposobem <xref:System.Windows.UIElement.PreviewTextInput>; ale można również wygenerować mowy, pisma ręcznego i inne urządzenia wejściowego <xref:System.Windows.UIElement.PreviewTextInput>.  
  
 Ze względu na kombinacje klawiszy — w klawiatury domyślne lub za pośrednictwem edytory input method — wiele kluczowych zdarzeń mogą zgłaszać tylko jedno zdarzenie wprowadzania tekstu.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.PreviewTextInput> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewTextInput> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewTextInputEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.TextInput>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewTextInput%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewTextInput" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy palcem dotyka ekranu, gdy finger znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Windows.UIElement.PreviewTouchDown> i <xref:System.Windows.UIElement.TouchDown> zdarzenia nie występują aż palcem dotyka ekranu i przenosi. Naciśnięcie klawisza palcem na ekranie i przytrzymanie bez przenoszenia go powoduje naciśnij i przytrzymaj zachowanie <xref:System.Windows.Input.Stylus>. Naciśnij i przytrzymaj klawisz zachowanie jest odpowiednikiem myszy kliknij prawym przyciskiem myszy.  
  
 Aby spowodować <xref:System.Windows.UIElement.PreviewTouchDown> i <xref:System.Windows.UIElement.TouchDown> zdarzenia tak szybko, jak palcem dotyka ekranu, ustaw <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> dołączonych właściwości `false` dla tego elementu.  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewTouchDownEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.TouchDown>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> zdarzenia trasowanego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po przemieszczeniu palcem na ekranie, gdy finger znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewTouchMoveEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.TouchMove>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> zdarzenia trasowanego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy zostanie wywołane palcem zniżki w stosunku do ekranu, gdy finger znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewTouchUpEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   To odpowiednie zdarzenie propagacji <xref:System.Windows.UIElement.TouchUp>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> zdarzenia trasowanego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zmianie stanu przycisku klawiatury lub myszy podczas operacji przeciągania i upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.QueryContinueDrag> Zdarzeń umożliwia źródłom przeciągania określenie, czy operacja przeciągania i upuszczania powinna zostać anulowana.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.QueryContinueDrag> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.QueryContinueDrag> zdarzeń dołączonych do podstawowych <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.QueryContinueDragEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberSignature Language="F#" Value="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " Usage="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy Zażądano wyświetlenia kursora. To zdarzenie jest zgłaszane w elemencie za każdym razem, wskaźnik myszy przesuwa się do nowej lokalizacji, która oznacza, że obiekt kursora może wymagać zmiany na podstawie jego nowego położenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.QueryCursor> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.QueryCursor> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Kursor jest określone przy użyciu tej nazwy zdarzeń nie jest kursor tekstu (czasami znana jako funkcja punktu wstawiania). Zamiast tego kursor znajduje się w tym kontekście jest obiekt, który deklaruje na ekranie graficzną związane z kilku możliwych urządzeń powiązane dane wejściowe lub pojęcia związane z programowaniem Windows. Ten obiekt jest reprezentowany przez <xref:System.Windows.Input.Cursor> klasy na platformie WPF. System wejściowy WPF umożliwia zmianę tego kursora, gdy reprezentuje on na ekranie pozycji wskaźnika myszy. Możesz użyć wstępnie zdefiniowanych wartości z <xref:System.Windows.Input.Cursors> wyliczenia lub możesz zadeklarować niestandardowe kursora w formie pliku obrazu.  
  
 Nasłuchiwanie <xref:System.Windows.UIElement.QueryCursor> zdarzenie nie jest technikę efektywne zarządzanie kursora. Zamiast tego każdy element należy zdefiniować własne zachowanie kursora z <xref:System.Windows.FrameworkContentElement.Cursor%2A> i <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. Należy polegać wyłącznie na <xref:System.Windows.UIElement.QueryCursor> nie używasz WPF poziomie struktury podstawowych elementów, czy w dodatkowej okoliczności gdzie definiująca zachowanie kursor na zasadzie na element nie spełnia Twoich potrzeb. Więcej informacji na temat implementowania zachowanie kursora w odpowiedzi na <xref:System.Windows.UIElement.QueryCursor>, zobacz <xref:System.Windows.Input.QueryCursorEventHandler>.  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.QueryCursorEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   Nie ma żadnego zdefiniowanych odpowiednie zdarzenia tunelowania.  
  
-   Zastąp <xref:System.Windows.UIElement.OnQueryCursor%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.QueryCursor" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.RaiseEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> , zawierający dane zdarzenia, a także identyfikuje zdarzenia w celu podniesienia.</param>
        <summary>Wywołuje określone zdarzenia trasowanego. <see cref="T:System.Windows.RoutedEvent" /> Zgłoszenie jest identyfikowana w ramach <see cref="T:System.Windows.RoutedEventArgs" /> wystąpienia, który znajduje się (jako <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> właściwości danych zdarzenia).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `e` Wpisaniu parametru jako typu podstawowego wspólne dla wszystkich danych zdarzenia trasowanego; jednak dane zdarzeń należy nadać jako typ danych bardziej konkretny od pozostałych zdarzeń, który jest dostępny dla wywoływanego, zdarzenia, ponieważ <xref:System.Windows.RoutedEventArgs> zawierają klasy pochodne właściwości rzeczywiste określone dane, które są przeznaczone dla określonych zdarzeń, gdy pojawia się ono.  
  
 <xref:System.Windows.RoutedEventArgs> nie jest po prostu właściwości stanu zdarzeń; identyfikuje zdarzenia trasowane do pozyskania. Ten wzorzec wywoływanie zdarzeń i danych zdarzenia trasowanego zarówno różnią się od [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] klasy zdarzenia i dane, które zwykle tylko zawierają właściwości, które są związane ze zdarzeniem.  
  
   
  
## Examples  
 Poniższy przykład tworzy dane zdarzenia, dołącza identyfikator zdarzenia do danych, a następnie używa wystąpienie danych zdarzeń, aby wywołać niestandardowe zdarzenie trasowane.  
  
 [!code-csharp[RoutedEventCustom#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#raiseevent)]
 [!code-vb[RoutedEventCustom#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberSignature Language="F#" Value="member this.ReleaseAllTouchCaptures : unit -&gt; unit" Usage="uIElement.ReleaseAllTouchCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie urządzeń dotykowych przechwycone z tego elementu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseMouseCapture : unit -&gt; unit&#xA;override this.ReleaseMouseCapture : unit -&gt; unit" Usage="uIElement.ReleaseMouseCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Jeśli ten element przechowywane przechwytywania, zwalnia przechwytywanie myszy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ten element nie miał nałożonej przechwytywania, wywołanie tej metody nie ma znaczenia. Należy wziąć pod uwagę wartości <xref:System.Windows.UIElement.IsMouseCaptured%2A> przed wywołaniem tej metody.  
  
   
  
## Examples  
 Poniższy przykład jest równoległe, na przykład, biorąc pod uwagę dla <xref:System.Windows.UIElement.CaptureMouse%2A>: obsługuje przycisku myszy do przechwytywania myszy release i ponownie włączyć przesuwanie wskaźnika myszy.  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStylusCapture : unit -&gt; unit&#xA;override this.ReleaseStylusCapture : unit -&gt; unit" Usage="uIElement.ReleaseStylusCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia Przechwytywanie urządzenia pióra, jeśli ten element przechowywane przechwytywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ten element nie miał nałożonej przechwytywania, wywołanie tej metody nie ma znaczenia. Należy wziąć pod uwagę wartości <xref:System.Windows.UIElement.IsStylusCaptured%2A> przed wywołaniem tej metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.ReleaseTouchCapture : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement.ReleaseTouchCapture touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Urządzenie do wydania.</param>
        <summary>Próbuje zwolnić urządzeń dotykowych określony z tego elementu.</summary>
        <returns>
          <see langword="true" /> w przypadku urządzeń dotykowych zwolnieniu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="touchDevice" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement.RemoveHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identyfikator zdarzenia trasowanego, dla którego dołączono program obsługi.</param>
        <param name="handler">Implementacja określoną funkcję obsługi do usunięcia z kolekcji programu obsługi zdarzeń w tym elemencie.</param>
        <summary>Usuwa obsługi określonego zdarzenia trasowane z tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Najbardziej typowym scenariuszem dla za pomocą tego [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] jest podczas implementowania [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] zdarzeń "opakowanie", który jest skojarzony z niestandardowe zdarzenie trasowane, szczególnie w przypadku, gdy implementują logikę "Usuń" programów obsługi na [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] poziom. Przykład znajdujący się to uwagi sekcji ilustruje ten scenariusz.  
  
 Wywołanie tej metody nie ma wpływu, jeśli nie było żadnych procedury obsługi zarejestrowane przy użyciu kryteriów, które pasuje do parametrów wejściowych dla wywołania metody.  
  
 Jeśli więcej niż jeden program obsługi jest dołączony, które pasują do kryteriów, tylko pierwszego programu obsługi, w przypadku magazynu program obsługi jest usuwany. To zachowanie jest zgodne z [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zachowanie `-=` operatora.  
  
 Ani `routedEvent` ani `handler` może być `null`. Próbują dostarczyć albo wartość jako `null` zgłosi wyjątek.  
  
 Ta metoda ignoruje `handledEventsToo` informacje o parametrach, która jest dostępna, jeśli program obsługi po raz pierwszy zostały dodane za pomocą <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> podpisu, który umożliwia obsługę zdarzeń już obsługiwane. Dowolnego typu obsługi jest usuwany.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Windows.UIElement.RemoveHandler%2A> jako część definicji otoki zdarzenia.  
  
 [!code-csharp[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#addremovehandler)]
 [!code-vb[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#addremovehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="RenderSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size RenderSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size RenderSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderSize" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size RenderSize { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberSignature Language="F#" Value="member this.RenderSize : System.Windows.Size with get, set" Usage="System.Windows.UIElement.RenderSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia rozmiar renderowania końcowego tego elementu.</summary>
        <value>Rozmiar renderowanych dla tego elementu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Nie należy ustawić tę właściwość, albo w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] lub w kodzie, jeśli system poziomie struktury układu WPF. Niemal we wszystkich scenariuszach Typowa aplikacja użyje tego systemu układu. System układu nie będzie uwzględniać wielkości w <xref:System.Windows.UIElement.RenderSize%2A> właściwości bezpośrednio. <xref:System.Windows.UIElement.RenderSize%2A> Właściwość zadeklarowana zapisu umożliwiające niektórych WPF mostkowanie przypadki, które celowo obejście typowy układ protokoły, takie jak obsługa na poziomie core <xref:System.Windows.Documents.Adorner> klasy.  
  
 Ta właściwość może służyć do kontrolowania rozmiaru dotyczy renderowania w systemie układ zastępuje takich jak <xref:System.Windows.UIElement.OnRender%2A> lub <xref:System.Windows.UIElement.GetLayoutClip%2A>.  
  
 Bardziej typowy scenariusz jest obsługa <xref:System.Windows.FrameworkElement.SizeChanged> zastąpienie zdarzeń z programem obsługi klasy lub <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> zdarzeń.  
  
## Examples  
 W poniższym przykładzie pokazano, jak korzysta z niestandardowego modułu definiowania układu kodu <xref:System.Windows.UIElement.RenderSize%2A> wartość w celu utworzenia i rozmiar grafiki prostokąt, który definiuje moduł definiowania układu, w ramach jego <xref:System.Windows.UIElement.OnRender%2A> implementacji.  
  
 [!code-csharp[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/csharp/VS_Snippets_Wpf/AdornersMiscCode/CSharp/Window1.xaml.cs#uielementdesiredsize)]
 [!code-vb[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/visualbasic/VS_Snippets_Wpf/AdornersMiscCode/visualbasic/window1.xaml.vb#uielementdesiredsize)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform RenderTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform RenderTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ RenderTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RenderTransform : System.Windows.Media.Transform with get, set" Usage="System.Windows.UIElement.RenderTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia informacje o transformacji wpływającej na miejsce renderowania tego elementu.  Jest to właściwość zależności.</summary>
        <value>W tym artykule opisano szczegóły transformacji renderowania żądaną. Wartość domyślna to <see cref="P:System.Windows.Media.Transform.Identity" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Transformacji renderowania wygenerować rozmiar układu lub nie renderować informacje o rozmiarze. Renderowanie przekształcenia zwykle są przeznaczone dla animacji lub zastosowaniu efektu do elementu. Na przykład, element może być powiększenie skupia się lub moused za pośrednictwem lub może być zakłóceń po załadowaniu do rysowania oka do tej części [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  
  
<a name="dependencyPropertyInfo_RenderTransform"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.RenderTransformProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point RenderTransformOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point RenderTransformOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransformOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransformOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point RenderTransformOrigin { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberSignature Language="F#" Value="member this.RenderTransformOrigin : System.Windows.Point with get, set" Usage="System.Windows.UIElement.RenderTransformOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia centralny punkt każdej możliwej transformacji renderowania zadeklarowanej przez <see cref="P:System.Windows.UIElement.RenderTransform" />, względem granic elementu przez.  Jest to właściwość zależności.</summary>
        <value>Wartość, która deklaruje transformacji renderowania. Wartość domyślna to <see cref="T:System.Windows.Point" /> współrzędnych (0,0).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.RenderTransformOrigin%2A> ma nieco niestandardowe użycie <xref:System.Windows.Point> struktury wartości, w tym <xref:System.Windows.Point> nie reprezentuje bezwzględna lokalizacji, w układzie współrzędnych. Zamiast tego wartości z zakresu od 0 i 1 są interpretowane jako składnik w zakresie bieżącego elementu w każdej x, oś y. Na przykład (0.5,0.5) spowoduje, że transformacji renderowania do wyśrodkowany w elemencie lub (1,1) należy umieścić transformacji renderowania u dołu rogu elementu. <xref:System.Double.NaN> nie jest akceptowane wartości.  
  
 Wartości poza 0 i 1 również są akceptowane i spowodują więcej efektów niekonwencjonalne transformacji. Na przykład jeśli ustawisz <xref:System.Windows.UIElement.RenderTransformOrigin%2A> się (5,5), a następnie zastosować <xref:System.Windows.Media.RotateTransform>, punktem obrotu będzie również poza granicami samego elementu. Przekształcenia będzie uruchamiaj swoje element wokół big circle, który pochodzi poza na dole z prawej. Źródło może być zawarty wewnątrz jego elementu nadrzędnego, prawdopodobnie można prawdopodobnie poza ramki lub widoku. Wartości ujemne są podobne, zostaną one wykracza poza granice lewym górnym rogu.  
  
 Renderowanie przekształcenia nie wpływają na układ i są zazwyczaj używane do animować lub tymczasowego efekt zastosowany do elementu.  
  
<a name="xamlAttributeUsage_RenderTransformOrigin"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<object RenderTransformOrigin="xOrigin, yOrigin"/>  
```  
  
<a name="xamlPropertyElementUsage_RenderTransformOrigin"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.RenderTransformOrigin>  
    <Point X=" xOrigin " Y=" yOrigin "/>  
  </object.RenderTransformOrigin>  
</object>  
```  
  
<a name="xamlValues_RenderTransformOrigin"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *xOrigin*  
 Współczynnik początek w poziomie. Jest to zazwyczaj podawana jako wartość z zakresu od 0 do 1. Zobacz uwagi.  
  
 *yOrigin*  
 Współczynnik początek w pionie. Jest to zazwyczaj podawana jako wartość z zakresu od 0 do 1. Zobacz uwagi.  
  
<a name="dependencyPropertyInfo_RenderTransformOrigin"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.RenderTransformOriginProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład tworzy się elementy w kodzie, stosuje się <xref:System.Windows.UIElement.RenderTransformOrigin%2A>, a następnie stosuje <xref:System.Windows.UIElement.RenderTransform%2A>.  
  
 [!code-csharp[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/csharp/VS_Snippets_Wpf/transformanimations_snip/CSharp/RotateAboutCenterExample.cs#uielementrendertransformorigin)]
 [!code-vb[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/visualbasic/VS_Snippets_Wpf/transformanimations_snip/visualbasic/rotateaboutcenterexample.vb#uielementrendertransformorigin)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.RenderTransform" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOriginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformOriginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformOriginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformOriginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RenderTransformOriginProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RenderTransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.RenderTransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.RenderTransform" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeCommandBindings : unit -&gt; bool" Usage="uIElement.ShouldSerializeCommandBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca, czy procesy serializacji należy serializować zawartość <see cref="P:System.Windows.UIElement.CommandBindings" /> właściwości wystąpienia tej klasy.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="P:System.Windows.UIElement.CommandBindings" /> wartość właściwości powinna być Zserializowany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spowoduje to zwrócenie `true` Jeśli <xref:System.Windows.UIElement.CommandBindings%2A> lokalnie jest ustawiona.  
  
 To `ShouldSerialize` podana metoda, ponieważ <xref:System.Windows.UIElement.CommandBindings%2A> właściwość nie ma wartości domyślnej proste. Ta metoda wskazuje, czy właściwość zmieniła się z jego wartość domyślną. Zazwyczaj wywołuje tę metodę albo tworzenie projektanta lub tworzenia własnych dołączanie kontrolki <xref:System.Windows.UIElement>.  
  
 Aby uzyskać więcej informacji, zobacz [definiowanie wartości domyślnych za pomocą resetowania metod ShouldSerialize i](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeInputBindings : unit -&gt; bool" Usage="uIElement.ShouldSerializeInputBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca, czy procesy serializacji należy serializować zawartość <see cref="P:System.Windows.UIElement.InputBindings" /> właściwości wystąpienia tej klasy.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="P:System.Windows.UIElement.InputBindings" /> wartość właściwości powinna być Zserializowany; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spowoduje to zwrócenie `true` Jeśli <xref:System.Windows.UIElement.InputBindings%2A> lokalnie jest ustawiona.  
  
 To `ShouldSerialize` podana metoda, ponieważ <xref:System.Windows.UIElement.InputBindings%2A> właściwość nie ma wartości domyślnej proste. Ta metoda wskazuje, czy właściwość zmieniła się z jego wartość domyślną. Zazwyczaj wywołuje tę metodę albo tworzenie projektanta lub tworzenia własnych dołączanie kontrolki <xref:System.Windows.UIElement>.  
  
 Aby uzyskać więcej informacji, zobacz [definiowanie wartości domyślnych za pomocą resetowania metod ShouldSerialize i](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixels">
      <MemberSignature Language="C#" Value="public bool SnapsToDevicePixels { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SnapsToDevicePixels" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberSignature Language="VB.NET" Value="Public Property SnapsToDevicePixels As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SnapsToDevicePixels { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SnapsToDevicePixels : bool with get, set" Usage="System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy renderowanie dla tego elementu powinno używać urządzeń określonych ustawień piksela podczas renderowania.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli element ma być renderowany zgodnie z pikseli urządzenia; w przeciwnym razie <see langword="false" />. Domyślne, ponieważ nie zadeklarowano na <see cref="T:System.Windows.UIElement" /> jest <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można ustawić tę właściwość na `true` w elemencie głównym, aby włączyć pikseli przyciąganie renderowanie typu Pixel interfejsu użytkownika. Dla urządzeń działających z rozdzielczością większą niż 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)], piksel przyciąganie renderowania można zminimalizować wygładzanie ilość artefaktów spowodowanych antyaliasingiem w pobliżu linii o pojedynczej jednostki.  
  
 W przypadku dziedziczonych przez <xref:System.Windows.FrameworkElement> lub klasy, pochodne wszelkie <xref:System.Windows.FrameworkElement> zastępuje metadanych dla tej właściwości zależności ustawić <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> właściwości metadanych `true`. To osiąga to tylko najbardziej zewnętrznego element poddrzewo wymaga określenia <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> jako `true`, i następnie zgłasza wszystkie elementy podrzędne tego poddrzewa <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> jako `true` i będzie miał <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> efekt wizualny.  
  
<a name="dependencyPropertyInfo_SnapsToDevicePixels"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixelsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SnapsToDevicePixelsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SnapsToDevicePixelsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SnapsToDevicePixelsProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu przycisku pióra, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.StylusButtonDown> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusButtonDown> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusButtonDownEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewStylusButtonDown>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnStylusButtonDown%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusButtonDown" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu przycisku pióra, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.StylusButtonUp> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusButtonUp> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusButtonUpEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewStylusButtonUp>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnStylusButtonUp%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusButtonUp" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberSignature Language="F#" Value="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po dotknięciu dyskretyzatora, gdy pióro znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.StylusDown> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusDown> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusDownEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewStylusDown>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnStylusDown%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusDown" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberSignature Language="F#" Value="member this.StylusEnter : System.Windows.Input.StylusEventHandler " Usage="member this.StylusEnter : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po pokonaniu przez pióro granic tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.StylusEnter> to, że bezpośredniej obsługi strategii routingu zdarzeń, który używa. Zdarzenia trasowane bezpośrednie nie są zgłaszane wzdłuż trasy; Zamiast tego są są obsługiwane w tym samym elemencie gdzie są one inicjowane. Jednakże umożliwiają one innych aspektów zachowania zdarzenie trasowane, takich jak wyzwalacze zdarzeń w stylach.  
  
 Mimo że <xref:System.Windows.UIElement.StylusEnter> ścieżki po pokonaniu przez granice elementu, to zdarzenie więcej dosłownie zgłasza, że <xref:System.Windows.UIElement.IsStylusOver%2A> wartość właściwości została zmieniona z `false` do `true` w tym elemencie.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.StylusEnter> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusEnter> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusEnterEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Zastąp <xref:System.Windows.UIElement.OnStylusEnter%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusEnter" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest przemieszczane nad elementem bez dotykania dyskretyzatora.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.StylusInAirMove> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusInAirMove> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusInAirMoveEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewStylusInAirMove>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnStylusInAirMove%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusInAirMove" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberSignature Language="F#" Value="member this.StylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest wystarczająco blisko dyskretyzatora, aby wykryć, znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.StylusInRange> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusInRange> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusInRangeEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewStylusInRange>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnStylusInRange%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusInRange" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberSignature Language="F#" Value="member this.StylusLeave : System.Windows.Input.StylusEventHandler " Usage="member this.StylusLeave : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po opuszczeniu przez pióro granic tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.StylusLeave> to, że bezpośredniej obsługi strategii routingu zdarzeń, który używa. Zdarzenia trasowane bezpośrednie nie są zgłaszane wzdłuż trasy; Zamiast tego są są obsługiwane w tym samym elemencie gdzie są one inicjowane. Jednakże umożliwiają one innych aspektów zachowania zdarzenie trasowane, takich jak wyzwalacze zdarzeń w stylach.  
  
 Mimo że <xref:System.Windows.UIElement.StylusLeave> ścieżki po opuszczeniu przez pióro granic elementu, to zdarzenie więcej dosłownie zgłasza, że <xref:System.Windows.UIElement.IsStylusOver%2A> wartość właściwości została zmieniona z `true` do `false` w tym elemencie.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.StylusLeave> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusLeave> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusLeaveEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Zastąp <xref:System.Windows.UIElement.OnStylusLeave%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusLeave" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberSignature Language="F#" Value="member this.StylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest przemieszczane nad tym elementem. Pióro musi dotykać dyskretyzatora, aby zgłosić to zdarzenie. W przeciwnym razie <see cref="E:System.Windows.UIElement.StylusInAirMove" /> jest zgłaszane w zamian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.StylusMove> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusMove> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusMoveEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewStylusMove>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnStylusMove%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusMove" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest zbyt daleko od dyskretyzatora, aby zostało wykryte, znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.StylusOutOfRange> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusOutOfRange> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusOutOfRangeEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusPlugIns">
      <MemberSignature Language="C#" Value="protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.StylusPlugIns" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StylusPlugIns As StylusPlugInCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ StylusPlugIns { System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StylusPlugIns : System.Windows.Input.StylusPlugIns.StylusPlugInCollection" Usage="System.Windows.UIElement.StylusPlugIns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusPlugIns.StylusPlugInCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję obiektów wszystkich pióro wtyczki (Dostosowywanie) skojarzone z tym elementem.</summary>
        <value>Kolekcja dodatków plug-in pióra jako wyspecjalizowane kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na przykład kontrolkę, która wypełnia tej kolekcji <xref:System.Windows.Controls.InkCanvas>. <xref:System.Windows.Controls.InkCanvas> dodaje <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> jako elementu kolekcji, co pozwala <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> do interakcji z wejście pióra i wygenerować unikatowy renderowania w odpowiedzi na pióro oparte na zdarzeniach.  
  
 Aby uzyskać informacje na temat tworzenia niestandardowych wtyczek, która może odbierać i interpretować wejście pióra, zobacz [przechwytuje wejściowych z pisaka](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md).  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> wystąpieniu oraz dodaje go do <xref:System.Windows.UIElement.StylusPlugIns%2A> kolekcji niestandardowej pisma odręcznego, Obsługa kontroli.  
  
 [!code-csharp[StylusPluginSamples#3](~/samples/snippets/csharp/VS_Snippets_Wpf/StylusPluginSamples/CSharp/StylusControl.cs#3)]
 [!code-vb[StylusPluginSamples#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StylusPluginSamples/VisualBasic/StylusControl.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer" />
        <altmember cref="T:System.Windows.Controls.InkCanvas" />
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik wykonuje jeden z kilku gestów pióra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat gestów pióra, zobacz <xref:System.Windows.Input.SystemGesture>.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.StylusSystemGesture> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusSystemGesture> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusSystemGestureEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberSignature Language="F#" Value="member this.StylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.StylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik zgłasza pióra od dyskretyzatora, gdy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.StylusUp> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusUp> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
 Dotyk, mysz i wejście pióra istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusUpEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewStylusUp>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnStylusUp%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusUp" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberSignature Language="F#" Value="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element pobiera tekst w sposób niezależny od urządzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  To zdarzenie jest już może być oznaczony jako obsługiwane przez wewnętrzne implementacje formanty złożone. Zobacz uwagi poniżej.  
  
 <xref:System.Windows.UIElement.TextInput> Zdarzeń może już być oznaczony jako obsługiwane przez wewnętrzne implementacje formanty złożone. Na przykład <xref:System.Windows.Controls.TextBox> jest formantem złożone gdzie <xref:System.Windows.UIElement.TextInput> zdarzeń już jest oznaczony jako obsługiwany; w jego składania. Formanty to zrobić, ponieważ kontrolka wymaga do interpretacji niektóre typy danych wejściowych, np. klawiszy strzałek, jako mające specjalne znaczenie dla tej kontrolki. Jeśli używasz <xref:System.Windows.UIElement.PreviewTextInput> jako zdarzenie, gdzie możesz dołączyć obsługi wprowadzania tekstu, może zostać wyświetlony w poszukiwaniu lepszych wyników. Ta technika zmierzone w większości przypadków gdzie kompozycji formantu ma już oznaczone na to zdarzenie, jako obsłużony i uniemożliwia odbieranie zdarzeń wzdłuż trasy zdarzenia programu obsługi.  
  
 <xref:System.Windows.UIElement.TextInput> Zdarzeń umożliwia składnik lub aplikację do nasłuchiwania pod kątem wprowadzanie tekstu w sposób niezależny od urządzenia. Klawiatura jest podstawowym sposobem <xref:System.Windows.UIElement.TextInput>, ale mowy, pisma ręcznego i inne urządzenia wejściowego może też wiązać <xref:System.Windows.UIElement.TextInput>.  
  
 Ze względu na kombinacje klawiszy — w klawiatury domyślne lub za pośrednictwem edytory input method — wiele kluczowych zdarzeń mogą zgłaszać tylko jedno zdarzenie wprowadzania tekstu.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> dołączone zdarzenia dla tej klasy, aby <xref:System.Windows.UIElement.TextInput> jest częścią klasy członków listy podczas <xref:System.Windows.UIElement> jest dziedziczone jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.TextInput> zdarzeń dołączonych do podstawowych <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> dołączone zdarzenie i odbierać to samo wystąpienie danych zdarzeń.  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.TextInputEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewTextInput>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnTextInput%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.TextInput" /> zdarzenia trasowanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia trasowanego identyfikatory są tworzone, jeśli są rejestrowane zdarzenia trasowane. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategii routingu i narzędzie metody dodawania właścicieli dla zdarzenia. Aby dodać funkcje obsługi klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania zdarzenia trasowane, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji na temat przy użyciu identyfikatorów zdarzenia trasowanego, aby dodać funkcje obsługi klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberSignature Language="F#" Value="member this.TouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy palcem dotyka ekranu, gdy finger znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Windows.UIElement.PreviewTouchDown> i <xref:System.Windows.UIElement.TouchDown> zdarzenia nie występują aż palcem dotyka ekranu i przenosi. Naciśnięcie klawisza palcem na ekranie i przytrzymanie bez przenoszenia go powoduje naciśnij i przytrzymaj zachowanie <xref:System.Windows.Input.Stylus>. Naciśnij i przytrzymaj klawisz zachowanie jest odpowiednikiem myszy kliknij prawym przyciskiem myszy.  
  
 Aby spowodować <xref:System.Windows.UIElement.PreviewTouchDown> i <xref:System.Windows.UIElement.TouchDown> zdarzenia tak szybko, jak palcem dotyka ekranu, ustaw <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> dołączonych właściwości `false` dla tego elementu.  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.TouchDownEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewTouchDown>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnTouchDown%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.TouchDown" /> zdarzenia trasowanego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberSignature Language="F#" Value="member this.TouchEnter : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchEnter : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy touch z zewnątrz do wewnątrz granic tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie jest zawsze inicjowane, czy urządzenia dotykowe są przechwytywane do tego elementu.  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.TouchEnterEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Zastąp <xref:System.Windows.UIElement.OnTouchEnter%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.TouchEnter" /> zdarzenia trasowanego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCaptured : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie urządzenia dotykowe, które są przechwytywane do tego elementu.</summary>
        <value>Wyliczenie <see cref="T:System.Windows.Input.TouchDevice" /> obiektów, które są przechwytywane do tego elementu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCapturedWithin : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie urządzenia dotykowe, które są przechwytywane do tego elementu lub wszystkie elementy podrzędne w jego drzewa wizualnego.</summary>
        <value>Wyliczenie <see cref="T:System.Windows.Input.TouchDevice" /> obiektów, które są przechwytywane do tego elementu lub wszystkie elementy podrzędne w jego drzewa wizualnego.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesDirectlyOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie urządzenia dotykowe, znajdujących się nad tym elementem.</summary>
        <value>Wyliczenie <see cref="T:System.Windows.Input.TouchDevice" /> obiekty znajdujące się nad tym elementem.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie urządzenia dotykowe, znajdujących się nad tym elementem lub wszystkie elementy podrzędne w jego drzewa wizualnego.</summary>
        <value>Wyliczenie <see cref="T:System.Windows.Input.TouchDevice" /> obiektów, które są przez ten element lub wszystkie elementy podrzędne w jego drzewa wizualnego.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberSignature Language="F#" Value="member this.TouchLeave : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchLeave : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy touch z wnętrza poza granicami tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie jest zawsze inicjowane, czy urządzenia dotykowe są przechwytywane do tego elementu.  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.TouchLeaveEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Zastąp <xref:System.Windows.UIElement.OnTouchLeave%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.TouchLeave" /> zdarzenia trasowanego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberSignature Language="F#" Value="member this.TouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po przemieszczeniu palcem na ekranie, gdy finger znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.TouchMoveEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewTouchMove>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnTouchMove%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.TouchMove" /> zdarzenia trasowanego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberSignature Language="F#" Value="member this.TouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy zostanie wywołane palcem zniżki w stosunku do ekranu, gdy finger znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.TouchUpEvent>|  
|Strategii routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewTouchUp>.  
  
-   Zastąp <xref:System.Windows.UIElement.OnTouchUp%2A> zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.TouchUp" /> zdarzenia trasowanego.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslatePoint">
      <MemberSignature Language="C#" Value="public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point TranslatePoint(valuetype System.Windows.Point point, class System.Windows.UIElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Point TranslatePoint(System::Windows::Point point, System::Windows::UIElement ^ relativeTo);" />
      <MemberSignature Language="F#" Value="member this.TranslatePoint : System.Windows.Point * System.Windows.UIElement -&gt; System.Windows.Point" Usage="uIElement.TranslatePoint (point, relativeTo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="relativeTo" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="point">Punkt wartość względem tego elementu.</param>
        <param name="relativeTo">Element do danego punktu do translacji.</param>
        <summary>Wykonuje translację punktu względem tego elementu na współrzędne, które są względne wobec określonego elementu.</summary>
        <returns>Wartość punktu teraz względem elementu docelowego, a nie na ten element źródła.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przekazywanie `null` dla `relativeTo` jest dozwolone i oznacza, że współrzędne powinna być określona względem element główny w drzewie logicznym, do której należy ten element.  
  
 Ta metoda jest używana do translacji wartości punktów testu trafienia. Wywołanie tej metody jest szczególnie istotne w przypadku tworzenia kontrolki potrzebne do przetwarzania danych wejściowych na niższym poziomie. Korzystając z istniejących kontrolek, możesz ogólnie założono, że formanty ukończone zgłosi wyników testu trafienia przetłumaczone poprawnie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uid">
      <MemberSignature Language="C#" Value="public string Uid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Uid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Uid" />
      <MemberSignature Language="VB.NET" Value="Public Property Uid As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Uid { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Uid : string with get, set" Usage="System.Windows.UIElement.Uid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia Unikatowy identyfikator (lokalizacja) dla tego elementu. Jest to właściwość zależności.</summary>
        <value>Ciąg, który jest unikatowy identyfikator dla tego elementu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Używane przez projektantów, aby uzyskać `x:Uid` wartości (zobacz [Przegląd lokalizacja i globalizacja WPF](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md) Aby uzyskać więcej informacji).  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.UidProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UidProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UidProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UidProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.UidProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UidProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UidProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable UidProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.UidProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.Uid" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLayout">
      <MemberSignature Language="C#" Value="public void UpdateLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.UpdateLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateLayout();" />
      <MemberSignature Language="F#" Value="member this.UpdateLayout : unit -&gt; unit" Usage="uIElement.UpdateLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapewnia, że wszystkie elementy podrzędne visual tego elementu prawidłowo są aktualizowane dla układu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie tej metody, elementy z <xref:System.Windows.UIElement.IsMeasureValid%2A> `false` lub <xref:System.Windows.UIElement.IsArrangeValid%2A> `false` wywoła specyficzne dla elementu <xref:System.Windows.UIElement.MeasureCore%2A> i <xref:System.Windows.UIElement.ArrangeCore%2A> aktualizować metody, które wymusza układ i wszystkich rozmiarów obliczanej zostaną zweryfikowane.  
  
 Wywołanie tej metody nie ma wpływu Jeśli układ jest bez zmian lub rozmieszczeniu ani pomiaru stan układu jest nieprawidłowy. Jednakże, jeśli układ jest nieprawidłowy w związku z obu <xref:System.Windows.UIElement.UpdateLayout%2A> wywołanie zostanie ponownie całego układu. W związku z tym, należy unikać wywoływania <xref:System.Windows.UIElement.UpdateLayout%2A> po każdej zmianie przyrostowych i pomocnicze w drzewie elementów. System układu wykona układ elementów, zgodnie z opóźnieniem, korzystając z algorytmu, który wydajności i waluty, a za pomocą strategii wagi, które mają być odroczone zmiany do katalogów głównych, dopóki wszystkie elementy podrzędne są prawidłowe. Powinny wywoływać tylko <xref:System.Windows.UIElement.UpdateLayout%2A> Jeśli bezwzględnie konieczne zaktualizowane rozmiary i położenie i tylko wtedy, gdy masz pewność, że zostały wykonane wszystkie zmiany właściwości, kontroli i który może mieć wpływ na układ.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public System.Windows.Visibility Visibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Visibility Visibility" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Visibility" />
      <MemberSignature Language="VB.NET" Value="Public Property Visibility As Visibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Visibility Visibility { System::Windows::Visibility get(); void set(System::Windows::Visibility value); };" />
      <MemberSignature Language="F#" Value="member this.Visibility : System.Windows.Visibility with get, set" Usage="System.Windows.UIElement.Visibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Visibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia [! Widoczność include[TLA#tla_ui](~/includes/tlasharptla-UI-MD.MD)] tego elementu.  Jest to właściwość zależności.</summary>
        <value>Wartość wyliczenia. Wartość domyślna to <see cref="F:System.Windows.Visibility.Visible" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie tej właściwości ma wpływ na wartość <xref:System.Windows.UIElement.IsVisible%2A>, który z kolei mogą zgłaszać <xref:System.Windows.UIElement.IsVisibleChanged> zdarzeń. Jednak <xref:System.Windows.UIElement.IsVisible%2A> ma innych czynników, które wpływają, na przykład ustawienia widoczność elementów nadrzędnych, które go zawierają.  
  
 Elementy gdzie <xref:System.Windows.UIElement.Visibility%2A> nie <xref:System.Windows.Visibility.Visible> nie uczestniczą w danych wejściowych zdarzeń (lub poleceń), nie wpływają na przebiegów środka lub rozmieszczanie układu, nie są w kolejności karty i nie będą raportowane podczas testowania trafień.  
  
 W przypadku dziedziczonych przez <xref:System.Windows.Window> lub jej klasy pochodne <xref:System.Windows.Window> redefiniuje wartość domyślna tej właściwości to <xref:System.Windows.Visibility.Collapsed>. Ma to wpływ nie jest uruchomiona przebiegu miary układu w początkowo utworzony <xref:System.Windows.Window>, i <xref:System.Windows.UIElement.RenderSize%2A> zwraca (0,0). Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Window>. <xref:System.Windows.Controls.Primitives.Popup> również ponownie wartość domyślna ma być <xref:System.Windows.Visibility.Collapsed>, za pomocą podobne zachowanie wynikową <xref:System.Windows.Controls.Primitives.Popup> i jej klasy pochodne.  
  
<a name="dependencyPropertyInfo_Visibility"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.VisibilityProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład wykonuje program obsługi, który odwołuje się do różnych nazwane przyciskami, które mają być wzajemnie wykluczających się para w interfejsie użytkownika. Przed uruchomieniem logiki rzeczywisty program skojarzony z przyciskiem, równa się sam przycisk <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>, a inny przycisk w parze jest ustawiona na <xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>.  
  
 [!code-csharp[MediaElement_snip#UIElementVisibility](~/samples/snippets/csharp/VS_Snippets_Wpf/MediaElement_snip/CSharp/PlaybackExample.cs#uielementvisibility)]
 [!code-vb[MediaElement_snip#UIElementVisibility](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MediaElement_snip/VB/PlaybackExample.vb#uielementvisibility)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsVisible" />
        <altmember cref="T:System.Windows.Visibility" />
      </Docs>
    </Member>
    <Member MemberName="VisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisibilityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.VisibilityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisibilityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisibilityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisibilityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.VisibilityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.Visibility" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>