<Type Name="UIElement" FullName="System.Windows.UIElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5601cb1e8ad2490345c7451a3466c301c12b131c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36460000" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi UIElement extends System.Windows.Media.Visual implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.UIElement" />
  <TypeSignature Language="VB.NET" Value="Public Class UIElement&#xA;Inherits Visual&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class UIElement : System::Windows::Media::Visual, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <TypeSignature Language="F#" Value="type UIElement = class&#xA;    inherit Visual&#xA;    interface IAnimatable&#xA;    interface IInputElement" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Visual</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.UidProperty("Uid")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.Windows.UIElement" /> jest klasę podstawową dla implementacji poziomu core WPF opierając się na elementy Windows Presentation Foundation (WPF) i właściwości podstawowych prezentacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement> stanowi punkt początkowy dla właściwości układu elementu i ujawnia, którą można zastąpić metody wirtualne, które klasy pochodne, które mogą mieć wpływ na układ renderowania zachowanie elementu i jego podrzędnych elementów.  
  
 Większość danych wejściowych i skupienie zachowania w przypadku elementów na ogół jest też definiowany w <xref:System.Windows.UIElement> klasy. W tym zdarzenia dla klawiatura, mysz i wprowadzania danych piórem i stan powiązanych właściwości. Wiele z tych zdarzeń jest kierowane zdarzenia i wiele zdarzeń związanych z danych wejściowych ma zarówno propagacji routingu wersji, a także tunelowania wersji zdarzenia. Zdarzenia te pary zazwyczaj są to zdarzenia największe znaczenie dla autorów formantu.  
  
 <xref:System.Windows.UIElement> zawiera również [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] dotyczących [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modelu zdarzeń, łącznie z metod, które może wiązać się z określonych kierowane zdarzenia, które pochodzą z wystąpienia elementu.  
  
 Pod względem architektury <xref:System.Windows.UIElement> mogą zostać uwzględnione w przybliżeniu równy uchwyt okna w [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] programowania lub Element [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] programowania. <xref:System.Windows.UIElement> jest elementem podstawowej na poziomie core WPF.  
  
 A <xref:System.Windows.UIElement> ma następujące możliwości, w szczególności zdefiniowane przez <xref:System.Windows.UIElement> klasy:  
  
-   Można renderować jako element podrzędny (<xref:System.Windows.UIElement> pochodną <xref:System.Windows.Media.Visual>, klasa wysokiego poziomu grafiki)  
  
-   Zawiera logikę, która służy do rozmiaru i pozycji elementy podrzędne możliwe <xref:System.Windows.UIElement> (jeśli jest to interpretowane przez system układ)  
  
-   Mogą odpowiadać na dane wejściowe użytkownika (w tym kontroli danych wejściowych pobierania wysyłania do za pośrednictwem ich obsługi zdarzeń routingu lub routingu poleceń)  
  
-   Może wiązać się z routingiem zdarzenia, które działają podczas podróży trasę przy użyciu drzewa logicznego elementu  
  
-   Obsługuje niektóre aspekty systemu animacji  
  
 <xref:System.Windows.FrameworkElement> jest to klasa implementacji na poziomie struktury WPF opiera się na <xref:System.Windows.UIElement>i dodaje określonego interakcji z poziomu framework WPF. <xref:System.Windows.FrameworkElement> dodaje i definiuje następujące możliwości:  
  
-   Właściwości dodatkowe układu określonej struktury  
  
-   Obsługa metadanych bardziej zaawansowane funkcje raportowania we właściwościach  
  
-   Implementacja specyficzna dla klasy niektórych klas podstawowych i ich dołączone właściwości lub dołączone zdarzenia  
  
-   Obsługa stylów  
  
-   Dalsze wsparcie animacji  
  
 Inny powiązane jest klasa <xref:System.Windows.ContentElement>. <xref:System.Windows.ContentElement> Klasa implementuje wiele z tych samych elementów członkowskich jak <xref:System.Windows.UIElement>; ma różnicy między te dwie klasy z ich zamierzone umieścić w ogólnej zawartości modelu. A <xref:System.Windows.UIElement> Klasa pochodna definiuje zwykle stosunkowo sztywne modelu zawartości, co oznacza, że ma ograniczeń dotyczących elementy mogą być elementy podrzędne w znaczniku. Może to być pojemności do wykonywania mniej restrykcyjnych zawartość elementu podrzędnego <xref:System.Windows.UIElement>, ale ten pojemności jest zwykle scentralizowane w wyznaczonym właściwości zawartości. A <xref:System.Windows.ContentElement> zazwyczaj Klasa pochodna nie jest stosować jak największe restrykcje o zawartości na potrzeby obsługi scenariuszy, takich jak dokumenty format przepływu.  
  
> [!IMPORTANT]
>  <xref:System.Windows.UIElement.Visibility%2A> stan ma wpływ na wszystkie dane wejściowe obsługi przez ten element. Elementy, które nie są widoczne nie uczestniczą w testowania trafień i nie otrzymują zdarzenia wejściowe, nawet jeśli myszy jest nad granicami, gdy element jest jeśli były widoczne.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UIElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.UIElement" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tworzenie nowego wystąpienia, który jest typu <xref:System.Windows.UIElement> jest rzadko w kodzie aplikacji, ponieważ <xref:System.Windows.UIElement> jest base element. Zobacz [Przegląd elementów podstawowych](~/docs/framework/wpf/advanced/base-elements-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje obsługi kierowanego zdarzenia określonego zdarzenia routingiem, dodawanie obsługi do kolekcji programu obsługi dla bieżącego elementu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement.AddHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identyfikator kierowanego zdarzenia mają być obsługiwane.</param>
        <param name="handler">Odwołanie do implementacji programu obsługi.</param>
        <summary>Dodaje obsługi kierowanego zdarzenia określonego zdarzenia routingiem, dodawanie obsługi do kolekcji programu obsługi dla bieżącego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej procedury obsługi dla tego samego zdarzenia można dodać wiele razy bez podnoszenia Wystąpił wyjątek. Jednak program obsługi jest rzeczywiście wielokrotnie wywoływać gdy zdarzenie jest obsługiwane. W związku z tym należy rozważyć, jak to zachowanie może mieć efekty uboczne, które należy uwzględnić w implementację programu obsługi.  
  
 Ta metoda używane zwykle do implementacji metody dostępu "add", dla [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] wzorca dostępu zdarzeń niestandardowych kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="uIElement.AddHandler (routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identyfikator kierowanego zdarzenia mają być obsługiwane.</param>
        <param name="handler">Odwołanie do implementacji programu obsługi.</param>
        <param name="handledEventsToo">
          <see langword="true" /> zarejestrować program obsługi w taki sposób, że jest wywoływana, nawet w przypadku, gdy zaznaczono kierowanego zdarzenia przetwarzanych w jego dane zdarzeń; <see langword="false" /> rejestrowania programu obsługi z domyślnego warunku, że nie zostanie wywołany, jeśli kierowanego zdarzenia jest już oznaczona obsłużone.  Wartość domyślna to <see langword="false" />.  Nie rutynowo Pytaj do rehandle kierowanego zdarzenia.</param>
        <summary>Dodaje obsługi kierowanego zdarzenia określonego zdarzenia routingiem, dodawanie obsługi do kolekcji programu obsługi dla bieżącego elementu. Określ <paramref name="handledEventsToo" /> jako <see langword="true" /> mają podanego programu obsługi, można wywołać dla kierowanego zdarzenia, który już został oznaczony jako obsługiwany przez inny element wzdłuż trasy zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przetwarzanie zdarzenia wejściowe niskiego poziomu w praktycznym sposobem jest złożonym zadaniem. Wiele formantów implementuje zachowanie, gdzie określone zdarzenie zostanie oznaczony jako obsługiwany i zastępuje inne zdarzenie bardziej intuicyjne. Ogólnie rzecz biorąc formantu tylko oznaczy zdarzenia wejściowe platformy jako obsługiwane w przypadku niektórych zamiar projektu dla w ten sposób. W niektórych scenariuszach te cele projektu może być wymaga z konkretnym obsługi zdarzenia wejściowego. Jest w tych scenariuszach tego rejestrowanie programów obsługi z `handledEventsToo` jako `true` jest odpowiedni. Jednak użytkownik nie należy tego robić regularnie. Wywoływanie programy obsługi zdarzeń w odpowiedzi na wszystkie zdarzenia, nawet jeśli obsługiwane będzie skomplikować własne przetwarzania logiki zdarzeń aplikacji. Jeśli logika obsługi jest znaczny spadek wydajności może zostać wyświetlony. Należy zarezerwować stosowania Dołączanie programów obsługi zdarzeń już obsługiwane w sytuacji, gdy użytkownik ma już odnaleziony podczas procesu projektowania, że niektóre kontrolki są obsługi zdarzeń, które nadal mają być obsługiwane z logiką aplikacji.  
  
 Inny technika unikanie klasy zachowania niektórych kombinacji zdarzenie kontroli obsługi polega na użyciu zamiast podglądu tego zdarzenia. Na przykład jeśli <xref:System.Windows.UIElement.MouseLeftButtonDown> jest oznaczony jako obsługiwany przez Obsługa klasy może być możliwe dodanie obsługi <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> zamiast tego.  
  
 Tej procedury obsługi dla tego samego zdarzenia można dodać wiele razy bez podnoszenia Wystąpił wyjątek. Jednak program obsługi jest rzeczywiście wielokrotnie wywoływać gdy zdarzenie jest obsługiwane. W związku z tym należy rozważyć, jak to zachowanie może mieć efekty uboczne, które należy uwzględnić w implementację programu obsługi.  
  
 Ta metoda używane zwykle do implementacji metody dostępu "add", dla [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] wzorca dostępu zdarzeń niestandardowych kierowanego zdarzenia.  
  
   
  
## Examples  
 Poniższy przykład implementuje obsługi wywoływane na <xref:System.Windows.FrameworkElement.Initialized> zdarzenia na stronie dołącza zdefiniowanych obsługi do jednego z nazwanych elementów na stronie za pomocą `handledEventsToo` `true`. Czy można wywołać ten program obsługi, nawet jeśli inny element marszruty oznaczony dane zdarzenia udostępniony jako obsłużony przed osiągnięciem element obsługi trasy.  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AddToEventRoute : System.Windows.EventRoute * System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.AddToEventRoute (route, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route">Programy obsługi są dodawane do trasy zdarzenia.</param>
        <param name="e">Dane zdarzenia, które służy do dodawania obsługi. Ta metoda używa <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> właściwości danych zdarzeń na potrzeby obsługi.</param>
        <summary>Dodaje obsługi do określonego <see cref="T:System.Windows.EventRoute" /> dla bieżącego <see cref="T:System.Windows.UIElement" /> kolekcję procedur obsługi zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody mogą być używane przez elementy zawartości hosta (albo tymi, które implementują <xref:System.Windows.IContentHost> lub nie) można dodać obsługi elementów podrzędnych <xref:System.Windows.EventRoute>. Zwykle nie jest to wymagane dla <xref:System.Windows.UIElement>, ponieważ programy obsługi są dodawane automatycznie dla wszystkich elementów znalezionych w ukończone drzewa logicznego. W niektórych przypadkach, gdy <xref:System.Windows.ContentElement> i <xref:System.Windows.UIElement> mieszane opartego na szablonie drzewa, aktywne elementy, które pochodzi z konieczności szablonu można dodać do trasy. Zarówno <xref:System.Windows.ContentElement> i <xref:System.Windows.UIElement> obsługuje wersję tej metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.UIElement.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy ten element może być użyty jako element docelowy operacji przeciągania i upuszczania.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli ten element może być używany jako obiekt docelowy operacji przeciągania i upuszczania. w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacje przeciągania i upuszczania nie są domyślnie włączone i musi być włączona celowo <xref:System.Windows.UIElement.AllowDrop%2A> do `true`. Poza tego ustawienia podstawowe zachowanie przeciągania i upuszczania całkowicie zależy od implementacji i nie jest zdefiniowany przez <xref:System.Windows.UIElement> lub dowolnej klasy podstawowej elementu. Niektóre formanty, na przykład <xref:System.Windows.Controls.RichTextBox>, ma domyślne zachowanie. Aby uzyskać więcej informacji dotyczących operacji przeciągania i upuszczania, zobacz [przeciągania i upuszczania omówienie](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).  
  
 <xref:System.Windows.FrameworkElement> zastępuje metadane dla tej właściwości zależności w jego wykonania. W szczególności <xref:System.Windows.FrameworkElement> wyznacza tę właściwość, aby umożliwić dziedziczenie wartość właściwości (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> jest `true` w metadanych). Dziedziczenie wartości właściwości w tym kontekście oznacza, że istnieją elementy podrzędne z ma inne wartości <xref:System.Windows.UIElement.AllowDrop%2A> przypisany za pomocą wartości lokalnej lub style, wartość najbliższym elemencie nadrzędnym z wartością przypisane (ponownie, albo w stylach domyślnie wartości lub wartości lokalnych), a następnie będzie można przypisać wartości z elementu nadrzędnego do wszystkich elementów podrzędnych wcześniej nieprzypisane przez system właściwości. W praktyce oznacza to, że można określić, czy zezwalać Upuść działania w elemencie głównym, i że wartości zostaną przeniesione na wszystkie elementy podrzędne, które mają nie zostały przypisane go jako `false`.  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.AllowDropProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 W poniższym przykładzie znaczników <xref:System.Windows.UIElement.AllowDrop%2A> właściwości `true` za pomocą atrybutu na <xref:System.Windows.Controls.TextBox>, jak również inne ustawienie właściwości umożliwiających łącznie z powiązanych z <xref:System.Windows.Controls.TextBox> jako docelowy obiekt danych wielowierszowy tekst po zostanie przesunięte. Pełny przykład, zobacz [załadować przykładowe pliku porzucony](http://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7).  
  
 [!code-xaml[DragDrop_DropOpenTextFile#UIElementAllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DropOpenTextFile/CS/window1.xaml#uielementallowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowDropProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AllowDropProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.AllowDrop" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zastosowanie animacji właściwości zależności określonego w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest zapieczętowany i nie może zostać zastąpiona.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit" Usage="uIElement.ApplyAnimationClock (dp, clock)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">Identyfikator właściwości animacji.</param>
        <param name="clock">Zegar animacji, który kontroluje i deklaruje animacji.</param>
        <summary>Zastosowanie animacji właściwości zależności określonego w tym elemencie. Wszelkie istniejące animacje są zatrzymane i zastąpione nowe animacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby usunąć animacji z właściwością, określ identyfikator dla tej właściwości jako `dp` i określ `clock` jako `null`. Spowoduje to usunięcie animacji i animowany właściwość jest ustawiona na wartość podstawową. Jednak zegara pierwotnie skojarzone animacji nie zostanie zatrzymana. Inne animacje przypisane do tego zegara będzie nadal działać.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` ma określonego czasu Animacja przez wywołanie metody <xref:System.Windows.UIElement.ApplyAnimationClock%2A> .  
  
 [!code-csharp[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/ClockControllerSpeedRatioExample.cs#uielementapplyanimationclock)]
 [!code-vb[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/clockcontrollerspeedratioexample.vb#uielementapplyanimationclock)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="uIElement.ApplyAnimationClock (dp, clock, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość animacji.</param>
        <param name="clock">Zegar animacji, który kontroluje i deklaruje animacji.</param>
        <param name="handoffBehavior">Wartość wyliczenia. Wartość domyślna to <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, które spowoduje zatrzymanie wszelkich istniejących animacji i Zamień na nową.</param>
        <summary>Zastosowanie animacji właściwości zależności określonego w tym elemencie, z możliwością Określ, co się stanie, jeśli właściwość została już uruchomiona Animacja.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby usunąć animacji z właściwością, określ identyfikator dla tej właściwości jako `dp` i określ `clock` jako `null`. Spowoduje to usunięcie animacji i animowany właściwość jest ustawiona na wartość podstawową. Jednak zegara pierwotnie skojarzone animacji nie zostanie zatrzymana. Inne animacje przypisane do tego zegara będzie nadal działać.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCaptured : bool" Usage="System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy co najmniej jeden touch są przechwytywane do tego elementu.</summary>
        <value>
          <see langword="true" /> Jeśli co najmniej jeden touch są przechwytywane do tego elementu; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCapturedWithin : bool" Usage="System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy co najmniej jeden touch są przechwytywane do tego elementu lub elementów podrzędnych w jego drzewie wizualnym.</summary>
        <value>
          <see langword="true" /> Jeśli co najmniej jeden touch są przechwytywane do tego elementu lub elementów podrzędnych w jego drzewie wizualnym; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesDirectlyOver : bool" Usage="System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy naciśnięciu dotykowego co najmniej jeden nad tym elementem.</summary>
        <value>
          <see langword="true" /> Jeśli naciśnięciu dotykowego co najmniej jeden nad tym elementem; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesOver : bool" Usage="System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy co najmniej jeden touch naciśnięciu za pośrednictwem tego elementu lub elementów podrzędnych w jego drzewie wizualnym.</summary>
        <value>
          <see langword="true" /> Jeśli co najmniej jeden touch jest wciśnięty za pośrednictwem tego elementu lub elementów podrzędnych w jego drzewie wizualnym; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arrange">
      <MemberSignature Language="C#" Value="public void Arrange (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Arrange(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Arrange (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Arrange(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="member this.Arrange : System.Windows.Rect -&gt; unit" Usage="uIElement.Arrange finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">Rozmiaru końcowego, który oblicza nadrzędnego elementu podrzędnego w <see cref="T:System.Windows.Rect" /> wystąpienia.</param>
        <summary>Określa położenie elementów podrzędnych i określa rozmiar <see cref="T:System.Windows.UIElement" />. Elementy nadrzędne wywołanie tej metody z ich <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> implementacji (lub odpowiednik poziomie struktury WPF) tworzą aktualizacji układu cyklicznego. Ta metoda tworzy drugi przebieg aktualizacji układu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wyprowadzanie scenariuszy, zachowanie dla elementu poziomie struktury WPF <xref:System.Windows.UIElement.Arrange%2A> nie powinien i nie może, chyba że użytkownik w tle można zmienić. Zamiast tego należy zastąpić <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> Implementacja klasy. Twoje <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementacji jest wywoływana wewnętrznie przez <xref:System.Windows.UIElement.Arrange%2A> jako część domyślnego WPF układu poziomie struktury operacji. Twoje <xref:System.Windows.UIElement.ArrangeCore%2A> również powinny wywoływać implementację <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> na każdego elementu podrzędnego, jeśli ma ona elementy podrzędne.  
  
 Wyprowadzanie scenariuszy, zachowanie dla elementu core poziom WPF <xref:System.Windows.UIElement.Arrange%2A> nie powinien i nie może, chyba że użytkownik w tle można zmienić. Zamiast tego należy zastąpić <xref:System.Windows.UIElement.ArrangeCore%2A> w klasie. Twoje <xref:System.Windows.UIElement.ArrangeCore%2A> implementacji jest wywoływana wewnętrznie przez <xref:System.Windows.UIElement.Arrange%2A> jako część domyślnego WPF układu poziomie struktury operacji. Jednak przy założeniu używasz układu poziomie struktury WPF i jego systemu układu, często nie jest to, czy są w szczególności wyprowadzanie elementy w WPF poziomie core z <xref:System.Windows.UIElement> element klasy podstawowej. Twoje <xref:System.Windows.UIElement.ArrangeCore%2A> również powinny wywoływać implementację <xref:System.Windows.UIElement.Arrange%2A> na każdego elementu podrzędnego, jeśli ma ona elementy podrzędne. Uwaga scenariusz core poziomie WPF oznacza, że nie używasz <xref:System.Windows.FrameworkElement> pochodnej klasy, ponieważ <xref:System.Windows.FrameworkElement> zamknięcia <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.  
  
 Obliczenia WPF układu poziomie struktury pozycjonowania w [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] składa się z <xref:System.Windows.UIElement.Measure%2A> wywołania i <xref:System.Windows.UIElement.Arrange%2A> wywołania. Podczas <xref:System.Windows.UIElement.Measure%2A> wywołanie, system układ określa wymagań rozmiar elementu za pomocą podanego <xref:System.Windows.Size> (`availableSize`) argumentu. Podczas <xref:System.Windows.UIElement.Arrange%2A> wywołanie, system układu Kończenie znajdujących się rozmiar i położenie elementu obwiedni.  Aby uzyskać więcej informacji, zobacz [układu](~/docs/framework/wpf/advanced/layout.md).  
  
 `availableSize` może być dowolna liczba od 0 do nieskończoności. Elementy, aby określić Zwróć minimum <xref:System.Windows.Size> wymagają za pośrednictwem `availableSize` parametru.  
  
 W przypadku wystąpienia układ zawsze odbierze <xref:System.Windows.UIElement.Measure%2A> wywołać przed <xref:System.Windows.UIElement.Arrange%2A>. Po pierwszym przebiegu układu go otrzymać <xref:System.Windows.UIElement.Arrange%2A> wywołania bez <xref:System.Windows.UIElement.Measure%2A>; może się to zdarzyć, gdy właściwość, która wpływa tylko na <xref:System.Windows.UIElement.Arrange%2A> zmianie (na przykład wyrównanie), lub gdy odbierze nadrzędnego <xref:System.Windows.UIElement.Arrange%2A> bez <xref:System.Windows.UIElement.Measure%2A>. A <xref:System.Windows.UIElement.Measure%2A> wywołania automatycznie spowoduje unieważnienie <xref:System.Windows.UIElement.Arrange%2A> wywołania.  
  
 Aktualizacje układu są zazwyczaj wykonywane asynchronicznie (w czasie określany przez system układ). Element natychmiast nie uwzględnia zmiany właściwości, które mają wpływ na rozmiar elementu (takie jak <xref:System.Windows.FrameworkElement.Width%2A>).  
  
> [!NOTE]
>  Aktualizacje układu można wymusić za pomocą <xref:System.Windows.UIElement.UpdateLayout%2A> metody; jednak wywołanie tej funkcji nie jest zalecane, zazwyczaj zbędne i może powodować pogorszenie wydajności. W wielu sytuacjach, gdy wywołanie <xref:System.Windows.UIElement.UpdateLayout%2A> może być dobrym rozwiązaniem, system układu prawdopodobnie będzie przetwarzania aktualizacji. Układ systemu może przetwarzać zmiany układu w taki sposób, który można zoptymalizować wszystkie niezbędne aktualizacje w ramach pakietu.  
  
 System układu utrzymuje dwa oddzielne kolejek nieprawidłowy układów, jeden dla <xref:System.Windows.UIElement.Measure%2A> i jeden dla <xref:System.Windows.UIElement.Arrange%2A>. Kolejki układu są sortowane według na kolejność elementów w drzewie wizualnym. Elementy wyżej w drzewie znajdowały się u góry kolejki, aby uniknąć nadmiarowe układów spowodowany przez powtarzające zmiany elementów nadrzędnych. Zduplikowane pozycje są automatycznie usuwane z kolejki, a elementy są automatycznie usuwane z kolejki, jeśli są one już prawidłowe.  
  
 Podczas aktualizowania układ <xref:System.Windows.UIElement.Measure%2A> kolejki jest opróżniany najpierw, a następnie <xref:System.Windows.UIElement.Arrange%2A> kolejki. Element <xref:System.Windows.UIElement.Arrange%2A> kolejki nigdy nie będzie ułożone, jeśli jest elementem <xref:System.Windows.UIElement.Measure%2A> kolejki.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected virtual void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="abstract member ArrangeCore : System.Windows.Rect -&gt; unit&#xA;override this.ArrangeCore : System.Windows.Rect -&gt; unit" Usage="uIElement.ArrangeCore finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">Końcowe obszaru nadrzędnym tego elementu należy używać ułożyć się i jego elementów podrzędnych.</param>
        <summary>Określa szablon dla poziomu core WPF Rozmieść definicji układu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Przesłaniania tej metody jest tylko jeśli są wyprowadzanie na poziomie core WPF i nie używasz systemu układu poziomie struktury WPF i <xref:System.Windows.FrameworkElement> pochodnej klasy, ponieważ <xref:System.Windows.FrameworkElement> zamknięcia <xref:System.Windows.FrameworkElement.ArrangeCore%2A>. Jeśli używasz systemu układu poziomie struktury WPF odpowiedniej metody do zastąpienia specyficzne układu Rozmieść zachowanie jest <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.  
  
   
  
## Examples  
 <xref:System.Windows.UIElement.ArrangeCore%2A> implementacje powinny wywoływać implementację podstawową, aby przywrócić rozmiar, następnie wywołaj <xref:System.Windows.UIElement.Arrange%2A> metody każdego elementu podrzędnego widoczne i uzgodnienia rozmiary zwrócony przez te <xref:System.Windows.UIElement.Arrange%2A> wywołania z rozmiarem implementacji podstawowej. Logikę aspekt uzgadniania <xref:System.Windows.UIElement.ArrangeCore%2A> implementacja może się różnić w zależności od właściwości układu danego elementu. W poniższym przykładowym szablonie `VisualChildren` jest właściwością hipotetyczny zdefiniować nazwę elementu aby wyliczyć zawartością; <xref:System.Windows.UIElement> nie zdefiniowano zawartości kolekcji na tym poziomie różni się zawartości zachowania do elementów pochodnych, takich jak kontrolek lub klasy podstawowej formantów WPF architektura poziomie struktury.  
  
 [!code-csharp[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementarrangeoverride)]
 [!code-vb[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementarrangeoverride)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Jeśli tworzysz elementów na poziomie core WPF powinny zastępować to metodę, aby nadać unikatową nazwę elementu core poziomie WPF rozmieszczanie zachowanie układu, lub aby układu odpowiednie decyzje dotyczące elementy podrzędne elementy. Zastąpienie może być konieczne, jeśli te elementy podrzędne nie są takie jak rozpoznawalną ze zdefiniowanych wzorzec <see cref="T:System.Windows.Controls.ItemCollection" />.  Element nadrzędny, należy wywołać określonej klasy <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> dla każdego elementu podrzędnego w przeciwnym razie te elementy podrzędne nie są renderowane.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Uruchamia animacji dla określonej właściwości animacji w tym elemencie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit" Usage="uIElement.BeginAnimation (dp, animation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość animacji, które jest określone jako identyfikatora właściwości zależności.</param>
        <param name="animation">Oś czasu animacji, aby rozpocząć.</param>
        <summary>Uruchamia animacji dla określonej właściwości animacji w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas sprawdzania, czy właściwość jest animowany, Zauważ, że animacja rozpocznie się i można je było uważać animowany podczas renderowania pierwszej ramki poza — animowane punkt początkowy.  
  
 Jeśli <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> dla `animation` jest `null`, zostaną usunięte wszystkie bieżące animacji i bieżącą wartość właściwości jest utrzymywana.  
  
 Jeśli cały `animation` wartość jest `null`, wszystkie animacje są usuwane z właściwości i wartość właściwości zostanie przywrócony do jego wartości podstawowej. Jednak na osi czasu pierwotnie skojarzone animacji nie został on zatrzymany. Inne animacje przypisane do tej osi czasu będzie nadal działać.  
  
   
  
## Examples  
 Poniższy przykład tworzy animacji, przypisuje go, a następnie wywołuje <xref:System.Windows.UIElement.BeginAnimation%2A> ją uruchomić.  
  
 [!code-csharp[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#beginanimation)]
 [!code-vb[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#beginanimation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="uIElement.BeginAnimation (dp, animation, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość animacji, które jest określone jako identyfikatora właściwości zależności.</param>
        <param name="animation">Oś czasu animacji, które mają być stosowane.</param>
        <param name="handoffBehavior">Wartość wyliczenia, która określa, jak nowy animacji współdziała z dowolnego animacji bieżącego (uruchamianie), które już wpływu na wartość właściwości.</param>
        <summary>Rozpoczyna się przez animację określonych dla określonej właściwości animacji w tym elemencie z opcją określenia co się stanie, jeśli właściwość została już uruchomiona Animacja.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas sprawdzania, czy właściwość jest animowany, Zauważ, że animacja rozpocznie się i można je było uważać animowany podczas renderowania pierwszej ramki poza — animowane punkt początkowy.  
  
 Jeśli <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> dla `animation` jest `null`, zostaną usunięte wszystkie bieżące animacji i bieżącą wartość właściwości jest utrzymywana.  
  
 Jeśli cały `animation` wartość jest `null`, wszystkie animacje są usuwane z właściwości i wartość właściwości zostanie przywrócony do jego wartości podstawowej. Jednak na osi czasu pierwotnie skojarzone animacji nie został on zatrzymany. Inne animacje przypisane do tej osi czasu będzie nadal działać.  
  
   
  
## Examples  
 Poniższy przykład zawiera implementację programu obsługi, który uzyskuje dostęp do istniejących animacji z zasobu, a następnie wywołania <xref:System.Windows.UIElement.BeginAnimation%2A> za pomocą zachowań przekazaniem określony.  
  
 [!code-csharp[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/csharp/VS_Snippets_Wpf/BrushesIntroduction/CSharp/SampleViewer.xaml.cs#beginanimationhandoff)]
 [!code-vb[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BrushesIntroduction/visualbasic/sampleviewer.xaml.vb#beginanimationhandoff)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffect BitmapEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffect" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffect As BitmapEffect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffect ^ BitmapEffect { System::Windows::Media::Effects::BitmapEffect ^ get(); void set(System::Windows::Media::Effects::BitmapEffect ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BitmapEffect : System.Windows.Media.Effects.BitmapEffect with get, set" Usage="System.Windows.UIElement.BitmapEffect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia efekt mapy bitowej stosowany bezpośrednio do renderowanej zawartości dla tego elementu.  Jest to właściwość zależności.</summary>
        <value>Efekt mapy bitowej do zastosowania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Effects.BitmapEffect> w związku z tym jest typem abstrakcyjnym [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] zaimplementowanego klasy pochodnej wymaga użycia <xref:System.Windows.Media.Effects.BitmapEffect>, takich jak <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>. Uwaga jedną zaimplementowana klasie pochodnej jest typ kolekcji, który można określić więcej niż jeden sekwencyjnych <xref:System.Windows.Media.Effects.BitmapEffect>, przy użyciu składni tagów zagnieżdżonych.  
  
 Nie istniejących pochodnej klasy <xref:System.Windows.Media.Effects.BitmapEffect> obsługuje konwertera typów, więc [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] składnia używana dla tej właściwości jest zazwyczaj składni elementu właściwości.  
  
<a name="dependencyPropertyInfo_BitmapEffect"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.BitmapEffectProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład przedstawia mapy bitowej efektu, przy użyciu <xref:System.Windows.Media.Effects.BlurBitmapEffect>.  
  
 [!code-csharp[EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline](~/samples/snippets/csharp/VS_Snippets_Wpf/EffectsGallery_snip/CSharp/blurcodebehindexample.xaml.cs#codebehindblurcodebehindexampleinline)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInput">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffectInput" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffectInput As BitmapEffectInput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffectInput ^ BitmapEffectInput { System::Windows::Media::Effects::BitmapEffectInput ^ get(); void set(System::Windows::Media::Effects::BitmapEffectInput ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BitmapEffectInput : System.Windows.Media.Effects.BitmapEffectInput with get, set" Usage="System.Windows.UIElement.BitmapEffectInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffectInput</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia źródło wejścia dla efektu mapy bitowej stosowany bezpośrednio do renderowanej zawartości dla tego elementu.  Jest to właściwość zależności.</summary>
        <value>Źródło przez efekty mapy bitowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_BitmapEffectInput"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.BitmapEffectInputProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInputProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectInputProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectInputProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectInputProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BitmapEffectInputProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BitmapEffectProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.BitmapEffectProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.BitmapEffect" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMode">
      <MemberSignature Language="C#" Value="public System.Windows.Media.CacheMode CacheMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.CacheMode CacheMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CacheMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CacheMode As CacheMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::CacheMode ^ CacheMode { System::Windows::Media::CacheMode ^ get(); void set(System::Windows::Media::CacheMode ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheMode : System.Windows.Media.CacheMode with get, set" Usage="System.Windows.UIElement.CacheMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.CacheMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia buforowane reprezentację <see cref="T:System.Windows.UIElement" />.</summary>
        <value>A <see cref="T:System.Windows.Media.CacheMode" /> przechowuje buforowane reprezentację <see cref="T:System.Windows.UIElement" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustaw <xref:System.Windows.UIElement.CacheMode%2A> właściwości, gdy potrzebne w celu zwiększenia wydajności dla zawartości, która jest czasochłonne do renderowania. Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Media.BitmapCache>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.CacheMode" />
        <altmember cref="T:System.Windows.Media.BitmapCache" />
        <altmember cref="T:System.Windows.Media.BitmapCacheBrush" />
      </Docs>
    </Member>
    <Member MemberName="CacheModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CacheModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CacheModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.CacheModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CacheModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CacheModeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CacheModeProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.CacheModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.CacheMode" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberSignature Language="F#" Value="abstract member CaptureMouse : unit -&gt; bool&#xA;override this.CaptureMouse : unit -&gt; bool" Usage="uIElement.CaptureMouse " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Próbuje wymusić przechwytywanie myszy do tego elementu.</summary>
        <returns>
          <see langword="true" /> Jeśli pomyślnie przechwyceniu myszy; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można przechwycić elementu musi być włączony. Sprawdź, czy <xref:System.Windows.UIElement.IsEnabled%2A> jest `true` przed wywołaniem <xref:System.Windows.UIElement.CaptureMouse%2A>.  
  
 Jeśli wywołanie <xref:System.Windows.UIElement.CaptureMouse%2A> zwraca `true`, następnie <xref:System.Windows.UIElement.IsMouseCaptured%2A> jest również `true`.  
  
 Jeśli wywołanie <xref:System.Windows.UIElement.CaptureMouse%2A> zwraca `true`, a następnie <xref:System.Windows.UIElement.GotMouseCapture> i <xref:System.Windows.UIElement.IsMouseCapturedChanged> zdarzenia są generowane, z <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> zdarzeń dane raportowane jako element gdzie <xref:System.Windows.UIElement.CaptureMouse%2A> metoda jest wywoływana. Jeśli wymusisz przechwytywania może zakłócać Przechwytywanie istniejących — szczególnie w przypadku przechwytywania, które dotyczą przeciągania i upuszczania za pomocą myszy.  
  
 Aby wyczyścić przechwytywanie myszy wszystkich elementów, należy wywołać <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> z `element` podać jako parametr `null`.  
  
   
  
## Examples  
 W poniższym przykładzie implementuje parę obsługi myszy i kombinacja wejściowego, które przechwytywania (i uncapture) myszy i włączyć specjalne myszy trybu wyświetlania modelu 3D.  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberSignature Language="F#" Value="abstract member CaptureStylus : unit -&gt; bool&#xA;override this.CaptureStylus : unit -&gt; bool" Usage="uIElement.CaptureStylus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Próbuje wymusić Przechwytywanie pióra do tego elementu.</summary>
        <returns>
          <see langword="true" /> Jeśli pomyślnie przechwycenia pióra; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja oparte na podstawowym domyślnego urządzenia pióro zawsze zwraca `true`. Jednak jeśli rozszerzania wejściowych urządzeń, które implementacji urządzenia system wejściowy jest można tworzyć system pióro alternatywną implementację urządzenia, która może zwracać różne wyniki.  
  
 Gdy element przechwytuje Pióro, otrzymuje wprowadzania danych piórem nawet, gdy pióro znajduje się poza zakresem jej. Pióro zwykle są przechwytywane tylko podczas operacji przeciągania i upuszczania.  
  
 Wywołanie tej metody wymaga podstawowej statycznych <xref:System.Windows.Input.Stylus> metody <xref:System.Windows.Input.Stylus.Capture%2A>. Zachowanie rzeczywistych przechwytywania jest implementowany przez pióro active implementacji urządzenia.  
  
 Można przechwycić elementu musi być włączony. Sprawdź, czy <xref:System.Windows.UIElement.IsEnabled%2A> jest `true` zwrócić przed wywołaniem <xref:System.Windows.UIElement.CaptureStylus%2A>.  
  
 Jeśli wywołanie <xref:System.Windows.UIElement.CaptureStylus%2A> zwraca `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A> jest również `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.CaptureTouch : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement.CaptureTouch touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Urządzenie do przechwytywania.</param>
        <summary>Próbuje wymusić przechwytywania touch do tego elementu.</summary>
        <returns>
          <see langword="true" /> Jeśli określona touch są przechwytywane do tego elementu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.CaptureTouch%2A> Zwraca `false` Jeśli <xref:System.Windows.Input.TouchDevice> aktualnie przechwycony do innego elementu.  
  
 Jeśli <xref:System.Windows.UIElement.CaptureTouch%2A> zwraca `true`, a następnie <xref:System.Windows.UIElement.GotTouchCapture> zdarzenia.  
  
 Aby zwolnić przechwytywania jednym naciśnięciem przycisku z tego elementu, użyj <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> — metoda i określ urządzeń dotykowych do zwolnienia. Aby zwolnić wszystkie poprawki z tego elementu, użyj <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="touchDevice" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Geometry Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Geometry Clip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Geometry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Geometry ^ Clip { System::Windows::Media::Geometry ^ get(); void set(System::Windows::Media::Geometry ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Clip : System.Windows.Media.Geometry with get, set" Usage="System.Windows.UIElement.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia geometrię użytą do zdefiniowania konturu zawartości elementu.  Jest to właściwość zależności.</summary>
        <value>Geometria służący do zmiany rozmiaru obszaru przycinania. Wartość domyślna to null <see cref="T:System.Windows.Media.Geometry" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy poza geometrii zostaną graficznie przycięte w renderowanym układzie. Geometria nie ma być prostokątne.  
  
<a name="dependencyPropertyInfo_Clip"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ClipProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 W tym przykładzie pokazano sposób definiowania elementu framework <xref:System.Windows.UIElement.Clip%2A> regionu. Aby zdefiniować klip, należy użyć <xref:System.Windows.Media.Geometry> (na przykład <xref:System.Windows.Media.EllipseGeometry> można ustawić elementu <xref:System.Windows.UIElement.Clip%2A> właściwości. Tylko obszar, który znajduje się w regionie geometrii będą widoczne.  
  
 W poniższym przykładzie przedstawiono <xref:System.Windows.Controls.Image> bez zdefiniowanym obszarem przycinania. Ponieważ nie została zdefiniowana nie obszar przycinania całego obrazu jest wyświetlany.  
  
 [!code-xaml[ClipPathExample#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#2)]  
  
 ![Obiekt przed zastosowaniem obszar przycinania](~/add/media/mil-task-clip-region-noclip.png "obiektu przed zastosowaniem obszar przycinania")  
Obraz o nie obszar przycinania  
  
 W następnym przykładzie tworzona jest identyczne obrazu, z wyjątkiem, że ma ona zdefiniowanym obszarem przycinania. Tylko część obrazu, który znajduje się w obszarze <xref:System.Windows.Media.EllipseGeometry> będą wyświetlane.  
  
 [!code-xaml[ClipPathExample#4](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#4)]  
  
 ![Przycięty obiekt](~/add/media/mil-task-clip-region-ellispe.PNG "przycięty obiekt")  
Obraz o obszar przycinania eliptycznej  
  
 W poniższym przykładzie przedstawiono sposób Animacja framework elementu <xref:System.Windows.UIElement.Clip%2A> regionu. W tym przykładzie <xref:System.Windows.Media.EllipseGeometry> służy do definiowania obszar przycinania eliptycznej dla <xref:System.Windows.Controls.Image> elementu. A <xref:System.Windows.Media.Animation.PointAnimation> animuje geometrii elipsy <xref:System.Windows.Media.EllipseGeometry.Center%2A> właściwość z (0, 0) do (200, 150). Odtwarzanie po obraz został załadowany i nieskończoność jest powtarzany rozpoczyna się animacji.  
  
 [!code-xaml[ClipPathExample#5](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#5)]  
  
 Aby uzyskać pełny przykład, zobacz [próbki Region klip](http://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="ClipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.ClipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.Clip" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToBounds">
      <MemberSignature Language="C#" Value="public bool ClipToBounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipToBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.ClipToBounds" />
      <MemberSignature Language="VB.NET" Value="Public Property ClipToBounds As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ClipToBounds { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ClipToBounds : bool with get, set" Usage="System.Windows.UIElement.ClipToBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy należy przyciąć zawartość tego elementu (lub zawartość pochodzącą z elementów podrzędnych tego elementu) w celu dopasowania do rozmiarów elementu zawierającego.   Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli zawartość powinna zostać obcięty; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla elementów podrzędnych <xref:System.Windows.UIElement.ClipToBounds%2A> ma inny wpływ na układ zachowania w zależności od tego, czy wysokość i szerokość elementu nadrzędnego są określane przez <xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A> lub <xref:System.Windows.FrameworkElement.MaxHeight%2A>  /  <xref:System.Windows.FrameworkElement.MaxWidth%2A>. <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> elementu nadrzędnego zawsze są przestrzegane niezależnie od wartości <xref:System.Windows.UIElement.ClipToBounds%2A> i skuteczne wycinka zawsze będzie przyciąć zawartość oparte na tych maksymalne wartości. Element nadrzędny <xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A> ustawienia nie będą przyciąć zawartość podczas <xref:System.Windows.UIElement.ClipToBounds%2A> jest `false`, ale będzie obcina zawartości if <xref:System.Windows.UIElement.ClipToBounds%2A> jest `true`.  
  
 Należy pamiętać, że przyjęty `false` jest ogólne działanie, zgodnie z implementacją w <xref:System.Windows.UIElement> klasy. Istnieje możliwość dla danego elementu, która jest pochodną <xref:System.Windows.UIElement> na zastępowanie metadanych właściwości zależności dla tej właściwości, w tym wystąpieniu domyślnie `true` zamiast tego. Kilka istniejących klas pochodnych zastąpić te metadane i/lub Dostosuj wartość domyślna właściwości zależności.  
  
 <xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter>, i <xref:System.Windows.Controls.Primitives.Popup> każdego zastąpić wartość domyślna ma być `true`.  
  
 <xref:System.Windows.FrameworkElement> zastępuje metadane dla tej właściwości zależności. W szczególności <xref:System.Windows.FrameworkElement> wyznacza tę właściwość, aby umożliwić dziedziczenie wartość właściwości (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> jest `true` w metadanych). Dziedziczenie wartości właściwości w tym kontekście oznacza, że istnieją elementy podrzędne z ma inne wartości <xref:System.Windows.UIElement.ClipToBounds%2A> przypisany za pomocą wartości lokalnej lub style, wartość najbliższym elemencie nadrzędnym z wartością przypisane (ponownie, albo w stylach domyślnie wartości, lub wartość lokalnie), a następnie będzie można przypisać wartości z elementu nadrzędnego do wszystkich elementów podrzędnych nieprzypisane przez system właściwości. W praktyce oznacza to, czy zezwalać klip granice elementu głównego można określić, czy że wartości zostaną przeniesione na wszystkie elementy podrzędne, które mają nie zostały przypisane go jako `false`.  
  
<a name="dependencyPropertyInfo_ClipToBounds"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ClipToBoundsProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Clip" />
      </Docs>
    </Member>
    <Member MemberName="ClipToBoundsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipToBoundsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipToBoundsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipToBoundsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipToBoundsProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.ClipToBounds" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandBindings : System.Windows.Input.CommandBindingCollection" Usage="System.Windows.UIElement.CommandBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję <see cref="T:System.Windows.Input.CommandBinding" /> obiekty skojarzone z tym elementem. A <see cref="T:System.Windows.Input.CommandBinding" /> umożliwia obsługę dla tego elementu oraz deklaruje powiązanie między poleceniem, jego zdarzeń i procedurami obsługi dołączonymi przez ten element.</summary>
        <value>Kolekcja wszystkich <see cref="T:System.Windows.Input.CommandBinding" /> obiektów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inny typowy sposób wypełnienia <xref:System.Windows.UIElement.CommandBindings%2A> kolekcji jest użycie <xref:System.Windows.Input.CommandManager> metody programowo.  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  
  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *oneOrMoreCommandBindings*  
 Co najmniej jeden <xref:System.Windows.Input.CommandBinding> elementów. Każdy z nich powinien mieć <xref:System.Windows.Input.CommandBinding.Command%2A> atrybut ustawioną znanych poleceń i ustawić atrybuty dla <xref:System.Windows.Input.CommandBinding.CanExecute> i <xref:System.Windows.Input.CommandBinding.Executed> implementacji programu obsługi. Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Input.CommandBinding>.  
  
   
  
## Examples  
 W poniższym przykładzie dodano <xref:System.Windows.Input.CommandBinding> do okna przy użyciu znaczników. Należy pamiętać, że w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], <xref:System.Windows.Input.CommandBindingCollection> nie został zadeklarowany w znaczniku jako elementu; obiekt kolekcji jest wywnioskowany według typu, który pobiera właściwości i wypełnić element właściwości z co najmniej jednym <xref:System.Windows.Input.CommandBinding> elementy:  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 Aby uzyskać więcej informacji na temat [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] składni dla kolekcji, zobacz [szczegółów w składni języka XAML](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).  
  
 Poniższy przykład jest zasadniczo samo w kodzie:  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="DesiredSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size DesiredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size DesiredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.DesiredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DesiredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size DesiredSize { System::Windows::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DesiredSize : System.Windows.Size" Usage="System.Windows.UIElement.DesiredSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera rozmiar tego elementu jest obliczana podczas przebiegu miary procesu układu.</summary>
        <value>Obliczona rozmiarze, który będzie wymagany rozmiar przebiegu Rozmieść.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwrócona przez tę właściwość tylko będzie nieprawidłowa, jeśli wartość <xref:System.Windows.UIElement.IsMeasureValid%2A> jest właściwość `true`.  
  
 <xref:System.Windows.UIElement.DesiredSize%2A> jest zazwyczaj sprawdzana zgodnie z jednym z czynników miar implementowania zachowanie układu zastępuje takich jak <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, lub <xref:System.Windows.UIElement.OnRender%2A> (w <xref:System.Windows.UIElement.OnRender%2A> wielkość liter, może sprawdzić <xref:System.Windows.UIElement.RenderSize%2A> zamiast tego, ale zależy od użytkownika Implementacja). W zależności od scenariusza <xref:System.Windows.UIElement.DesiredSize%2A> może pełni przestrzegane przez logika implementacji ograniczenia na <xref:System.Windows.UIElement.DesiredSize%2A> mogą zostać zastosowane, i tych warunków ograniczających mogą również zmienić pozostałe właściwości elementu nadrzędnego lub element podrzędny. Na przykład formant, który obsługuje regionów przewijanego (ale nie zdecyduje się na pochodzi z formantów WPF poziomie struktury, umożliwiających już przewijanego regionów) można porównać dostępny rozmiar do <xref:System.Windows.UIElement.DesiredSize%2A>. Kontrolki można następnie ustawić stan wewnętrzny, który umożliwia pasków przewijania w [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] dla tego formantu. Lub, <xref:System.Windows.UIElement.DesiredSize%2A> potencjalnie może zostać zignorowane również w niektórych scenariuszach.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono <xref:System.Windows.UIElement.DesiredSize%2A> jako część <xref:System.Windows.FrameworkElement.MeasureOverride%2A> implementacji. Powiadomienie jak <xref:System.Windows.UIElement.Measure%2A> jest wywoływana bezpośrednio przed uzyskaniem <xref:System.Windows.UIElement.DesiredSize%2A>. Gwarantuje to, że <xref:System.Windows.UIElement.DesiredSize%2A> zawiera wartość uzasadnione.  
  
 [!code-cpp[PlotPanel#2](~/samples/snippets/cpp/VS_Snippets_Wpf/PlotPanel/CPP/PlotPanel.cpp#2)]
 [!code-csharp[PlotPanel#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PlotPanel/CSharp/PlotPanel.cs#2)]
 [!code-vb[PlotPanel#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PlotPanel/VisualBasic/PlotPanel.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.DragEventHandler " Usage="member this.DragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie przeciągania z tego elementu jako element docelowy przeciągania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.DragEnter> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.DragEnterEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewDragEnter>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnDragEnter%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.DragEnter" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.DragEventHandler " Usage="member this.DragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie przeciągania z ten element to element źródłowy przeciągania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.DragLeave> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.DragLeaveEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.DragDrop.PreviewDragLeave>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnDragLeave%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.DragLeave" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.DragEventHandler " Usage="member this.DragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie przeciągania z ten element to potencjalny element docelowy upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie występuje nawet w przypadku przeciągania pochodzi z granicami elementu. Jeśli przeciąganie rozpoczyna się poza granicami i przenosi wewnątrz, to zdarzenie jest wywoływane również, jak również <xref:System.Windows.UIElement.DragEnter> i powiązanych zdarzeń w wersji zapoznawczej.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.DragOver> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.DragOverEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.DragDrop.PreviewDragOver>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnDragOver%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.DragOver" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberSignature Language="F#" Value="member this.Drop : System.Windows.DragEventHandler " Usage="member this.Drop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie upuszczania z tego elementu jako element docelowy upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.Drop?displayProperty=nameWithType> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.Drop> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.DropEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewDrop>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnDrop%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.Drop" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.Effect Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.Effect Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As Effect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::Effect ^ Effect { System::Windows::Media::Effects::Effect ^ get(); void set(System::Windows::Media::Effects::Effect ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Media.Effects.Effect with get, set" Usage="System.Windows.UIElement.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.Effect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia efekt mapy bitowej do zastosowania do <see cref="T:System.Windows.UIElement" />. Jest to właściwość zależności.</summary>
        <value>
          <see cref="T:System.Windows.Media.Effects.Effect" /> Reprezentujący efekt mapy bitowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.UIElement.Effect%2A> właściwości efekt mapy bitowej do <xref:System.Windows.UIElement>.  
  
<a name="dependencyPropertyInfo_Effect"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.EffectProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Następujące XAML pokazano, jak można przypisać niestandardowego <xref:System.Windows.Media.Effects.ShaderEffect> do <xref:System.Windows.UIElement.Effect%2A> właściwości.  
  
 [!code-xaml[System.Windows.Media.Effects.ShaderEffect#1000](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Media.Effects.ShaderEffect/CS/Window1.xaml#1000)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Effects.Effect" />
        <altmember cref="T:System.Windows.Media.Effects.ShaderEffect" />
      </Docs>
    </Member>
    <Member MemberName="EffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty EffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty EffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.EffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ EffectProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable EffectProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.EffectProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.Effect" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberSignature Language="F#" Value="abstract member Focus : unit -&gt; bool&#xA;override this.Focus : unit -&gt; bool" Usage="uIElement.Focus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Próbuje ustawić fokus do tego elementu.</summary>
        <returns>
          <see langword="true" /> Jeśli ustawiono fokus klawiatury i logiczny fokus do tego elementu; <see langword="false" /> jeśli tylko logiczny fokus została ustawiona do tego elementu, lub jeśli wywołanie tej metody nie wymusić fokus, aby zmienić.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Być focusable, <xref:System.Windows.UIElement.Focusable%2A> i <xref:System.Windows.UIElement.IsEnabled%2A> muszą być `true`.  
  
 Nawet jeśli element jest obsługa zdarzeń focusable i włączone, w obrębie określonego drzewa, (takie jak w przypadku złożonych kontrolek) może odpowiadać, nie zezwalając fokus, Podgląd zdarzeń fokusu w związku z tym ta metoda zwróci `false`.  
  
 Fokus na ogół podlega dwa oddzielne pojęcia: Klawiatura fokus i logiczny fokus, które nie zawsze są identyczne.  Aby uzyskać więcej informacji, zobacz [omówienie fokus](~/docs/framework/wpf/advanced/focus-overview.md) lub [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
 Jeśli wywołanie <xref:System.Windows.UIElement.Focus%2A> zwraca `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A> i <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> są również `true`.  
  
 Jeśli powiązane właściwości nie są jeszcze `true`, podczas wywoływania <xref:System.Windows.UIElement.Focus%2A>, co najmniej jeden z następujących zdarzeń pojawienia się w następującej kolejności: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (źródłowego jest nazwa nowego docelowego fokus), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus> (źródłowego jest nazwa nowego docelowego fokus).  
  
 Aby dla tego wywołania do pomyślnego niektórych innego elementu w aplikacji niezbędnych do wcześniej fokus.  
  
   
  
## Examples  
 Poniższy przykład przedstawia fokus <xref:System.Windows.Controls.TextBox> odwołuje <xref:System.Windows.FrameworkElement.Name%2A>i ustala położenie kursora w <xref:System.Windows.Controls.TextBox>.  
  
 [!code-csharp[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/TextBox_CursorToEnd/CSharp/Window1.xaml.cs#uielementfocus)]
 [!code-vb[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextBox_CursorToEnd/VisualBasic/Window1.xaml.vb#uielementfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Focusable : bool with get, set" Usage="System.Windows.UIElement.Focusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy element może odebrać fokus.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli element jest focusable; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko element ukierunkowanych odbiera klawiatury.  
  
 <xref:System.Windows.UIElement.Focusable%2A> jest [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] metody dostępu właściwości dla co to jest w rzeczywistości właściwości zależności. Ta właściwość zależności określonego dość często ma wartość jawnego "domyślną" ustawione inaczej w klasach element pochodny, szczególnie w formantach. Częstą przyczyną w jeden z dwóch sposobów:  
  
-   Właściwość zależności jest dziedziczona przez określonej klasy pochodnej, ale pochodnych przesłonięć klasy metadanych właściwości zależności i zmienia wartość domyślna właściwości.  
  
-   Styl lub szablon jest stosowany do elementu, który ustawia wartości tej właściwości zależności w inny sposób.  
  
 Na przykład jawnego "domyślną" <xref:System.Windows.UIElement.Focusable%2A> dla <xref:System.Windows.Controls.Button> formant będzie `true`, nawet jeśli <xref:System.Windows.Controls.Button> dziedziczy <xref:System.Windows.UIElement.Focusable%2A> jako [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] właściwości bezpośrednio z <xref:System.Windows.UIElement>. Jest to spowodowane wartość metadanych zastosowane <xref:System.Windows.UIElement.Focusable%2A> właściwości zależności został zastąpiony w konstruktorze statycznym z <xref:System.Windows.Controls.Control> podstawowa klasy, która znajduje się między <xref:System.Windows.Controls.Button> i <xref:System.Windows.UIElement> w hierarchii klasy.  
  
 Gdy dziedziczone przez <xref:System.Windows.Controls.Control> lub jej klas pochodnych <xref:System.Windows.Controls.Control> ponownie definiuje wartość domyślna tej właściwości należy `true`.  
  
 Gdy dziedziczone przez <xref:System.Windows.Controls.Label> (czyli <xref:System.Windows.Controls.Control> klasy), wartością domyślną jest ponownie ponownie zdefiniować jako `false`.  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.FocusableProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia szablonu kontrolki dla określonej kontrolki niestandardowej, która ustawia <xref:System.Windows.UIElement.Focusable%2A> `false` na jeden z elementów w szablonie.  
  
 [!code-xaml[RichTextBox_NoScrollViewer#_ControlTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBox_NoScrollViewer/CS/window1.xaml#_controltemplate)]
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Podczas tworzenia klasy pochodnej z <see cref="T:System.Windows.UIElement" /> bezpośrednio (w przeciwieństwie do z <see cref="T:System.Windows.Controls.Control" />), należy wziąć pod uwagę, czy mają nazwę elementu na focusable, ponieważ domyślny element nie będzie focusable. Jeśli chcesz, aby Twoje element ma być focusable, zastępowanie metadanych dla tej właściwości w konstruktorze statycznym danego typu w następujący sposób: [! kodu języka csharp — CorePseudocode #UIElementShortOverride (~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/ CSharp/corepseudocode.cs#uielementshortoverride)] [! code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)] gdzie <paramref name="myElement" /> powinna być nazwą klasy typu, które są zastępowanie wartości metadanych na.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberSignature Language="F#" Value="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.Focusable" /> zmiany właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusableProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.FocusableProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.Focusable" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj&#xA;override this.GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj" Usage="uIElement.GetAnimationBaseValue dp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość zależności do sprawdzenia.</param>
        <summary>Zwraca wartość właściwości podstawowej dla określonej właściwości w tym elemencie, pomijając wszelkie animowany wartość z bieżącą lub zatrzymana animacji.</summary>
        <returns>Właściwość wartości tak, jakby animacji nie są dołączone do właściwości określonym zależności.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli animacji nie są dołączone do właściwości, a następnie <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> zwracana wartość jest zawsze taki sam jak <xref:System.Windows.DependencyObject.GetValue%2A> zwracają wartość. W przypadku animacji dołączony następnie wszystkie możliwe animacji uzyskane wartości w tym uruchomienia i zatrzymania wartości są ignorowane, a wartość właściwości jest określona, oparte na wszystkich innych możliwych danych wejściowych. Aby uzyskać więcej informacji, zobacz [pierwszeństwo wartość właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).  
  
   
  
## Examples  
 Poniższy przykład zawiera implementację programu obsługi, który zgłasza wartości podstawowej animowanej <xref:System.Windows.FrameworkElement.Width%2A> właściwość <xref:System.Windows.Controls.Button>, a także wartość podstawową transformacji.  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalue)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalue)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberSignature Language="F#" Value="abstract member GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry&#xA;override this.GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry" Usage="uIElement.GetLayoutClip layoutSlotSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">Dostępny rozmiar udostępnione przez element.</param>
        <summary>Zwraca alternatywnych wycinka geometrię, która reprezentuje region, który może zostać obcięty, jeśli <see cref="P:System.Windows.UIElement.ClipToBounds" /> ustawiono <see langword="true" />.</summary>
        <returns>Potencjalne geometrii wycinka.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja zwróci wartość uzasadnione, ale nie używa `layoutSlotSize` parametru w obliczeniach. Zamiast tego używa wartości <xref:System.Windows.UIElement.RenderSize%2A>.  
  
 Ta metoda jest znacznie zastąpiona przez natychmiast pochodne <xref:System.Windows.FrameworkElement> klasy i <xref:System.Windows.FrameworkElement> zastąpienie tworzy dokładniejsze zachowanie dla ogólnych elementów poziomie struktury WPF. Aby uzyskać więcej informacji, zobacz <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="abstract member GetUIParentCore : unit -&gt; System.Windows.DependencyObject&#xA;override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="uIElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Po przesłonięciu w klasie pochodnej zwraca zamiast [! Nadrzędny include[TLA#tla_ui](~/includes/tlasharptla-UI-MD.MD)] dla tego elementu, jeśli wizualny obiekt nadrzędny nie istnieje.</summary>
        <returns>Obiekt, jeśli połączenie alternatywny nadrzędny do raportu jest implementacja klasy pochodnej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja wirtualnego ta metoda zwraca `null`. <xref:System.Windows.FrameworkElement> udostępnia implementację praktyczne.  
  
 Alternatywne nadrzędnych są używane w przypadku zdarzeń routingu w przypadkach, gdy element tworzy alternatywnych nadrzędna struktura tak, aby jego zdarzeń są kierowane w taki sposób, aby diverges od standardowego wzorca routingu w górę drzewa wizualnego do standardowego elementu nadrzędnego, lub w dół Wyświetl podgląd strategii routingu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie przeciągania i upuszczania, które obejmuje ten element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.GiveFeedback> Zdarzeń umożliwia źródło zdarzeń przeciągnij, aby zmodyfikować wygląd wskaźnika myszy, aby przekazać opinię visual użytkownika podczas operacji przeciągania i upuszczania. Wizualny wzmacnia, że operacja przeciągania i upuszczania jest w toku.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.GiveFeedback> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.GiveFeedback> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.GiveFeedbackEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewGiveFeedback>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnGiveFeedback%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.GiveFeedback" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.RoutedEventHandler " Usage="member this.GotFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element pobiera fokus logiczny.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Logiczny fokus różni się od fokus klawiatury, jeśli celowo wymusza fokus przy użyciu wywołania metody, ale poprzednie fokus klawiatury nie istnieje w innym zakresie. W tym scenariuszu fokus klawiatury pozostaje, gdzie jest i element gdzie <xref:System.Windows.UIElement.Focus%2A> metoda jest wywoływana nadal pobiera fokus logiczny.  
  
 Bardziej dokładne interpretacja to zdarzenie jest jego jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsFocused%2A> właściwości elementu w trasie została zmieniona z `false` do `true`.  
  
 Ponieważ to zdarzenie używa propagacji routingu, element, który otrzymuje fokus może być elementu podrzędnego zamiast elementu którego program obsługi zdarzeń faktycznie jest podłączony. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w danych zdarzeń, aby określić rzeczywisty element uzyskanych fokus.  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.GotFocusEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.RoutedEventHandler>|  
  
-   Nie ma żadnego odpowiednie zdarzenia tunelowania.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnGotFocus%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.GotFocus" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klawiatura ma fokus w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> jest podobne zdarzenia, który śledzi zmiany stanu we właściwości, która przechowuje stan aktywny elementu; <xref:System.Windows.UIElement.GotKeyboardFocus> zdarzenie jest zgłaszane w tych samych okolicznościach.  
  
 Ponieważ to zdarzenie używa propagacji routingu, element, który ma fokus może być elementu podrzędnego zamiast elementu którego program obsługi zdarzeń faktycznie jest podłączony. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w danych zdarzeń, aby określić rzeczywistego elementu, który ma fokus.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.GotKeyboardFocus> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.GotKeyboardFocus> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.GotKeyboardFocusEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element przechwytuje mysz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy element przechwytuje mysz, otrzymuje myszą nawet wtedy, gdy wskaźnik myszy znajduje się poza zakresem jej. Mysz zwykle są przechwytywane tylko podczas operacji przeciągania i upuszczania oraz pozostaje przechwycone, dopóki nie wystąpi akcja upuszczania operacji przeciągania i upuszczania.  
  
 Ponieważ to zdarzenie używa propagacji routingu, element, który ma przechwytywania może być elementu podrzędnego zamiast elementu którego program obsługi zdarzeń faktycznie jest podłączony. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> zdarzeń przechwytywania danych, aby określić rzeczywistego elementu, który ma myszy.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.GotMouseCapture> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.GotMouseCapture> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.GotMouseCaptureEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Nie ma żadnego zdefiniowane odpowiednie zdarzenia tunelowania.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnGotMouseCapture%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.GotMouseCapture" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element przechwytuje pióro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy element przechwytuje Pióro, otrzymuje wprowadzania danych piórem nawet, jeśli wskaźnik jest poza zakresem jej. Pióro zwykle są przechwytywane tylko podczas operacji przeciągania i upuszczania oraz zachowuje przechwytywania, dopóki nie wystąpi akcja upuszczania operacji przeciągania i upuszczania.  
  
 Ponieważ to zdarzenie używa propagacji routingu, element, który ma przechwytywania może być elementu podrzędnego zamiast elementu którego program obsługi zdarzeń faktycznie jest podłączony. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w danych zdarzeń, aby określić rzeczywistego elementu, który ma przechwytywania.  
  
 To zdarzenie tworzy alias dla dołączone zdarzenie dla tej klasy, aby <xref:System.Windows.UIElement.GotStylusCapture> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.GotStylusCapture> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.GotStylusCaptureEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Nie ma żadnego zdefiniowane odpowiednie zdarzenia tunelowania.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnGotStylusCapture%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.GotStylusCapture" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.GotTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.GotTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy touch są przechwytywane do tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.GotTouchCaptureEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnGotTouchCapture%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.GotTouchCapture" /> kierowanego zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAnimatedProperties : bool" Usage="System.Windows.UIElement.HasAnimatedProperties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy ten element animowanej właściwości.</summary>
        <value>
          <see langword="true" /> Jeśli ten element ma animacje dołączony do żadnej z jej właściwości; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca `true` trwałe animacji (unclocked, zawsze uruchomiona) lub animacji, które mają określone osi czasu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEffectiveKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual bool HasEffectiveKeyboardFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasEffectiveKeyboardFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property HasEffectiveKeyboardFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool HasEffectiveKeyboardFocus { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasEffectiveKeyboardFocus : bool" Usage="System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Windows.UIElement" /> ma fokus.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Windows.UIElement" /> ma fokus; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podklasy mogą przesłaniać tę właściwość, aby określić, gdy element ma fokus klawiatury.  To jest przydatna, gdy Twoje <xref:System.Windows.UIElement> zawiera elementy, które mogą mieć fokus klawiatury i ma nazwę elementu raportu ma fokus.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTestCore">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Implementuje <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> dostarczyć podstawowy element trafień zachowanie testowych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.GeometryHitTestResult HitTestCore(class System.Windows.Media.GeometryHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As GeometryHitTestParameters) As GeometryHitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::GeometryHitTestResult ^ HitTestCore(System::Windows::Media::GeometryHitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="override this.HitTestCore : System.Windows.Media.GeometryHitTestParameters -&gt; System.Windows.Media.GeometryHitTestResult" Usage="uIElement.HitTestCore hitTestParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.GeometryHitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.GeometryHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">Zawiera opis testu trafienia do wykonania, w tym początkowego punktu trafień.</param>
        <summary>Implementuje <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> dostarczyć podstawowy element trafień testowania zachowanie (zwracanie <see cref="T:System.Windows.Media.GeometryHitTestResult" />).</summary>
        <returns>Wyniki testu, łącznie z ocenianą geometrii.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zobacz oryginalnej metody wirtualnej <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> dla informacji na temat dalszych przesłaniania tej metody w klasach pochodnych. Należy pamiętać, że kilku określonych formantów (<xref:System.Windows.Controls.TextBlock>, na przykład) mają różne implementacji, które zastąpią ten zestaw.  
  
 Ta metoda nie jest przeznaczona do wywoływania z kodu aplikacji. Ta metoda obsługuje wewnętrzny trafień testowania zachowania, które są udostępniane przez różne aspekty system wejściowy (czy wskaźnik myszy jest nad elementem, na przykład).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.HitTestResult HitTestCore(class System.Windows.Media.PointHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As PointHitTestParameters) As HitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::HitTestResult ^ HitTestCore(System::Windows::Media::PointHitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="override this.HitTestCore : System.Windows.Media.PointHitTestParameters -&gt; System.Windows.Media.HitTestResult" Usage="uIElement.HitTestCore hitTestParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.HitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.PointHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">Zawiera opis testu trafienia do wykonania, w tym początkowego punktu trafień.</param>
        <summary>Implementuje <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> dostarczyć podstawowy element trafień testowania zachowanie (zwracanie <see cref="T:System.Windows.Media.HitTestResult" />).</summary>
        <returns>Wyniki testu, w tym obliczane punktu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zobacz oryginalnej metody wirtualnej <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> dla informacji na temat dalszych przesłaniania tej metody w klasach pochodnych. Należy pamiętać, że kilku określonych formantów (<xref:System.Windows.Controls.TextBlock>, na przykład) mają różne implementacje, które zastąpią <xref:System.Windows.UIElement.HitTestCore%2A> zgodnie z definicją w <xref:System.Windows.UIElement>.  
  
 Ta metoda nie jest przeznaczona do wywoływania z kodu aplikacji. Ta metoda obsługuje wewnętrzny trafień testowania zachowania, które są udostępniane przez różne aspekty system wejściowy (czy wskaźnik myszy jest nad elementem, na przykład).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBindings : System.Windows.Input.InputBindingCollection" Usage="System.Windows.UIElement.InputBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję powiązań wejściowych skojarzonych z tym elementem.</summary>
        <value>Kolekcję powiązań wejściowych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powiązania wejściowe obsługuje powiązanie polecenia, aby urządzenia wejściowe. Na przykład <xref:System.Windows.Input.MouseBinding> implementuje wejściowych powiązania, które obejmują właściwości dotyczące urządzeń myszy.  
  
 Zawiera kolekcję powiązań wejściowych zarówno powiązania wejściowe, które odnoszą się do typu, jak i powiązania wejściowe, które są zadeklarowane w wystąpieniu.  
  
 Powiązaną właściwość <xref:System.Windows.UIElement.CommandBindings%2A>, utrzymuje kolekcję powiązań polecenia. Te różnią się od powiązania wejściowe reprezentują następny poziom w dół przetwarzania polecenia - akcje, które są powiązane z znanych poleceń.  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  
  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *oneOrMoreInputBindings*  
 Co najmniej jeden <xref:System.Windows.Input.InputBinding> elementów (zazwyczaj <xref:System.Windows.Input.KeyBinding> lub <xref:System.Windows.Input.MouseBinding> klas pochodnych). Każdy z tych powinien mieć <xref:System.Windows.Input.InputBinding.Command%2A> i <xref:System.Windows.Input.InputBinding.Gesture%2A> atrybutu.  
  
   
  
## Examples  
 Poniższy przykład powoduje wypełnienie tej właściwości na <xref:System.Windows.Window>, za pomocą jednej <xref:System.Windows.Input.KeyBinding>.  
  
 [!code-xaml[CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 Aby uzyskać więcej informacji na temat [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] składni dla kolekcji, zobacz [szczegółów w składni języka XAML](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InputHitTest">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement InputHitTest (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.IInputElement InputHitTest(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::IInputElement ^ InputHitTest(System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="member this.InputHitTest : System.Windows.Point -&gt; System.Windows.IInputElement" Usage="uIElement.InputHitTest point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">Przesunięcie koordynuje w obrębie tego elementu.</param>
        <summary>Zwraca element input w bieżącym elemencie w określonych współrzędnych względem źródła bieżącego elementu.</summary>
        <returns>Element podrzędny, znajdującego się w określonej pozycji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.IInputElement> jest zwracana jako typ zwracany, ponieważ ten typ jest wspólny interfejs dla obu <xref:System.Windows.UIElement> i <xref:System.Windows.ContentElement>. Można następnie odpowiednio rzutowania zwracany typ lub użyć wystąpienia interfejsu dla niektórych elementów członkowskich, które są definiowane przez <xref:System.Windows.IInputElement> interfejsu.  
  
 Ta metoda nie jest zazwyczaj wywoływana z kodu aplikacji. Wywołanie tej metody jest tylko jeśli do ponownego wdrożenia rozległe niski poziom wejściowych funkcji, które są już obecne, takie jak odtworzenie logiki urządzeń myszy.  
  
 <xref:System.Windows.IContentHost> kontrakty <xref:System.Windows.IContentHost.InputHitTest%2A> metody o tej samej sygnaturze, niektóre elementy zadecydować o stosowaniu jawnie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateArrange">
      <MemberSignature Language="C#" Value="public void InvalidateArrange ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateArrange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateArrange" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateArrange ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateArrange();" />
      <MemberSignature Language="F#" Value="member this.InvalidateArrange : unit -&gt; unit" Usage="uIElement.InvalidateArrange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unieważnia stanu Rozmieść (układ) dla elementu. Po unieważniania, element będzie mieć jego układ aktualizacji, zostanie przeprowadzona asynchronicznie, chyba że następnie wymuszone przez <see cref="M:System.Windows.UIElement.UpdateLayout" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Częste wywołania <xref:System.Windows.UIElement.InvalidateArrange%2A> lub, w szczególności <xref:System.Windows.UIElement.UpdateLayout%2A> mieć skutki znaczących wydajności. W związku z tym uniknąć wywołaniem tej metody, chyba że absolutnie wymagają stanu dokładne układu dla kolejnych wywołań innych [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] w kodzie. Realizując bardziej zaawansowany scenariusz, w którym mogą wywołać <xref:System.Windows.UIElement.InvalidateArrange%2A> jest podczas tworzenia <xref:System.Windows.PropertyChangedCallback> dla właściwości zależności, który nie jest włączony <xref:System.Windows.Freezable> lub <xref:System.Windows.FrameworkElement> klasy, które nadal ma wpływ przebiegu Rozmieść układu, gdy zmienia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateMeasure">
      <MemberSignature Language="C#" Value="public void InvalidateMeasure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateMeasure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateMeasure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateMeasure();" />
      <MemberSignature Language="F#" Value="member this.InvalidateMeasure : unit -&gt; unit" Usage="uIElement.InvalidateMeasure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unieważnia stanu pomiaru (układ) dla elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie tej metody również wywołania <xref:System.Windows.UIElement.InvalidateArrange%2A> wewnętrznie, nie jest konieczne do wywołania <xref:System.Windows.UIElement.InvalidateMeasure%2A> i <xref:System.Windows.UIElement.InvalidateArrange%2A> w przedziale czasu. Po unieważniania, element będzie mieć jego układ zaktualizowane, nastąpi asynchronicznie, chyba że <xref:System.Windows.UIElement.UpdateLayout%2A> jest wywoływana w celu wymuszenia zmiany układu synchronicznego.  
  
 System układu poziomie struktury WPF nie obchodzenie zmian w drzewie wizualnym elementu, a w typowych przypadkach unieważniania układu systemu układu wywołuje odpowiednik tej metody, gdy jest to konieczne. Tej metody powinny wywoływać tylko, jeśli produkuje implementacji pełną układu bezpośrednie manipulowanie drzewa element lub podobnych zaawansowanych scenariuszy. Taki scenariusz zaawansowane jest podczas tworzenia <xref:System.Windows.PropertyChangedCallback> dla właściwości zależności, który nie jest włączony <xref:System.Windows.Freezable> lub <xref:System.Windows.FrameworkElement> klasy, które nadal ma wpływ przebiegu miary układu, gdy zmienia.  
  
 Częste wywołania <xref:System.Windows.UIElement.InvalidateMeasure%2A> lub, w szczególności <xref:System.Windows.UIElement.UpdateLayout%2A> mieć skutki znaczących wydajności. W związku z tym uniknąć wywołaniem tej metody, chyba że absolutnie wymagają stanu dokładne układu dla kolejnych wywołań innych [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] w kodzie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateVisual">
      <MemberSignature Language="C#" Value="public void InvalidateVisual ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateVisual() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateVisual" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateVisual ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateVisual();" />
      <MemberSignature Language="F#" Value="member this.InvalidateVisual : unit -&gt; unit" Usage="uIElement.InvalidateVisual " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unieważnia renderowania elementu i wymusza pełną nowy przebieg układu. <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> jest wywoływana po zakończeniu cyklu układu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wywołuje <xref:System.Windows.UIElement.InvalidateArrange%2A> wewnętrznie.  
  
 Ta metoda nie jest zazwyczaj wywoływana w kodzie aplikacji. System układu poziomie struktury WPF nie obchodzenie zmian w drzewie wizualnym elementu i czy wywoływania odpowiednik tej metody, gdy jest to konieczne już. Wywołanie tej metody jest niezbędne tylko w przypadku zaawansowanych scenariuszy. Taki scenariusz zaawansowane jest podczas tworzenia <xref:System.Windows.PropertyChangedCallback> dla właściwości zależności, który nie jest włączony <xref:System.Windows.Freezable> lub <xref:System.Windows.FrameworkElement> klasy, które nadal ma wpływ układ, gdy zmienia.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
      </Docs>
    </Member>
    <Member MemberName="IsArrangeValid">
      <MemberSignature Language="C#" Value="public bool IsArrangeValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArrangeValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsArrangeValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArrangeValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArrangeValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArrangeValid : bool" Usage="System.Windows.UIElement.IsArrangeValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy obliczona rozmiar i położenie elementów podrzędnych w układzie tego elementu są prawidłowe.</summary>
        <value>
          <see langword="true" /> Jeśli rozmiar i położenie układu są ważne. w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz wymusić rozmieszczenie unieważnienie przez wywołanie metody <xref:System.Windows.UIElement.InvalidateArrange%2A> dla tego elementu (lub jego elementów nadrzędnych). Flagi układ recomposition, w czasie, gdy system układ określa. Alternatywnie natychmiastowego wywołanie <xref:System.Windows.UIElement.UpdateLayout%2A> powinny być wykonane, ale to robić tylko jeśli jest niektórych oczekujących nie dalsze invalidations (konsekwencje wydajności ma dużą liczbę aktualizacji niepotrzebnie wymuszone).  
  
 <xref:System.Windows.UIElement.IsArrangeValid%2A> nie może być `true` chyba że <xref:System.Windows.UIElement.IsMeasureValid%2A> jest również `true` (w procesie układu rozmieszczenia nie może być nieprawidłowy bez pomiaru najpierw jest nieprawidłowy).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
        <altmember cref="P:System.Windows.UIElement.IsMeasureValid" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.UIElement.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy ten element jest włączony w [! INCLUDE[TLA#tla_ui](~/includes/tlasharptla-UI-MD.MD)].  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli element jest włączony; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy pamiętać, że ta właściwość ma wpływ implementacje specyficzne <xref:System.Windows.UIElement.IsEnabledCore%2A> na poszczególne elementy, często w czasie wykonywania. W związku z tym wymienione w tym miejscu wartość domyślna czasami nie jest skuteczne. Na przykład <xref:System.Windows.Controls.Primitives.ScrollBar> będzie <xref:System.Windows.UIElement.IsEnabled%2A> `false` zawsze, gdy jest określone, że nie istnieje potrzeba do obsługi paska przewijania. Próby Ustaw tę wartość, również zostanie przesłonięta przez wartość zwrócona przez <xref:System.Windows.UIElement.IsEnabledCore%2A>.  
  
 Elementy, które nie są włączone nie uczestniczą w testowania trafień lub fokus i dlatego nie będzie źródła zdarzenia wejściowe.  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsEnabledProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono obsługi na jeden z przycisków który ustawianą zostanie wykonane <xref:System.Windows.UIElement.IsEnabled%2A> `false` na inny przycisk o nazwie `b1`.  
  
 [!code-csharp[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/CSharp/default.xaml.cs#handler)]
 [!code-vb[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/VisualBasic/default.xaml.vb#handler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsEnabled" /> właściwość zmiany tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabledCore : bool" Usage="System.Windows.UIElement.IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która jest zwracana wartość <see cref="P:System.Windows.UIElement.IsEnabled" /> w klasach pochodnych.</summary>
        <value>
          <see langword="true" /> Jeśli element jest włączony; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Domyślna implementacja ta właściwość przechowuje wartości i oblicza również, czy element nadrzędny tego elementu jest włączone. (Jeśli element nadrzędny nie jest włączone, element podrzędny nie może efektywnie włączone w praktycznych [! INCLUDE[TLA#tla_ui](~/includes/tlasharptla-UI-MD.MD)].) Jeśli chcesz przesłonić tę implementację, upewnij się, że możesz wywoływać implementację podstawową w celu zachowania tego zachowania.  <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> Klasa udostępnia istniejącą implementację przesłonięcia tej właściwości. To zastąpienie Określa, czy zawartości wewnątrz obszaru zawartości prezentacji przekracza dostępny obszar. Jeśli zawartość przekracza obszaru, część paska przewijania jest włączony. W przeciwnym razie nie włączono pasek przewijania.</para>
        </block>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
        <altmember cref="P:System.Windows.UIElement.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsEnabled" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFocused : bool" Usage="System.Windows.UIElement.IsFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która określa, czy ten element ma logiczny fokus.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli ten element ma logiczny fokus; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Logiczny fokus może się różnić od fokus klawiatury, jeśli aplikacja ma wiele podziałów fokus, takich jak między zawartość menu i pozostałej części aplikacji. W tym scenariuszu fokus klawiatury może zawierać tylko jeden element interfejsu użytkownika aplikacji, jednak niektóre elementy w innych działów fokus nadal mogą zachować logiczny fokus. Aby uzyskać więcej informacji dotyczących logiczny fokus, zobacz [omówienie fokus](~/docs/framework/wpf/advanced/focus-overview.md).  
  
 Nie ustawiaj fokus przez ustawienie dla tej właściwości (jest tylko do odczytu). Typowym zastosowaniem dla tej właściwości jest używana jako właściwość zależności dla <xref:System.Windows.Setter> lub <xref:System.Windows.EventTrigger>. Aby ustawić fokus programowo, wywołaj <xref:System.Windows.UIElement.Focus%2A>. Można również można uaktywnić przez akcję użytkownika lub przez implementacje kontroli, które obejmować zachowania przechwytywanie myszy.  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsFocusedProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład dotyczy programu obsługi kodu, który tła formantu zostanie zmieniona, gdy koncentruje się.  
  
 [!code-csharp[PopupSimple#IsFocused](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSimple/CSharp/Window1.xaml.cs#isfocused)]  
  
 Inny typowy sposób, aby osiągnąć ten sam efekt jest umieszczenie <xref:System.Windows.Trigger> w <xref:System.Windows.Style> formantu; to rozwiązanie nie wymaga obsługi określonych zdarzeń z kodem oraz udostępnia projektantów większa charakter interakcyjne i graficznego [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. Na przykład zobacz [porady: tworzenie Blask zewnętrzny, efekt](http://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsFocused" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisible">
      <MemberSignature Language="C#" Value="public bool IsHitTestVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsHitTestVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHitTestVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHitTestVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisible : bool with get, set" Usage="System.Windows.UIElement.IsHitTestVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość deklarującą, czy ten element może być zwrócony jako wynik testu trafienia z niektórych części zrenderowanej zawartości. Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli ten element może zostać zwrócony jako wynik testu trafienia z co najmniej jeden punkt; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Efektywna wartość tej właściwości jest wpływ względne położenie trafień testować elementy w drzewie logicznym. Na przykład, jeśli element jest elementem podrzędnym element nie osiągnęła testu widoczne, pozostanie wprowadzenia wartości właściwości w elemencie podrzędnym `false`nawet w przypadku próby lokalnie Ustaw tę wartość. Z tego powodu ważne jest, że nie zostały ustawione <xref:System.Windows.UIElement.IsHitTestVisible%2A> do `false` w formancie połączone chyba, że nie ma żadnych danych lub trafień testowania w tym formancie. Aby uzyskać więcej informacji na temat testowania trafień, zobacz [trafień testowania w warstwie Visual](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).  
  
<a name="dependencyPropertyInfo_IsHitTestVisible"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsHitTestVisibleProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsHitTestVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsHitTestVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> zmiany właściwości zależności w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsHitTestVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHitTestVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsHitTestVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHitTestVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputMethodEnabled : bool" Usage="System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy system IME, takich jak [! INCLUDE[TLA#tla_ime](~/includes/tlasharptla-IME-MD.MD)] jest włączona dla przetwarzania danych wejściowych do tego elementu.</summary>
        <value>
          <see langword="true" /> Jeśli Metoda wejściowa jest aktywna; w przeciwnym razie <see langword="false" />. Wartość domyślna właściwości dołączonych jest <see langword="true;" /> , to będzie zależeć od rzeczywisty stan metody wprowadzania tekstu w czasie wykonywania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca wartość zwracaną przez dołączona właściwość <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> dla aktualnie włączonego metody wejściowe (klawiatury, mowy i innych urządzeniach wejściowych).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocused : bool" Usage="System.Windows.UIElement.IsKeyboardFocused" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy ten element ma fokus klawiatury.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli ten element ma fokus klawiatury; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zmiany na podstawie wartości tej właściwości może towarzyszyć zdarzeń związanych z fokusem.  
  
 <xref:System.Windows.UIElement.IsKeyboardFocused%2A> i <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> są często używane klasy obsługi zdarzeń dla innych zdarzeń związanych z danych wejściowych, na przykład w celu sprawdzenia, czy element ma już fokus klawiatury, aby oznaczeń, gdy mysz zdarzenia i klawiatury występują w połączeniu.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
        <altmember cref="E:System.Windows.UIElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> zmiany właściwości w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithin : bool" Usage="System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy fokus klawiatury jest dowolne miejsce w obrębie elementu lub jego elementy podrzędne drzewa wizualnego.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli fokus klawiatury znajduje się na element lub jego elementów podrzędnych; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zmiana wartości tej właściwości zwykle podnieść <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> zdarzeń, chyba że klasa pochodna przesłoniła <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> do pomijania zdarzenia.  
  
 Ta właściwość nie należy ustawiać bezpośrednio, ale można ustawić fokus do elementu, wywołując <xref:System.Windows.UIElement.Focus%2A>, lub tworząc <xref:System.Windows.UIElement.MoveFocus%2A> żądania. Jedną z tych wywołań metody mogą ulec zmianie wartość tej właściwości.  
  
 <xref:System.Windows.UIElement.IsKeyboardFocused%2A> i <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> są zazwyczaj używane w ramach procedury obsługi zdarzeń klasy dla innych zdarzeń związanych z danych wejściowych, na przykład w celu sprawdzenia, czy element ma już fokus klawiatury, aby oznaczeń, gdy mysz zdarzenia i klawiatury występują w połączeniu.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> zmiany właściwości w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabled">
      <MemberSignature Language="C#" Value="public bool IsManipulationEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManipulationEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsManipulationEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsManipulationEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManipulationEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsManipulationEnabled : bool with get, set" Usage="System.Windows.UIElement.IsManipulationEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy zdarzenia manipulowania są włączone na tym <see cref="T:System.Windows.UIElement" />.</summary>
        <value>
          <see langword="true" /> Jeśli zdarzenia manipulowania są włączone na tym <see cref="T:System.Windows.UIElement" />; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustaw tę właściwość na wartość true, jeśli chcesz <xref:System.Windows.UIElement> do odbierania <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, i <xref:System.Windows.UIElement.ManipulationCompleted> zdarzenia. Aby uzyskać więcej informacji na temat manipulacje, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  Na przykład aplikacja, która odpowiada manipulacje zobacz [wskazówki: tworzenie swój pierwszy Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
   
  
## Examples  
 W poniższym przykładzie tworzona jest aplikacja, która ma czerwonym prostokątem.  <xref:System.Windows.UIElement.IsManipulationEnabled%2A> Właściwości prostokąta ma ustawioną wartość PRAWDA, a aplikacji subskrybuje okna <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, i <xref:System.Windows.UIElement.ManipulationInertiaStarting> zdarzenia. Ten przykład jest częścią większego przykładu w [wskazówki: tworzenie swój pierwszy Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-xaml[BasicManipulation#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsManipulationEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsManipulationEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsManipulationEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsManipulationEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMeasureValid">
      <MemberSignature Language="C#" Value="public bool IsMeasureValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMeasureValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMeasureValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMeasureValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMeasureValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMeasureValid : bool" Usage="System.Windows.UIElement.IsMeasureValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy bieżący rozmiar zwrócony przez układ miary jest nieprawidłowa.</summary>
        <value>
          <see langword="true" /> Miara przekazania z układu zwróciła wartość prawidłowe i aktualne; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz wymusić pomiarów i rozmieszczenie unieważnienie przez wywołanie metody <xref:System.Windows.UIElement.InvalidateMeasure%2A> dla tego elementu (lub dowolnego elementu nadrzędnego w górę drzewa wizualnego). Określa układ recomposition asynchronicznie, występujących w czasie określany przez system układu. Alternatywnie można utworzyć bezpośredniego wywołanie <xref:System.Windows.UIElement.UpdateLayout%2A>. Jednak możesz powinny wywoływać tylko <xref:System.Windows.UIElement.UpdateLayout%2A> Jeśli prawdopodobnie oczekujących nie dalsze invalidations (dużą liczbę aktualizacji niepotrzebnie wymuszone będzie mieć konsekwencje wydajności).  
  
 Jeśli <xref:System.Windows.UIElement.IsMeasureValid%2A> jest `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A> musi być również `false` (przez logikę wymuszone procesu układu, rozmieszczenia nie może być nieprawidłowy bez pomiaru najpierw jest nieprawidłowy).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptured : bool" Usage="System.Windows.UIElement.IsMouseCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy wskaźnik myszy jest przechwytywany do tego elementu.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli element ma przechwytywanie myszy; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Stan przechwytywanie myszy powiązany jest w trakcie operacji przeciągania i upuszczania.  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsMouseCapturedProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład włącza stan przechwytywanie myszy lub wyłącza oparte na czy myszy są już przechwytywane dla elementu.  
  
 Jeśli przechwytywanie myszy jest w innym miejscu przechwytywanie myszy ma ustawioną wartość tego elementu. Element gdyby przechwytywanie myszy zostanie wyczyszczona przez wywołanie metody <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> z wejściowe o wartości null.  
  
 [!code-csharp[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#ismousecaptured)]
 [!code-vb[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> zmiany właściwości w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithin : bool" Usage="System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą, czy przechwytywanie myszy jest przechowywane przez ten element lub elementy podrzędne w jego drzewie wizualnym. Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli ten element lub zawartych w niej element ma przechwytywanie myszy; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> zmiany w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOver : bool" Usage="System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy pozycja wskaźnika myszy odpowiada trafień wyniki testu, przyjmujących składania elementu pod uwagę.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Gdy wskaźnik myszy znajduje się nad takiego samego wyniku elementu, jako testu trafienia; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W odróżnieniu od <xref:System.Windows.UIElement.IsMouseOver%2A>, ta właściwość jest tylko `true` , gdy wskaźnik myszy znajduje się nad elementem literału — podobnie jak w przypadku testu trafienia. Gdy wskaźnik myszy jest nad elementu podrzędnego, w szczególności za pośrednictwem elementy, które są częścią szablonu głębiej i składania kanałów, element tej właściwości będzie `false`. Jeśli nie wiadomo, jak kontrolka zostanie połączone (na przykład użyć tej właściwości w szablonie formantu niestandardowego formantu, który należy zdefiniować), ta właściwość może zwrócić nieoczekiwane wyniki. W przypadku większości scenariuszy, w którym nie tworzenia formantów, użyć <xref:System.Windows.UIElement.IsMouseOver%2A> zamiast tego.  
  
 Jeśli przycisk myszy jest przechwytywany przez ten element, a ta właściwość jest `true` w czasie przechwytywania, ta właściwość będzie zwracać `true` dopóki przechwytywanie myszy zostanie utracone i kursor nie znajduje się za pośrednictwem jego granic.  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> zmiany właściwości w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseOver : bool" Usage="System.Windows.UIElement.IsMouseOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy wskaźnik myszy znajduje się nad tym elementem (w tym elementy podrzędne w drzewie wizualnym).  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Gdy wskaźnik myszy znajduje się nad elementu lub jego elementów podrzędnych; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Formanty są zazwyczaj połączone tak, aby wszystkie różnych elementów wewnątrz formantu (drzewa wizualnego) będzie zgłaszać stanu myszy zawierającego formantu. Na przykład <xref:System.Windows.Controls.ListBox> styl formantu będzie zgłaszać <xref:System.Windows.UIElement.IsMouseOver%2A> jako `true` w przypadku myszy dowolnego miejsca za pośrednictwem jego geometry, wraz ze wszystkimi <xref:System.Windows.Controls.ListBoxItem>.  
  
 Mimo że podobne zdarzenia "IsMouseOverChanged" nie istnieje, czy kilka podobnych zdarzeń. Na przykład można obsługiwać <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, i <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.  
  
 Jeśli ten element przechwytuje mysz, ta właściwość pozostaje `true` dopóki przechwytywanie myszy zostanie utracone i wskaźnik myszy opuszczeniu granic elementu.  
  
 Niektóre formanty celowo przechwytywanie myszy na pewne akcje, które nie są bezpośrednio dotyczyć myszy. Może to prowadzić do <xref:System.Windows.UIElement.IsMouseOver%2A> trwa `true` mimo że nie przeniósł najwyraźniej myszy.  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsMouseOverProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład odwołuje się do tej właściwości jako właściwość typu <xref:System.Windows.Trigger>, część \<Style.Triggers > bloku. Gdy wskaźnik myszy znajduje się nad formantem, niebieskie tekst formantu i kursor przyjmie postać dłoni.  
  
 [!code-xaml[ListViewChkBox#Trigger](~/samples/snippets/csharp/VS_Snippets_Wpf/ListViewChkBox/CS/window1.xaml#trigger)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsMouseOver" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptured : bool" Usage="System.Windows.UIElement.IsStylusCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy pióro są przechwytywane przez ten element.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli element ma Przechwytywanie pióra; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsStylusCapturedProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> zmiany właściwości w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithin : bool" Usage="System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą, czy przechwytywanie pióra jest przechowywany przez ten element lub element granice elementu i jego drzewie wizualnym. Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli ten element lub zawartych w niej element ma Przechwytywanie pióra; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [Touch obsługi danych wejściowych w systemie Windows Vista](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) i [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="P:System.Windows.UIElement.IsStylusCaptured" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> zmiany właściwości w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOver : bool" Usage="System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy pozycja Pióro odpowiada trafień wyniki testu, przyjmujących składania elementu pod uwagę.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli wskaźnik Pióro znajduje się nad takiego samego wyniku elementu, jako testu trafienia; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W odróżnieniu od <xref:System.Windows.UIElement.IsStylusOver%2A>, ta właściwość jest tylko `true` , gdy pióro znajduje się nad elementem. Jeśli pióro jest na element podrzędny lub elementy, które są częścią elementu głębiej składania (drzewa wizualnego), ta właściwość będzie `false`.  
  
 Jeśli nie wiadomo, jak kontrolka zostanie połączone (na przykład użyć tej właściwości w szablonie formantu niestandardowego formantu, który należy zdefiniować), ta właściwość może zwrócić nieoczekiwane wyniki. W przypadku większości scenariuszy, w którym nie tworzenia formantów, użyć <xref:System.Windows.UIElement.IsStylusOver%2A> zamiast tego.  
  
 Jeśli ten element ma Przechwytywanie pióra, ta właściwość jest `true` w czasie przechwytywania, ta właściwość pozostaje `true` aż do przechwycenia pióra zostaną utracone i pióro nie jest za pośrednictwem jego granic.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> zmiany właściwości w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusOver : bool" Usage="System.Windows.UIElement.IsStylusOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kursor pióra znajduje się nad tym elementem (w tym elementy podrzędne visual).  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> w przypadku kursor pióra przez element lub jego elementów podrzędnych; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ten element ma Przechwytywanie pióra, ta właściwość będzie w dalszym ciągu zwracać `true` dopóki nie zostanie utracone Przechwytywanie pióra i kursor znajduje się poza jej zakres.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsStylusOverProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsStylusOver" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Windows.UIElement.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy ten element jest widoczny w [! INCLUDE[TLA#tla_ui](~/includes/tlasharptla-UI-MD.MD)].  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli element jest widoczny; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oznaczanie <xref:System.Windows.UIElement.IsVisible%2A> wartość uwzględnia wszystkie czynniki układu. Z kolei <xref:System.Windows.UIElement.Visibility%2A>, właściwość można ustawić, tylko wskazuje zamiarze programowo element widoczny lub niewidoczny.  
  
 Elementy gdzie <xref:System.Windows.UIElement.IsVisible%2A> jest `false` nie uczestniczą w zdarzeniach wejściowych (lub polecenia), czy nie wpływają albo miary lub Rozmieść przekazuje układu, nie są focusable nie znajdują się w sekwencji kartę i nie będą raportowane podczas testowania trafień. Z drugiej strony, elementy gdzie <xref:System.Windows.UIElement.IsEnabled%2A> jest `false` nadal będą uczestniczyć w zdarzeniach i poleceń i testowania trafień, ale nie są również focusable.  
  
<a name="dependencyPropertyInfo_IsVisible"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsVisibleProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsVisible" /> zmiany właściwości w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie nie jest wywoływane, jeśli element nie jest renderowany przez system układu innego powodu niż wartość <xref:System.Windows.UIElement.IsVisible%2A> właściwości. Na przykład element może nie mieć skojarzone visual.  
  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.IsVisible" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu klawisza, gdy fokus jest w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa klucza współdziała z innymi funkcjami platformy, takich jak kompozycji droższe i tekst. <xref:System.Windows.UIElement.KeyDown> Zdarzenie jest zdarzenie wprowadzania tekstu niższego poziomu, które mogą nie działać zgodnie z oczekiwaniami w niektórych formantów. Jest tak, ponieważ niektóre formanty mają składania kontroli lub klasy obsługi udostępnia wyższego poziomu wersji tekst wejściowy obsługi i zdarzenia związane z.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.KeyDown> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.KeyDown> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.KeyDownEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewKeyDown>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnKeyDown%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.KeyDown" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu klawisza, gdy fokus jest w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.KeyUp> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.KeyUp> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.KeyUpEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewKeyUp>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnKeyUp%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.KeyUp" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler LayoutUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LayoutUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LayoutUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LayoutUpdated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LayoutUpdated;" />
      <MemberSignature Language="F#" Value="member this.LayoutUpdated : EventHandler " Usage="member this.LayoutUpdated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy układ różnych elementów wizualnych skojarzone z bieżącym <see cref="T:System.Windows.Threading.Dispatcher" /> zmiany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aktualizacja układu może wystąpić w wyniku zmiany właściwości, rozmiaru okna lub jawne żądanie.  
  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzenie, kierowanego zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.RoutedEventHandler " Usage="member this.LostFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po utracie fokusu logicznego przez ten element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Logiczny fokus różni się od fokus klawiatury, gdy fokus celowo wymusza optymalizacji przy użyciu wywołania metody, ale poprzednie fokus klawiatury nie istnieje w innym zakresie. W tym scenariuszu, pozostaje fokus klawiatury, gdzie jest i element gdzie <xref:System.Windows.UIElement.Focus%2A> metoda jest wywoływana nadal pobiera fokus logiczny.  
  
 Bardziej dokładne interpretacja to zdarzenie jest jego jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsFocused%2A> zmiany właściwości elementu w trasie z `true` do `false`.  
  
 Ponieważ to zdarzenie używa propagacji routingu, element traci fokus może być elementu podrzędnego zamiast elementu którego program obsługi zdarzeń faktycznie jest podłączony. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w danych zdarzeń, aby określić rzeczywisty element uzyskanych fokus.  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.LostFocusEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.RoutedEventHandler>|  
  
-   Nie ma żadnego odpowiednie zdarzenia tunelowania.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnLostFocus%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.LostFocus" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klawiatura nie ma już fokusu w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ to zdarzenie używa propagacji routingu, element utracie fokusu może być elementu podrzędnego zamiast elementu którego program obsługi zdarzeń faktycznie jest podłączony. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w ustalić utracie fokusu rzeczywisty element danych zdarzenia.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.LostKeyboardFocus> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.LostKeyboardFocus> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.LostKeyboardFocusEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element utraci przechwytywanie myszy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy element przechwytuje mysz, otrzymuje myszą nawet, jeśli wskaźnik jest poza zakresem jej. Mysz jest zwykle przechwytywane tylko podczas operacji przeciągania i upuszczania.  
  
 Ponieważ to zdarzenie używa propagacji routingu, element utraci Przechwytywanie może być elementu podrzędnego zamiast elementu którego program obsługi zdarzeń faktycznie jest podłączony. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w danych zdarzeń, aby określić rzeczywisty element, który utracił przechwytywania.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.LostMouseCapture> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.LostMouseCapture> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.LostMouseCaptureEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Nie ma żadnego zdefiniowane odpowiednie zdarzenia tunelowania.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnLostMouseCapture%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.LostMouseCapture" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element utraci Przechwytywanie pióra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy element przechwytuje Pióro, otrzymuje wprowadzania danych piórem nawet, jeśli wskaźnik jest poza zakresem jej. Pióro zwykle są przechwytywane tylko podczas operacji przeciągania i upuszczania.  
  
 Ponieważ to zdarzenie używa propagacji routingu, element traci fokus może być elementu podrzędnego zamiast elementu którego program obsługi zdarzeń faktycznie jest podłączony. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w ustalić utracie fokusu rzeczywisty element danych zdarzenia.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.LostStylusCapture> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.LostStylusCapture> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.LostStylusCaptureEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Nie ma żadnego zdefiniowane odpowiednie zdarzenia tunelowania.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnLostStylusCapture%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.LostStylusCapture" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.LostTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.LostTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element utraci Przechwytywanie touch.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.LostTouchCaptureEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnLostTouchCapture%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.LostTouchCapture" /> kierowanego zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationBoundaryFeedback As EventHandler(Of ManipulationBoundaryFeedbackEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^&gt; ^ ManipulationBoundaryFeedback;" />
      <MemberSignature Language="F#" Value="member this.ManipulationBoundaryFeedback : EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; " Usage="member this.ManipulationBoundaryFeedback : System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy operowanie napotka granicy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_ManipulationBoundaryFeedback"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationBoundaryFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationBoundaryFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> zdarzeń.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationCompleted As EventHandler(Of ManipulationCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationCompletedEventArgs ^&gt; ^ ManipulationCompleted;" />
      <MemberSignature Language="F#" Value="member this.ManipulationCompleted : EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; " Usage="member this.ManipulationCompleted : System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy manipulacji i bezwładności na <see cref="T:System.Windows.UIElement" /> obiektu została ukończona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie służy do uzyskania informacji na temat operowanie po jego ukończeniu.  Na przykład można użyć <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType> zmienić właściwości, aby określić całkowitą ilość pozycja operowanie.  
  
 Aby uzyskać więcej informacji na temat manipulacje, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  Na przykład aplikacja, która odpowiada manipulacje zobacz [wskazówki: tworzenie swój pierwszy Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationCompleted"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ManipulationCompletedEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.ManipulationCompletedEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompletedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationCompletedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationCompletedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationCompletedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationCompletedEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> kierowanego zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDelta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationDelta" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationDelta As EventHandler(Of ManipulationDeltaEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationDeltaEventArgs ^&gt; ^ ManipulationDelta;" />
      <MemberSignature Language="F#" Value="member this.ManipulationDelta : EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; " Usage="member this.ManipulationDelta : System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy urządzenia wejściowego zmienia pozycję podczas manipulowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.ManipulationDelta> Zdarzeń występuje wiele razy, gdy użytkownik przeciąga palców za pośrednictwem ekranu podczas manipulowania, i ponownie po wystąpieniu bezwładności.  Można użyć <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> właściwość do sprawdzenia, czy zdarzenie ma miejsce podczas bezwładności.  
  
 Element z <xref:System.Windows.UIElement.ManipulationDelta> wystąpi zdarzenie nie występuje w jakikolwiek sposób po wystąpieniu zdarzenia.  Należy podać logikę do elementu, który ma być modyfikowany w zakresie.  <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> i <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> właściwości, które są typu <xref:System.Windows.Input.ManipulationDelta>, zawierają dane o jak zmienić położenie manipulacje i przenoszenie, zmienianie rozmiaru i obrót obiektu.  Te informacje dotyczą element, który ma być modyfikowany w zakresie.  
  
 Aby uzyskać więcej informacji na temat manipulacje, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  Na przykład aplikacja, która odpowiada manipulacje zobacz [wskazówki: tworzenie swój pierwszy Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationDelta"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ManipulationDeltaEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.ManipulationDeltaEventArgs>.|  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono program obsługi zdarzeń dla <xref:System.Windows.UIElement.ManipulationDelta> zdarzeń. W przykładzie użyto <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> właściwość, aby przenieść, zmienianie rozmiaru i obracanie <xref:System.Windows.Shapes.Rectangle>.  Przykład również sprawdza, czy <xref:System.Windows.UIElement.ManipulationDelta> zdarzenie wystąpiło podczas bezwładności i czy prostokąt zachodzi krawędzi okna.  Jeśli te przypadki są spełnione, aplikacja przestaje manipulowania, aby uniemożliwić prostokąt pozostawianie obszaru aplikacji. Ten przykład jest częścią większego przykładu w [wskazówki: tworzenie swój pierwszy Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDeltaEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationDeltaEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationDeltaEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationDeltaEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationDeltaEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.ManipulationDelta" /> kierowanego zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationInertiaStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationInertiaStarting As EventHandler(Of ManipulationInertiaStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationInertiaStartingEventArgs ^&gt; ^ ManipulationInertiaStarting;" />
      <MemberSignature Language="F#" Value="member this.ManipulationInertiaStarting : EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; " Usage="member this.ManipulationInertiaStarting : System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy urządzenia wejściowego utraci kontaktować się z <see cref="T:System.Windows.UIElement" /> rozpoczyna obiektu podczas manipulacji i bezwładności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.ManipulationInertiaStarting> Zdarzenie wystąpi, gdy użytkownik podnosi wszystkich palców na ekranie podczas manipulowania. Na przykład, jeśli użytkownik "zgłasza" <xref:System.Windows.UIElement> po powierzchni, użytkownik będzie touch <xref:System.Windows.UIElement> można rozpocząć akcji, przesuń palcem ekranie odległość krótki, a następnie zwolnij <xref:System.Windows.UIElement>. Gdy użytkownik zwolni elementu, rozpocznie się bezwładności i <xref:System.Windows.UIElement.ManipulationInertiaStarting> zdarzenie.  <xref:System.Windows.UIElement> Będzie nadal otrzymywał <xref:System.Windows.UIElement.ManipulationDelta> zdarzenia w celu wskazania, że występuje bezwładności w elemencie.  
  
 To zdarzenie służy do określania zachowania bezwładności.  Na przykład można ustawić prędkość początkowa, używany, gdy rozpoczyna się bezwładności.  Można również określić ilość bezwładności, ustawiając odpowiednią opóźnienia lub ustawiając odpowiednią umieszczania.  Te wartości dla każdego typu manipulacji (tłumaczenia, rozszerzenia lub obrotu) można skonfigurować niezależnie.  Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.  
  
 Aby uzyskać więcej informacji na temat manipulacje, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  Na przykład aplikacja, która odpowiada manipulacje zobacz [wskazówki: tworzenie swój pierwszy Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationInertiaStarting"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.|  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono <xref:System.Windows.UIElement.ManipulationInertiaStarting> obsługi zdarzeń i ustawia żądany prędkości tłumaczenia, rozszerzenia i obracanie, który jest używany podczas bezwładności. Ten przykład jest częścią większego przykładu w [wskazówki: tworzenie swój pierwszy Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]
 [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationInertiaStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationInertiaStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationInertiaStartingEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> kierowanego zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarted As EventHandler(Of ManipulationStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartedEventArgs ^&gt; ^ ManipulationStarted;" />
      <MemberSignature Language="F#" Value="member this.ManipulationStarted : EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; " Usage="member this.ManipulationStarted : System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy urządzenie wejściowe rozpoczyna się manipulowania <see cref="T:System.Windows.UIElement" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.ManipulationStarted> Po wystąpieniu zdarzenia <xref:System.Windows.UIElement.ManipulationStarting> zdarzeń.  Możesz wykonywać następujące z <xref:System.Windows.Input.ManipulationStartedEventArgs>:  
  
-   Pobierz element manipulowania pozycji względem przy użyciu <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> właściwości.  
  
-   Uzyskiwanie pochodzenia operowanie przy użyciu <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> właściwości.  
  
-   Anuluj operowanie przez wywołanie metody <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> metody.  
  
 Aby uzyskać więcej informacji na temat manipulacje, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  Na przykład aplikacja, która odpowiada manipulacje zobacz [wskazówki: tworzenie swój pierwszy Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationStarted"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ManipulationStartedEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.ManipulationStartedEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationStartedEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.ManipulationStarted" /> kierowanego zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarting As EventHandler(Of ManipulationStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartingEventArgs ^&gt; ^ ManipulationStarting;" />
      <MemberSignature Language="F#" Value="member this.ManipulationStarting : EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; " Usage="member this.ManipulationStarting : System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy procesor manipulowania pierwszego tworzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.ManipulationStarting> Wystąpienia zdarzenia na element, który ma <xref:System.Windows.UIElement.IsManipulationEnabled%2A> ustawioną właściwość `true` gdy użytkownik umieszcza palcem na nim. Domyślnie zdarzenia kolejnych manipulowania raport pozycji manipulacji względem elementu, który ma <xref:System.Windows.UIElement.IsManipulationEnabled%2A> ustawioną `true`.  Można określić, czy pozycja powinna być określona względem innego elementu, ustawiając <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> właściwości. Na przykład możesz wprowadzić manipulowania względem elementu nadrzędnego.  
  
 Możesz również wykonać następujące czynności w obsłudze zdarzeń dla <xref:System.Windows.UIElement.ManipulationStarting>:  
  
-   Określ, czy użytkownik potrzebuje więcej niż jeden palca przeprowadzać manipulacji przez ustawienie <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> właściwości.  
  
-   Określ, jakie typy manipulowania są włączone przez ustawienie <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> właściwości <xref:System.Windows.Input.ManipulationModes> wyliczenia.  
  
-   Określ środek obrotu jednym palca, ustawiając <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> właściwości.  
  
-   Anuluj operowanie przez wywołanie metody <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> metody.  
  
 Aby uzyskać więcej informacji na temat manipulacje, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  Na przykład aplikacja, która odpowiada manipulacje zobacz [wskazówki: tworzenie swój pierwszy Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationStarting"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ManipulationStartingEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.ManipulationStartingEventArgs>.|  
  
   
  
## Examples  
 W poniższym przykładzie pokazano programu obsługi zdarzeń dla <xref:System.Windows.UIElement.ManipulationStarting> zdarzenia i ustawia <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> do elementu nadrzędnego, który odbiera zdarzenia manipulowania, tak aby były współrzędne operowanie względem elementu nadrzędnego.  Ten przykład jest częścią większego przykładu w [wskazówki: tworzenie swój pierwszy Touch aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationstarting)]
 [!code-vb[BasicManipulation#ManipulationStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationstarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationStartingEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.ManipulationStarting" /> kierowanego zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Measure">
      <MemberSignature Language="C#" Value="public void Measure (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Measure(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Measure (availableSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Measure(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="member this.Measure : System.Windows.Size -&gt; unit" Usage="uIElement.Measure availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">Dostępne miejsce przydzielić element podrzędny elementu nadrzędnego. Element podrzędny mogą żądać obszaru większego niż dostępna; Podany rozmiar może pomieścić, czy przewijanie jest możliwe w modelu zawartości dla bieżącego elementu.</param>
        <summary>Aktualizacje <see cref="P:System.Windows.UIElement.DesiredSize" /> z <see cref="T:System.Windows.UIElement" />. Elementy nadrzędne ta metoda jest wywoływana z własnych <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> implementacje do utworzenia układu cykliczne aktualizacji. Wywołanie tej metody oznacza akceptację pierwszym przebiegu aktualizacji układu (przebiegu "Measure").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obliczenia układu pozycjonowania w [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] składa się z <xref:System.Windows.UIElement.Measure%2A> wywołania i <xref:System.Windows.UIElement.Arrange%2A> wywołania. Podczas <xref:System.Windows.UIElement.Measure%2A> wywołania elementu określa wymagania jego rozmiar za pomocą `availableSize` wejściowego. Podczas <xref:System.Windows.UIElement.Arrange%2A> wywołanie, rozmiaru elementu jest zakończona.  
  
 `availableSize` może być dowolna liczba od 0 do nieskończonej. Elementów uczestniczących w układzie powinien zwrócić wartości minimalnej <xref:System.Windows.Size> wymagają dla danego `availableSize`.  
  
 W przypadku wystąpienia układ zawsze odbierze <xref:System.Windows.UIElement.Measure%2A> wywołać przed <xref:System.Windows.UIElement.Arrange%2A>. Po pierwszym przebiegu układu go otrzymać <xref:System.Windows.UIElement.Arrange%2A> wywołania bez <xref:System.Windows.UIElement.Measure%2A>; może się to zdarzyć, gdy właściwość, która wpływa tylko na <xref:System.Windows.UIElement.Arrange%2A> zmianie (na przykład wyrównanie), lub gdy odbierze nadrzędnego <xref:System.Windows.UIElement.Arrange%2A> bez <xref:System.Windows.UIElement.Measure%2A>. A <xref:System.Windows.UIElement.Measure%2A> wywołania automatycznie spowoduje unieważnienie <xref:System.Windows.UIElement.Arrange%2A> wywołania.  
  
 Aktualizacje układu nastąpić asynchronicznie, tak, aby nie oczekuje wątku głównego dla każdej zmiany układu możliwe. Podczas badania elementu za pomocą kodem sprawdzanie wartości właściwości mogą nie natychmiast uwzględniać zmiany właściwości współpracujące z właściwościami zmiany rozmiaru ani układu ( <xref:System.Windows.FrameworkElement.Width%2A> właściwości, na przykład).  
  
> [!NOTE]
>  Aktualizacje układu można wymusić za pomocą <xref:System.Windows.UIElement.UpdateLayout%2A> metody. Jednak wywołaniem tej metody jest zazwyczaj zbędne i mogą spowodować słabą wydajność.  
  
 System układu utrzymuje dwa oddzielne kolejek nieprawidłowy układów, jeden dla <xref:System.Windows.UIElement.Measure%2A> i jeden dla <xref:System.Windows.UIElement.Arrange%2A>. Kolejki układu są sortowane według na kolejność elementów w drzewie wizualnym elementu wykonywania układu; elementy wyżej w drzewie znajdowały się u góry kolejki, aby uniknąć nadmiarowe układów spowodowany przez powtarzające zmiany elementów nadrzędnych. Zduplikowane pozycje są automatycznie usuwane z kolejki, a elementy są automatycznie usuwane z kolejki, jeśli są one już zweryfikowana układu.  
  
 Podczas aktualizowania układ <xref:System.Windows.UIElement.Measure%2A> kolejki jest opróżniany najpierw, a następnie <xref:System.Windows.UIElement.Arrange%2A> kolejki. Element <xref:System.Windows.UIElement.Arrange%2A> kolejki nigdy nie będzie ułożone, jeśli jest elementem <xref:System.Windows.UIElement.Measure%2A> kolejki.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="abstract member MeasureCore : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.MeasureCore : System.Windows.Size -&gt; System.Windows.Size" Usage="uIElement.MeasureCore availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">Dostępny rozmiar przydzielić elementu nadrzędnego dla obiekt podrzędny.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej udostępnia logikę miary dotyczące ustalania rozmiaru tego elementu prawidłowo, z uwzględnieniem wielkości zawartość elementu podrzędnego.</summary>
        <returns>Wymagany rozmiar tego elementu w układzie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Częściej pochodzić od elementu są <xref:System.Windows.FrameworkElement> zamiast <xref:System.Windows.UIElement>. Jeśli są wynikających z <xref:System.Windows.FrameworkElement>, należy pamiętać, że zastępująca <xref:System.Windows.UIElement.MeasureCore%2A> na <xref:System.Windows.FrameworkElement> zamknięcia <xref:System.Windows.UIElement.MeasureCore%2A> metody. W związku z tym należy zastąpić tylko <xref:System.Windows.UIElement.MeasureCore%2A> jako środek do zmiany układu miary właściwości, jeśli pochodzi od <xref:System.Windows.UIElement> poprzez dziedziczenie, która nie zawiera <xref:System.Windows.FrameworkElement>. Może to mieć miejsce, jeśli próbujesz własne implementacji rozbudowywać [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] poziom core. W przeciwnym razie, jeśli są wynikających z <xref:System.Windows.FrameworkElement>, Szablon wdrożenia dla miary zachowanie jest <xref:System.Windows.FrameworkElement> implementacja.<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.  
  
 Należy wywołać element nadrzędny z elementami podrzędnymi <xref:System.Windows.UIElement.Measure%2A> na poszczególne elementy podrzędne, w przeciwnym razie te elementy podrzędne nie są o rozmiarze lub ułożone i efektywnie zniknie z układu.  
  
   
  
## Examples  
 Typowy zastępowania <xref:System.Windows.UIElement.MeasureCore%2A> następuje tego wzorca przybliżonej (nie ma wbudowanej kolekcji o nazwie `VisualChildren`; `VisualChildren` to symbol zastępczy reprezentujący niezależnie od podrzędnej kolekcji przechowuje nazwę elementu).  
  
 [!code-csharp[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementmeasureoverride)]
 [!code-vb[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementmeasureoverride)]  
  
-   Należy wywołać <xref:System.Windows.UIElement.Measure%2A> dla każdego elementu podrzędnego.  
  
-   Ogólnie rzecz biorąc, wdrożenie powinien pamięci podręcznej informacji pomiaru między <xref:System.Windows.UIElement.MeasureCore%2A> i <xref:System.Windows.UIElement.ArrangeCore%2A> metoda wywołuje w tym samym elemencie.  
  
-   Wywoływanie podstawowych implementacji <xref:System.Windows.UIElement.MeasureCore%2A> nie jest wymagana, ale może być odpowiednie, jeśli podstawowa implementacja udostępnia funkcję żądany układ.  
  
-   Wywołuje się <xref:System.Windows.UIElement.Measure%2A> na podrzędne elementy powinno przekazać ona taka sama `availableSize` jako element nadrzędny lub podzbiór obszaru, w zależności od typu układu elementu nadrzędnego obsługuje. Na przykład byłoby nieprawidłowe Usuń obszar obramowania specyficzne dla elementu lub uzupełnienie, paska przewijania lub kontrolkę niestandardową.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Implementacje musi być w stanie przetworzyć wartość podana dla <paramref name="availableSize" /> jest nieograniczony. Nieskończona wartość oznacza żądanych ograniczeń i efektywnie różni się pomiaru wyboru do elementu nadrzędnego, za pośrednictwem cykliczne wywołania miary.  Implementacje można wziąć pod uwagę wartość podana dla <paramref name="availableSize" /> za słabe ograniczenia. Element podrzędny może określ większy rozmiar, nawet w przypadku innych aspektów kodu aplikacji był w stanie określić bieżącego rozmiaru rzeczywistego elementu nadrzędnego. Żądanie duży rozmiar jest Konwencji, która wskazuje, że element podrzędny sprawdza czy Twoje element nadrzędny może obsługiwać przewijanie zawartości w obrębie regionu wyświetlanie zawartości.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu dowolnego przycisku myszy, gdy wskaźnik myszy znajduje się nad elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.MouseDown> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.MouseDown> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 <xref:System.Windows.UIElement.MouseDown> Zdarzenie jest zgłaszane, często razem albo <xref:System.Windows.UIElement.MouseLeftButtonDown> lub <xref:System.Windows.UIElement.MouseRightButtonDown>, które odpowiadają naciśnij jednej z dwóch przycisków standardowej myszki. <xref:System.Windows.UIElement.MouseLeftButtonDown> i <xref:System.Windows.UIElement.MouseRightButtonDown> również są kierowane zdarzenia, ale są bezpośrednio kierowane zdarzenia i odpowiednie zdarzenie specyficzne dla przycisku jest wywoływane podczas <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzeń osiągnie ten element wzdłuż trasy zdarzenia. Zobacz uwagi dla <xref:System.Windows.UIElement.MouseLeftButtonDown> lub <xref:System.Windows.UIElement.MouseRightButtonDown>.  
  
> [!IMPORTANT]
>  Niektóre formanty może być związanego z używaniem klasy obsługi zdarzenia przycisk myszy. Lewy przycisk myszy w dół zdarzeń jest najbardziej prawdopodobne zdarzenia klasa Obsługa w formancie. Klasy obsługi często oznacza odpowiadającego <xref:System.Windows.Input.Mouse> zdarzenia klasy jako obsłużone. Gdy zdarzenie jest oznaczony jako obsługiwany, innych programów obsługi wystąpienia, które są dołączone do tego elementu nie są zwykle wywoływane. Wszystkie inne klasy lub wystąpienia obsługi, które są dołączone do elementów w kierunku propagacji do katalogu głównego w drzewie interfejsu użytkownika również nie zwykle są zgłaszane.  
  
 Można rozwiązać problem, który jest opisane w poprzednim ważne i nadal odbierać <xref:System.Windows.UIElement.MouseDown> zdarzeń związanych z lewego przycisku myszy w dół zdarzenia w klasie pochodnej, który zawiera klasę obsługi przy użyciu jednej z tych rozwiązań:  
  
-   Dołącz obsługi <xref:System.Windows.UIElement.PreviewMouseDown> zdarzenie, które nie jest oznaczony jako obsługiwane przez formanty. Zauważyć, że jest zdarzeń w wersji zapoznawczej, dlatego trasy rozpoczyna się w katalogu głównym a tuneli do formantu.  
  
-   Zarejestruj Obsługa w formancie proceduralnie przez wywołanie metody <xref:System.Windows.UIElement.AddHandler%2A> i wybranie opcji podpisu, która umożliwia obsługi do nasłuchiwania zdarzeń nawet wtedy, gdy są one już oznaczone jako obsługiwane w danych kierowanego zdarzenia.  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseDownEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewMouseDown>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnMouseDown%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseDown" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Input.MouseEventHandler " Usage="member this.MouseEnter : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wskaźnik myszy zostanie umieszczony granic tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseEnter> jest używającą bezpośredniej obsługi strategii routingu zdarzeń. Bezpośrednie kierowane zdarzenia nie są zgłaszane wzdłuż trasy; Zamiast tego są obsługiwane w tym samym elemencie gdzie są zgłaszane. Jednak umożliwiają one inne aspekty zachowania kierowanego zdarzenia, takie jak wyzwalacze zdarzeń w style.  
  
 Mimo że <xref:System.Windows.UIElement.MouseEnter> ścieżki, gdy wskaźnik myszy zostanie umieszczony granice elementu, to zdarzenie więcej dosłownie zgłasza, że <xref:System.Windows.UIElement.IsMouseOver%2A> zmieniono wartość właściwości z `false` do `true` w tym elemencie.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.MouseEnter> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.MouseEnter> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 A <xref:System.Windows.Controls.Button> (lub <xref:System.Windows.Controls.Primitives.ButtonBase> klasy) ma natywnej obsługi dla <xref:System.Windows.UIElement.KeyDown> zdarzeń, gdy przycisk ma fokus oraz naciśnięty klawisz spacji. Zgłasza natywnej obsługi <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzeń przy użyciu przycisku jako źródła, a także przechwytuje mysz, nawet jeśli nie ma wskaźnik myszy do przeniesienia. W wyniku przechwytywanie myszy <xref:System.Windows.UIElement.MouseEnter> zdarzenie powstaje przy użyciu przycisku jako źródło. Ogólnie, jeśli element przechwytuje mysz, następnie <xref:System.Windows.UIElement.MouseEnter> jest zgłaszane, jak również <xref:System.Windows.UIElement.GotMouseCapture> i prawdopodobnie inne zdarzenia specyficzne dla formantu.  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseEnterEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnMouseEnter%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseEnter" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Input.MouseEventHandler " Usage="member this.MouseLeave : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po opuszczeniu przez wskaźnik myszy granic tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseLeave> jest używającą bezpośredniej obsługi strategii routingu zdarzeń. Bezpośrednie kierowane zdarzenia nie są zgłaszane wzdłuż trasy; Zamiast tego są obsługiwane w tym samym elemencie gdzie są zgłaszane. Jednak umożliwiają one inne aspekty zachowania kierowanego zdarzenia, takie jak wyzwalacze zdarzeń w style.  
  
 Mimo że <xref:System.Windows.UIElement.MouseLeave> ścieżki, gdy mysz opuści elementu, to zdarzenie więcej dosłownie zgłasza, że <xref:System.Windows.UIElement.IsMouseOver%2A> zmieniono wartość właściwości z `true` do `false` w tym elemencie.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.MouseLeave> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.MouseLeave> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseLeaveEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnMouseLeave%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseLeave" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu lewego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż wydaje się to wykonaj propagacji trasy do drzewa, faktycznie jest bezpośrednie kierowanego zdarzenia wywoływane i reraised wzdłuż drzewa elementu przez każdą <xref:System.Windows.UIElement>.  
  
 To zdarzenie jest jednym z kilku zdarzenia powiązane, które zgłosiły specyfice przycisk myszy odpowiednią <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzenie, które jest dołączone zdarzenie, które są przetwarzane przez każdy element wzdłuż trasy zdarzenia.  
  
 Dane zdarzenia tego zdarzenia przedstawia dane zdarzeń podstawowych <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzeń. Jeśli to zdarzenie jest oznaczony jako obsługiwane wzdłuż trasy zdarzenia, nadal pojawienia się przycisk myszy określonych zdarzeń; jednak należy dodać obsługi określonych zdarzeń przycisku myszy przez wywołanie jawnie <xref:System.Windows.UIElement.AddHandler%2A>, z opcją do obsługi zdarzeń, które już są oznaczone jako obsługiwany, aby mogła być odbiorników w zdarzeniu. Po zaznaczeniu <xref:System.Windows.UIElement.MouseLeftButtonDown> obsługi, możesz są zasadniczo oznaczenie <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> obsługiwany w przypadku odbiorników dalsze wzdłuż trasy i na wszystkich zdarzeń powiązanych. To prawdopodobnie zawiera wygenerowane klasy obsługi zdarzenia takich jak <xref:System.Windows.Controls.Control.MouseDoubleClick>.  
  
 Koncepcyjnie, należy traktować tego zdarzenia (oraz inne zdarzenia przycisk myszy na <xref:System.Windows.UIElement>) być myszy "Usługa" (z definicji usługi udostępniane przez <xref:System.Windows.Input.Mouse> klasy). Zdarzenie dodaje wygodę wyeliminowanie konieczności sprawdzenia stanach przycisku myszy (lewo i w prawo, góra dół) oryginalnego zdarzenia myszy w danych zdarzenia. Dla bardziej zaawansowanych scenariuszy, takich jak sprawdzanie stanów niestandardowych przycisków, konieczne może być użyj [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] na <xref:System.Windows.Input.Mouse> klasy zamiast tych na <xref:System.Windows.UIElement>.  
  
> [!IMPORTANT]
>  Niektóre klasy formantów może być związanego z używaniem klasy obsługi zdarzenia przycisk myszy. Lewy przycisk myszy w dół zdarzeń jest najbardziej prawdopodobne zdarzenia klasa Obsługa w formancie. Klasy obsługi często oznacza odpowiadającego <xref:System.Windows.Input.Mouse> zdarzenia klasy jako obsłużone. Gdy zdarzenie jest oznaczony jako obsługiwany, innych programów obsługi wystąpienia, które są dołączone do tego elementu nie są zwykle wywoływane. Wszystkie inne klasy lub wystąpienia obsługi, które są dołączone do elementów w kierunku propagacji do katalogu głównego w drzewie interfejsu użytkownika również nie zwykle są zgłaszane.  
  
 Można rozwiązać problem, który jest opisane w poprzednim ważne i nadal odbierać <xref:System.Windows.UIElement.MouseLeftButtonDown> zdarzeń związanych z lewego przycisku myszy w dół zdarzenia w klasie pochodnej, który zawiera klasę obsługi przy użyciu jednej z tych rozwiązań:  
  
-   Dołącz obsługi <xref:System.Windows.UIElement.PreviewMouseDown> zdarzenie, które nie jest oznaczony jako obsługiwane przez formanty. Zauważyć, że jest zdarzeń w wersji zapoznawczej, dlatego trasy rozpoczyna się w katalogu głównym a tuneli do formantu.  
  
-   Zarejestruj Obsługa w formancie proceduralnie przez wywołanie metody <xref:System.Windows.UIElement.AddHandler%2A> i wybranie opcji podpisu, która umożliwia obsługi do nasłuchiwania zdarzeń nawet wtedy, gdy są one już oznaczone jako obsługiwane w danych kierowanego zdarzenia.  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu lewego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż wydaje się to wykonaj propagacji trasy do drzewa, faktycznie jest bezpośrednie kierowanego zdarzenia wywoływane i reraised wzdłuż drzewa elementu przez każdą <xref:System.Windows.UIElement>.  
  
 To zdarzenie jest jednym z kilku zdarzenia powiązane, które zgłosiły specyfice przycisk myszy odpowiednią <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> zdarzenie, które jest dołączone zdarzenie, które są przetwarzane przez każdy element wzdłuż trasy zdarzenia.  
  
 Dane zdarzenia tego zdarzenia przedstawia dane zdarzeń podstawowych <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> zdarzeń. Jeśli to zdarzenie jest oznaczony jako obsługiwane wzdłuż trasy zdarzenia, nadal pojawienia się przycisk myszy określonych zdarzeń; jednak należy dodać obsługi określonych zdarzeń przycisku myszy przez wywołanie jawnie <xref:System.Windows.UIElement.AddHandler%2A>, z opcją do obsługi zdarzeń, które już są oznaczone jako obsługiwany, aby mogła być odbiorników w zdarzeniu. Po zaznaczeniu <xref:System.Windows.UIElement.MouseLeftButtonUp> obsługi, możesz są zasadniczo oznaczenie <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> obsługiwany w przypadku odbiorników dalsze wzdłuż trasy i na wszystkich zdarzeń powiązanych.  
  
 Koncepcyjnie, należy traktować tego zdarzenia (oraz inne zdarzenia przycisk myszy na <xref:System.Windows.UIElement>) być myszy "Usługa" (z definicji usługi udostępniane przez <xref:System.Windows.Input.Mouse> klasy). Zdarzenie dodaje wygodę wyeliminowanie konieczności sprawdzenia stanach przycisku myszy (lewo i w prawo, góra dół) oryginalnego zdarzenia myszy w danych zdarzenia. Dla bardziej zaawansowanych scenariuszy, takich jak sprawdzanie stanów niestandardowych przycisków, konieczne może być użyj [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] na <xref:System.Windows.Input.Mouse> klasy zamiast tych na <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wskaźnik myszy porusza się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.MouseMove> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.MouseMove> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseMoveEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewMouseMove>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnMouseMove%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseMove" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu prawego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż wydaje się to wykonaj propagacji trasy do drzewa, faktycznie jest bezpośrednie kierowanego zdarzenia wywoływane i reraised wzdłuż drzewa elementu przez każdą <xref:System.Windows.UIElement>.  
  
 To zdarzenie jest jednym z kilku zdarzenia powiązane, które zgłosiły specyfice przycisk myszy odpowiednią <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzenie, które jest dołączone zdarzenie, które są przetwarzane przez każdy element wzdłuż trasy zdarzenia.  
  
 Dane zdarzenia tego zdarzenia przedstawia dane zdarzeń podstawowych <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzeń. Jeśli to zdarzenie jest oznaczony jako obsługiwane wzdłuż trasy zdarzenia, nadal pojawienia się przycisk myszy określonych zdarzeń; jednak należy dodać obsługi określonych zdarzeń przycisku myszy przez wywołanie jawnie <xref:System.Windows.UIElement.AddHandler%2A>, z opcją do obsługi zdarzeń, które już są oznaczone jako obsługiwany, aby mogła być odbiorników w zdarzeniu. Po zaznaczeniu <xref:System.Windows.UIElement.MouseRightButtonDown> obsługi, możesz są zasadniczo oznaczenie <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> obsługiwany w przypadku odbiorników dalsze wzdłuż trasy i na wszystkich zdarzeń powiązanych. To prawdopodobnie zawiera wygenerowane klasy obsługi zdarzenia takich jak <xref:System.Windows.Controls.Control.MouseDoubleClick>.  
  
 Koncepcyjnie, należy traktować tego zdarzenia (oraz inne zdarzenia przycisk myszy na <xref:System.Windows.UIElement>) być myszy "Usługa" (z definicji usługi udostępniane przez <xref:System.Windows.Input.Mouse> klasy). Zdarzenie dodaje wygodę wyeliminowanie konieczności sprawdzenia stanach przycisku myszy (lewo i w prawo, góra dół) oryginalnego zdarzenia myszy w danych zdarzenia. Dla bardziej zaawansowanych scenariuszy, takich jak sprawdzanie stanów niestandardowych przycisków, konieczne może być użyj [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] na <xref:System.Windows.Input.Mouse> klasy zamiast tych na <xref:System.Windows.UIElement>.  
  
 Prawy przycisk myszy zdarzeń często ma natywnej obsługi w scenariuszach aplikacji. Na przykład prawym przyciskiem myszy w dół może wyświetlić menu kontekstowe. Zobacz [omówienie ContextMenu](~/docs/framework/wpf/controls/contextmenu-overview.md).  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseRightButtonDownEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu prawego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż wydaje się to wykonaj propagacji trasy do drzewa, faktycznie jest bezpośrednie kierowanego zdarzenia wywoływane i reraised wzdłuż drzewa elementu przez każdą <xref:System.Windows.UIElement>.  
  
 To zdarzenie jest jednym z kilku zdarzenia powiązane, które zgłosiły specyfice przycisk myszy odpowiednią <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> zdarzenie, które jest dołączone zdarzenie, które są przetwarzane przez każdy element wzdłuż trasy zdarzenia.  
  
 Dane zdarzenia tego zdarzenia przedstawia dane zdarzeń podstawowych <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> zdarzeń. Jeśli to zdarzenie jest oznaczony jako obsługiwane wzdłuż trasy zdarzenia, nadal pojawienia się przycisk myszy określonych zdarzeń; jednak należy dodać obsługi określonych zdarzeń przycisku myszy przez wywołanie jawnie <xref:System.Windows.UIElement.AddHandler%2A>, z opcją do obsługi zdarzeń, które już są oznaczone jako obsługiwany, aby mogła być odbiorników w zdarzeniu. Po zaznaczeniu <xref:System.Windows.UIElement.MouseRightButtonUp> obsługi, możesz są zasadniczo oznaczenie <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> obsługiwany w przypadku odbiorników dalsze wzdłuż trasy i na wszystkich zdarzeń powiązanych.  
  
 Koncepcyjnie, należy traktować tego zdarzenia (oraz inne zdarzenia przycisk myszy na <xref:System.Windows.UIElement>) być myszy "Usługa" (z definicji usługi udostępniane przez <xref:System.Windows.Input.Mouse> klasy). Zdarzenie dodaje wygodę wyeliminowanie konieczności sprawdzenia stanach przycisku myszy (lewo i w prawo, góra dół) oryginalnego zdarzenia myszy w danych zdarzenia. Dla bardziej zaawansowanych scenariuszy, takich jak sprawdzanie stanów niestandardowych przycisków, konieczne może być użyj [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] na <xref:System.Windows.Input.Mouse> klasy zamiast tych na <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseRightButtonUpEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu dowolnego przycisku myszy nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.MouseUp> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.MouseUp> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 <xref:System.Windows.UIElement.MouseUp> Zdarzenie jest zgłaszane, często razem albo <xref:System.Windows.UIElement.MouseLeftButtonUp> lub <xref:System.Windows.UIElement.MouseRightButtonUp>, które odpowiadają wersji jednego z dwóch przycisków standardowej myszki. <xref:System.Windows.UIElement.MouseLeftButtonUp> i <xref:System.Windows.UIElement.MouseRightButtonUp> również są kierowane zdarzenia, ale są bezpośrednio kierowane zdarzenia i odpowiednie zdarzenie specyficzne dla przycisku jest wywoływane podczas <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzeń osiągnie ten element wzdłuż trasy zdarzenia. Zobacz uwagi dla <xref:System.Windows.UIElement.MouseLeftButtonUp> lub <xref:System.Windows.UIElement.MouseRightButtonUp>.  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseUpEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewMouseUp>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnMouseUp%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseUp" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik obraca kółko myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przechwytywanie myszy lub fokus pierwszeństwo gdy wskaźnik myszy znajduje się; w związku z tym jeśli zostanie wyświetlony <xref:System.Windows.UIElement.MouseWheel> zdarzeń z elementu ukierunkowanych lub przechwycone, wskaźnik myszy może się okazać za pośrednictwem innego elementu.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.MouseWheel> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.MouseWheel> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseWheelEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewMouseWheel>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnMouseWheel%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.MouseWheel" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool&#xA;override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="uIElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">Żądanie przechodzenie, zawierającego właściwości, która wskazuje albo tryb przechodzenia w istniejących kolejności tabulacji lub kierunek przenoszenia wizualnie.</param>
        <summary>Próbuje Przenieś fokus z tego elementu do innego elementu. Przenieś fokus kierunek jest określany przez kierunek wskazówki jest interpretowana w obrębie organizacji elementu nadrzędnego visual dla tego elementu.</summary>
        <returns>
          <see langword="true" /> Jeśli wykonano żądanej przechodzenie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Upewnij się, że należy sprawdzić wartość zwrotną tej metody. Zwracana wartość `false` może być zwrócony, jeśli działa podczas przechodzenia do tabulatora jest definiowana za pomocą formantu kompozycji, a nie żądał żądania przechodzenia do zakodowania.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit&#xA;override this.OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit" Usage="uIElement.OnAccessKey e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia do zdarzenia klucza dostępu. Raporty danych zdarzeń klucz, do którego została wywołana i wskazać, czy <see cref="T:System.Windows.Input.AccessKeyManager" /> obiekt, który kontroluje wysyłanie tych zdarzeń również wysyłane to wywołanie klucza dostępu do innych elementów.</param>
        <summary>Zawiera klasy obsługi po klucz dostępu zrozumiały dla tego elementu jest wywoływany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie ma żadnego rzeczywistego zdarzenia AccessKey w <xref:System.Windows.UIElement> klasy lub w innym miejscu, który można wywołać lub dołączyć programy obsługi dla. Zamiast tego zdarzenia jest pochodzi za pośrednictwem klasy dedykowanych Menedżera <xref:System.Windows.Input.AccessKeyManager>, który przetwarza po wszystkie dane wejściowe do wyszukiwania klucze dostępu, które mają zastosowanie do całego modelu wejściowego.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Domyślna implementacja tej metody w <see cref="T:System.Windows.UIElement" /> zestawy klawiatury fokus do tego elementu (wywołując <see cref="M:System.Windows.UIElement.Focus" />). Implementacje powinny widoczny przy obsłudze często to zachowanie, jeśli są one focusable, ponieważ jest to oczekiwane zachowanie dla scenariuszy ułatwień dostępu. Zauważ, że podstawowa implementacja nie działa z danymi przekazany zdarzenia i zgłasza brak dalszych zdarzenia; po prostu ustawia fokus.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnChildDesiredSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildDesiredSizeChanged(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChildDesiredSizeChanged (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChildDesiredSizeChanged(System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="abstract member OnChildDesiredSizeChanged : System.Windows.UIElement -&gt; unit&#xA;override this.OnChildDesiredSizeChanged : System.Windows.UIElement -&gt; unit" Usage="uIElement.OnChildDesiredSizeChanged child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">Element podrzędny, który jest zmieniany.</param>
        <summary>Obsługuje układ zachowanie, gdy zmieniany jest rozmiar elementu podrzędnego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody zwykle nie jest wywoływany przez kod aplikacji. Jest narażony, ten element pochodny klasy można wprowadzać dodatkowe kontrole stanu układu prawdopodobnie nieprawidłowy. Klasy może również próbować optymalizacji, aby zminimalizować czas przetwarzania dla przebiegu układu, na podstawie rozmiaru zmian do elementów podrzędnych. Przykład pochodnej klasy elementu, który implementuje <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> jest <xref:System.Windows.Controls.Grid> formantu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> Metoda ma Domyślna implementacja wywołania metody <see cref="M:System.Windows.UIElement.InvalidateMeasure" /> od siebie samego. Typowa implementacja byłoby: czy niezależnie od optymalizacji własnego elementu obsługuje, a następnie zwykle wywołują podstawowej <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> z co najmniej jednej z gałęzi kodu (jeden wskazany stan "zakłóconych" na własnych miary buforowanie logiki).  Ta metoda jest wywoływana tylko podczas przetwarzania układu, jeśli jest podrzędnego samego, który pochodzi zmiany rozmiaru. W przeciwnym razie, jeśli element nadrzędny inicjuje <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> przekazać, zgodnie z regułami systemu układu nadrzędnego jest ponowne obliczanie układu już. System układu przetwarza układu kolejności podrzędnej do nadrzędnej, więc bez powrotu do zmiany rozmiaru elementu nadrzędnego z wywołań układu elementu podrzędnego jest niezbędne.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer&#xA;override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="uIElement.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca specyficzne <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementacji dla [! Infrastruktura include[TLA#tla_winclient](~/includes/tlasharptla-winclient-MD.MD)].</summary>
        <returns>Określonego typu <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementacji.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Implementacja tej metody jest zazwyczaj wywołanie konstruktora określonego <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> wdrożenia i zwraca je jako wartości zwracane.  Wszystkie <see cref="T:System.Windows.UIElement" /> klas pochodnych należy zaimplementować tę metodę w celu zapewnienia ich własnych określonych <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementacje do [! Infrastruktura include[TLA#tla_winclient](~/includes/tlasharptla-winclient-MD.MD)]. Aby uzyskać szczegółowe informacje dotyczące implementacji tego wzorca, zobacz <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.DragEnter" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.DragLeave" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.DragOver" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.DragEnter" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement.OnGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.GiveFeedbackEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.GiveFeedback" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> zawierający dane zdarzenia. Te dane zdarzenie musi zawierać identyfikator <see cref="E:System.Windows.UIElement.GotFocus" /> zdarzeń.</param>
        <summary>Zgłasza <see cref="E:System.Windows.UIElement.GotFocus" /> kierowanego zdarzenia przy użyciu dane zdarzenia przekazane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody, mimo że jest to wirtualne, mają domyślną implementację, który wywołuje zdarzenie.  
  
 To na * implementacji metody jest przeznaczona do zgłoszenia zdarzenia i tej samej implementacji metody jest wywoływana wewnętrznie, aby zgłosić zdarzenie po <xref:System.Windows.UIElement.IsFocused%2A> zmiany wartości właściwości. <xref:System.Windows.UIElement.OnGotFocus%2A> Implementacji różni się od niektórych innych [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] na * implementacji, które zapewniają tylko wygodny sposób, aby dodać klasę obsługi dla tego zdarzenia.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku braku zamierzonego i nietypowych potrzebę nie wywoływanie zdarzeń fokusu, upewnij się, że wdrożenie wywołuje implementacji podstawowej. W przeciwnym razie <see cref="E:System.Windows.UIElement.GotFocus" /> zdarzenie nie jest wywoływane podczas operacji typowych użytkownika, które zwykle Ustaw fokus w tym elemencie. Jeśli nie chcesz, aby Twoje element ma być focusable, użytkownik może uniemożliwić element focusable przez ustawienie <see cref="P:System.Windows.UIElement.Focusable" /> do <see langword="false" />.</para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnGotMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnGotStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnGotTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Udostępnia klasę obsługi <see cref="E:System.Windows.UIElement.GotTouchCapture" /> kierowanego zdarzenia, gdy touch są przechwytywane do tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnGotTouchCapture%2A> Metoda ma domyślnej implementacji. Zastąpienie <xref:System.Windows.UIElement.OnGotTouchCapture%2A> w klasie pochodnej w celu obsługi <xref:System.Windows.UIElement.GotTouchCapture> zdarzeń. Pamiętaj wywołać klasy podstawowej <xref:System.Windows.UIElement.OnGotTouchCapture%2A> metody, która podstawowa klasy odbierać zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsKeyboardFocusedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wirtualna jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsKeyboardFocused%2A> zmiany właściwości zależności. Metoda wirtualna jest wywoływane najpierw i można manipulować danymi zdarzenia w razie potrzeby. Następnie przy użyciu <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> zdarzenia z tego samego wystąpienia danych zdarzenia. Zwróć uwagę, że <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> zdarzenie nie jest kierowanego zdarzenia. W związku z tym nie można oznaczyć go jako obsługiwane w obsłudze klasy.  
  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji. Może wywołania podstawowego przed lub po Twoje specjalnej obsługi, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsKeyboardFocusWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Wywoływana tuż przed <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> zdarzenie jest wywoływane przez ten element. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wirtualna jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> zmiany właściwości zależności. Metoda wirtualna jest wywoływane najpierw i można manipulować danymi zdarzenia w razie potrzeby. Następnie przy użyciu <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> zdarzenia z tego samego wystąpienia danych zdarzenia. Zwróć uwagę, że <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> zdarzenie nie jest kierowanego zdarzenia. W związku z tym nie można oznaczyć go jako obsługiwane w obsłudze klasy.  
  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji. Może wywołania podstawowego przed lub po Twoje specjalnej obsługi, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody wirtualnej jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsMouseCaptured%2A> zmienia się wartość właściwości zależności. Metoda wirtualna jest wywoływane najpierw i można manipulować danymi zdarzenia w razie potrzeby. Następnie przy użyciu <xref:System.Windows.UIElement.IsMouseCapturedChanged> zdarzenia z tego samego wystąpienia danych zdarzenia. Zwróć uwagę, że <xref:System.Windows.UIElement.IsMouseCapturedChanged> zdarzenie nie jest kierowanego zdarzenia; W związku z tym nie można oznaczyć go jako obsługiwane w obsłudze klasy.  
  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji. Może wywołania podstawowego przed lub po Twoje specjalnej obsługi, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Tej metody wirtualnej jest wywoływane, gdy wartość <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> zmienia się wartość właściwości zależności. Metoda wirtualna jest wywoływane najpierw i można manipulować danymi zdarzenia w razie potrzeby. Następnie przy użyciu <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> zdarzenia z tego samego wystąpienia danych zdarzenia. Zwróć uwagę, że zdarzenie nie jest kierowanego zdarzenia; W związku z tym nie można oznaczyć go jako obsługiwane w obsłudze klasy.  Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji. Może wywołania podstawowego przed lub po Twoje specjalnej obsługi, w zależności od wymagań.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody wirtualnej jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> zmienia się wartość właściwości zależności. Metoda wirtualna jest wywoływane najpierw i można manipulować danymi zdarzenia w razie potrzeby. Następnie przy użyciu <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> zdarzenia z tego samego wystąpienia danych zdarzenia. Zwróć uwagę, że <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> zdarzenie nie jest kierowanego zdarzenia. W związku z tym nie można oznaczyć go jako obsługiwane w obsłudze klasy.  
  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji. Może wywołania podstawowego przed lub po Twoje specjalnej obsługi, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody wirtualnej jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsStylusCaptured%2A> zmienia się wartość właściwości zależności. Metoda wirtualna jest wywoływane najpierw i można manipulować danymi zdarzenia w razie potrzeby. Następnie przy użyciu <xref:System.Windows.UIElement.IsStylusCapturedChanged> zdarzenia z tego samego wystąpienia danych zdarzenia. Zwróć uwagę, że zdarzenie nie jest kierowanego zdarzenia. W związku z tym nie można oznaczyć go jako obsługiwane w obsłudze klasy.  
  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji. Może wywołania podstawowego przed lub po Twoje specjalnej obsługi, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody wirtualnej jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> zmienia się wartość właściwości zależności. Metoda wirtualna jest wywoływane najpierw i można manipulować danymi zdarzenia w razie potrzeby. Następnie przy użyciu <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> zdarzenia z tego samego wystąpienia danych zdarzenia. Zwróć uwagę, że zdarzenie nie jest kierowanego zdarzenia. W związku z tym nie można oznaczyć go jako obsługiwane w obsłudze klasy.  
  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji. Może wywołania podstawowego przed lub po Twoje specjalnej obsługi, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody wirtualnej jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> zmienia się wartość właściwości zależności. Metoda wirtualna jest wywoływane najpierw i można manipulować danymi zdarzenia w razie potrzeby. Następnie przy użyciu <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> zdarzenia z tego samego wystąpienia danych zdarzenia. Zwróć uwagę, że zdarzenie nie jest kierowanego zdarzenia. W związku z tym nie można oznaczyć go jako obsługiwane w obsłudze klasy.  
  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji. Może wywołania podstawowego przed lub po Twoje specjalnej obsługi, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.KeyEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uderzenia w klawisze są obsługiwane przez dedykowane Menedżera wejściowego. Inne funkcje programowania, które opierają się na naciśnięcia klawiszy, na przykład powiązania wejściowego i polecenia, może obsłużyć naciśnięcia klawisza, zanim jest uwidaczniany jako ogólne naciśnięcie klawisza. Te dane wejściowe funkcji systemu oznaczanie zdarzenia jako obsługiwany, następnie <xref:System.Windows.UIElement.OnKeyDown%2A> nie jest wywoływany.  
  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.KeyEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uderzenia w klawisze są obsługiwane przez dedykowane Menedżera wejściowego. Inne funkcje programowania, które opierają się na naciśnięcia klawiszy, na przykład powiązania wejściowego i polecenia, może obsłużyć naciśnięcia klawisza, zanim jest uwidaczniany jako ogólne naciśnięcie klawisza. Te dane wejściowe funkcji systemu oznaczanie zdarzenia jako obsługiwany, następnie <xref:System.Windows.UIElement.OnKeyUp%2A> nie jest wywoływany.  
  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> zawierający dane zdarzenia. Te dane zdarzenie musi zawierać identyfikator <see cref="E:System.Windows.UIElement.LostFocus" /> zdarzeń.</param>
        <summary>Zgłasza <see cref="E:System.Windows.UIElement.LostFocus" /> kierowanego zdarzenia przy użyciu dane zdarzenia, które jest dostępne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody, mimo że jest to wirtualne, mają domyślną implementację, który wywołuje zdarzenie.  
  
 To na * implementacji metody jest przeznaczona do zgłoszenia zdarzenia i tej samej implementacji metody jest wywoływana wewnętrznie, aby zgłosić zdarzenie po <xref:System.Windows.UIElement.IsFocused%2A> zmiany wartości właściwości. Ta implementacja różni się od niektórych innych [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] na * implementacji, które zapewniają tylko wygodny sposób, aby dodać klasę obsługi dla tego zdarzenia.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku braku zamierzonego i nietypowych potrzebę nie wywoływanie zdarzeń fokusu, upewnij się, że wdrożenie wywołuje implementacji podstawowej. W przeciwnym razie <see cref="E:System.Windows.UIElement.LostFocus" /> zdarzenie nie jest wywoływane podczas operacji typowych użytkownika, które zwykle Ustaw fokus w tym elemencie. Jeśli nie chcesz, aby Twoje element ma być focusable, użytkownik może uniemożliwić element focusable przez ustawienie <see cref="P:System.Windows.UIElement.Focusable" /> do <see langword="false" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnLostMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnLostStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnLostTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Udostępnia klasę obsługi <see cref="E:System.Windows.UIElement.LostTouchCapture" /> kierowanego zdarzenia, gdy ten element utraci Przechwytywanie touch.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnLostTouchCapture%2A> Metoda ma domyślnej implementacji. Zastąpienie <xref:System.Windows.UIElement.OnLostTouchCapture%2A> w klasie pochodnej w celu obsługi <xref:System.Windows.UIElement.LostTouchCapture> zdarzeń. Pamiętaj wywołać klasy podstawowej <xref:System.Windows.UIElement.OnLostTouchCapture%2A> metody, która podstawowa klasy odbierać zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit&#xA;override this.OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit" Usage="uIElement.OnManipulationBoundaryFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia.</param>
        <summary>Wywoływane, gdy <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> Metoda ma domyślnej implementacji. Zastąpienie <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> w klasie pochodnej w celu obsługi <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> zdarzeń. Pamiętaj wywołać <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> metody klasy podstawowej, która podstawowa klasy odbierać zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationCompleted(class System.Windows.Input.ManipulationCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationCompleted (e As ManipulationCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationCompleted(System::Windows::Input::ManipulationCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationCompleted : System.Windows.Input.ManipulationCompletedEventArgs -&gt; unit&#xA;override this.OnManipulationCompleted : System.Windows.Input.ManipulationCompletedEventArgs -&gt; unit" Usage="uIElement.OnManipulationCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia.</param>
        <summary>Wywoływane, gdy <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationCompleted%2A> Metoda ma domyślnej implementacji. Zastąpienie <xref:System.Windows.UIElement.OnManipulationCompleted%2A> w klasie pochodnej w celu obsługi <xref:System.Windows.UIElement.ManipulationCompleted> zdarzeń. Pamiętaj wywołać <xref:System.Windows.UIElement.OnManipulationCompleted%2A> metody klasy podstawowej, która podstawowa klasy odbierać zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationDelta">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationDelta(class System.Windows.Input.ManipulationDeltaEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationDelta (e As ManipulationDeltaEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationDelta(System::Windows::Input::ManipulationDeltaEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationDelta : System.Windows.Input.ManipulationDeltaEventArgs -&gt; unit&#xA;override this.OnManipulationDelta : System.Windows.Input.ManipulationDeltaEventArgs -&gt; unit" Usage="uIElement.OnManipulationDelta e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationDeltaEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia.</param>
        <summary>Wywoływane, gdy <see cref="E:System.Windows.UIElement.ManipulationDelta" /> zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationDelta%2A> Metoda ma domyślnej implementacji. Zastąpienie <xref:System.Windows.UIElement.OnManipulationDelta%2A> w klasie pochodnej w celu obsługi <xref:System.Windows.UIElement.ManipulationDelta> zdarzeń. Pamiętaj wywołać <xref:System.Windows.UIElement.OnManipulationDelta%2A> metody klasy podstawowej, która podstawowa klasy odbierać zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationInertiaStarting(class System.Windows.Input.ManipulationInertiaStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationInertiaStarting (e As ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationInertiaStarting(System::Windows::Input::ManipulationInertiaStartingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationInertiaStarting : System.Windows.Input.ManipulationInertiaStartingEventArgs -&gt; unit&#xA;override this.OnManipulationInertiaStarting : System.Windows.Input.ManipulationInertiaStartingEventArgs -&gt; unit" Usage="uIElement.OnManipulationInertiaStarting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationInertiaStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia.</param>
        <summary>Wywoływane, gdy <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> Metoda ma domyślnej implementacji. Zastąpienie <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> w klasie pochodnej w celu obsługi <xref:System.Windows.UIElement.ManipulationInertiaStarting> zdarzeń. Pamiętaj wywołać <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> metody klasy podstawowej, która podstawowa klasy odbierać zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarted(class System.Windows.Input.ManipulationStartedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarted (e As ManipulationStartedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarted(System::Windows::Input::ManipulationStartedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationStarted : System.Windows.Input.ManipulationStartedEventArgs -&gt; unit&#xA;override this.OnManipulationStarted : System.Windows.Input.ManipulationStartedEventArgs -&gt; unit" Usage="uIElement.OnManipulationStarted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia.</param>
        <summary>Wywoływane, gdy <see cref="E:System.Windows.UIElement.ManipulationStarted" /> zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationStarted%2A> Metoda ma domyślnej implementacji. Zastąpienie <xref:System.Windows.UIElement.OnManipulationStarted%2A> w klasie pochodnej w celu obsługi <xref:System.Windows.UIElement.ManipulationStarted> zdarzeń. Pamiętaj wywołać <xref:System.Windows.UIElement.OnManipulationStarted%2A> metody klasy podstawowej, która podstawowa klasy odbierać zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarting(class System.Windows.Input.ManipulationStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarting (e As ManipulationStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarting(System::Windows::Input::ManipulationStartingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationStarting : System.Windows.Input.ManipulationStartingEventArgs -&gt; unit&#xA;override this.OnManipulationStarting : System.Windows.Input.ManipulationStartingEventArgs -&gt; unit" Usage="uIElement.OnManipulationStarting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Udostępnia klasę obsługi <see cref="E:System.Windows.UIElement.ManipulationStarting" /> kierowanego zdarzenia, gdy procesor manipulowania jest pierwszy utworzony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationStarting%2A> Metoda ma domyślnej implementacji. Zastąpienie <xref:System.Windows.UIElement.OnManipulationStarting%2A> w klasie pochodnej w celu obsługi <xref:System.Windows.UIElement.ManipulationStarting> zdarzeń. Pamiętaj wywołać klasy podstawowej <xref:System.Windows.UIElement.OnManipulationStarting%2A> metody, która podstawowa klasy odbierać zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Te dane zdarzeń raporty szczegółowe informacje o został naciśnięty przycisk myszy i stanie obsłużone.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.MouseDown" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przycisk myszy również są obsługiwane przez dedykowane Menedżera wejściowego. Inne funkcje programowania, które zależą od przycisku myszy, takich jak dane wejściowe i polecenia powiązań, może wywołać programy obsługi dla akcji przed jest uwidaczniany jako akcja przycisku myszy ogólne. Te dane wejściowe znacznik funkcje systemu <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzeń jako obsługiwany, <xref:System.Windows.UIElement.OnMouseDown%2A> nie jest wywoływany.  
  
 Jeśli używasz obsługi tej klasy można oznaczyć zdarzenia jako obsługiwane potencjalnie wpływ następujące zdarzenia: <xref:System.Windows.UIElement.MouseLeftButtonDown> i <xref:System.Windows.UIElement.MouseRightButtonDown>. Jedną z tych zdarzeń może zostać zgłoszone w elemencie odbierającą podczas <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> odebrania.  
  
 Po zaznaczeniu tego zdarzenia jako obsługiwane w klasie obsługi pojawienia się nadal subevents; jednak przekazują obsługiwanego stanu w danych zdarzenia. Jeśli zdarzenie jest obsługiwane w obsłudze klasy, chyba że jawnie używać wystąpienia obsługi subevents nie są wywoływane <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> z `handledEventsToo` `true` aby można było dołączyć programów obsługi. Obsługę klas również nie wywoływanych chyba, że zarejestrowano obsługę tych klas z <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> podpisu z `handledEventsToo` `true`. Obsługa <xref:System.Windows.UIElement.OnMouseDown%2A>, są podejrzeń programu obsługi klasy wyjaśnić wszystkie możliwe myszy w dół akcje. Takie zachowanie może być niepożądane; Dlatego należy zachować ostrożność, korzystając z tej metody wirtualnej do oznaczenia zdarzeń jako obsługi.  
  
 Każdego zdarzenia bezpośredniego specyficzne dla przycisku ma również wirtualnym * metody; należy rozważyć, czy zastępowanie te programy obsługi przycisk klasy może być bardziej odpowiednie.  
  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> dołączone zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji. Może wywołania podstawowego przed lub po Twoje specjalnej obsługi, w zależności od wymagań.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia, ze strategii routingu bezpośredniego. Oznaczenie zdarzenie, ponieważ obsługiwane jest nadal pomaga zapobiegać obsługi typowych wystąpienia (te, które nie określają `handledEventsToo`) wywoływanie.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> dołączone zdarzenie jest zgłaszane w tym elemencie. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji. Może wywołania podstawowego przed lub po Twoje specjalnej obsługi, w zależności od wymagań.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia, ze strategii routingu bezpośredniego. Oznaczenie zdarzenie, ponieważ obsługiwane jest nadal pomaga zapobiegać obsługi typowych wystąpienia (te, które nie określają `handledEventsToo`) wywoływanie.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłasza, że naciśnięto lewy przycisk myszy.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> kierowanego zdarzenia w tym elemencie. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseLeftButtonDown> Zdarzenie wydaje się propagacji trasa podróży, ale faktycznie przesyłane w sposób pośrednich. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> bazowe zdarzenie, dla którego jest kierowane bąbelków, a każdy <xref:System.Windows.UIElement> wzdłuż zdarzenia trasy używa identyczne Obsługa podnieść bezpośredniego kierowanego zdarzenia <xref:System.Windows.UIElement.MouseLeftButtonDown>. Mimo że można zaznaczyć <xref:System.Windows.UIElement.MouseLeftButtonDown> zdarzeń, jak zostało obsłużone dla celów tego elementu, obsługiwanego stanu nie widoczny przy obsłudze często z innymi elementami wzdłuż trasy zdarzenia. Jednak warto zostać oznaczone jako obsługiwany, aby zapobiec wystąpieniu ogólne programy obsługi zdarzenia (te, które nie określił `handledEventsToo`) wywoływanie.  
  
 Domyślna implementacja dla ogólnych myszy Obsługa zdarzeń w <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenia lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasy pochodnej. W konstruktorze statycznym klasy pochodnej, zarejestrować obsługi alternatywnych klasy dla <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Nie można zmienić zachowanie programu obsługi myszy <xref:System.Windows.UIElement> przez zastąpienie <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.  
  
 Alternatywnie mogą przesłaniać tę metodę, aby można było zmienić obsługi stanu myszy określonych zdarzeń. Czy chcesz wywoływać implementację podstawową zależy od danego scenariusza. Nie można wywołać podstawową wyłącza domyślne obsługi danych wejściowych dla tego zdarzenia myszy na klasy nadrzędnej, które również spodziewać się do wywołania <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>. Na przykład może pochodzić od <xref:System.Windows.Controls.Button> i zastąpić <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> w klasie pochodnej bez wywoływania Podstawowa implementacja; jednak to zastąpienie wyłącza <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia raporty zwolnienie lewego przycisku myszy.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> kierowanego zdarzenia osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseLeftButtonUp> Zdarzenie wydaje się propagacji trasa podróży, ale faktycznie przesyłane w sposób pośrednich. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> bazowe zdarzenie, dla którego jest kierowane bąbelków, a każdy <xref:System.Windows.UIElement> wzdłuż zdarzenia trasy używa identyczne Obsługa podnieść bezpośredniego kierowanego zdarzenia <xref:System.Windows.UIElement.MouseLeftButtonUp>. Mimo że można zaznaczyć <xref:System.Windows.UIElement.MouseLeftButtonUp> zdarzeń, jak zostało obsłużone dla celów tego elementu, obsługiwanego stanu nie widoczny przy obsłudze często z innymi elementami wzdłuż trasy zdarzenia. Jednak warto zostać oznaczone jako obsługiwany, aby zapobiec wystąpieniu ogólne programy obsługi zdarzenia (te, które nie określił `handledEventsToo`) wywoływanie.  
  
 Domyślna implementacja dla ogólnych myszy Obsługa zdarzeń w <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenia lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasy pochodnej. W konstruktorze statycznym klasy pochodnej, zarejestrować obsługi alternatywnych klasy dla <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Nie można zmienić zachowanie programu obsługi myszy <xref:System.Windows.UIElement> przez zastąpienie <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.MouseMove" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłasza, że naciśnięto prawy przycisk myszy.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> kierowanego zdarzenia osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseRightButtonDown> Zdarzenie wydaje się propagacji trasa podróży, ale faktycznie przesyłane w sposób pośrednich. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> bazowe zdarzenie, dla którego jest kierowane bąbelków, a każdy <xref:System.Windows.UIElement> wzdłuż zdarzenia trasy używa identyczne Obsługa podnieść bezpośredniego kierowanego zdarzenia <xref:System.Windows.UIElement.MouseRightButtonDown>. Mimo że można zaznaczyć <xref:System.Windows.UIElement.MouseRightButtonDown> zdarzeń, jak zostało obsłużone dla celów tego elementu, obsługiwanego stanu nie widoczny przy obsłudze często z innymi elementami wzdłuż trasy zdarzenia. Jednak warto zostać oznaczone jako obsługiwany, aby zapobiec wystąpieniu ogólne programy obsługi zdarzenia (te, które nie określił `handledEventsToo`) wywoływanie.  
  
 Domyślna implementacja dla ogólnych myszy Obsługa zdarzeń w <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenia lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasy pochodnej. W konstruktorze statycznym klasy pochodnej, zarejestrować obsługi alternatywnych klasy dla <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Nie można zmienić zachowanie programu obsługi myszy <xref:System.Windows.UIElement> przez zastąpienie <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.  
  
 Alternatywnie mogą przesłaniać tę metodę, aby można było zmienić obsługi stanu myszy określonych zdarzeń. Czy chcesz wywoływać implementację podstawową zależy od danego scenariusza. Nie można wywołać podstawową wyłącza domyślne obsługi danych wejściowych dla tego zdarzenia myszy na klasy nadrzędnej, które również spodziewać się do wywołania <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>. Na przykład może pochodzić od <xref:System.Windows.Controls.Control> i zastąpić <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> jednak w klasie pochodnej bez base wywołujący; to zastąpienie wyłącza kontekstu menu usług formantu, które są częścią z <xref:System.Windows.Controls.Control> zachowanie domyślne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia raporty zwolnienie prawego przycisku myszy.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> kierowanego zdarzenia osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseRightButtonUp> Zdarzenie wydaje się propagacji trasa podróży, ale faktycznie przesyłane w sposób pośrednich. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> bazowe zdarzenie, dla którego jest kierowane bąbelków, a każdy <xref:System.Windows.UIElement> wzdłuż zdarzenia trasy używa identyczne Obsługa podnieść bezpośredniego kierowanego zdarzenia <xref:System.Windows.UIElement.MouseRightButtonUp>. Mimo że można zaznaczyć <xref:System.Windows.UIElement.MouseRightButtonUp> zdarzeń, jak zostało obsłużone dla celów tego elementu, obsługiwanego stanu nie widoczny przy obsłudze często z innymi elementami wzdłuż trasy zdarzenia. Jednak warto zostać oznaczone jako obsługiwany, aby zapobiec wystąpieniu ogólne programy obsługi zdarzenia (te, które nie określił `handledEventsToo`) wywoływanie.  
  
 Domyślna implementacja dla ogólnych myszy Obsługa zdarzeń w <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenia lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasy pochodnej. W konstruktorze statycznym klasy pochodnej, zarejestrować obsługi alternatywnych klasy dla <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Nie można zmienić zachowanie programu obsługi myszy <xref:System.Windows.UIElement> przez zastąpienie <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia raporty, wydanej przycisk myszy.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.MouseUp" /> kierowanego zdarzenia osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przycisk myszy również są obsługiwane przez dedykowane Menedżera wejściowego. Inne funkcje programowania, które zależą od przycisku myszy, takich jak dane wejściowe i polecenia powiązań, może wywołać programy obsługi dla akcji przed jest uwidaczniany jako akcja przycisku myszy ogólne. Te dane wejściowe znacznik funkcje systemu <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> zdarzeń jako obsługiwany, <xref:System.Windows.UIElement.OnMouseUp%2A> nie jest wywoływany.  
  
 Jeśli używasz obsługi tej klasy można oznaczyć zdarzenia jako obsługiwane potencjalnie wpływ następujące zdarzenia: <xref:System.Windows.UIElement.MouseLeftButtonUp> i <xref:System.Windows.UIElement.MouseRightButtonUp>. Jedną z tych zdarzeń może zostać wywołane w elemencie odbierania podczas <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> odebrania.  
  
 Po zaznaczeniu tego zdarzenia jako obsługiwane w klasie obsługi pojawienia się nadal subevents; jednak przekazują obsługiwanego stanu w danych zdarzenia. Jeśli zdarzenie jest obsługiwane w obsłudze klasy, chyba że jawnie używać wystąpienia obsługi subevents nie są wywoływane <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> z `handledEventsToo` `true` aby można było dołączyć programów obsługi. Obsługę klas również nie wywoływanych chyba, że zarejestrowano obsługę tych klas z <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> podpisu z `handledEventsToo` `true`. Obsługa <xref:System.Windows.UIElement.OnMouseUp%2A>, są podejrzeń programu obsługi klasy wyjaśnić wszystkie możliwe myszy zapasowej akcje. Takie zachowanie może być niepożądane; Dlatego należy zachować ostrożność, korzystając z tej metody wirtualnej do oznaczenia zdarzeń jako obsługi.  
  
 Każdego zdarzenia bezpośredniego specyficzne dla przycisku ma również wirtualnym * metody; należy rozważyć, czy zastępowanie te programy obsługi przycisk klasy może być bardziej odpowiednie.  
  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.PreviewDrop" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement.OnPreviewGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.GiveFeedbackEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnPreviewGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.KeyEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnPreviewKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.KeyEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnPreviewLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłasza, że zostały naciśnięte przyciski myszy jeden lub więcej.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> dołączone kierowanego zdarzenia osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przycisk myszy również są obsługiwane przez dedykowane Menedżera wejściowego. Inne funkcje programowania, które zależą od przycisku myszy, takich jak dane wejściowe i polecenia powiązań, może wywołać programy obsługi dla akcji przed jest uwidaczniany jako akcja przycisku myszy ogólne. Te dane wejściowe znacznik funkcje systemu <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> zdarzeń jako obsługiwany, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> nie jest wywoływany.  
  
 Jeśli używasz obsługi tej klasy można oznaczyć zdarzenia jako obsługiwane potencjalnie wpływ następujące zdarzenia: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> i <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>. Jedną z tych zdarzeń może zostać zgłoszone w elemencie odbierającą podczas <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> odebrania.  
  
 Po zaznaczeniu tego zdarzenia jako obsługiwane w klasie obsługi pojawienia się nadal subevents; jednak przekazują obsługiwanego stanu w danych zdarzenia. Jeśli zdarzenie jest obsługiwane w obsłudze klasy, chyba że jawnie używać wystąpienia obsługi subevents nie są wywoływane <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> z `handledEventsToo` `true` aby można było dołączyć programów obsługi. Obsługę klas również nie wywoływanych chyba, że zarejestrowano obsługę tych klas z <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> podpisu z `handledEventsToo` `true`. Obsługa <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>, są podejrzeń programu obsługi klasy wyjaśnić wszystkie możliwe myszy w dół akcje. Takie zachowanie może być niepożądane; Dlatego należy zachować ostrożność, korzystając z tej metody wirtualnej do oznaczenia zdarzeń jako obsługi.  
  
 Każdego zdarzenia bezpośredniego specyficzne dla przycisku ma również wirtualnym * metody; należy rozważyć, czy zastępowanie te programy obsługi przycisk klasy może być bardziej odpowiednie.  
  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłasza, że naciśnięto lewy przycisk myszy.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> kierowanego zdarzenia osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> Zdarzenie wydaje się podróży trasy tunelowania, ale faktycznie przesyłane w sposób pośrednich. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> jest podstawowy zdarzenie, które jest kierowane tunelu i każde <xref:System.Windows.UIElement> wzdłuż zdarzenia trasy używa identyczne Obsługa podnieść bezpośredniego kierowanego zdarzenia <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>. Mimo że można zaznaczyć <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> zdarzeń, jak zostało obsłużone dla celów tego elementu, obsługiwanego stanu nie widoczny przy obsłudze często z innymi elementami wzdłuż trasy zdarzenia. Jednak warto zostać oznaczone jako obsługiwany, aby zapobiec wystąpieniu ogólne programy obsługi zdarzenia (te, które nie określił `handledEventsToo`) wywoływanie.  
  
 Domyślna implementacja dla ogólnych myszy Obsługa zdarzeń w <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenia lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasy pochodnej. W konstruktorze statycznym klasy pochodnej, zarejestrować obsługi alternatywnych klasy dla <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Nie można zmienić zachowanie programu obsługi myszy <xref:System.Windows.UIElement> przez zastąpienie <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.  
  
 Alternatywnie mogą przesłaniać tę metodę, aby można było zmienić obsługi stanu myszy określonych zdarzeń. Czy chcesz wywoływać implementację podstawową zależy od danego scenariusza. Nie można wywołać podstawową wyłącza domyślne obsługi danych wejściowych dla tego zdarzenia myszy na klasy nadrzędnej, które również spodziewać się do wywołania <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>. Na przykład może pochodzić od <xref:System.Windows.Controls.Button> i zastąpić <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> w klasie pochodnej bez wywoływania Podstawowa implementacja; jednak to zastąpienie wyłącza <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzeń.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia raporty zwolnienie lewego przycisku myszy.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> kierowanego zdarzenia osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> Zdarzenie wydaje się podróży trasy tunelowania, ale faktycznie przesyłane w sposób pośrednich. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> jest podstawowy zdarzenie, które jest kierowane tunelu i każde <xref:System.Windows.UIElement> wzdłuż zdarzenia trasy używa identyczne Obsługa podnieść bezpośredniego kierowanego zdarzenia <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>. Mimo że można zaznaczyć <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> zdarzeń, jak zostało obsłużone dla celów tego elementu, obsługiwanego stanu nie widoczny przy obsłudze często z innymi elementami wzdłuż trasy zdarzenia. Jednak warto zostać oznaczone jako obsługiwany, aby zapobiec wystąpieniu ogólne programy obsługi zdarzenia (te, które nie określił `handledEventsToo`) wywoływanie.  
  
 Domyślna implementacja dla ogólnych myszy Obsługa zdarzeń w <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenia lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasy pochodnej. W konstruktorze statycznym klasy pochodnej, zarejestrować obsługi alternatywnych klasy dla <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Nie można zmienić zachowanie programu obsługi myszy <xref:System.Windows.UIElement> przez zastąpienie <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłasza, że naciśnięto prawy przycisk myszy.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> kierowanego zdarzenia osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> Zdarzenie wydaje się podróży trasy tunelowania, ale faktycznie przesyłane w sposób pośrednich. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> jest podstawowy zdarzenie, które jest kierowane tunelu i każde <xref:System.Windows.UIElement> wzdłuż zdarzenia trasy używa identyczne Obsługa podnieść bezpośredniego kierowanego zdarzenia <xref:System.Windows.UIElement.MouseRightButtonDown>. Mimo że można zaznaczyć <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> zdarzeń, jak zostało obsłużone dla celów tego elementu, obsługiwanego stanu nie widoczny przy obsłudze często z innymi elementami wzdłuż trasy zdarzenia. Jednak warto zostać oznaczone jako obsługiwany, aby zapobiec wystąpieniu ogólne programy obsługi zdarzenia (te, które nie określił `handledEventsToo`) wywoływanie.  
  
 Domyślna implementacja dla ogólnych myszy Obsługa zdarzeń w <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenia lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasy pochodnej. W konstruktorze statycznym klasy pochodnej, zarejestrować obsługi alternatywnych klasy dla <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Nie można zmienić zachowanie programu obsługi myszy <xref:System.Windows.UIElement> przez zastąpienie <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.  
  
 Alternatywnie mogą przesłaniać tę metodę, aby można było zmienić obsługi stanu myszy określonych zdarzeń. Czy chcesz wywoływać implementację podstawową zależy od danego scenariusza. Nie można wywołać podstawową wyłącza domyślne obsługi danych wejściowych dla tego zdarzenia myszy na klasy nadrzędnej, które również spodziewać się do wywołania <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>. Na przykład może pochodzić od <xref:System.Windows.Controls.Control> i zastąpić <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> jednak w klasie pochodnej bez base wywołujący; to zastąpienie wyłącza kontekstu menu usług formantu, które są częścią z <xref:System.Windows.Controls.Control> zachowanie domyślne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia raporty zwolnienie prawego przycisku myszy.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> kierowanego zdarzenia osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> Zdarzenie wydaje się podróży trasy tunelowania, ale faktycznie przesyłane w sposób pośrednich. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> jest podstawowy zdarzenie, które jest kierowane tunelu i każde <xref:System.Windows.UIElement> wzdłuż zdarzenia trasy używa identyczne Obsługa podnieść bezpośredniego kierowanego zdarzenia <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Mimo że można zaznaczyć <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> zdarzeń, jak zostało obsłużone dla celów tego elementu, obsługiwanego stanu nie widoczny przy obsłudze często z innymi elementami wzdłuż trasy zdarzenia. Jednak warto zostać oznaczone jako obsługiwany, aby zapobiec wystąpieniu ogólne programy obsługi zdarzenia (te, które nie określił `handledEventsToo`) wywoływanie.  
  
 Domyślna implementacja dla ogólnych myszy Obsługa zdarzeń w <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenia lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasy pochodnej. W konstruktorze statycznym klasy pochodnej, zarejestrować obsługi alternatywnych klasy dla <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Nie można zmienić zachowanie programu obsługi myszy <xref:System.Windows.UIElement> przez zastąpienie <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia raporty wydane jednego lub więcej przycisków myszy.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przycisk myszy również są obsługiwane przez dedykowane Menedżera wejściowego. Inne funkcje programowania, które zależą od przycisku myszy, takich jak dane wejściowe i polecenia powiązań, może wywołać programy obsługi dla akcji przed jest uwidaczniany jako akcja przycisku myszy ogólne. Te dane wejściowe znacznik funkcje systemu <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> zdarzeń jako obsługiwany, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> nie jest wywoływany.  
  
 Jeśli używasz obsługi tej klasy można oznaczyć zdarzenia jako obsługiwane potencjalnie wpływ następujące zdarzenia: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> i <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Jedną z tych zdarzeń może zostać wywołane w elemencie odbierania podczas <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> odebrania.  
  
 Po zaznaczeniu tego zdarzenia jako obsługiwane w klasie obsługi pojawienia się nadal subevents; jednak przekazują obsługiwanego stanu w danych zdarzenia. Jeśli zdarzenie jest obsługiwane w obsłudze klasy, chyba że jawnie używać wystąpienia obsługi subevents nie są wywoływane <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> z `handledEventsToo` `true` aby można było dołączyć programów obsługi. Obsługę klas również nie wywoływanych chyba, że zarejestrowano obsługę tych klas z <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> podpisu z `handledEventsToo` `true`. Obsługa <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>, są podejrzeń programu obsługi klasy wyjaśnić wszystkie możliwe myszy zapasowej akcje. Takie zachowanie może być niepożądane; Dlatego należy zachować ostrożność, korzystając z tej metody wirtualnej do oznaczenia zdarzeń jako obsługi.  
  
 Każdego zdarzenia bezpośredniego specyficzne dla przycisku ma również wirtualnym * metody; należy rozważyć, czy zastępowanie te programy obsługi przycisk klasy może być bardziej odpowiednie.  
  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement.OnPreviewQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.QueryContinueDragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusDownEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement.OnPreviewTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane. Inny scenariusz, który jest specjalnie z myślą o Podgląd zdarzeń jest do oznaczania ich obsługi tak, aby pasujące propagacji obsługę klas nie są wywoływane.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.UIElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Udostępnia klasę obsługi <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> kierowanego zdarzenia, gdy touch naciśnie tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> Metoda ma domyślnej implementacji. Zastąpienie <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> w klasie pochodnej w celu obsługi <xref:System.Windows.UIElement.PreviewTouchDown> zdarzeń. Pamiętaj wywołać klasy podstawowej <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> metody, która podstawowa klasy odbierać zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Udostępnia klasę obsługi <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> kierowanego zdarzenia, która występuje po przemieszczeniu touch znajduje się wewnątrz tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> Metoda ma domyślnej implementacji. Zastąpienie <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> w klasie pochodnej w celu obsługi <xref:System.Windows.UIElement.PreviewTouchMove> zdarzeń. Pamiętaj wywołać klasy podstawowej <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> metody, która podstawowa klasy odbierać zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Udostępnia klasę obsługi <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> kierowanego zdarzenia, która występuje po zwolnieniu touch wewnątrz tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> Metoda ma domyślnej implementacji. Zastąpienie <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> w klasie pochodnej w celu obsługi <xref:System.Windows.UIElement.PreviewTouchUp> zdarzeń. Pamiętaj wywołać klasy podstawowej <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> metody, która podstawowa klasy odbierać zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement.OnQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.QueryContinueDragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit&#xA;override this.OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit" Usage="uIElement.OnQueryCursor e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnRender">
      <MemberSignature Language="C#" Value="protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRender(class System.Windows.Media.DrawingContext drawingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRender(System::Windows::Media::DrawingContext ^ drawingContext);" />
      <MemberSignature Language="F#" Value="abstract member OnRender : System.Windows.Media.DrawingContext -&gt; unit&#xA;override this.OnRender : System.Windows.Media.DrawingContext -&gt; unit" Usage="uIElement.OnRender drawingContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawingContext" Type="System.Windows.Media.DrawingContext" />
      </Parameters>
      <Docs>
        <param name="drawingContext">Instrukcje rysowania określonego elementu. Ten kontekst został dostarczony do systemu układu.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, uczestniczy w operacjach renderowania, które są kierowane przez system układu. Instrukcje renderowania dla tego elementu nie są używane, bezpośrednio po wywołaniu tej metody, a zamiast tego są zachowywane do użytku później asynchroniczne układ i rysowanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma żadnej implementacji domyślnej <xref:System.Windows.UIElement> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje możliwości implementacji dla klasy pochodnej panelu.  
  
 [!code-csharp[LightWeightCustomPanel#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LightWeightCustomPanel/CSharp/OffsetPanel.cs#1)]
 [!code-vb[LightWeightCustomPanel#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LightWeightCustomPanel/visualbasic/offsetpanel.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> Metodę można przesłonić można dodać dodatkowe elementy graficzne (wcześniej zdefiniowane w drzewa logicznego) do renderowanego elementu, takie jak efekty lub modułu definiowania układu kodu. A <see cref="T:System.Windows.Media.DrawingContext" /> obiekt jest przekazywany jako argument, który udostępnia metody Rysowanie kształtów, tekst, obrazy lub wideo.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRenderSizeChanged (info As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ info);" />
      <MemberSignature Language="F#" Value="abstract member OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit&#xA;override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="uIElement.OnRenderSizeChanged info" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="info">Spakowane parametrów (<see cref="T:System.Windows.SizeChangedInfo" />), w tym rozmiary stary i nowy i które wymiaru faktycznie zmiany.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, uczestniczy w operacjach renderowania, które są kierowane przez system układu. Ta metoda jest wywoływana po zaktualizowaniu układ i przed renderowaniem, jeśli element <see cref="P:System.Windows.UIElement.RenderSize" /> został zmieniony w wyniku aktualizacji układu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Typowy element poziomie struktury WPF używa implementację przesłonięcia z <xref:System.Windows.FrameworkElement>. <xref:System.Windows.FrameworkElement> Unieważnia implementacji <xref:System.Windows.FrameworkElement.Width%2A> i <xref:System.Windows.FrameworkElement.Height%2A> właściwości i uchwytów podstawy remaking układu. Zastępowanie <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> na <xref:System.Windows.UIElement> poziomu oznacza to, że implementacji elementu celowo nie używa implementacji poziomie struktury WPF, w związku z tym danego elementu musi obsługiwać logiki układu więcej bezpośrednio, zwykle przez zapisywanie układ systemu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement.OnStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusDownEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusDown" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> dołączone zdarzenie jest zgłaszane przez ten element. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji. Może wywołania podstawowego przed lub po Twoje specjalnej obsługi, w zależności od wymagań.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Oznaczenie zdarzenie, ponieważ obsługiwane jest nadal pomaga zapobiegać obsługi typowych wystąpienia (te, które nie określają `handledEventsToo`) wywoływanie.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> dołączone zdarzenie jest zgłaszane przez ten element. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji. Może wywołania podstawowego przed lub po Twoje specjalnej obsługi, w zależności od wymagań.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Oznaczenie zdarzenie, ponieważ obsługiwane jest nadal pomaga zapobiegać obsługi typowych wystąpienia (te, które nie określają `handledEventsToo`) wywoływanie.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusMove" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement.OnStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.Stylus.StylusUp" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement.OnTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy jest to nieobsługiwany <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> dołączone zdarzenie osiągnie element trasę pochodzący z tej klasy. Zaimplementuj tę metodę, aby dodać klasę obsługi dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma domyślnej implementacji. Ponieważ klasa pośrednicząca w dziedziczenia mogą zaimplementować tę metodę, zalecamy wywoływać implementację podstawową w implementacji.  
  
 Celem tej metody jest podobny do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorzec zdarzeń na * metody: Ta metoda zapewnia sposób obsługi pasujące zdarzenie z klasy pochodnej, ustanawiając obsługi zamiast obsługi wystąpienia klasy. W takim przypadku pasujące zdarzenie jest kierowanego zdarzenia. Wzorzec implementacji metod On * są różne dla kierowane zdarzenia, ponieważ kierowanego zdarzenia może być zgłaszany przez element podrzędny, który nie musi być element, który wywoła programów obsługi. W związku z tym implementacji należy zbadać właściwości źródła danych zdarzenia. Go nie należy próbować reraise zdarzeń w większości przypadków.  
  
 Tej metody lub rejestrując klasy programów obsługi z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, pochodzi z klasy <xref:System.Windows.UIElement> można wywoływać metod obsługi Klasa prywatna, po odebraniu zdarzenia wzdłuż trasy zdarzenia. Jeden scenariusz, w której jest odpowiednia Obsługa klasy jest manipulować danymi zdarzeń i oznacz kierowanego zdarzenia, ponieważ obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Udostępnia klasę obsługi <see cref="E:System.Windows.UIElement.TouchDown" /> kierowanego zdarzenia, gdy touch naciśnie wewnątrz tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchDown%2A> Metoda ma domyślnej implementacji. Zastąpienie <xref:System.Windows.UIElement.OnTouchDown%2A> w klasie pochodnej w celu obsługi <xref:System.Windows.UIElement.TouchDown> zdarzeń. Pamiętaj wywołać klasy podstawowej <xref:System.Windows.UIElement.OnTouchDown%2A> metody, która podstawowa klasy odbierać zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Udostępnia klasę obsługi <see cref="E:System.Windows.UIElement.TouchEnter" /> kierowanego zdarzenia, która występuje po przemieszczeniu touch z zewnątrz do wewnątrz granic tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchEnter%2A> Metoda ma domyślnej implementacji. Zastąpienie <xref:System.Windows.UIElement.OnTouchEnter%2A> w klasie pochodnej w celu obsługi <xref:System.Windows.UIElement.TouchEnter> zdarzeń. Pamiętaj wywołać klasy podstawowej <xref:System.Windows.UIElement.OnTouchEnter%2A> metody, która podstawowa klasy odbierać zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Udostępnia klasę obsługi <see cref="E:System.Windows.UIElement.TouchLeave" /> kierowanego zdarzenia, która występuje po przemieszczeniu touch z wnętrza poza granicami tego <see cref="T:System.Windows.UIElement" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchLeave%2A> Metoda ma domyślnej implementacji. Zastąpienie <xref:System.Windows.UIElement.OnTouchLeave%2A> w klasie pochodnej w celu obsługi <xref:System.Windows.UIElement.TouchLeave> zdarzeń. Pamiętaj wywołać klasy podstawowej <xref:System.Windows.UIElement.OnTouchLeave%2A> metody, która podstawowa klasy odbierać zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Udostępnia klasę obsługi <see cref="E:System.Windows.UIElement.TouchMove" /> kierowanego zdarzenia, która występuje po przemieszczeniu touch znajduje się wewnątrz tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchMove%2A> Metoda ma domyślnej implementacji. Zastąpienie <xref:System.Windows.UIElement.OnTouchMove%2A> w klasie pochodnej w celu obsługi <xref:System.Windows.UIElement.TouchMove> zdarzeń. Pamiętaj wywołać klasy podstawowej <xref:System.Windows.UIElement.OnTouchMove%2A> metody, która podstawowa klasy odbierać zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Udostępnia klasę obsługi <see cref="E:System.Windows.UIElement.TouchUp" /> kierowanego zdarzenia, która występuje po zwolnieniu touch wewnątrz tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchUp%2A> Metoda ma domyślnej implementacji. Zastąpienie <xref:System.Windows.UIElement.OnTouchUp%2A> w klasie pochodnej w celu obsługi <xref:System.Windows.UIElement.TouchUp> zdarzeń. Pamiętaj wywołać klasy podstawowej <xref:System.Windows.UIElement.OnTouchUp%2A> metody, która podstawowa klasy odbierać zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="uIElement.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">Element nadrzędny poprzedniej. Może to być dostarczone jako <see langword="null" /> Jeśli <see cref="T:System.Windows.DependencyObject" /> nie ma element nadrzędny wcześniej.</param>
        <summary>Wywoływane, gdy element nadrzędny tego <see cref="T:System.Windows.UIElement" /> raporty zmiany do elementu nadrzędnego visual podstawowej.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Jeśli przesłonić tę metodę, zawsze wywoływać implementację podstawową. Domyślna implementacja podstawowej wykonuje niektóre wewnętrzny konserwacji właściwości dziedziczone wstecznego stanu. Nie można wywoływać implementację podstawową spowoduje unieważnienie tego stanu.  Ta metoda zastępuje <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />. <see cref="T:System.Windows.FrameworkElement" /> i <see cref="T:System.Windows.Window" /> zarówno także zastępować <see cref="T:System.Windows.UIElement" /> implementacja <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />, i <see cref="T:System.Windows.Window" /> uszczelnienia go.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public double Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Opacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Opacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Opacity As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Opacity { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Opacity : double with get, set" Usage="System.Windows.UIElement.Opacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia współczynnik przezroczystości do całej <see cref="T:System.Windows.UIElement" /> gdy jest on renderowany w [! INCLUDE[TLA#tla_ui](~/includes/tlasharptla-UI-MD.MD)].  Jest to właściwość zależności.</summary>
        <value>Współczynnik przezroczystości. Nieprzezroczystość domyślny to 1.0. Oczekiwanych wartości należą do zakresu od 0,0 do 1,0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna 1.0 to domyślne, dostarczone przez początkowe metadane ta właściwość zależności na <xref:System.Windows.UIElement> klasy. Inne klasy pochodne mogą potencjalnie zmienić wartość domyślną przez zastępowanie metadanych z wewnątrz ich konstruktora klasy.  
  
 Wartość <xref:System.Windows.UIElement.Opacity%2A> nie będzie stosowane do rzeczywistego układu, chyba, że element jest również widoczna (<xref:System.Windows.UIElement.IsVisible%2A> jest `true`).  
  
 <xref:System.Windows.UIElement.Opacity%2A> została zastosowana z elementy nadrzędne w niżej na drzewie element na elementy podrzędne, ale widoczne skutków zagnieżdżonych nieprzezroczystość ustawienia nie są wskazane w wartości właściwości elementów podrzędnych indywidualnych. Na przykład, jeśli lista ma nieprzezroczystość 50% (0,5) i jeden z jego elementów listy ma własną nieprzezroczystość ustawioną 20% (0,2), net nieprzezroczystość widoczne dla tego elementu listy będzie renderowany tak, jakby była 10% (0,1), ale wartość właściwości elementu listy <xref:System.Windows.UIElement.Opacity%2A> nadal będzie właściwości  0,2 po otrzymaniu kwerendy.  
  
 Nawet jeśli nieprzezroczystość zadeklarowane lub obliczane to 0, element nadal uczestniczy w zdarzeniach wejściowych i poleceń i jest potencjalnie focusable. Ten aspekt mogą być przydatne dla wystąpienia obiektu nieprzezroczystość zero (na przykład kształtu) można używać maskowania obiektów z elementami przezroczysty. Obiekt zero nieprzezroczystość następnie może obsłużyć zdarzenia wejściowego przetwarzania dla podstawowej obszaru. Jednak `Background` lub `Fill` obiektu lub kształt powinien mieć ustawioną wartość, nawet jeśli jest ona <xref:System.Windows.Media.Brushes.Transparent%2A>, w przeciwnym razie testowania trafień nie jest włączona i zdarzenia nie są odbierane.  
  
<a name="dependencyPropertyInfo_Opacity"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.OpacityProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.OpacityMask" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMask">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush OpacityMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush OpacityMask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.OpacityMask" />
      <MemberSignature Language="VB.NET" Value="Public Property OpacityMask As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ OpacityMask { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OpacityMask : System.Windows.Media.Brush with get, set" Usage="System.Windows.UIElement.OpacityMask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia maskę przezroczystości jako <see cref="T:System.Windows.Media.Brush" /> implementację, która jest stosowana do dowolnego maskowania kanału alfa dla renderowanej zawartości tego elementu.  Jest to właściwość zależności.</summary>
        <value>Pędzla do użycia na potrzeby nieprzezroczystość maskowania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość używa tylko niezależnie od kanału alfa wartość jest podana <xref:System.Windows.Media.Brush>. Inne kanały <xref:System.Windows.Media.Brush>do renderowania zawartości (czerwony, zielony lub niebieski) są ignorowane.  
  
 Najbardziej typowym <xref:System.Windows.Media.Brush> dla tego celu jest <xref:System.Windows.Media.ImageBrush>, której można użyć różnych technik, takich jak winiet maskowania fotografii. Ale zdefiniowanych <xref:System.Windows.Media.Brush> (takie jak <xref:System.Windows.Media.LinearGradientBrush>) mogą być używane.  
  
 W [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], wartość tej właściwości można użyć składni wbudowanego, specyficzne dla każdego wdrożenia <xref:System.Windows.Media.Brush> klasy abstrakcyjnej. Aby uzyskać więcej informacji, zobacz [Malowanie z kolorami i przegląd gradienty](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md).  
  
<a name="dependencyPropertyInfo_OpacityMask"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.OpacityMaskProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 W poniższym przykładzie pokazano kod znaczników <xref:System.Windows.Media.ImageBrush> maskę przezroczystości stosowane do innego <xref:System.Windows.Controls.Image>.  
  
 [!code-xaml[OpacityMasksSnippet#UIElementOpacityMask](~/samples/snippets/csharp/VS_Snippets_Wpf/OpacityMasksSnippet/CS/ImageBrushExample.xaml#uielementopacitymask)]   
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Opacity" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMaskProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityMaskProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityMaskProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityMaskProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityMaskProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityMaskProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OpacityMaskProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.OpacityMaskProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.OpacityMask" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpacityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OpacityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.OpacityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.Opacity" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistId">
      <MemberSignature Language="C#" Value="public int PersistId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PersistId" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.PersistId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PersistId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PersistId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PersistId : int" Usage="System.Windows.UIElement.PersistId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("PersistId is an obsolete property and may be removed in a future release.  The value of this property is not defined.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która identyfikuje ten element.</summary>
        <value>Unikatowy identyfikator dla tego elementu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PersistId%2A> Unikatowy identyfikator każdego elementu. Element śledzi takie same <xref:System.Windows.UIElement.PersistId%2A> za każdym razem, gdy taka sama [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] jest ładowany (w tym reprezentacje binarny). Ten identyfikator jest używany wewnętrzny wymagania dotyczące ładowania, analizy i serializacji. Nie jest on przeznaczony do użycia przez kod aplikacji.  
  
 Ta właściwość nie ma żadnych relacji <xref:System.Object.GetHashCode%2A> wynik dla dowolnego danego wystąpienia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject&#xA;override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="uIElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">Kierunek przechodzenie żądanego fokus.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej zwraca element, który będzie fokusu dla kierunku przechodzenie określonego fokus bez faktycznie przeniesienie fokusu do tego elementu.</summary>
        <returns>Element otrzymałby fokus <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> zostały faktycznie wywołany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody tej klasy jest niekompletne i zawsze zwraca `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragEnter : System.Windows.DragEventHandler " Usage="member this.PreviewDragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie przeciągania z tego elementu jako element docelowy przeciągania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewDragEnter> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewDragEnter> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewDragEnterEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.DragEnter>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragLeave : System.Windows.DragEventHandler " Usage="member this.PreviewDragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie przeciągania z ten element to element źródłowy przeciągania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewDragLeave> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewDragLeave> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewDragLeaveEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.DragLeave>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragOver : System.Windows.DragEventHandler " Usage="member this.PreviewDragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie przeciągania z ten element to potencjalny element docelowy upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewDragOver> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewDragOver> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewDragOverEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.DragOver>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewDragOver%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewDragOver" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberSignature Language="F#" Value="member this.PreviewDrop : System.Windows.DragEventHandler " Usage="member this.PreviewDrop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie upuszczania z tego elementu jako element docelowy upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewDrop> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewDrop> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewDropEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.Drop>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewDrop%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewDrop" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy rozpoczęto operację przeciągania i upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewGiveFeedback> Zdarzeń umożliwia źródło zdarzeń przeciągnij, aby zmodyfikować wygląd wskaźnika myszy, aby przekazać opinię visual użytkownika podczas operacji przeciągania i upuszczania.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewGiveFeedback> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewGiveFeedback> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.GiveFeedback>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klawiatura ma fokus w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ to zdarzenie używa tunelowania routingu, element, który ma fokus może być elementu podrzędnego zamiast elementu którego program obsługi zdarzeń faktycznie jest podłączony. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w danych zdarzeń, aby określić rzeczywistego elementu, który ma fokus.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.GotKeyboardFocus>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu klawisza, gdy fokus jest w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa klucza współdziała z innymi funkcjami platformy, takich jak kompozycji droższe i tekst. <xref:System.Windows.UIElement.KeyDown> Zdarzenie jest zdarzenie wprowadzania tekstu niższego poziomu, które mogą nie działać zgodnie z oczekiwaniami w niektórych formantów. Jest tak, ponieważ niektóre formanty mają składania kontroli lub klasy obsługi udostępnia wyższego poziomu wersji tekst wejściowy obsługi i zdarzenia związane z.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewKeyDown> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewKeyDown> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewKeyDownEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.KeyDown>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu klawisza, gdy fokus jest w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa klucza współdziała z innymi funkcjami platformy, takich jak kompozycji droższe i tekst. <xref:System.Windows.UIElement.KeyUp> Zdarzenie jest zdarzenie wprowadzania tekstu niższego poziomu, które mogą nie działać zgodnie z oczekiwaniami w niektórych formantów. Jest tak, ponieważ niektóre formanty mają składania kontroli lub klasy obsługi udostępnia wyższego poziomu wersji tekst wejściowy obsługi i zdarzenia związane z. Aby uzyskać więcej informacji Sprawdź dokumentację dla pojedynczych formantów.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewKeyUp> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewKeyUp> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewKeyUpEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.KeyUp>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klawiatura nie ma już fokusu w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ to zdarzenie używa tunelowania routingu, element utracie fokusu może być elementu podrzędnego zamiast elementu którego program obsługi zdarzeń faktycznie jest podłączony. Sprawdź <xref:System.Windows.RoutedEventArgs.Source%2A> w ustalić utracie fokusu rzeczywisty element danych zdarzenia.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.LostKeyboardFocus>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu dowolnego przycisku myszy, gdy wskaźnik myszy znajduje się nad elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewMouseDown> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewMouseDown> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 <xref:System.Windows.UIElement.PreviewMouseDown> Zdarzenie jest zgłaszane, często razem albo <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> lub <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, które odpowiadają naciśnij jednej z dwóch przycisków standardowej myszki. <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> i <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> również są kierowane zdarzenia, ale są bezpośrednio kierowane zdarzenia i odpowiednie zdarzenie specyficzne dla przycisku jest wywoływane podczas <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> zdarzeń osiągnie ten element wzdłuż trasy zdarzenia. Zobacz uwagi dla <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> lub <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseDownEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.MouseDown>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu lewego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż wydaje się to wykonaj tunelowania trasy do drzewa, faktycznie jest bezpośrednie kierowanego zdarzenia wywoływane i reraised wzdłuż drzewa elementu przez każdą <xref:System.Windows.UIElement>.  
  
 To zdarzenie jest jednym z kilku zdarzenia powiązane, które zgłosiły specyfice przycisk myszy odpowiednią <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> zdarzenie, które jest dołączone zdarzenie, które są przetwarzane przez każdy element wzdłuż trasy zdarzenia.  
  
 Dane zdarzenia tego zdarzenia przedstawia dane zdarzeń podstawowych <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> zdarzeń. Jeśli to zdarzenie jest oznaczony jako obsługiwane wzdłuż trasy zdarzenia, nadal pojawienia się przycisk myszy określonych zdarzeń; jednak należy dodać obsługi określonych zdarzeń przycisku myszy przez wywołanie jawnie <xref:System.Windows.UIElement.AddHandler%2A>, z opcją do obsługi zdarzeń, które już są oznaczone jako obsługiwany, aby mogła być odbiorników w zdarzeniu. Po zaznaczeniu <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> obsługi, możesz są zasadniczo oznaczenie <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> obsługiwany w przypadku odbiorników dalsze wzdłuż trasy i na wszystkich zdarzeń powiązanych. To prawdopodobnie zawiera wygenerowane klasy obsługi zdarzenia takich jak <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.  
  
 Koncepcyjnie, należy traktować tego zdarzenia (oraz inne zdarzenia przycisk myszy na <xref:System.Windows.UIElement>) być myszy "Usługa" (z definicji usługi udostępniane przez <xref:System.Windows.Input.Mouse> klasy). Zdarzenie dodaje wygodę wyeliminowanie konieczności sprawdzenia stanach przycisku myszy (lewo i w prawo, góra dół) oryginalnego zdarzenia myszy w danych zdarzenia. Dla bardziej zaawansowanych scenariuszy, takich jak sprawdzanie stanów niestandardowych przycisków, konieczne może być użyj [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] na <xref:System.Windows.Input.Mouse> klasy zamiast tych na <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu lewego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż wydaje się to wykonaj tunelowania trasy do drzewa, faktycznie jest bezpośrednie kierowanego zdarzenia wywoływane i reraised wzdłuż drzewa elementu przez każdą <xref:System.Windows.UIElement>.  
  
 To zdarzenie jest jednym z kilku zdarzenia powiązane, które zgłosiły specyfice przycisk myszy odpowiednią <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> zdarzenie, które jest dołączone zdarzenie, które są przetwarzane przez każdy element wzdłuż trasy zdarzenia.  
  
 Dane zdarzenia tego zdarzenia przedstawia dane zdarzeń podstawowych <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> zdarzeń. Jeśli to zdarzenie jest oznaczony jako obsługiwane wzdłuż trasy zdarzenia, nadal pojawienia się przycisk myszy określonych zdarzeń; jednak należy dodać obsługi określonych zdarzeń przycisku myszy przez wywołanie jawnie <xref:System.Windows.UIElement.AddHandler%2A>, z opcją do obsługi zdarzeń, które już są oznaczone jako obsługiwany, aby mogła być odbiorników w zdarzeniu. Po zaznaczeniu <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> obsługi, możesz są zasadniczo oznaczenie <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> obsługiwany w przypadku odbiorników dalsze wzdłuż trasy i na wszystkich zdarzeń powiązanych.  
  
 Koncepcyjnie, należy traktować tego zdarzenia (oraz inne zdarzenia przycisk myszy na <xref:System.Windows.UIElement>) być myszy "Usługa" (z definicji usługi udostępniane przez <xref:System.Windows.Input.Mouse> klasy). Zdarzenie dodaje wygodę wyeliminowanie konieczności sprawdzenia stanach przycisku myszy (lewo i w prawo, góra dół) oryginalnego zdarzenia myszy w danych zdarzenia. Dla bardziej zaawansowanych scenariuszy, takich jak sprawdzanie stanów niestandardowych przycisków, konieczne może być użyj [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] na <xref:System.Windows.Input.Mouse> klasy zamiast tych na <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po przemieszczeniu wskaźnika myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie zarówno występuje, gdy wskaźnik myszy po raz pierwszy najedzie na granice elementu, a także gdy wskaźnik myszy jest przesuwany zachowując nadal w granicach elementu.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewMouseMove> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewMouseMove> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseMoveEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.MouseMove>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu prawego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż wydaje się to wykonaj tunelowania trasy do drzewa, faktycznie jest bezpośrednie kierowanego zdarzenia wywoływane i reraised wzdłuż drzewa elementu przez każdą <xref:System.Windows.UIElement>.  
  
 To zdarzenie jest jednym z kilku zdarzenia powiązane, które zgłosiły specyfice przycisk myszy odpowiednią <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> zdarzenie, które jest dołączone zdarzenie, które są przetwarzane przez każdy element wzdłuż trasy zdarzenia.  
  
 Dane zdarzenia tego zdarzenia przedstawia dane zdarzeń podstawowych <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> zdarzeń. Jeśli to zdarzenie jest oznaczony jako obsługiwane wzdłuż trasy zdarzenia, nadal pojawienia się przycisk myszy określonych zdarzeń; jednak należy dodać obsługi określonych zdarzeń przycisku myszy przez wywołanie jawnie <xref:System.Windows.UIElement.AddHandler%2A>, z opcją do obsługi zdarzeń, które już są oznaczone jako obsługiwany, aby mogła być odbiorników w zdarzeniu. Po zaznaczeniu <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> obsługi, możesz są zasadniczo oznaczenie <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> obsługiwany w przypadku odbiorników dalsze wzdłuż trasy i na wszystkich zdarzeń powiązanych. To prawdopodobnie zawiera wygenerowane klasy obsługi zdarzenia takich jak <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.  
  
 Koncepcyjnie, należy traktować tego zdarzenia (oraz inne zdarzenia przycisk myszy na <xref:System.Windows.UIElement>) być myszy "Usługa" (z definicji usługi udostępniane przez <xref:System.Windows.Input.Mouse> klasy). Zdarzenie dodaje wygodę wyeliminowanie konieczności sprawdzenia stanach przycisku myszy (lewo i w prawo, góra dół) oryginalnego zdarzenia myszy w danych zdarzenia. Dla bardziej zaawansowanych scenariuszy, takich jak sprawdzanie stanów niestandardowych przycisków, konieczne może być użyj [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] na <xref:System.Windows.Input.Mouse> klasy zamiast tych na <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu prawego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chociaż wydaje się to wykonaj tunelowania trasy do drzewa, faktycznie jest bezpośrednie kierowanego zdarzenia wywoływane i reraised wzdłuż drzewa elementu przez każdą <xref:System.Windows.UIElement>.  
  
 To zdarzenie jest jednym z kilku zdarzenia powiązane, które zgłosiły specyfice przycisk myszy odpowiednią <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> zdarzenie, które jest dołączone zdarzenie, które są przetwarzane przez każdy element wzdłuż trasy zdarzenia.  
  
 Dane zdarzenia tego zdarzenia przedstawia dane zdarzeń podstawowych <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> zdarzeń. Jeśli to zdarzenie jest oznaczony jako obsługiwane wzdłuż trasy zdarzenia, nadal pojawienia się przycisk myszy określonych zdarzeń; jednak należy dodać obsługi określonych zdarzeń przycisku myszy przez wywołanie jawnie <xref:System.Windows.UIElement.AddHandler%2A>, z opcją do obsługi zdarzeń, które już są oznaczone jako obsługiwany, aby mogła być odbiorników w zdarzeniu. Po zaznaczeniu <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> obsługi, możesz są zasadniczo oznaczenie <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> obsługiwany w przypadku odbiorników dalsze wzdłuż trasy i na wszystkich zdarzeń powiązanych.  
  
 Koncepcyjnie, należy traktować tego zdarzenia (oraz inne zdarzenia przycisk myszy na <xref:System.Windows.UIElement>) być myszy "Usługa" (z definicji usługi udostępniane przez <xref:System.Windows.Input.Mouse> klasy). Zdarzenie dodaje wygodę wyeliminowanie konieczności sprawdzenia stanach przycisku myszy (lewo i w prawo, góra dół) oryginalnego zdarzenia myszy w danych zdarzenia. Dla bardziej zaawansowanych scenariuszy, takich jak sprawdzanie stanów niestandardowych przycisków, konieczne może być użyj [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] na <xref:System.Windows.Input.Mouse> klasy zamiast tych na <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu dowolnego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewMouseUp> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewMouseUp> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 <xref:System.Windows.UIElement.PreviewMouseUp> Zdarzenie jest zgłaszane, często razem albo <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> lub <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, które odpowiadają naciśnij jednej z dwóch przycisków standardowej myszki. <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> i <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> również są kierowane zdarzenia, ale są bezpośrednio kierowane zdarzenia i odpowiednie zdarzenie specyficzne dla przycisku jest wywoływane podczas <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> zdarzeń osiągnie ten element wzdłuż trasy zdarzenia. Zobacz uwagi dla <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> lub <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseUpEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.MouseUp>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik obraca kółko myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przechwytywanie myszy lub fokus pierwszeństwo gdy wskaźnik myszy znajduje się; w związku z tym jeśli to zdarzenie zostanie wyświetlony w elemencie ukierunkowanych lub przechwycone, wskaźnik myszy może się okazać za pośrednictwem innego elementu.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewMouseMove> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewMouseMove> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseWheelEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.MouseWheel>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zmianie stanu przycisku klawiatury lub myszy podczas operacji przeciągania i upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewQueryContinueDrag> Zdarzeń umożliwia źródła przeciągania zadeklarować, czy można anulować operację przeciągania i upuszczania.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewQueryContinueDrag> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewQueryContinueDrag> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.QueryContinueDrag>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewQueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu przycisku pióra, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewStylusButtonDown> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewStylusButtonDown> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [Touch obsługi danych wejściowych w systemie Windows Vista](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) i [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.StylusButtonDown>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu przycisku pióra, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewStylusButtonUp> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewStylusButtonUp> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.StylusButtonUp>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro dotyka digitizera, gdy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewStylusDown> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewStylusDown> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusDownEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.StylusDown>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest przemieszczane nad elementem bez dotykania dyskretyzatora.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewStylusInAirMove> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewStylusInAirMove> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.StylusInAirMove>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest wystarczająco blisko dyskretyzatora, aby zostało wykryte, znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewStylusInRange> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewStylusInRange> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.StylusInRange>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest przemieszczane nad elementem. Pióro musi być przemieszczane podczas wykrywania przez Dyskretyzator Aby zgłosić to zdarzenie, w przeciwnym razie <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> zgłaszane jest zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewStylusMove> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewStylusMove> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusMoveEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.StylusMove>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest zbyt daleko od dyskretyzatora, aby zostało wykryte.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewStylusOutOfRange> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewStylusOutOfRange> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.StylusOutOfRange>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik wykonuje jeden z kilku gestów pióra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informacje o gestów pióra, zobacz <xref:System.Windows.Input.SystemGesture>.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewStylusSystemGesture> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewStylusSystemGesture> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.StylusSystemGesture>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik wywołuje pióra od dyskretyzatora, gdy pióro znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewStylusDown> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewStylusDown> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusUpEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.StylusUp>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberSignature Language="F#" Value="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element pobiera tekst w sposób niezależny od urządzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewTextInput> Zdarzeń umożliwia składnika lub aplikacji do nasłuchiwania wprowadzanie tekstu w sposób niezależny od urządzenia. Klawiatura jest podstawowy sposób <xref:System.Windows.UIElement.PreviewTextInput>; ale można również generować mowy, pisma ręcznego i innych urządzeniach wejściowych <xref:System.Windows.UIElement.PreviewTextInput>.  
  
 Z powodu kombinacji klawiszy — w klawiatury domyślne lub za pośrednictwem edytory input method — wiele zdarzeń klucza mogą zgłaszać tylko jedno zdarzenie wprowadzania tekstu.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.PreviewTextInput> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.PreviewTextInput> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewTextInputEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.TextInput>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewTextInput%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewTextInput" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy palcem krawędzi ekranu, gdy palca znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Windows.UIElement.PreviewTouchDown> i <xref:System.Windows.UIElement.TouchDown> zdarzeń nie występują dopóki palcem dotyka ekranu i przenosi. Naciśnięcie klawisza palcem na ekranie i zawierający bez przenoszenia go powoduje naciśnij i przytrzymaj zachowanie <xref:System.Windows.Input.Stylus>. Naciśnij i przytrzymaj klawisz jest odpowiednikiem kliknij prawym przyciskiem myszy.  
  
 Powoduje <xref:System.Windows.UIElement.PreviewTouchDown> i <xref:System.Windows.UIElement.TouchDown> zdarzenia jak palcem krawędzi ekranu, ustaw <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> dołączona właściwość do `false` dla tego elementu.  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewTouchDownEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.TouchDown>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> kierowanego zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po przemieszczeniu palcem na ekranie, gdy palca znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewTouchMoveEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.TouchMove>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> kierowanego zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy jest wywoływane palcem poza ekran, gdy palca znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewTouchUpEvent>|  
|Strategii routingu|Tunelowanie|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie propagacji jest <xref:System.Windows.UIElement.TouchUp>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> kierowanego zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zmianie stanu przycisku klawiatury lub myszy podczas operacji przeciągania i upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.QueryContinueDrag> Zdarzeń umożliwia ustalenie, czy można anulować operację przeciągania i upuszczania źródła przeciągania.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.QueryContinueDrag> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.QueryContinueDrag> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.QueryContinueDragEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberSignature Language="F#" Value="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " Usage="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy kursor jest wymagane do wyświetlenia. To zdarzenie jest zgłaszane w elemencie każdym razem, gdy wskaźnik myszy jest przesuwany do nowej lokalizacji, która oznacza, że obiekt kursora może zaistnieć konieczność zmiany na podstawie jego nowego położenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.QueryCursor> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.QueryCursor> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Kursor jest odwołuje się ta nazwa zdarzenia nie jest kursor tekstu (czasem nazywane punktu wstawiania). Zamiast tego kursor znajduje się w tym kontekście jest obiekt, który deklaruje na ekranie graficzną związane z kilku możliwych urządzeń związanych z danych wejściowych lub pojęcia dotyczące programowania w języku systemu Windows. Ten obiekt jest reprezentowana przez <xref:System.Windows.Input.Cursor> klasy na platformie WPF. System wejściowy WPF umożliwia zmianę tego kursora, gdy reprezentuje na ekranie położenia wskaźnika myszy. Możesz użyć wstępnie zdefiniowanych wartości z <xref:System.Windows.Input.Cursors> wyliczenia, lub można zadeklarować niestandardowych kursora jako plik obrazu.  
  
 Nasłuchiwanie <xref:System.Windows.UIElement.QueryCursor> zdarzenie nie jest technikę efektywne zarządzanie kursora. Zamiast tego każdy element powinien definiować własne zachowania kursora w <xref:System.Windows.FrameworkContentElement.Cursor%2A> i <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. Należy polegać wyłącznie na <xref:System.Windows.UIElement.QueryCursor> WPF poziomie struktury podstawowych elementów nie jest używany, czy w dodatkowej okolicznościach gdy Definiowanie zachowania kursor na podstawie na element nie spełnia Twoje potrzeby. Aby uzyskać więcej informacji na implementacji zachowanie kursora w odpowiedzi na <xref:System.Windows.UIElement.QueryCursor>, zobacz <xref:System.Windows.Input.QueryCursorEventHandler>.  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.QueryCursorEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   Nie ma żadnego zdefiniowane odpowiednie zdarzenia tunelowania.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnQueryCursor%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.QueryCursor" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.RaiseEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> zawiera dane zdarzeń i identyfikuje również zdarzeń, aby wywołać.</param>
        <summary>Wywołuje określone kierowanego zdarzenia. <see cref="T:System.Windows.RoutedEvent" /> Wygenerowany zostanie zidentyfikowana w <see cref="T:System.Windows.RoutedEventArgs" /> wystąpienia, który został dostarczony (jako <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> właściwości danych zdarzeń).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `e` Parametr jest typu jako typu podstawowego wspólne dla wszystkich danych kierowanego zdarzenia; jednak dane zdarzenia powinny być podane specyficzny typem danych zdarzenia, który jest dostępny dla zdarzeń zgłaszanych, ponieważ <xref:System.Windows.RoutedEventArgs> zawiera klasy pochodne rzeczywiste dane określone właściwości, które są przeznaczone do określonego zdarzenia, gdy jest on uruchamiany.  
  
 <xref:System.Windows.RoutedEventArgs> nie jest tylko właściwości stan dla zdarzeń; identyfikuje które kierowanego zdarzenia, aby wywołać. Ten wzorzec wywoływanie zdarzeń i danych kierowanego zdarzenia zarówno różnią się od [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] klasy zdarzenia i dane, które zwykle zawierają tylko właściwości, które są powiązane ze zdarzeniem.  
  
   
  
## Examples  
 Poniższy przykład tworzy dane zdarzenia, dołącza identyfikator zdarzenia do danych, a następnie używa wystąpienie danych zdarzeń, aby wywołać zdarzenie niestandardowe routingiem.  
  
 [!code-csharp[RoutedEventCustom#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#raiseevent)]
 [!code-vb[RoutedEventCustom#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberSignature Language="F#" Value="member this.ReleaseAllTouchCaptures : unit -&gt; unit" Usage="uIElement.ReleaseAllTouchCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie urządzenia touch przechwyconych z tego elementu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseMouseCapture : unit -&gt; unit&#xA;override this.ReleaseMouseCapture : unit -&gt; unit" Usage="uIElement.ReleaseMouseCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Jeżeli ten element przechwytywania, zwalnia przechwytywanie myszy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ten element nie miał nałożonej przechwytywania, wywołanie tej metody nie ma znaczenia. Należy wziąć pod uwagę wartości <xref:System.Windows.UIElement.IsMouseCaptured%2A> przed wywołaniem tej metody.  
  
   
  
## Examples  
 Poniższy przykład jest równoległe, na przykład dla <xref:System.Windows.UIElement.CaptureMouse%2A>: obsługuje przycisku myszy do przechwytywania myszy zlecenia i ponownie włączyć przesuwanie wskaźnika myszy.  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStylusCapture : unit -&gt; unit&#xA;override this.ReleaseStylusCapture : unit -&gt; unit" Usage="uIElement.ReleaseStylusCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia Przechwytywanie urządzenia pióra, jeżeli ten element przechwytywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ten element nie miał nałożonej przechwytywania, wywołanie tej metody nie ma znaczenia. Należy wziąć pod uwagę wartości <xref:System.Windows.UIElement.IsStylusCaptured%2A> przed wywołaniem tej metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.ReleaseTouchCapture : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement.ReleaseTouchCapture touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Urządzenie do zwolnienia.</param>
        <summary>Próbuje zwolnić urządzenia określonego touch z tego elementu.</summary>
        <returns>
          <see langword="true" /> Jeśli urządzenie touch zwolnieniu; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="touchDevice" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement.RemoveHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identyfikator kierowanego zdarzenia, dla którego jest umocowana Obsługa.</param>
        <param name="handler">Implementacja określony program obsługi, aby usunąć z kolekcji programu obsługi zdarzeń w tym elemencie.</param>
        <summary>Usuwa obsługi określonego kierowanego zdarzenia z tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Najbardziej typowym scenariuszem stosowania to [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] jest podczas implementowania [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] zdarzeń "otoki", który jest skojarzony z routingiem zdarzenie niestandardowe, w szczególności, gdy należy wdrożyć logikę "Usuń" dla programów obsługi na [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] poziom. Przykład, w którym następuje to uwagi części przedstawiono w tym scenariuszu.  
  
 Wywołanie tej metody nie ma znaczenia, jeśli nie było żadnych programów obsługi zarejestrowany z kryteriami, które odpowiadają parametrów wejściowych dla wywołania metody.  
  
 Jeśli więcej niż jeden program obsługi jest dołączony pasujących kryteria tylko pierwszego programu obsługi w przypadku obsługi magazyn zostanie usunięty. To zachowanie jest zgodne z [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zachowanie `-=` operatora.  
  
 Ani `routedEvent` ani `handler` może być `null`. Podjęto próbę podać te wartości jako `null` zgłosi wyjątek.  
  
 Ta metoda powoduje ignorowanie `handledEventsToo` informacje o parametrach, która jest dostępna, jeśli program obsługi został po raz pierwszy dodane z <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> podpisie, który włącza obsługę zdarzeń już obsługiwane. Dowolnego typu program obsługi zostanie usunięta.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Windows.UIElement.RemoveHandler%2A> jako część definicji otoki zdarzenia.  
  
 [!code-csharp[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#addremovehandler)]
 [!code-vb[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#addremovehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="RenderSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size RenderSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size RenderSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderSize" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size RenderSize { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberSignature Language="F#" Value="member this.RenderSize : System.Windows.Size with get, set" Usage="System.Windows.UIElement.RenderSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia rozmiar renderowania końcowego tego elementu.</summary>
        <value>Rozmiar renderowanych dla tego elementu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Nie należy próbować ustawić tę właściwość, albo w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] lub w kodzie, jeśli system układu poziomie struktury WPF. Prawie wszystkie scenariusze Typowa aplikacja będzie używać tego systemu układu. Układ systemu nie będzie uwzględniał rozmiary w <xref:System.Windows.UIElement.RenderSize%2A> właściwości bezpośrednio. <xref:System.Windows.UIElement.RenderSize%2A> Właściwość zadeklarowana zapisywalny umożliwiające niektórych WPF poziomu core, łączenie przypadków, które celowo obejścia protokołów typowe układu, takie jak obsługa <xref:System.Windows.Documents.Adorner> klasy.  
  
 Ta właściwość może służyć do sprawdzania rozmiar renderowania stosowanych w ramach układu systemu przesłania, takich jak <xref:System.Windows.UIElement.OnRender%2A> lub <xref:System.Windows.UIElement.GetLayoutClip%2A>.  
  
 Obsługa jest bardziej typowego scenariusza <xref:System.Windows.FrameworkElement.SizeChanged> zastąpienie zdarzeń z obsługą klasy lub <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> zdarzeń.  
  
## Examples  
 W poniższym przykładzie pokazano, jak używa niestandardowego modułu definiowania układu kodu <xref:System.Windows.UIElement.RenderSize%2A> wartości do utworzenia i rozmiaru grafiki prostokąt, który definiuje moduł definiowania układu kodu, w ramach jego <xref:System.Windows.UIElement.OnRender%2A> implementacji.  
  
 [!code-csharp[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/csharp/VS_Snippets_Wpf/AdornersMiscCode/CSharp/Window1.xaml.cs#uielementdesiredsize)]
 [!code-vb[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/visualbasic/VS_Snippets_Wpf/AdornersMiscCode/visualbasic/window1.xaml.vb#uielementdesiredsize)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform RenderTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform RenderTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ RenderTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RenderTransform : System.Windows.Media.Transform with get, set" Usage="System.Windows.UIElement.RenderTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia informacje o transformacji wpływającej na miejsce renderowania tego elementu.  Jest to właściwość zależności.</summary>
        <value>W tym artykule opisano charakterystyki transformacji renderowania żądany. Wartość domyślna to <see cref="P:System.Windows.Media.Transform.Identity" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Transformacji renderowania nie wygenerować układu rozmiar lub renderować informacje o rozmiarze. Renderowanie przekształceń są głównie używane w animacji lub chwilowego efektu do elementu. Na przykład element może być powiększony fokus lub moused za pośrednictwem lub może zakłóceń Ładuj Rysuj oka część [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  
  
<a name="dependencyPropertyInfo_RenderTransform"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.RenderTransformProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point RenderTransformOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point RenderTransformOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransformOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransformOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point RenderTransformOrigin { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberSignature Language="F#" Value="member this.RenderTransformOrigin : System.Windows.Point with get, set" Usage="System.Windows.UIElement.RenderTransformOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia centralny punkt każdej możliwej transformacji renderowania deklarowana przez <see cref="P:System.Windows.UIElement.RenderTransform" />, względem granic elementu przez.  Jest to właściwość zależności.</summary>
        <value>Wartość, która deklaruje transformacji renderowania. Wartość domyślna to <see cref="T:System.Windows.Point" /> z współrzędne (0,0).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.RenderTransformOrigin%2A> ma nieco niestandardowe użycie <xref:System.Windows.Point> struktury wartości, w którym <xref:System.Windows.Point> nie reprezentuje bezwzględny lokalizacji w układzie współrzędnych. Zamiast tego wartości od 0 do 1 będą interpretowane jako dla zakresu bieżący element w każdym x osi y. Na przykład spowoduje, że transformacji renderowania do wyśrodkowany w elemencie (0.5,0.5) lub (1,1) czy umieścić transformacji renderowania u dołu prawym rogu elementu. <xref:System.Double.NaN> nie jest akceptowane wartości.  
  
 Wartości innych niż 0 i 1 są również akceptowane i spowoduje więcej efektów niekonwencjonalne transformacji. Na przykład jeśli ustawisz <xref:System.Windows.UIElement.RenderTransformOrigin%2A> można (5,5), a następnie zastosować <xref:System.Windows.Media.RotateTransform>, punktu obrotu będzie również poza granicami samego elementu. Transformacja będzie pokrętła nazwę elementu wokół w dużych okręgu wynikająca poza prawym dolnym rogu. Punkt początkowy może być gdzieś w jego elemencie nadrzędnym i może być prawdopodobnie poza ramki lub widoku. Wartości ujemne są podobne, zostaną one wykracza poza zakresem lewej górnej.  
  
 Renderowanie transformacji nie wpływają na układ i są zwykle używane do animowania lub zastosować do elementu chwilowego efektu.  
  
<a name="xamlAttributeUsage_RenderTransformOrigin"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<object RenderTransformOrigin="xOrigin, yOrigin"/>  
```  
  
<a name="xamlPropertyElementUsage_RenderTransformOrigin"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.RenderTransformOrigin>  
    <Point X=" xOrigin " Y=" yOrigin "/>  
  </object.RenderTransformOrigin>  
</object>  
```  
  
<a name="xamlValues_RenderTransformOrigin"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *xOrigin*  
 Współczynnik początek w poziomie. Jest to zazwyczaj podawana jako wartość z zakresu od 0 do 1. Zobacz uwagi.  
  
 *yOrigin*  
 Współczynnik początek w pionie. Jest to zazwyczaj podawana jako wartość z zakresu od 0 do 1. Zobacz uwagi.  
  
<a name="dependencyPropertyInfo_RenderTransformOrigin"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.RenderTransformOriginProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład tworzy elementów w kodzie, mają zastosowanie <xref:System.Windows.UIElement.RenderTransformOrigin%2A>, a następnie stosuje <xref:System.Windows.UIElement.RenderTransform%2A>.  
  
 [!code-csharp[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/csharp/VS_Snippets_Wpf/transformanimations_snip/CSharp/RotateAboutCenterExample.cs#uielementrendertransformorigin)]
 [!code-vb[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/visualbasic/VS_Snippets_Wpf/transformanimations_snip/visualbasic/rotateaboutcenterexample.vb#uielementrendertransformorigin)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.RenderTransform" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOriginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformOriginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformOriginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformOriginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RenderTransformOriginProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RenderTransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.RenderTransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.RenderTransform" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeCommandBindings : unit -&gt; bool" Usage="uIElement.ShouldSerializeCommandBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca czy procesy serializacji powinny serializować zawartości <see cref="P:System.Windows.UIElement.CommandBindings" /> właściwości wystąpienia tej klasy.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="P:System.Windows.UIElement.CommandBindings" /> wartość właściwości powinny być serializowane; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spowoduje to zwrócenie `true` Jeśli <xref:System.Windows.UIElement.CommandBindings%2A> lokalnie jest ustawiona.  
  
 To `ShouldSerialize` metody jest dostępne, ponieważ <xref:System.Windows.UIElement.CommandBindings%2A> właściwość nie ma wartości domyślnej proste. Ta metoda wskazuje, czy właściwość zmienił się z jej wartości domyślnej. Zwykle wywołuje tę metodę albo opracowywanie projektanta lub tworzenie własnych Dołączanie formantu <xref:System.Windows.UIElement>.  
  
 Aby uzyskać więcej informacji, zobacz [definiowanie wartości domyślnych z ShouldSerialize i zresetować metody](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeInputBindings : unit -&gt; bool" Usage="uIElement.ShouldSerializeInputBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca czy procesy serializacji powinny serializować zawartości <see cref="P:System.Windows.UIElement.InputBindings" /> właściwości wystąpienia tej klasy.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="P:System.Windows.UIElement.InputBindings" /> wartość właściwości powinny być serializowane; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spowoduje to zwrócenie `true` Jeśli <xref:System.Windows.UIElement.InputBindings%2A> lokalnie jest ustawiona.  
  
 To `ShouldSerialize` metody jest dostępne, ponieważ <xref:System.Windows.UIElement.InputBindings%2A> właściwość nie ma wartości domyślnej proste. Ta metoda wskazuje, czy właściwość zmienił się z jej wartości domyślnej. Zwykle wywołuje tę metodę albo opracowywanie projektanta lub tworzenie własnych Dołączanie formantu <xref:System.Windows.UIElement>.  
  
 Aby uzyskać więcej informacji, zobacz [definiowanie wartości domyślnych z ShouldSerialize i zresetować metody](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixels">
      <MemberSignature Language="C#" Value="public bool SnapsToDevicePixels { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SnapsToDevicePixels" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberSignature Language="VB.NET" Value="Public Property SnapsToDevicePixels As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SnapsToDevicePixels { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SnapsToDevicePixels : bool with get, set" Usage="System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy renderowanie dla tego elementu powinno używać urządzenia określonych ustawień piksela podczas renderowania.  Jest to właściwość zależności.</summary>
        <value>
          <see langword="true" /> Jeśli element powinien renderować zgodnie z następującą liczbę pikseli urządzenia; w przeciwnym razie <see langword="false" />. Domyślnie zadeklarowana na <see cref="T:System.Windows.UIElement" /> jest <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tę właściwość można ustawić, `true` w elemencie głównym, aby włączyć pikseli przyciąganie renderowanie typu Pixel interfejsu użytkownika. Dla urządzeń działających z rozdzielczością większą niż 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)], pikseli przyciąganie renderowania można zminimalizować wygładzanie artefaktów spowodowanych antyaliasingiem w pobliżu linii pojedynczej grubości.  
  
 Gdy dziedziczone przez <xref:System.Windows.FrameworkElement> lub wszystkie możliwe pochodne klasy, <xref:System.Windows.FrameworkElement> zastępuje metadane dla tej właściwości zależności ustawić <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> właściwości metadanych `true`. To osiągnięcie jest tylko najbardziej zewnętrznego elementu poddrzewo musi określać <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> jako `true`, a następnie prześle wszystkie elementy podrzędne tego poddrzewa <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> jako `true` i będzie miał <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> efekt.  
  
<a name="dependencyPropertyInfo_SnapsToDevicePixels"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixelsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SnapsToDevicePixelsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SnapsToDevicePixelsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SnapsToDevicePixelsProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu przycisku pióra, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.StylusButtonDown> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusButtonDown> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusButtonDownEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewStylusButtonDown>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnStylusButtonDown%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusButtonDown" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zwolnieniu przycisku pióra, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.StylusButtonUp> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusButtonUp> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusButtonUpEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewStylusButtonUp>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnStylusButtonUp%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusButtonUp" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberSignature Language="F#" Value="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro dotyka digitizera, gdy pióro znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.StylusDown> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusDown> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusDownEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewStylusDown>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnStylusDown%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusDown" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberSignature Language="F#" Value="member this.StylusEnter : System.Windows.Input.StylusEventHandler " Usage="member this.StylusEnter : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po pokonaniu przez pióro granic tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.StylusEnter> jest używającą bezpośredniej obsługi strategii routingu zdarzeń. Bezpośrednie kierowane zdarzenia nie są zgłaszane wzdłuż trasy; Zamiast tego są obsługiwane w tym samym elemencie gdzie są zgłaszane. Jednak umożliwiają one inne aspekty zachowania kierowanego zdarzenia, takie jak wyzwalacze zdarzeń w style.  
  
 Mimo że <xref:System.Windows.UIElement.StylusEnter> śledzi po pokonaniu przez pióro granic elementu, to zdarzenie więcej dosłownie zgłasza, że <xref:System.Windows.UIElement.IsStylusOver%2A> zmieniono wartość właściwości z `false` do `true` w tym elemencie.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.StylusEnter> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusEnter> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusEnterEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnStylusEnter%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusEnter" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest przemieszczane nad elementem bez dotykania dyskretyzatora.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.StylusInAirMove> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusInAirMove> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusInAirMoveEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewStylusInAirMove>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnStylusInAirMove%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusInAirMove" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberSignature Language="F#" Value="member this.StylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest wystarczająco blisko dyskretyzatora, aby zostało wykryte, znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.StylusInRange> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusInRange> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusInRangeEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewStylusInRange>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnStylusInRange%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusInRange" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberSignature Language="F#" Value="member this.StylusLeave : System.Windows.Input.StylusEventHandler " Usage="member this.StylusLeave : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po opuszczeniu przez pióro granic elementu przez.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.StylusLeave> jest używającą bezpośredniej obsługi strategii routingu zdarzeń. Bezpośrednie kierowane zdarzenia nie są zgłaszane wzdłuż trasy; Zamiast tego są obsługiwane w tym samym elemencie gdzie są zgłaszane. Jednak umożliwiają one inne aspekty zachowania kierowanego zdarzenia, takie jak wyzwalacze zdarzeń w style.  
  
 Mimo że <xref:System.Windows.UIElement.StylusLeave> śledzi po opuszczeniu przez pióro granic elementu, to zdarzenie więcej dosłownie zgłasza, że <xref:System.Windows.UIElement.IsStylusOver%2A> zmieniono wartość właściwości z `true` do `false` w tym elemencie.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.StylusLeave> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusLeave> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusLeaveEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnStylusLeave%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusLeave" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberSignature Language="F#" Value="member this.StylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest przemieszczane nad tym elementem. Pióro musi dotykać powierzchni dyskretyzatora, aby zgłosić to zdarzenie. W przeciwnym razie <see cref="E:System.Windows.UIElement.StylusInAirMove" /> zgłaszane jest zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.StylusMove> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusMove> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusMoveEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewStylusMove>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnStylusMove%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusMove" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest zbyt daleko od dyskretyzatora, aby zostało wykryte, znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.StylusOutOfRange> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusOutOfRange> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusOutOfRangeEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusPlugIns">
      <MemberSignature Language="C#" Value="protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.StylusPlugIns" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StylusPlugIns As StylusPlugInCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ StylusPlugIns { System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StylusPlugIns : System.Windows.Input.StylusPlugIns.StylusPlugInCollection" Usage="System.Windows.UIElement.StylusPlugIns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusPlugIns.StylusPlugInCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję obiektów wtyczki (Dostosowywanie) pióro skojarzony z tym elementem.</summary>
        <value>Kolekcja wtyczek pióra jako wyspecjalizowane kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na przykład formant, który wypełnia tej kolekcji <xref:System.Windows.Controls.InkCanvas>. <xref:System.Windows.Controls.InkCanvas> dodaje <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> jako elementu kolekcji, co pozwala <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> do interakcji z wprowadzania danych piórem oraz tworzenia unikatowy renderowania w odpowiedzi na pióro zmiennych zdarzenia.  
  
 Aby uzyskać informacje na temat tworzenia niestandardowych dodatków plug-in, który może odbierać i interpretować wprowadzania danych piórem, zobacz [przechwytują dane wejściowe z pióro](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md).  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> wystąpienia i dodaje go do <xref:System.Windows.UIElement.StylusPlugIns%2A> kolekcji dla niestandardowych odręczne, obsługa formantu.  
  
 [!code-csharp[StylusPluginSamples#3](~/samples/snippets/csharp/VS_Snippets_Wpf/StylusPluginSamples/CSharp/StylusControl.cs#3)]
 [!code-vb[StylusPluginSamples#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StylusPluginSamples/VisualBasic/StylusControl.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer" />
        <altmember cref="T:System.Windows.Controls.InkCanvas" />
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik wykonuje jeden z kilku gestów pióra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat gestów pióra, zobacz <xref:System.Windows.Input.SystemGesture>.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.StylusSystemGesture> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusSystemGesture> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusSystemGestureEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberSignature Language="F#" Value="member this.StylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.StylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik wywołuje pióra od dyskretyzatora, gdy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.StylusUp> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.StylusUp> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
 Touch, mysz i wprowadzania danych piórem istnieje w określonej relacji. Aby uzyskać więcej informacji, zobacz [omówienie wprowadzania](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusUpEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewStylusUp>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnStylusUp%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.StylusUp" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberSignature Language="F#" Value="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element pobiera tekst w sposób niezależny od urządzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  To zdarzenie może już oznaczony jako obsługiwany przez wewnętrznych implementacje połączone formantów. Zobacz uwagi poniżej.  
  
 <xref:System.Windows.UIElement.TextInput> Zdarzeń już może być oznaczony jako obsługiwany przez wewnętrznych implementacje połączone formantów. Na przykład <xref:System.Windows.Controls.TextBox> jest formantem połączone gdzie <xref:System.Windows.UIElement.TextInput> zdarzeń jest już oznaczona jako obsługiwany; w jego składania. Formanty to zrobić, ponieważ formant wymaga interpretować niektóre typy danych wejściowych, takich jak klawiszy strzałek jako mające specjalne znaczenie tego formantu. Jeśli używasz <xref:System.Windows.UIElement.PreviewTextInput> jako zdarzenie, gdzie możesz dołączyć obsługi wprowadzania tekstu, może zostać wyświetlony w poszukiwaniu lepszych wyników. Ta technika prowadzenia większości przypadkach, gdy formant kompozycji już oznaczył to zdarzenie, ponieważ obsługiwane i uniemożliwia odbieranie zdarzeń wzdłuż trasy zdarzenia programu obsługi.  
  
 <xref:System.Windows.UIElement.TextInput> Zdarzeń umożliwia składnika lub aplikacji do nasłuchiwania wprowadzanie tekstu w sposób niezależny od urządzenia. Klawiatura jest podstawowy sposób <xref:System.Windows.UIElement.TextInput>, ale może też wiązać mowy, pisma ręcznego i innych urządzeniach wejściowych <xref:System.Windows.UIElement.TextInput>.  
  
 Z powodu kombinacji klawiszy — w klawiatury domyślne lub za pośrednictwem edytory input method — wiele zdarzeń klucza może zgłaszać tylko jedno zdarzenie wprowadzania tekstu.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> dołączony zdarzeń dla tej klasy, aby <xref:System.Windows.UIElement.TextInput> jest częścią klasy elementów członkowskich listy podczas <xref:System.Windows.UIElement> jest dziedziczona jako podstawowy element. Programy obsługi zdarzeń, które są dołączone do <xref:System.Windows.UIElement.TextInput> zdarzenia są dołączone do odpowiadającego <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> dołączony zdarzeń i odbierać to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.TextInputEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewTextInput>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnTextInput%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.TextInput" /> kierowanego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory kierowanego zdarzenia są tworzone, gdy kierowane zdarzenia są rejestrowane. Te identyfikatory zawiera nazwę identyfikującą, typ właściciela, typ obsługi, strategii routingu i narzędzie metoda dodawania właścicieli dla zdarzenia. Aby dodać obsługę klas, można użyć tych identyfikatorów.  
  
 Aby uzyskać więcej informacji na temat rejestrowania kierowane zdarzenia, zobacz <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Aby uzyskać więcej informacji o używaniu identyfikatorów kierowanego zdarzenia, aby dodać obsługę klas, zobacz <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberSignature Language="F#" Value="member this.TouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy palcem krawędzi ekranu, gdy palca znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Windows.UIElement.PreviewTouchDown> i <xref:System.Windows.UIElement.TouchDown> zdarzeń nie występują dopóki palcem dotyka ekranu i przenosi. Naciśnięcie klawisza palcem na ekranie i zawierający bez przenoszenia go powoduje naciśnij i przytrzymaj zachowanie <xref:System.Windows.Input.Stylus>. Naciśnij i przytrzymaj klawisz jest odpowiednikiem kliknij prawym przyciskiem myszy.  
  
 Powoduje <xref:System.Windows.UIElement.PreviewTouchDown> i <xref:System.Windows.UIElement.TouchDown> zdarzenia jak palcem krawędzi ekranu, ustaw <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> dołączona właściwość do `false` dla tego elementu.  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.TouchDownEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewTouchDown>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnTouchDown%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.TouchDown" /> kierowanego zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberSignature Language="F#" Value="member this.TouchEnter : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchEnter : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po przemieszczeniu touch z zewnątrz do wewnątrz granic tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie jest zawsze zgłaszane, czy urządzenie touch są przechwytywane do tego elementu.  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.TouchEnterEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnTouchEnter%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.TouchEnter" /> kierowanego zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCaptured : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie urządzenia touch, które są przechwytywane do tego elementu.</summary>
        <value>Wyliczenie <see cref="T:System.Windows.Input.TouchDevice" /> obiektów, które są przechwytywane do tego elementu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCapturedWithin : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie urządzenia touch, które są przechwytywane do tego elementu lub elementów podrzędnych w jego drzewie wizualnym.</summary>
        <value>Wyliczenie <see cref="T:System.Windows.Input.TouchDevice" /> obiektów, które są przechwytywane do tego elementu lub elementów podrzędnych w jego drzewie wizualnym.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesDirectlyOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie urządzenia touch znajdujących się nad tym elementem.</summary>
        <value>Wyliczenie <see cref="T:System.Windows.Input.TouchDevice" /> obiektów znajdujących się nad tym elementem.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie urządzenia touch znajdujących się nad tym elementem lub wszystkie elementy podrzędne w jego drzewie wizualnym.</summary>
        <value>Wyliczenie <see cref="T:System.Windows.Input.TouchDevice" /> obiektów, które są przez ten element lub wszystkie elementy podrzędne w jego drzewie wizualnym.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberSignature Language="F#" Value="member this.TouchLeave : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchLeave : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po przemieszczeniu touch z wnętrza poza granicami tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie jest zawsze zgłaszane, czy urządzenie touch są przechwytywane do tego elementu.  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.TouchLeaveEvent>|  
|Strategii routingu|Bezpośrednie|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnTouchLeave%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.TouchLeave" /> kierowanego zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberSignature Language="F#" Value="member this.TouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po przemieszczeniu palcem na ekranie, gdy palca znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.TouchMoveEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewTouchMove>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnTouchMove%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.TouchMove" /> kierowanego zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberSignature Language="F#" Value="member this.TouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy jest wywoływane palcem poza ekran, gdy palca znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.TouchUpEvent>|  
|Strategii routingu|Propagacji|  
|Delegate|<xref:System.EventHandler%601> typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie tunelowania jest <xref:System.Windows.UIElement.PreviewTouchUp>.  
  
-   Zastąpienie <xref:System.Windows.UIElement.OnTouchUp%2A> do zaimplementowania klasy obsługi dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="E:System.Windows.UIElement.TouchUp" /> kierowanego zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslatePoint">
      <MemberSignature Language="C#" Value="public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point TranslatePoint(valuetype System.Windows.Point point, class System.Windows.UIElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Point TranslatePoint(System::Windows::Point point, System::Windows::UIElement ^ relativeTo);" />
      <MemberSignature Language="F#" Value="member this.TranslatePoint : System.Windows.Point * System.Windows.UIElement -&gt; System.Windows.Point" Usage="uIElement.TranslatePoint (point, relativeTo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="relativeTo" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="point">Punkt wartości jako względem tego elementu.</param>
        <param name="relativeTo">Element do tłumaczenia do danego punktu.</param>
        <summary>Wykonuje translację punktu względem tego elementu, aby współrzędne, które są względem określonego elementu.</summary>
        <returns>Wartość punktu teraz względem elementu docelowego zamiast tego elementu źródła.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przekazywanie `null` dla `relativeTo` jest dozwolone i wskazuje, czy współrzędne powinna być określona względem elementu głównego w drzewie logicznym należącego do tego elementu.  
  
 Ta metoda jest używana do tłumaczenia wartości punktów testu trafienia. Wywołanie tej metody jest głównie istotne, jeśli są Tworzenie formantu i musi przetworzyć danych wejściowych na niższym poziomie. Jeśli korzystasz z istniejących formantów, można zwykle założyć, że ukończono formantów będzie zgłaszać wyników testu trafienia poprawnie przetłumaczonego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uid">
      <MemberSignature Language="C#" Value="public string Uid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Uid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Uid" />
      <MemberSignature Language="VB.NET" Value="Public Property Uid As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Uid { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Uid : string with get, set" Usage="System.Windows.UIElement.Uid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia Unikatowy identyfikator (lokalizacja) dla tego elementu. Jest to właściwość zależności.</summary>
        <value>Ciąg, który jest unikatowy identyfikator dla tego elementu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Używane przez projektantów do pobrania `x:Uid` wartość (zobacz [omówienie lokalizacja i globalizacja WPF](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md) Aby uzyskać więcej informacji).  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.UidProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UidProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UidProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UidProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.UidProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UidProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UidProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable UidProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.UidProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.Uid" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLayout">
      <MemberSignature Language="C#" Value="public void UpdateLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.UpdateLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateLayout();" />
      <MemberSignature Language="F#" Value="member this.UpdateLayout : unit -&gt; unit" Usage="uIElement.UpdateLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapewnia, że wszystkie elementy wizualne podrzędne tego elementu są zaktualizowane prawidłowo układu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wywołania tej metody, elementy z <xref:System.Windows.UIElement.IsMeasureValid%2A> `false` lub <xref:System.Windows.UIElement.IsArrangeValid%2A> `false` wywoła specyficzne dla elementu <xref:System.Windows.UIElement.MeasureCore%2A> i <xref:System.Windows.UIElement.ArrangeCore%2A> zaktualizować metody, które wymusza układ i wszystkich rozmiarów obliczanej zostaną zweryfikowane.  
  
 Wywołanie tej metody nie ma znaczenia w przypadku układu bez zmian lub rozmieszczenie ani pomiaru stan układ jest nieprawidłowy. Jednakże, gdy układ jest nieprawidłowy w każdym odniesieniu <xref:System.Windows.UIElement.UpdateLayout%2A> wywołanie zostanie ponownie cały układ. W związku z tym należy unikać wywoływania <xref:System.Windows.UIElement.UpdateLayout%2A> po każdej zmianie przyrostowych i pomocniczych w drzewie elementu. Układ systemu wykona układu elementu w sposób odroczonego przy użyciu algorytmu, który równoważy wydajność i walut, i ze strategią wagi, które mają być odroczone zmiany do katalogów głównych, dopóki wszystkie elementy podrzędne są prawidłowe. Powinny wywoływać tylko <xref:System.Windows.UIElement.UpdateLayout%2A> Jeśli bezwzględnie konieczne zaktualizowane rozmiarów i pozycji i tylko wtedy, gdy masz pewność, że wykonywane są wszystkie zmiany właściwości, czy formant i który może mieć wpływ na układ.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public System.Windows.Visibility Visibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Visibility Visibility" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Visibility" />
      <MemberSignature Language="VB.NET" Value="Public Property Visibility As Visibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Visibility Visibility { System::Windows::Visibility get(); void set(System::Windows::Visibility value); };" />
      <MemberSignature Language="F#" Value="member this.Visibility : System.Windows.Visibility with get, set" Usage="System.Windows.UIElement.Visibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Visibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia [! Widoczność include[TLA#tla_ui](~/includes/tlasharptla-UI-MD.MD)] tego elementu.  Jest to właściwość zależności.</summary>
        <value>Wartość wyliczenia. Wartość domyślna to <see cref="F:System.Windows.Visibility.Visible" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie tej właściwości ma wpływ na wartość <xref:System.Windows.UIElement.IsVisible%2A>, który z kolei mogą zgłaszać <xref:System.Windows.UIElement.IsVisibleChanged> zdarzeń. Jednak <xref:System.Windows.UIElement.IsVisible%2A> ma innych czynników, które wpływają, na przykład ustawień widoczności elementów nadrzędnych, które zawierałoby proces.  
  
 Elementy gdzie <xref:System.Windows.UIElement.Visibility%2A> nie jest <xref:System.Windows.Visibility.Visible> nie uczestniczą w wejściowych zdarzeń (lub polecenia), nie wpływają na środka lub Rozmieść przekazuje układu nie znajdują się w sekwencji kartę i nie będą raportowane podczas testowania trafień.  
  
 Gdy dziedziczone przez <xref:System.Windows.Window> lub jej klas pochodnych <xref:System.Windows.Window> ponownie definiuje wartość domyślna tej właściwości należy <xref:System.Windows.Visibility.Collapsed>. Ma to wpływu na początkowo utworzony nieuruchomiona przebiegu miary układu <xref:System.Windows.Window>, i <xref:System.Windows.UIElement.RenderSize%2A> zwraca (0,0). Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Window>. <xref:System.Windows.Controls.Primitives.Popup> również ponownie definiuje wartość domyślna ma być <xref:System.Windows.Visibility.Collapsed>, z podobne efekty dla <xref:System.Windows.Controls.Primitives.Popup> i jej klas pochodnych.  
  
<a name="dependencyPropertyInfo_Visibility"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.VisibilityProperty>|  
|Wartość właściwości metadanych `true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład zawiera implementację programu obsługi, który odwołuje się do dwóch różnych przycisków nazwanego, które mają być parę wykluczają się wzajemnie w interfejsie użytkownika. Przed uruchomieniem logiki rzeczywiste program skojarzony z przyciskiem, przycisk jest ustawiony na <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>, a inny przycisk pary jest ustawiona na <xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>.  
  
 [!code-csharp[MediaElement_snip#UIElementVisibility](~/samples/snippets/csharp/VS_Snippets_Wpf/MediaElement_snip/CSharp/PlaybackExample.cs#uielementvisibility)]
 [!code-vb[MediaElement_snip#UIElementVisibility](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MediaElement_snip/VB/PlaybackExample.vb#uielementvisibility)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsVisible" />
        <altmember cref="T:System.Windows.Visibility" />
      </Docs>
    </Member>
    <Member MemberName="VisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisibilityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.VisibilityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisibilityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisibilityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisibilityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.VisibilityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.UIElement.Visibility" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>