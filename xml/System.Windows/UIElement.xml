<Type Name="UIElement" FullName="System.Windows.UIElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8479fb90b87cf7db6a64e500883322e3fd9bdbab" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69443722" /></Metadata><TypeSignature Language="C#" Value="public class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi UIElement extends System.Windows.Media.Visual implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.UIElement" />
  <TypeSignature Language="VB.NET" Value="Public Class UIElement&#xA;Inherits Visual&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class UIElement : System::Windows::Media::Visual, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <TypeSignature Language="F#" Value="type UIElement = class&#xA;    inherit Visual&#xA;    interface IAnimatable&#xA;    interface IInputElement" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Visual</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.UidProperty("Uid")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="T:System.Windows.UIElement" />jest klasą bazową dla implementacji na poziomie rdzenia WPF, które są oparte na elementach Windows Presentation Foundation (WPF) i podstawowych charakterystykach prezentacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement>zapewnia punkt początkowy dla charakterystyk układu elementu, a także udostępnia metody wirtualne, które klasy pochodne mogą przesłonić, co może mieć wpływ na zachowanie renderowania układu elementu i jego elementów podrzędnych.  
  
 Większość zachowań danych wejściowych i ukierunkowanych na elementy ogólnie jest również zdefiniowana w <xref:System.Windows.UIElement> klasie. Obejmuje to zdarzenia dotyczące klawiatury, wskaźnika myszy i wejścia pióra oraz powiązane właściwości stanu. Wiele z tych zdarzeń jest kierowanych, a wiele zdarzeń związanych z danymi wejściowymi ma zarówno propagację routingu, jak i wersję tunelowania zdarzenia. Te sparowane zdarzenia są zwykle zdarzeniami, które mają największe znaczenie dla autorów kontroli.  
  
 <xref:System.Windows.UIElement>obejmuje [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] również, które odnoszą [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] się do modelu zdarzeń, w tym metody, które mogą podnieść określone zdarzenia kierowane, które pochodzą z wystąpienia elementu.  
  
 Pod kątem architektury, <xref:System.Windows.UIElement> można rozważyć w przybliżeniu odpowiednikiem okna w [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] programowaniu lub elementem w [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] programowaniu. <xref:System.Windows.UIElement>jest elementem podstawowym na poziomie WPF Core.  
  
 Ma następujące możliwości zdefiniowane <xref:System.Windows.UIElement> przez klasę: <xref:System.Windows.UIElement>  
  
-   Może być renderowany jako element podrzędny (<xref:System.Windows.UIElement> pochodzi z <xref:System.Windows.Media.Visual>klasy grafiki wysokiego poziomu)  
  
-   Zawiera logikę, która jest używana do zmieniania rozmiaru i pozycjonowania <xref:System.Windows.UIElement> możliwych elementów podrzędnych (w przypadku interpretacji przez system układu)  
  
-   Może odpowiadać na dane wejściowe użytkownika (w tym kontrolę nad miejscem, w którym są wysyłane dane wejściowe za pomocą routingu zdarzeń lub routingu poleceń)  
  
-   Może wywoływać Zdarzenia trasowane, które podróżują trasę za pomocą logicznego drzewa elementu  
  
-   Obsługuje niektóre aspekty systemu animacji  
  
 <xref:System.Windows.FrameworkElement>jest klasą implementacji na poziomie platformy WPF, która kompiluje się w systemie <xref:System.Windows.UIElement>i dodaje określone interakcje z poziomem platformy WPF. <xref:System.Windows.FrameworkElement>dodaje i definiuje następujące możliwości:  
  
-   Dodatkowe charakterystyki układu specyficzne dla platformy  
  
-   Obsługa bogatszego raportowania metadanych na właściwościach  
  
-   Implementacja specyficzna dla klasy niektórych wejściowych klas bazowych i ich dołączone właściwości lub dołączone zdarzenia  
  
-   Obsługa stylu  
  
-   Obsługa dalszych animacji  
  
 Inna Klasa pokrewna to <xref:System.Windows.ContentElement>. Klasa implementuje wiele z tych samych elementów członkowskich, co <xref:System.Windows.UIElement>jest; różnica między tymi dwiema klasami musi wykonać zamierzone miejsce w ogólnym modelu zawartości. <xref:System.Windows.ContentElement> Klasa <xref:System.Windows.UIElement> pochodna zwykle definiuje stosunkowo sztywny model zawartości, co oznacza, że istnieją ograniczenia dotyczące tego, jakie elementy mogą być elementami podrzędnymi w znacznikach. Może istnieć możliwość przetworzenia <xref:System.Windows.UIElement>mniejszej restrykcyjnej zawartości podrzędnej w programie, ale ta pojemność jest zwykle scentralizowana we właściwościach zawartości. Klasa <xref:System.Windows.ContentElement> pochodna zwykle nie jest ograniczana o zawartość, aby obsługiwać scenariusze takie jak dokumenty w formacie przepływu.  
  
> [!IMPORTANT]
>  <xref:System.Windows.UIElement.Visibility%2A>stan dotyczy wszystkich obsługi danych wejściowych przez ten element. Elementy, które nie są widoczne, nie uczestniczą w testowaniu trafień i nie odbierają zdarzeń wejściowych, nawet jeśli wskaźnik myszy znajduje się nad granicami, w których były widoczne.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UIElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.UIElement" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tworzenie nowego wystąpienia, które jest rzeczywiście typu <xref:System.Windows.UIElement> , jest rzadko w kodzie aplikacji, ponieważ <xref:System.Windows.UIElement> jest elementem podstawowym. Zobacz [Omówienie elementów podstawowych](~/docs/framework/wpf/advanced/base-elements-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje procedurę obsługi zdarzeń kierowanych dla określonego zdarzenia kierowanego, dodając procedurę obsługi do kolekcji programu obsługi w bieżącym elemencie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement.AddHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identyfikator dla zdarzenia kierowanego, które ma być obsłużone.</param>
        <param name="handler">Odwołanie do implementacji programu obsługi.</param>
        <summary>Dodaje procedurę obsługi zdarzeń kierowanych dla określonego zdarzenia kierowanego, dodając procedurę obsługi do kolekcji programu obsługi w bieżącym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można dodać tę samą procedurę obsługi dla tego samego zdarzenia wiele razy, nie wywołując wyjątku. Jednakże procedura obsługi jest wywoływana wielokrotnie, gdy zdarzenie jest obsługiwane. W związku z tym należy wziąć pod uwagę, jak takie zachowanie może mieć skutki uboczne, które należy uwzględnić w implementacji programu obsługi.  
  
 Ta metoda służy zwykle do zapewnienia implementacji metody dostępu "Add" dla [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] wzorca dostępu do zdarzenia niestandardowego zdarzenia kierowanego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="uIElement.AddHandler (routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identyfikator dla zdarzenia kierowanego, które ma być obsłużone.</param>
        <param name="handler">Odwołanie do implementacji programu obsługi.</param>
        <param name="handledEventsToo"><see langword="true" />zarejestrowanie procedury obsługi w taki sposób, aby była wywoływana nawet wtedy, gdy zdarzenie trasowane jest oznaczone jako obsługiwane w danych zdarzenia. <see langword="false" /> w celu zarejestrowania programu obsługi z domyślnym warunkiem, że nie będzie on wywoływany, jeśli zdarzenie trasowane zostało już oznaczone jako obsługiwane.  
  
Wartość domyślna to <see langword="false" />.  
  
Nie należy rutynowo monitować o obsługę zdarzenia kierowanego.</param>
        <summary>Dodaje procedurę obsługi zdarzeń kierowanych dla określonego zdarzenia kierowanego, dodając procedurę obsługi do kolekcji programu obsługi w bieżącym elemencie. Określ <paramref name="handledEventsToo" /> ,<see langword="true" /> że mają być wywoływane dostarczone procedury obsługi dla zdarzenia kierowanego, które zostało już oznaczone jako obsługiwane przez inny element wzdłuż trasy zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przetwarzanie zdarzeń wejściowych niskiego poziomu w praktyce jest złożonym zadaniem. Wiele formantów implementuje zachowanie w przypadku, gdy określone zdarzenie jest oznaczone jako obsłużone i jest zastępowane przez inne bardziej intuicyjne zdarzenie. Ogólnie rzecz biorąc, kontrolka spowoduje oznaczenie zdarzenia wejściowego platformy jako obsługiwanego, jeśli istnieje pewien zamiar projektu. W niektórych scenariuszach te operacje związane z projektowaniem mogą nie być określone w wymaganiu dla zdarzenia wejściowego. Jest to konieczne w przypadku takich scenariuszy, które rejestrują `true` programy obsługi zgodnie z `handledEventsToo` oczekiwaniami. Nie należy jednak wykonywać tej procedury. Wywoływanie programów obsługi w odpowiedzi na wszystkie zdarzenia, nawet jeśli są obsługiwane, będzie komplikuje swoją logikę przetwarzania zdarzeń aplikacji. Jeśli logika obsługi jest istotna, może pojawić się spadek wydajności. Należy zastrzec użycie dołączanych programów obsługi dla już obsłużonych zdarzeń, które są już wykryte podczas procesu tworzenia, które niektóre kontrolki obsługują zdarzenia, które nadal mają być obsługiwane przez logikę aplikacji.  
  
 Inną techniką w celu uniknięcia zachowania klas dla niektórych kombinacji kontroli zdarzeń jest użycie wersji zapoznawczej tego zdarzenia. Na przykład jeśli <xref:System.Windows.UIElement.MouseLeftButtonDown> jest oznaczone jako obsługiwane przez obsługę klasy, można <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> zamiast tego dodać procedury obsługi.  
  
 Można dodać tę samą procedurę obsługi dla tego samego zdarzenia wiele razy, nie wywołując wyjątku. Jednakże procedura obsługi jest wywoływana wielokrotnie, gdy zdarzenie jest obsługiwane. W związku z tym należy wziąć pod uwagę, jak takie zachowanie może mieć skutki uboczne, które należy uwzględnić w implementacji programu obsługi.  
  
 Ta metoda służy zwykle do zapewnienia implementacji metody dostępu "Add" dla [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] wzorca dostępu do zdarzenia niestandardowego zdarzenia kierowanego.  
  
   
  
## Examples  
 Poniższy przykład implementuje procedurę obsługi wywołaną na <xref:System.Windows.FrameworkElement.Initialized> zdarzeniu na stronie, która dołącza zdefiniowany program obsługi do jednego z nazwanych elementów na stronie przy użyciu. `handledEventsToo` `true` Ta procedura obsługi zostanie wywołana nawet wtedy, gdy inny element wzdłuż trasy oznaczył dane zdarzenia udostępnionego jako obsłużone przed osiągnięciem elementu obsługi w marszrucie.  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AddToEventRoute : System.Windows.EventRoute * System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.AddToEventRoute (route, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route">Trasa zdarzenia, do której są dodawane programy obsługi.</param>
        <param name="e">Dane zdarzenia, które są używane do dodawania programów obsługi. Ta metoda używa <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> właściwości danych zdarzenia do tworzenia programów obsługi.</param>
        <summary>Dodaje programy obsługi do określonego <see cref="T:System.Windows.EventRoute" /> dla bieżącej <see cref="T:System.Windows.UIElement" /> kolekcji programu obsługi zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda może być używana przez elementy hosta zawartości (które implementują <xref:System.Windows.IContentHost> lub te, które nie są), aby dodać programy obsługi dla elementów podrzędnych <xref:System.Windows.EventRoute>do. Zwykle nie jest to wymagane dla <xref:System.Windows.UIElement>programu, ponieważ programy obsługi są automatycznie dodawane do wszystkich elementów znalezionych w kompletnym drzewie logicznym. Jednak w niektórych przypadkach, gdy <xref:System.Windows.ContentElement> i <xref:System.Windows.UIElement> są mieszane w drzewach z szablonami, elementy, które pochodzą z szablonu, muszą zostać dodane do trasy. Obie <xref:System.Windows.ContentElement> wersje <xref:System.Windows.UIElement> tej metody i obsługują tę funkcję.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.UIElement.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy ten element może być używany jako element docelowy operacji przeciągania i upuszczania.  Jest to właściwość zależności.</summary>
        <value><see langword="true" />Jeśli ten element może być używany jako element docelowy operacji przeciągania i upuszczania; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacje przeciągania i upuszczania nie są domyślnie włączone i muszą być obsługiwane celowo przez ustawienie <xref:System.Windows.UIElement.AllowDrop%2A>. `true` Poza tym ustawieniem podstawowym zachowanie funkcji przeciągania i upuszczania jest całkowicie specyficzne dla implementacji i nie jest zdefiniowane przez <xref:System.Windows.UIElement> ani w żadnej innej klasie elementu podstawowego. Niektóre kontrolki, na przykład <xref:System.Windows.Controls.RichTextBox>, mają zachowanie domyślne. Aby uzyskać więcej informacji na temat przeciągania i upuszczania, zobacz [Omówienie przeciągania i upuszczania](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).  
  
 <xref:System.Windows.FrameworkElement>przesłania metadane dla tej właściwości zależności w implementacji. W celu<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> `true` wyznaczenia tej właściwości można zezwolić na dziedziczenie wartości właściwości (jest w metadanych). <xref:System.Windows.FrameworkElement> Dziedziczenie wartości właściwości w tym kontekście oznacza, że jeśli istnieją elementy podrzędne bez żadnej innej wartości <xref:System.Windows.UIElement.AllowDrop%2A> dla przypisanych za pośrednictwem wartości lokalnych lub stylów, wartość najbliższego nadrzędnego elementu z tą wartością przypisaną (ponownie w stylach domyślnie wartości lub wartość lokalna), a następnie wartość z elementu nadrzędnego zostanie przypisana do wszystkich wcześniej nieprzypisanych elementów podrzędnych przez system właściwości. W tym przypadku można określić, czy zezwolić na upuszczanie operacji w elemencie głównym, a ta wartość zostanie przepropagowana do wszystkich elementów podrzędnych, które nie zostały przypisane do nich `false`jako.  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.AllowDropProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład znaczników <xref:System.Windows.UIElement.AllowDrop%2A> ustawia właściwość `true` przy użyciu atrybutu na, a <xref:System.Windows.Controls.TextBox>także ustawić <xref:System.Windows.Controls.TextBox> inne powiązane właściwości, które w agregacji umożliwiają, aby były elementem docelowym wielowierszowego obiektu danych tekstowych, gdy jest on przeciągany w. Pełny przykład można znaleźć w sekcji [ładowanie porzuconego pliku przykładowego](https://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7).  
  
 [!code-xaml[DragDrop_DropOpenTextFile#UIElementAllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DropOpenTextFile/CS/window1.xaml#uielementallowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowDropProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AllowDropProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.AllowDrop" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Stosuje animację do określonej właściwości zależności w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest zapieczętowana i nie może zostać przesłonięta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit" Usage="uIElement.ApplyAnimationClock (dp, clock)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">Identyfikator właściwości do animacji.</param>
        <param name="clock">Zegar animacji, który kontroluje i deklaruje animację.</param>
        <summary>Stosuje animację do określonej właściwości zależności w tym elemencie. Wszystkie istniejące animacje zostaną zatrzymane i zastąpione nową animacją.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby usunąć animację z właściwości, należy określić identyfikator dla tej właściwości `dp` , a następnie określić `clock` jako. `null` Spowoduje to usunięcie animacji, a właściwość animowana ma ustawioną wartość bazową. Pierwotnie skojarzony zegar animacji nie jest jednak zatrzymywany. Wszystkie inne animacje przypisane do tego zegara będą nadal działać.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` ma do niego zastosowana animacja o określonym chronometrażu przez wywołanie metody <xref:System.Windows.UIElement.ApplyAnimationClock%2A> .  
  
 [!code-csharp[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/ClockControllerSpeedRatioExample.cs#uielementapplyanimationclock)]
 [!code-vb[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/clockcontrollerspeedratioexample.vb#uielementapplyanimationclock)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="uIElement.ApplyAnimationClock (dp, clock, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość do animacji.</param>
        <param name="clock">Zegar animacji, który kontroluje i deklaruje animację.</param>
        <param name="handoffBehavior">Wartość wyliczenia. Wartość domyślna to <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, co spowoduje zatrzymanie wszelkich istniejących animacji i zamienienie na nowe.</param>
        <summary>Stosuje animację do określonej właściwości zależności tego elementu, z możliwością określenia, co się stanie, jeśli właściwość ma już uruchomioną animację.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby usunąć animację z właściwości, należy określić identyfikator dla tej właściwości `dp` , a następnie określić `clock` jako. `null` Spowoduje to usunięcie animacji, a właściwość animowana ma ustawioną wartość bazową. Pierwotnie skojarzony zegar animacji nie jest jednak zatrzymywany. Wszystkie inne animacje przypisane do tego zegara będą nadal działać.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCaptured : bool" Usage="System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy do tego elementu jest przechwytywany co najmniej jeden element dotykowy.</summary>
        <value><see langword="true" />w przypadku przechwycenia co najmniej jednej dotyku do tego elementu; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCapturedWithin : bool" Usage="System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy co najmniej jedna dotknięcie jest przechwytywana do tego elementu lub do żadnych elementów podrzędnych w jego drzewie wizualnym.</summary>
        <value><see langword="true" />Jeśli co najmniej jedna dotknięcie jest przechwytywana do tego elementu lub dowolnego elementu podrzędnego w jego drzewie wizualnym; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesDirectlyOver : bool" Usage="System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy dla tego elementu zostanie naciśnięta co najmniej jedna dotknięcie.</summary>
        <value><see langword="true" />w przypadku naciśnięcia co najmniej jednego dotknięcia tego elementu; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesOver : bool" Usage="System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy co najmniej jedna dotknięcie jest wciśnięta nad tym elementem lub wszelkimi elementami podrzędnymi w jego drzewie wizualnym.</summary>
        <value><see langword="true" />Jeśli co najmniej jedna dotknięcie jest wciśnięta nad tym elementem lub wszelkimi elementami podrzędnymi w jego drzewie wizualnym; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arrange">
      <MemberSignature Language="C#" Value="public void Arrange (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Arrange(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Arrange (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Arrange(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="member this.Arrange : System.Windows.Rect -&gt; unit" Usage="uIElement.Arrange finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">Końcowy rozmiar, który element nadrzędny oblicza dla elementu podrzędnego, jako <see cref="T:System.Windows.Rect" /> wystąpienie.</param>
        <summary>Położenie elementów podrzędnych i Określanie rozmiaru dla <see cref="T:System.Windows.UIElement" />. Elementy nadrzędne wywołują tę metodę <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> z implementacji (lub równoważnej do poziomu platformy WPF) w celu utworzenia cyklicznej aktualizacji układu. Ta metoda stanowi drugi przebieg aktualizacji układu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku elementów platformy WPF Framework, które są oparte na scenariuszach <xref:System.Windows.UIElement.Arrange%2A> , zachowanie dla nie powinno być (i nie może, o ile nie zostanie zacieniowany). Zamiast tego należy zastąpić <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementację w klasie. Twoja <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementacja jest wywoływana wewnętrznie przez <xref:System.Windows.UIElement.Arrange%2A> program jako część domyślnych operacji układu na poziomie platformy WPF. Implementacja powinna również wywołać <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> każdy element podrzędny, jeśli ma elementy podrzędne. <xref:System.Windows.UIElement.ArrangeCore%2A>  
  
 W przypadku elementów opartych na poziomie WPF Core, zachowanie dla <xref:System.Windows.UIElement.Arrange%2A> nie powinno być (i nie może, o ile nie zostanie zacieniowany). Zamiast tego należy przesłonić <xref:System.Windows.UIElement.ArrangeCore%2A> w klasie. Twoja <xref:System.Windows.UIElement.ArrangeCore%2A> implementacja jest wywoływana wewnętrznie przez <xref:System.Windows.UIElement.Arrange%2A> program jako część domyślnych operacji układu na poziomie platformy WPF. Jednak założono, że korzystasz z układu platformy WPF Framework i jego systemu układu, który często nie jest w przypadku wyprowadzania elementów na poziomie WPF Core z <xref:System.Windows.UIElement> klasy elementu podstawowego. Implementacja powinna również wywołać <xref:System.Windows.UIElement.Arrange%2A> każdy element podrzędny, jeśli ma elementy podrzędne. <xref:System.Windows.UIElement.ArrangeCore%2A> Należy zauważyć, że scenariusz na poziomie rdzenia WPF oznacza, że nie używasz <xref:System.Windows.FrameworkElement> klasy pochodnej, ponieważ <xref:System.Windows.FrameworkElement> zamknięcia <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.  
  
 Obliczenia pozycjonowania układu platformy WPF w programie [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] składa się <xref:System.Windows.UIElement.Measure%2A> z wywołania i <xref:System.Windows.UIElement.Arrange%2A> wywołania. W trakcie <xref:System.Windows.Size> `availableSize`wywołania system układu określa wymagania dotyczące rozmiaru elementu przy użyciu podanego argumentu (). <xref:System.Windows.UIElement.Measure%2A> <xref:System.Windows.UIElement.Arrange%2A> Podczas wywołania system układu kończy rozmiar i położenie pola ograniczenia elementu.  Aby uzyskać więcej informacji, zobacz [Układ](~/docs/framework/wpf/advanced/layout.md).  
  
 `availableSize`może to być dowolna liczba od zera do nieskończoności. Elementy, które mają zostać ustanowione, zwracają <xref:System.Windows.Size> minimalną wymaganą `availableSize` przez parametr.  
  
 Po pierwszym utworzeniu wystąpienia układu zawsze odbierane jest <xref:System.Windows.UIElement.Measure%2A> wywołanie przed. <xref:System.Windows.UIElement.Arrange%2A> Jednak po <xref:System.Windows.UIElement.Arrange%2A> pierwszym przebiegu układu może ono odebrać wywołanie <xref:System.Windows.UIElement.Measure%2A>bez. może się tak zdarzyć, gdy właściwość, która ma wpływ tylko <xref:System.Windows.UIElement.Arrange%2A> na zmiany (na przykład wyrównanie <xref:System.Windows.UIElement.Arrange%2A> ), lub gdy obiekt nadrzędny otrzymuje bez <xref:System.Windows.UIElement.Measure%2A>. Wywołanie spowoduje automatyczne <xref:System.Windows.UIElement.Arrange%2A> unieważnienie wywołania. <xref:System.Windows.UIElement.Measure%2A>  
  
 Aktualizacje układów zwykle odbywają się asynchronicznie (w czasie określonym przez system układu). Element może nie odzwierciedlać zmian właściwości, które wpływają na rozmiar elementu (na przykład <xref:System.Windows.FrameworkElement.Width%2A>).  
  
> [!NOTE]
>  Aktualizacje układu mogą być wymuszane przy użyciu <xref:System.Windows.UIElement.UpdateLayout%2A> metody, ale wywołanie tej funkcji nie jest zalecane, ponieważ jest zwykle zbędne i może spowodować niską wydajność. W wielu sytuacjach, gdy <xref:System.Windows.UIElement.UpdateLayout%2A> wywoływanie może być odpowiednie, system układu prawdopodobnie będzie już przetwarzał aktualizacje. System układu może przetwarzać zmiany układu w sposób, który może zoptymalizować wszystkie niezbędne aktualizacje w ramach pakietu.  
  
 System układu przechowuje dwie osobne kolejki nieprawidłowych układów, jeden <xref:System.Windows.UIElement.Measure%2A> dla i jeden <xref:System.Windows.UIElement.Arrange%2A>dla. Kolejka układu jest sortowana na podstawie kolejności elementów w drzewie wizualnym. Elementy znajdujące się wyżej w drzewie znajdują się w górnej części kolejki, aby uniknąć nadmiarowych układów spowodowanych przez powtórzone zmiany elementów nadrzędnych. Zduplikowane wpisy są automatycznie usuwane z kolejki, a elementy są automatycznie usuwane z kolejki, jeśli są już prawidłowe.  
  
 Podczas aktualizowania układu <xref:System.Windows.UIElement.Measure%2A> kolejka jest opróżniana jako pierwsza, a następnie <xref:System.Windows.UIElement.Arrange%2A> kolejka. Element w <xref:System.Windows.UIElement.Arrange%2A> kolejce nigdy nie będzie układany, jeśli <xref:System.Windows.UIElement.Measure%2A> w kolejce znajduje się element.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected virtual void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="abstract member ArrangeCore : System.Windows.Rect -&gt; unit&#xA;override this.ArrangeCore : System.Windows.Rect -&gt; unit" Usage="uIElement.ArrangeCore finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">Ostatni obszar w elemencie nadrzędnym, który powinien być używany do rozmieszczenia siebie i jego elementów podrzędnych.</param>
        <summary>Definiuje szablon dla definicji układu na poziomie WPF Core.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Zastąpienie tej metody jest odpowiednie tylko w przypadku wyprowadzania na poziomie rdzenia WPF i nie jest używany system układu platformy WPF i <xref:System.Windows.FrameworkElement> Klasa pochodna, ponieważ <xref:System.Windows.FrameworkElement> zamknięcia <xref:System.Windows.FrameworkElement.ArrangeCore%2A>. Jeśli używasz systemu układu platformy WPF Framework, odpowiednia metoda przesłonięcia dla zachowań układu dla konkretnych klas ma wartość <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.  
  
   
  
## Examples  
 <xref:System.Windows.UIElement.ArrangeCore%2A>implementacje powinny wywoływać implementację podstawową w celu zwrócenia rozmiaru, następnie <xref:System.Windows.UIElement.Arrange%2A> wywołać metodę każdego widocznego elementu podrzędnego i uzgodnić rozmiary zwrócone przez te <xref:System.Windows.UIElement.Arrange%2A> wywołania z rozmiarem podstawowej implementacji. Logika dla aspektu <xref:System.Windows.UIElement.ArrangeCore%2A> uzgadniania implementacji może się różnić w zależności od charakterystyki układu elementu. W poniższym przykładzie szablon `VisualChildren` jest hipotetyczną właściwością, którą element może zdefiniować, aby pomóc w wyliczeniu jej zawartości; <xref:System.Windows.UIElement> nie definiuje kolekcji zawartości na tym poziomie, architektura platformy WPF Framework omawia zachowanie zawartości do elementów pochodnych, takich jak określone kontrolki lub klasy bazowe formantów.  
  
 [!code-csharp[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementarrangeoverride)]
 [!code-vb[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementarrangeoverride)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Jeśli tworzysz elementy na poziomie WPF Core, należy przesłonić tę metodę, aby nadać elementowi na poziomie WPF podstawowe zachowanie układu rozmieszczenia lub w celu podjęcia właściwych decyzji dotyczących układu dotyczących elementów podrzędnych elementów. Przesłonięcie może być konieczne, jeśli te elementy podrzędne nie są rozpoznawane ze zdefiniowanego wzorca, <see cref="T:System.Windows.Controls.ItemCollection" />takiego jak.  
  
Element nadrzędny musi wywoływać konkretną <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> klasę dla każdego elementu podrzędnego, w przeciwnym razie te elementy podrzędne nie są renderowane.</para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Uruchamia animację dla określonej animowanej właściwości w tym elemencie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit" Usage="uIElement.BeginAnimation (dp, animation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość do animacji, która jest określona jako identyfikator właściwości zależności.</param>
        <param name="animation">Oś czasu animacji, która ma zostać uruchomiona.</param>
        <summary>Uruchamia animację dla określonej animowanej właściwości w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas sprawdzania, czy właściwość jest animowana, należy zauważyć, że animacja zacznie działać i będzie traktowana jako animowana, gdy zostanie wyrenderowana pierwsza ramka poza nieanimowanym punktem początkowym.  
  
 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> Jeśli`animation` jest ,`null`wówczas wszystkie bieżące animacje są usuwane i bieżąca wartość właściwości jest utrzymywana.  
  
 Jeśli cała `animation` wartość to `null`, wszystkie animacje są usuwane z właściwości, a wartość właściwości przywraca jej wartość bazową. Pierwotnie skojarzona oś czasu animacji nie jest jednak zatrzymywana. Wszystkie inne animacje przypisane do tej osi czasu będą nadal działać.  
  
   
  
## Examples  
 Poniższy przykład tworzy animację, przypisuje ją, a następnie wywołuje <xref:System.Windows.UIElement.BeginAnimation%2A> ją w celu jej uruchomienia.  
  
 [!code-csharp[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#beginanimation)]
 [!code-vb[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#beginanimation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="uIElement.BeginAnimation (dp, animation, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość do animacji, która jest określona jako identyfikator właściwości zależności.</param>
        <param name="animation">Oś czasu animacji, która ma zostać zastosowana.</param>
        <param name="handoffBehavior">Wartość wyliczenia określająca sposób interakcji nowej animacji z dowolnym bieżącym (uruchomionym) animacjami, które mają już wpływ na wartość właściwości.</param>
        <summary>Uruchamia konkretną animację dla określonej animowanej właściwości w tym elemencie z opcją określenia, co się stanie, jeśli właściwość ma już uruchomioną animację.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas sprawdzania, czy właściwość jest animowana, należy zauważyć, że animacja zacznie działać i będzie traktowana jako animowana, gdy zostanie wyrenderowana pierwsza ramka poza nieanimowanym punktem początkowym.  
  
 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> Jeśli`animation` jest ,`null`wówczas wszystkie bieżące animacje są usuwane i bieżąca wartość właściwości jest utrzymywana.  
  
 Jeśli cała `animation` wartość to `null`, wszystkie animacje są usuwane z właściwości, a wartość właściwości przywraca jej wartość bazową. Pierwotnie skojarzona oś czasu animacji nie jest jednak zatrzymywana. Wszystkie inne animacje przypisane do tej osi czasu będą nadal działać.  
  
   
  
## Examples  
 Poniższy przykład implementuje procedurę obsługi, która uzyskuje istniejącą animację z zasobu, a następnie wywołuje <xref:System.Windows.UIElement.BeginAnimation%2A> z określonym zachowaniem oddania.  
  
 [!code-csharp[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/csharp/VS_Snippets_Wpf/BrushesIntroduction/CSharp/SampleViewer.xaml.cs#beginanimationhandoff)]
 [!code-vb[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BrushesIntroduction/visualbasic/sampleviewer.xaml.vb#beginanimationhandoff)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffect BitmapEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffect" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffect As BitmapEffect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffect ^ BitmapEffect { System::Windows::Media::Effects::BitmapEffect ^ get(); void set(System::Windows::Media::Effects::BitmapEffect ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BitmapEffect : System.Windows.Media.Effects.BitmapEffect with get, set" Usage="System.Windows.UIElement.BitmapEffect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.Obsolete("Avoid using BitmapEffects as they have very poor performance characteristics.  They will be deprecated in a future version.  Consider using the UIElement.Effect property and ShaderEffects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia efekt mapy bitowej stosowany bezpośrednio do renderowanej zawartości dla tego elementu.  Jest to właściwość zależności.</summary>
        <value>Efekt mapy bitowej, który ma zostać zastosowany.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Effects.BitmapEffect>jest typem abstrakcyjnym, dlatego [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] użycie wymaga zaimplementowanej <xref:System.Windows.Media.Effects.BitmapEffect>klasy pochodnej, takiej jak <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>. Należy pamiętać, że jedna zaimplementowana Klasa pochodna jest typem kolekcji, który pozwala określić więcej <xref:System.Windows.Media.Effects.BitmapEffect>niż jeden sekwencyjny, przy użyciu zagnieżdżonej składni znacznika.  
  
 Żadna istniejąca Klasa <xref:System.Windows.Media.Effects.BitmapEffect> pochodna nie obsługuje konwertera typów, [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] więc Składnia używana dla tej właściwości jest zazwyczaj składnią elementu właściwości.  
  
<a name="dependencyPropertyInfo_BitmapEffect"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.BitmapEffectProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład ustawia efekt mapy bitowej przy użyciu <xref:System.Windows.Media.Effects.BlurBitmapEffect>.  
  
 [!code-csharp[EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline](~/samples/snippets/csharp/VS_Snippets_Wpf/EffectsGallery_snip/CSharp/blurcodebehindexample.xaml.cs#codebehindblurcodebehindexampleinline)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInput">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffectInput" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffectInput As BitmapEffectInput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffectInput ^ BitmapEffectInput { System::Windows::Media::Effects::BitmapEffectInput ^ get(); void set(System::Windows::Media::Effects::BitmapEffectInput ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BitmapEffectInput : System.Windows.Media.Effects.BitmapEffectInput with get, set" Usage="System.Windows.UIElement.BitmapEffectInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.Obsolete("Avoid using BitmapEffects as they have very poor performance characteristics.  They will be deprecated in a future version.  Consider using the UIElement.Effect property and ShaderEffects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffectInput</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia źródło danych wejściowych dla efektu mapy bitowej stosowanego bezpośrednio do renderowanej zawartości dla tego elementu.  Jest to właściwość zależności.</summary>
        <value>Źródło efektów mapy bitowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_BitmapEffectInput"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.BitmapEffectInputProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInputProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectInputProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectInputProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectInputProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BitmapEffectInputProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.BitmapEffectInput" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BitmapEffectProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.BitmapEffectProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.BitmapEffect" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMode">
      <MemberSignature Language="C#" Value="public System.Windows.Media.CacheMode CacheMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.CacheMode CacheMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CacheMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CacheMode As CacheMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::CacheMode ^ CacheMode { System::Windows::Media::CacheMode ^ get(); void set(System::Windows::Media::CacheMode ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheMode : System.Windows.Media.CacheMode with get, set" Usage="System.Windows.UIElement.CacheMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.CacheMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia buforowaną reprezentację <see cref="T:System.Windows.UIElement" />.</summary>
        <value>A <see cref="T:System.Windows.Media.CacheMode" /> który przechowuje w pamięci podręcznej <see cref="T:System.Windows.UIElement" />reprezentację.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.CacheMode%2A> Ustaw właściwość, gdy chcesz zwiększyć wydajność dla zawartości, która jest czasochłonna do renderowania. Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Media.BitmapCache>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.CacheMode" />
        <altmember cref="T:System.Windows.Media.BitmapCache" />
        <altmember cref="T:System.Windows.Media.BitmapCacheBrush" />
      </Docs>
    </Member>
    <Member MemberName="CacheModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CacheModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CacheModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.CacheModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CacheModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CacheModeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CacheModeProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.CacheModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.CacheMode" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberSignature Language="F#" Value="abstract member CaptureMouse : unit -&gt; bool&#xA;override this.CaptureMouse : unit -&gt; bool" Usage="uIElement.CaptureMouse " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Próbuje wymusić przechwycenie wskaźnika myszy do tego elementu.</summary>
        <returns><see langword="true" />Jeśli mysz została przechwycona pomyślnie; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby można było przechwycić element, musi on być włączony. Sprawdź, <xref:System.Windows.UIElement.IsEnabled%2A> czy `true` przed wywołaniem <xref:System.Windows.UIElement.CaptureMouse%2A>.  
  
 W <xref:System.Windows.UIElement.CaptureMouse%2A> `true` `true`przypadku wywołania zwrotnego jest również. <xref:System.Windows.UIElement.IsMouseCaptured%2A>  
  
 Jeśli wywołanie <xref:System.Windows.UIElement.CaptureMouse%2A> zwrotne zwraca `true`, <xref:System.Windows.UIElement.GotMouseCapture> zdarzenia <xref:System.Windows.UIElement.IsMouseCapturedChanged> i są wywoływane, <xref:System.Windows.UIElement.CaptureMouse%2A> z <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> w przypadku danych zdarzenia raportowanych jako element, w którym wywoływana jest metoda. Jeśli wymusisz przechwytywanie, możesz zakłócać istniejące przechwycenia — szczególnie w przypadku przechwytywania, które odnoszą się do przeciągania i upuszczania za pomocą myszy.  
  
 Aby wyczyścić funkcję przechwytywania myszy ze wszystkich elementów, <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> należy wywołać `element` polecenie z parametrem dostarczonym jako `null`.  
  
   
  
## Examples  
 W poniższym przykładzie jest implementowana para uchwytów dla kombinacji wskaźnika myszy i wejścia klawiszy, która przechwytuje (i nie przechwytuje) mysz i włącza specjalny tryb myszy do wyświetlania modelu 3W.  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberSignature Language="F#" Value="abstract member CaptureStylus : unit -&gt; bool&#xA;override this.CaptureStylus : unit -&gt; bool" Usage="uIElement.CaptureStylus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Próbuje wymusić przechwycenie pióra do tego elementu.</summary>
        <returns><see langword="true" />Jeśli pióro zostało pomyślnie przechwycone; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja oparta na podstawowym domyślnym urządzeniu pisakowym zawsze zwraca wartość `true`. Jeśli jednak rozszerzasz urządzenia wejściowe, które zapewniają implementację urządzenia dla systemu wejściowego, można utworzyć system z alternatywną implementacją urządzenia pióra, która może zwracać różne wyniki.  
  
 Gdy element przechwytuje pióro, otrzymuje dane wejściowe pióra, nawet jeśli pióro znajduje się poza granicami. Pióro jest zazwyczaj przechwytywane tylko podczas operacji przeciągania i upuszczania.  
  
 Wywołanie tej metody wywołuje podstawową metodę <xref:System.Windows.Input.Stylus> <xref:System.Windows.Input.Stylus.Capture%2A>statyczną. Rzeczywiste zachowanie przechwytywania jest implementowane przez aktywną implementację urządzenia pióra.  
  
 Aby można było przechwycić element, musi on być włączony. Sprawdź, <xref:System.Windows.UIElement.IsEnabled%2A> czy `true` przed wywołaniem <xref:System.Windows.UIElement.CaptureStylus%2A>zostanie zwrócone.  
  
 Jeśli wywołanie <xref:System.Windows.UIElement.CaptureStylus%2A> zwrotne `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A> jest `true`również.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.CaptureTouch : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement.CaptureTouch touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Urządzenie do przechwycenia.</param>
        <summary>Podejmuje próbę wymuszenia przechwycenia dotyku do tego elementu.</summary>
        <returns><see langword="true" />Jeśli określony tryb dotyku jest przechwytywany do tego elementu; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.CaptureTouch%2A>zwraca `false` ,<xref:System.Windows.Input.TouchDevice> jeśli jest aktualnie przechwytywany do innego elementu.  
  
 Jeśli <xref:System.Windows.UIElement.CaptureTouch%2A> zwraca `true` ,<xref:System.Windows.UIElement.GotTouchCapture> to zdarzenie jest wywoływane.  
  
 Aby zwolnić przechwycenie jednego dotknięcia z tego elementu, użyj <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> metody i określ urządzenie dotykowe do wydania. Aby wypróbować wszystkie dotknięcia tego elementu, użyj <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="touchDevice" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Geometry Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Geometry Clip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Geometry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Geometry ^ Clip { System::Windows::Media::Geometry ^ get(); void set(System::Windows::Media::Geometry ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Clip : System.Windows.Media.Geometry with get, set" Usage="System.Windows.UIElement.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia geometrię używaną do definiowania konturu zawartości elementu.  Jest to właściwość zależności.</summary>
        <value>Geometria, która ma być używana w przypadku przycinania rozmiarów obszaru. Wartość domyślna to null <see cref="T:System.Windows.Media.Geometry" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy spoza geometrii zostaną przesłonięte wizualnie w renderowanym układzie. Geometria nie musi być prostokątna.  
  
<a name="dependencyPropertyInfo_Clip"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ClipProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
   
  
## Examples  
 Ten przykład pokazuje, jak zdefiniować <xref:System.Windows.UIElement.Clip%2A> region elementu struktury. Aby zdefiniować klip, użyj <xref:System.Windows.Media.Geometry> (na przykład <xref:System.Windows.Media.EllipseGeometry> , <xref:System.Windows.UIElement.Clip%2A> aby ustawić właściwość elementu. Widoczny będzie tylko obszar należący do regionu geometrii.  
  
 Poniższy przykład pokazuje <xref:System.Windows.Controls.Image> element bez zdefiniowanego regionu klipu. Ponieważ żaden region nie jest zdefiniowany, zostanie wyświetlony cały obraz.  
  
 [!code-xaml[ClipPathExample#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#2)]  
  
 ![Obiekt przed zastosowaniem regionu klipu] (~/add/media/mil-task-clip-region-noclip.png "Obiekt przed zastosowaniem regionu klipu")  
Obraz bez regionu wycinka  
  
 W następnym przykładzie jest tworzony identyczny obraz, z tą różnicą, że ma zdefiniowany region przycinania. <xref:System.Windows.Media.EllipseGeometry> Zostanie wyświetlona tylko część obrazu znajdująca się w obszarze.  
  
 [!code-xaml[ClipPathExample#4](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#4)]  
  
 ![Obiekt przycięty] (~/add/media/mil-task-clip-region-ellispe.PNG "Obiekt przycięty")  
Obraz z regionem klipu eliptycznego  
  
 Poniższy przykład pokazuje, jak animować <xref:System.Windows.UIElement.Clip%2A> region elementu struktury. W tym przykładzie <xref:System.Windows.Media.EllipseGeometry> jest używany do definiowania regionu klipu eliptycznego <xref:System.Windows.Controls.Image> dla elementu. A <xref:System.Windows.Media.Animation.PointAnimation> Animuj <xref:System.Windows.Media.EllipseGeometry.Center%2A> Właściwość geometrii elips od (0, 0) do (200, 150). Animacja rozpoczyna odtwarzanie po załadowaniu obrazu i powtarza się w nieskończoność.  
  
 [!code-xaml[ClipPathExample#5](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#5)]  
  
 Pełny przykład można znaleźć w przykładowym [regionie klipu](https://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="ClipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.ClipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.Clip" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToBounds">
      <MemberSignature Language="C#" Value="public bool ClipToBounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipToBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.ClipToBounds" />
      <MemberSignature Language="VB.NET" Value="Public Property ClipToBounds As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ClipToBounds { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ClipToBounds : bool with get, set" Usage="System.Windows.UIElement.ClipToBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy zawartość tego elementu (lub zawartość pochodząca z elementów podrzędnych tego elementu) ma być przycięta do rozmiaru elementu zawierającego.   Jest to właściwość zależności.</summary>
        <value><see langword="true" />Jeśli zawartość powinna być przycinana; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku elementów podrzędnych <xref:System.Windows.UIElement.ClipToBounds%2A> ma różny wpływ na zachowania układu w zależności od tego, czy wysokość i Szerokość elementu nadrzędnego są określane przez lub <xref:System.Windows.FrameworkElement.MaxHeight%2A> <xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A>  /  <xref:System.Windows.FrameworkElement.MaxWidth%2A>. <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A>elementu nadrzędnego są zawsze przestrzegane bez względu na wartość <xref:System.Windows.UIElement.ClipToBounds%2A> i efektywne przycinanie będzie zawsze przycinać zawartość w oparciu o te wartości maksymalne. <xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.UIElement.ClipToBounds%2A> <xref:System.Windows.UIElement.ClipToBounds%2A> Ustawienia elementu nadrzędnego `true`nie będą wycinania zawartości ,alezawartośćbędzieobcinana,jeślijest.`false` <xref:System.Windows.FrameworkElement.Width%2A>  
  
 Należy pamiętać, że domyślnie `false` jest to zachowanie ogólne zgodnie z implementacją <xref:System.Windows.UIElement> w klasie. Istnieje możliwość, że każdy element, który pochodzi od <xref:System.Windows.UIElement> , przesłania metadane właściwości zależności dla tej właściwości w tym wystąpieniu do `true` domyślnego. Niektóre istniejące klasy pochodne przesłaniają te metadane i/lub dostosowują wartość domyślną właściwości zależności.  
  
 <xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter> `true`i <xref:System.Windows.Controls.Primitives.Popup> każdy przesłania wartość domyślną.  
  
 <xref:System.Windows.FrameworkElement>zastępuje metadane dla tej właściwości zależności. W celu<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> `true` wyznaczenia tej właściwości można zezwolić na dziedziczenie wartości właściwości (jest w metadanych). <xref:System.Windows.FrameworkElement> Dziedziczenie wartości właściwości w tym kontekście oznacza, że jeśli istnieją elementy podrzędne bez żadnej innej wartości <xref:System.Windows.UIElement.ClipToBounds%2A> dla przypisanych za pośrednictwem wartości lokalnych lub stylów, wartość najbliższego nadrzędnego elementu z tą wartością przypisaną (ponownie w stylach domyślnie wartości lub wartość lokalna), a następnie wartość z elementu nadrzędnego zostanie przypisana do wszystkich nieprzypisanych elementów podrzędnych przez system właściwości. W tym przypadku można określić, czy zezwolić na Przycinanie klipów w elemencie głównym, a ta wartość będzie propagowana do wszystkich elementów podrzędnych, które nie zostały przypisane do nich jako `false`.  
  
<a name="dependencyPropertyInfo_ClipToBounds"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ClipToBoundsProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Clip" />
      </Docs>
    </Member>
    <Member MemberName="ClipToBoundsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipToBoundsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipToBoundsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipToBoundsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipToBoundsProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.ClipToBounds" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandBindings : System.Windows.Input.CommandBindingCollection" Usage="System.Windows.UIElement.CommandBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję <see cref="T:System.Windows.Input.CommandBinding" /> obiektów skojarzonych z tym elementem. A <see cref="T:System.Windows.Input.CommandBinding" /> włącza obsługę poleceń dla tego elementu i deklaruje połączenie między poleceniem, jego zdarzeniami i procedurami obsługi dołączonymi do tego elementu.</summary>
        <value>Kolekcja wszystkich <see cref="T:System.Windows.Input.CommandBinding" /> obiektów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Innym typowym sposobem wypełnienia <xref:System.Windows.UIElement.CommandBindings%2A> kolekcji jest użycie <xref:System.Windows.Input.CommandManager> metod programistycznie.  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  
  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *oneOrMoreCommandBindings*  
 Co najmniej jeden element. <xref:System.Windows.Input.CommandBinding> Każdy z tych elementów powinien mieć <xref:System.Windows.Input.CommandBinding.Command%2A> atrybut ustawiony na znane polecenie i atrybuty ustawione <xref:System.Windows.Input.CommandBinding.CanExecute> dla implementacji obsługi i <xref:System.Windows.Input.CommandBinding.Executed> . Aby uzyskać więcej informacji <xref:System.Windows.Input.CommandBinding>, zobacz.  
  
   
  
## Examples  
 Poniższy przykład dodaje <xref:System.Windows.Input.CommandBinding> do okna przy użyciu znacznika. Należy zauważyć, [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]że w <xref:System.Windows.Input.CommandBindingCollection> , nie jest zadeklarowany w znaczniku jako element; obiekt kolekcji jest wywnioskowany przez typ, który przyjmuje właściwość, i wypełniany jest <xref:System.Windows.Input.CommandBinding> element właściwości z co najmniej jednym elementem:  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 Aby uzyskać więcej informacji na [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] temat składni kolekcji, zobacz [Szczegóły składni XAML](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).  
  
 W poniższym przykładzie jest to samo samo w kodzie:  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="DesiredSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size DesiredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size DesiredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.DesiredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DesiredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size DesiredSize { System::Windows::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DesiredSize : System.Windows.Size" Usage="System.Windows.UIElement.DesiredSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera rozmiar, który ten element jest obliczany podczas pomiaru przebiegu procesu układu.</summary>
        <value>Obliczony rozmiar, który stał się żądanym rozmiarem przebiegu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zwrócona przez tę właściwość będzie tylko prawidłowym pomiarem, jeśli wartość <xref:System.Windows.UIElement.IsMeasureValid%2A> właściwości jest. `true`  
  
 <xref:System.Windows.UIElement.DesiredSize%2A>jest zwykle sprawdzany jako jeden z czynników pomiarowych podczas implementowania zastąpień układu, <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>takich <xref:System.Windows.FrameworkElement.MeasureOverride%2A>jak, <xref:System.Windows.UIElement.OnRender%2A> <xref:System.Windows.UIElement.OnRender%2A> , lub (w przypadku, można sprawdzić <xref:System.Windows.UIElement.RenderSize%2A> zamiast tego, ale zależy to od Implementacja). W zależności od scenariusza <xref:System.Windows.UIElement.DesiredSize%2A> mogą być w pełni przestrzegane przez logikę implementacji, ograniczenia dotyczące <xref:System.Windows.UIElement.DesiredSize%2A> mogą być stosowane, a takie ograniczenia mogą również zmienić inne cechy elementu nadrzędnego lub elementu podrzędnego. Na przykład kontrolka obsługująca regiony przewijalne (ale nie powinna pochodzić z formantów na poziomie platformy WPF, które już umożliwiają przewijanie regionów) może porównać dostępny rozmiar z <xref:System.Windows.UIElement.DesiredSize%2A>. Kontrolka może następnie ustawić stan wewnętrzny, który włączył paski przewijania w [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] dla tej kontrolki. <xref:System.Windows.UIElement.DesiredSize%2A> Lub może być również ignorowany w niektórych scenariuszach.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano <xref:System.Windows.UIElement.DesiredSize%2A> jako część <xref:System.Windows.FrameworkElement.MeasureOverride%2A> implementacji. Zwróć uwagę <xref:System.Windows.UIElement.Measure%2A> , jak jest wywoływana bezpośrednio przed <xref:System.Windows.UIElement.DesiredSize%2A>uzyskaniem. Gwarantuje to, że <xref:System.Windows.UIElement.DesiredSize%2A> posiada wiarygodną wartość.  
  
 [!code-cpp[PlotPanel#2](~/samples/snippets/cpp/VS_Snippets_Wpf/PlotPanel/CPP/PlotPanel.cpp#2)]
 [!code-csharp[PlotPanel#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PlotPanel/CSharp/PlotPanel.cs#2)]
 [!code-vb[PlotPanel#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PlotPanel/VisualBasic/PlotPanel.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.DragEventHandler " Usage="member this.DragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłosi bazowe zdarzenie przeciągania z tym elementem jako element docelowy przeciągania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.DragEnter> zdarzenia są dołączone do <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.DragEnterEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewDragEnter>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnDragEnter%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.DragEnter" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.DragEventHandler " Usage="member this.DragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłosi bazowe zdarzenie przeciągania przy użyciu tego elementu jako punktu początkowego przeciągania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, tak, że <xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType> jest częścią listy składowych klasy <xref:System.Windows.UIElement> , gdy jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.DragLeave> zdarzenia są dołączone do <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.DragLeaveEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.DragDrop.PreviewDragLeave>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnDragLeave%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.DragLeave" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.DragEventHandler " Usage="member this.DragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłosi bazowe zdarzenie przeciągania z tym elementem jako potencjalną tarczą docelową.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie występuje nawet wtedy, gdy przeciąganie pochodzi z granicy elementu. Jeśli przeciągnięcie rozpocznie się poza granicami, a następnie przenosi wewnątrz, to zdarzenie jest również zgłaszane, <xref:System.Windows.UIElement.DragEnter> a także powiązane zdarzenia w wersji zapoznawczej.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, tak, że <xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType> jest częścią listy składowych klasy <xref:System.Windows.UIElement> , gdy jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.DragOver> zdarzenia są dołączone do <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.DragOverEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.DragDrop.PreviewDragOver>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnDragOver%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.DragOver" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberSignature Language="F#" Value="member this.Drop : System.Windows.DragEventHandler " Usage="member this.Drop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie upuszczania z tym elementem jako element docelowy upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, tak, że <xref:System.Windows.UIElement.Drop?displayProperty=nameWithType> jest częścią listy składowych klasy <xref:System.Windows.UIElement> , gdy jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.Drop> zdarzenia są dołączone do <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.DropEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewDrop>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnDrop%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.Drop" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.Effect Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.Effect Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As Effect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::Effect ^ Effect { System::Windows::Media::Effects::Effect ^ get(); void set(System::Windows::Media::Effects::Effect ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Media.Effects.Effect with get, set" Usage="System.Windows.UIElement.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.Effect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia efekt mapy bitowej, <see cref="T:System.Windows.UIElement" />który ma zostać zastosowany do. Jest to właściwość zależności.</summary>
        <value><see cref="T:System.Windows.Media.Effects.Effect" /> Reprezentuje efekt mapy bitowej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.Windows.UIElement.Effect%2A> , aby zastosować efekt mapy bitowej <xref:System.Windows.UIElement>do.  
  
<a name="dependencyPropertyInfo_Effect"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.EffectProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
   
  
## Examples  
 Poniższy kod XAML pokazuje, <xref:System.Windows.Media.Effects.ShaderEffect> <xref:System.Windows.UIElement.Effect%2A> jak przypisać niestandardowe do właściwości.  
  
 [!code-xaml[System.Windows.Media.Effects.ShaderEffect#1000](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Media.Effects.ShaderEffect/CS/Window1.xaml#1000)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Effects.Effect" />
        <altmember cref="T:System.Windows.Media.Effects.ShaderEffect" />
      </Docs>
    </Member>
    <Member MemberName="EffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty EffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty EffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.EffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ EffectProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable EffectProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.EffectProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.Effect" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberSignature Language="F#" Value="abstract member Focus : unit -&gt; bool&#xA;override this.Focus : unit -&gt; bool" Usage="uIElement.Focus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Próbuje ustawić fokus na tym elemencie.</summary>
        <returns><see langword="true" />Jeśli fokus klawiatury i fokus logiczny zostały ustawione na ten element; <see langword="false" /> jeśli tylko fokus logiczny został ustawiony na ten element lub wywołanie tej metody nie wymusił zmiany fokusu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby można było skupić <xref:System.Windows.UIElement.Focusable%2A> się i <xref:System.Windows.UIElement.IsEnabled%2A> oba muszą być. `true`  
  
 Nawet jeśli element jest skoncentrowany i prawidłowy, `Focus` zdarzenia wersji zapoznawczej mogą być przetwarzane w określonym drzewie i fokus na tym elemencie może być niedozwolony (na przykład w formancie złożonym).
W takim przypadku ta metoda zwraca `false`.
 
 Ogólnie rzecz biorąc, fokus jest kontrolowany przez dwie różne koncepcje: fokus klawiatury i fokus logiczny. Te dwa koncepcje nie zawsze są takie same. Aby uzyskać więcej informacji, zobacz temat [Podsumowanie fokusu](~/docs/framework/wpf/advanced/focus-overview.md) i [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).
 
 Jeśli wywołanie <xref:System.Windows.UIElement.Focus%2A> zwraca `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A> i jest<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> również .`true`  
  
 Jeśli powiązane właściwości nie `true`są jeszcze, podczas wywołania <xref:System.Windows.UIElement.Focus%2A>, co najmniej jedno z następujących zdarzeń jest zgłaszane w następującej kolejności: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (Źródło jest nowym obiektem docelowym fokusu) <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>,,, <xref:System.Windows.UIElement.LostKeyboardFocus> ,<xref:System.Windows.UIElement.GotKeyboardFocus> (Źródło jest nowym elementem docelowym fokusu).  
  
 Aby to wywołanie zakończyło się pomyślnie, niektóre inne elementy w aplikacji muszą mieć fokus.  
  
   
  
## Examples  
 Poniższy przykład ustawia fokus na <xref:System.Windows.Controls.TextBox> przywoływany przez <xref:System.Windows.FrameworkElement.Name%2A>, a następnie dostosowuje pozycję kursora w elemencie. <xref:System.Windows.Controls.TextBox>  
  
 [!code-csharp[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/TextBox_CursorToEnd/CSharp/Window1.xaml.cs#uielementfocus)]
 [!code-vb[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextBox_CursorToEnd/VisualBasic/Window1.xaml.vb#uielementfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Focusable : bool with get, set" Usage="System.Windows.UIElement.Focusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy element może odebrać fokus.  Jest to właściwość zależności.</summary>
        <value><see langword="true" />Jeśli element jest skoncentrowany; w <see langword="false" />przeciwnym razie. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko element skoncentrowany otrzymuje dane wejściowe z klawiatury.  
  
 <xref:System.Windows.UIElement.Focusable%2A>to metoda dostępu do właściwościdlawłaściwościzależność.[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] Ta właściwość zależności często ma swoją pozornie ustawioną wartość "default" jako inną niż pochodna Klasa elementu, szczególnie w kontrolkach. Jest to często wykonywane na jeden z dwóch sposobów:  
  
-   Właściwość Dependency jest dziedziczona przez określoną klasę pochodną, ale ta klasa pochodna przesłania metadane właściwości Dependency i zmienia wartość domyślną właściwości.  
  
-   Styl lub szablon jest stosowany do elementu, który ustawia wartość właściwości zależności inaczej.  
  
 Na przykład <xref:System.Windows.UIElement.Focusable%2A> pozorna wartość "default" <xref:System.Windows.Controls.Button> dla kontrolki <xref:System.Windows.Controls.Button> będzie równa `true`, nawet jeśli dziedziczy <xref:System.Windows.UIElement.Focusable%2A> jako [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] właściwość bezpośrednio z <xref:System.Windows.UIElement>. Dzieje się tak, ponieważ zastosowana wartość metadanych <xref:System.Windows.UIElement.Focusable%2A> dla właściwości Dependency została przesłonięta w konstruktorze <xref:System.Windows.Controls.Control> statycznym klasy bazowej, która znajduje <xref:System.Windows.Controls.Button> się <xref:System.Windows.UIElement> między i w hierarchii klas.  
  
 W przypadku dziedziczenia przez <xref:System.Windows.Controls.Control> lub jego klas pochodnych, program <xref:System.Windows.Controls.Control> ponownie `true`definiuje domyślną wartość tej właściwości.  
  
 Gdy dziedziczone przez <xref:System.Windows.Controls.Label> (która <xref:System.Windows.Controls.Control> jest klasą pochodną), wartość domyślna jest `false`ponownie zdefiniowana jako.  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.FocusableProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
   
  
## Examples  
 Poniższy przykładowy kod ilustruje szablon kontrolki dla konkretnej kontrolki niestandardowej, która ustawia <xref:System.Windows.UIElement.Focusable%2A> `false` jeden z elementów w ramach szablonu.  
  
 [!code-xaml[RichTextBox_NoScrollViewer#_ControlTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBox_NoScrollViewer/CS/window1.xaml#_controltemplate)]
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>W <see cref="T:System.Windows.UIElement" /> przypadku wyprowadzania bezpośrednio (w przeciwieństwie <see cref="T:System.Windows.Controls.Control" />do), należy rozważyć, czy chcesz, aby element miał fokus, ponieważ domyślnie element nie będzie skoncentrowany. Jeśli chcesz, aby element miał fokus, Zastąp metadane tej właściwości w konstruktorze statycznym typu w następujący sposób: 
[! code-CSharp[CorePseudocode # UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)] [! code — VB[CorePseudocode # UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)] 
gdzie <paramref name="myElement" /> powinna być nazwą klasy typu, w którym jest zastępowana wartość metadanych.</para></block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberSignature Language="F#" Value="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość właściwości zostanie <see cref="P:System.Windows.UIElement.Focusable" /> zmieniona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusableProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.FocusableProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.Focusable" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj&#xA;override this.GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj" Usage="uIElement.GetAnimationBaseValue dp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">Właściwość zależności do sprawdzenia.</param>
        <summary>Zwraca wartość właściwości bazowej dla określonej właściwości w tym elemencie, bez uwzględnienia ewentualnej wartości animowanej z działającej lub zatrzymanej animacji.</summary>
        <returns>Wartość właściwości, tak jakby żadne animacje nie są dołączone do określonej właściwości zależności.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli do właściwości nie są dołączone żadne animacje, <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> wartość zwracana jest zawsze identyczna <xref:System.Windows.DependencyObject.GetValue%2A> z wartością zwracaną. Jeśli są dołączone animacje, wszystkie możliwe wartości pochodne animacji, w tym wartości początkowe i zatrzymania, są ignorowane, a wartość właściwości jest określana na podstawie wszystkich innych możliwych danych wejściowych. Aby uzyskać więcej informacji, zobacz [pierwszeństwo wartości właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).  
  
   
  
## Examples  
 W poniższym przykładzie jest implementowana procedura obsługi, która raportuje wartość bazową <xref:System.Windows.FrameworkElement.Width%2A> animowanej <xref:System.Windows.Controls.Button>właściwości na, a także wartość bazową przekształcenia.  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalue)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalue)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberSignature Language="F#" Value="abstract member GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry&#xA;override this.GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry" Usage="uIElement.GetLayoutClip layoutSlotSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">Dostępny rozmiar udostępniony przez element.</param>
        <summary>Zwraca alternatywną geometrię wycinka, która reprezentuje region, który zostałby przycięty <see cref="P:System.Windows.UIElement.ClipToBounds" /> , jeśli zostały <see langword="true" />ustawione na.</summary>
        <returns>Potencjalna geometria wycinka.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja zwróci wiarygodną wartość, ale nie używa tego `layoutSlotSize` parametru w obliczeniach. Zamiast tego używa wartości <xref:System.Windows.UIElement.RenderSize%2A>.  
  
 Ta metoda jest istotnie zastępowana przez natychmiastową klasę <xref:System.Windows.FrameworkElement> pochodną <xref:System.Windows.FrameworkElement> , a zastąpienie powoduje bardziej zaawansowane zachowanie ogólnych elementów na poziomie platformy WPF. Aby uzyskać szczegółowe informacje <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>, zobacz.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="abstract member GetUIParentCore : unit -&gt; System.Windows.DependencyObject&#xA;override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="uIElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gdy jest zastępowany w klasie pochodnej, zwraca alternatywny [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] element nadrzędny dla tego elementu, jeśli element nadrzędny nie istnieje.</summary>
        <returns>Obiekt, jeśli implementacja klasy pochodnej ma alternatywne połączenie nadrzędne z raportem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja wirtualna tej metody zwraca wartość `null`. <xref:System.Windows.FrameworkElement>zapewnia praktyczną implementację.  
  
 Alternatywne elementy nadrzędne są używane do routingu zdarzeń, w przypadkach, gdy element tworzy alternatywną strukturę nadrzędną, dzięki czemu jego zdarzenia są kierowane w taki sposób, że są one zgodne ze standardowym wzorcem routingu drzewa wizualnego do standardowego elementu nadrzędnego lub w dół Strategia routingu w wersji zapoznawczej.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie przeciągania i upuszczania, które obejmuje ten element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.GiveFeedback> Zdarzenie umożliwia Źródło zdarzenia przeciągania w celu zmodyfikowania wyglądu wskaźnika myszy w celu przedstawienia wizualnej opinii użytkownika podczas operacji przeciągania i upuszczania. Opinie wizualne wzmocnią, że operacja przeciągania i upuszczania jest w toku.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, tak, że <xref:System.Windows.UIElement.GiveFeedback> jest częścią listy składowych klasy <xref:System.Windows.UIElement> , gdy jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.GiveFeedback> zdarzenia są dołączone do <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.GiveFeedbackEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewGiveFeedback>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnGiveFeedback%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.GiveFeedback" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.RoutedEventHandler " Usage="member this.GotFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element pobiera fokus logiczny.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fokus logiczny różni się od fokusu klawiatury, jeśli fokus jest celowo wymuszany przy użyciu wywołania metody, ale poprzedni fokus klawiatury istnieje w innym zakresie. W tym scenariuszu fokus klawiatury pozostaje tam, gdzie jest, a element, <xref:System.Windows.UIElement.Focus%2A> w którym wywoływana jest metoda nadal pobiera fokus logiczny.  
  
 Bardziej precyzyjna interpretacja tego zdarzenia jest wyzwalana, gdy wartość <xref:System.Windows.UIElement.IsFocused%2A> właściwości elementu w marszrucie jest zmieniana z `false` na `true`.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który otrzymuje fokus, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który zyskał fokus.  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.GotFocusEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.RoutedEventHandler>|  
  
-   Brak odpowiedniego zdarzenia tunelowania.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnGotFocus%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.GotFocus" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klawiatura ma fokus w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>jest podobnym zdarzeniem, które śledzi zmiany stanu we właściwości, która zachowuje stan fokusu dla elementu; <xref:System.Windows.UIElement.GotKeyboardFocus> zdarzenie jest zgłaszane w wielu z tych samych okoliczności.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który ma fokus, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który ma fokus.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, tak, że <xref:System.Windows.UIElement.GotKeyboardFocus> jest częścią listy składowych klasy <xref:System.Windows.UIElement> , gdy jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.GotKeyboardFocus> zdarzenia są dołączone do <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.GotKeyboardFocusEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element przechwytuje mysz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy element przechwytuje mysz, odbiera dane wejściowe za pomocą myszy, nawet jeśli wskaźnik myszy znajduje się poza granicami. Mysz jest zwykle przechwytywana tylko podczas operacji przeciągania i upuszczania i pozostaje przechwycona do momentu wykonania akcji przeciągania i upuszczania.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który ma przechwytywanie, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który ma przechwycenie myszą.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, tak, że <xref:System.Windows.UIElement.GotMouseCapture> jest częścią listy składowych klasy <xref:System.Windows.UIElement> , gdy jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.GotMouseCapture> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.GotMouseCaptureEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Nie zdefiniowano odpowiedniego zdarzenia tunelowania.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnGotMouseCapture%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.GotMouseCapture" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element przechwytuje pióro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy element przechwytuje pióro, otrzymuje dane wejściowe pióra, nawet jeśli wskaźnik znajduje się poza granicami. Pióro jest zazwyczaj przechwytywane tylko podczas operacji przeciągania i upuszczania i zachowuje przechwytywanie do momentu wykonania akcji przeciągania i upuszczania.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który ma przechwytywanie, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który ma przechwycenie.  
  
 To zdarzenie tworzy alias dla dołączonego zdarzenia dla tej klasy, tak, <xref:System.Windows.UIElement.GotStylusCapture> że jest częścią listy składowych klasy <xref:System.Windows.UIElement> , gdy jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.GotStylusCapture> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.GotStylusCaptureEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Nie zdefiniowano odpowiedniego zdarzenia tunelowania.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnGotStylusCapture%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.GotStylusCapture" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.GotTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.GotTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po przechwyceniu dotyku do tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.GotTouchCaptureEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Przesłoń <xref:System.Windows.UIElement.OnGotTouchCapture%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.GotTouchCapture" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAnimatedProperties : bool" Usage="System.Windows.UIElement.HasAnimatedProperties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy ten element ma wszystkie animowane właściwości.</summary>
        <value><see langword="true" />Jeśli ten element ma animacje dołączone do którejkolwiek z jego właściwości; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca `true` zarówno dla animacji trwałych (niezarejestrowanych, zawsze uruchomionych), jak i dla animacji, które mają określoną oś czasu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEffectiveKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual bool HasEffectiveKeyboardFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasEffectiveKeyboardFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property HasEffectiveKeyboardFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool HasEffectiveKeyboardFocus { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasEffectiveKeyboardFocus : bool" Usage="System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Windows.UIElement" /> ma fokus.</summary>
        <value><see langword="true" />Jeśli ma fokus; w przeciwnym razie <see langword="false" />,. <see cref="T:System.Windows.UIElement" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podklasy mogą przesłaniać tę właściwość, aby określić, kiedy element ma fokus klawiatury.  Jest to przydatne, gdy <xref:System.Windows.UIElement> zawiera elementy, które mogą mieć fokus klawiatury, i chcesz, aby element miał Raport z fokusem.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTestCore">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Implementuje <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> , aby dostarczyć zachowanie testowania trafień elementu podstawowego.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.GeometryHitTestResult HitTestCore(class System.Windows.Media.GeometryHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As GeometryHitTestParameters) As GeometryHitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::GeometryHitTestResult ^ HitTestCore(System::Windows::Media::GeometryHitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="override this.HitTestCore : System.Windows.Media.GeometryHitTestParameters -&gt; System.Windows.Media.GeometryHitTestResult" Usage="uIElement.HitTestCore hitTestParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.GeometryHitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.GeometryHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">Opisuje test trafień do wykonania, w tym początkowy punkt trafień.</param>
        <summary>Implementuje <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> , aby podać zachowanie testowania trafień elementu podstawowego <see cref="T:System.Windows.Media.GeometryHitTestResult" />(zwracanego).</summary>
        <returns>Wyniki testu, w tym Szacowana geometria.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zobacz oryginalną metodę <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> wirtualną, aby uzyskać informacje na temat zastępowania tej metody w innych klasach pochodnych. Należy zauważyć, że kilka określonych<xref:System.Windows.Controls.TextBlock>kontrolek (na przykład) ma różne implementacje, które zastępują ten klucz.  
  
 Ta metoda nie jest przeznaczona do wywoływania z kodu aplikacji. Ta metoda obsługuje wewnętrzne zachowania testowania trafień, które są udostępniane przez różne aspekty systemu wejścia (na przykład wskaźnik myszy znajduje się nad elementem).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.HitTestResult HitTestCore(class System.Windows.Media.PointHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As PointHitTestParameters) As HitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::HitTestResult ^ HitTestCore(System::Windows::Media::PointHitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="override this.HitTestCore : System.Windows.Media.PointHitTestParameters -&gt; System.Windows.Media.HitTestResult" Usage="uIElement.HitTestCore hitTestParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.HitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.PointHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">Opisuje test trafień do wykonania, w tym początkowy punkt trafień.</param>
        <summary>Implementuje <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> , aby podać zachowanie testowania trafień elementu podstawowego <see cref="T:System.Windows.Media.HitTestResult" />(zwracanego).</summary>
        <returns>Wyniki testu, w tym ocenianego punktu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zobacz oryginalną metodę <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> wirtualną, aby uzyskać informacje na temat zastępowania tej metody w innych klasach pochodnych. Należy zauważyć, że kilka określonych<xref:System.Windows.Controls.TextBlock>kontrolek (na przykład) ma różne implementacje, <xref:System.Windows.UIElement.HitTestCore%2A> które zastępują <xref:System.Windows.UIElement>zdefiniowane przez.  
  
 Ta metoda nie jest przeznaczona do wywoływania z kodu aplikacji. Ta metoda obsługuje wewnętrzne zachowania testowania trafień, które są udostępniane przez różne aspekty systemu wejścia (na przykład wskaźnik myszy znajduje się nad elementem).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBindings : System.Windows.Input.InputBindingCollection" Usage="System.Windows.UIElement.InputBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję powiązań wejściowych skojarzonych z tym elementem.</summary>
        <value>Kolekcja powiązań wejściowych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powiązania wejściowe obsługują powiązania poleceń z urządzeniami wejściowymi. Na przykład <xref:System.Windows.Input.MouseBinding> implementuje powiązania wejściowe, które zawierają właściwości, które są określone dla urządzeń myszy.  
  
 Kolekcja powiązań wejściowych będzie zawierać zarówno powiązania wejściowe, które odnoszą się do typu, jak i powiązania wejściowe, które są zadeklarowane w wystąpieniu.  
  
 Powiązana właściwość <xref:System.Windows.UIElement.CommandBindings%2A>,, utrzymuje kolekcję powiązań poleceń. Różnią się one od powiązań wejściowych w tym, że reprezentują następny poziom w dół operacji przetwarzania poleceń, które są powiązane z znanymi poleceniami.  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  
  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *oneOrMoreInputBindings*  
 Co najmniej jeden <xref:System.Windows.Input.KeyBinding> <xref:System.Windows.Input.MouseBinding> element (zazwyczaj klasy pochodne lub). <xref:System.Windows.Input.InputBinding> Każdy z tych elementów powinien mieć <xref:System.Windows.Input.InputBinding.Command%2A> ustawiony atrybut i. <xref:System.Windows.Input.InputBinding.Gesture%2A>  
  
   
  
## Examples  
 Poniższy przykład wypełnia tę właściwość w <xref:System.Windows.Window>, za pomocą jednego. <xref:System.Windows.Input.KeyBinding>  
  
 [!code-xaml[CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 Aby uzyskać więcej informacji na [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] temat składni kolekcji, zobacz [Szczegóły składni XAML](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InputHitTest">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement InputHitTest (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.IInputElement InputHitTest(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::IInputElement ^ InputHitTest(System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="member this.InputHitTest : System.Windows.Point -&gt; System.Windows.IInputElement" Usage="uIElement.InputHitTest point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">Współrzędne przesunięcia w tym elemencie.</param>
        <summary>Zwraca element wejściowy w bieżącym elemencie, który znajduje się na określonych współrzędnych względem pochodzenia bieżącego elementu.</summary>
        <returns>Element podrzędny, który znajduje się w danej pozycji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.IInputElement>jest zwracany jako zwracany typ, ponieważ ten typ jest wspólnym interfejsem obu <xref:System.Windows.UIElement> i. <xref:System.Windows.ContentElement> Następnie można odpowiednio rzutować zwracany typ lub użyć wystąpienia interfejsu dla niektórych elementów członkowskich, które są zdefiniowane przez <xref:System.Windows.IInputElement> interfejs.  
  
 Ta metoda zazwyczaj nie jest wywoływana z kodu aplikacji. Wywołanie tej metody jest odpowiednie tylko w przypadku, gdy zamierzasz przeprowadzić ponowną implementację znacznej ilości funkcji wejściowych niskiego poziomu, które już istnieją, takich jak ponowne tworzenie logiki urządzenia myszy.  
  
 <xref:System.Windows.IContentHost>kontraktuje <xref:System.Windows.IContentHost.InputHitTest%2A> metodę o tym samym podpisie, którą niektóre elementy wybierają jawnie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateArrange">
      <MemberSignature Language="C#" Value="public void InvalidateArrange ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateArrange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateArrange" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateArrange ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateArrange();" />
      <MemberSignature Language="F#" Value="member this.InvalidateArrange : unit -&gt; unit" Usage="uIElement.InvalidateArrange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unieważnia stan rozmieszczania (układ) dla elementu. Po unieważnieniu element będzie miał zaktualizowany układ, który będzie wykonywany asynchronicznie, chyba że zostanie wymuszony przez <see cref="M:System.Windows.UIElement.UpdateLayout" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Częste wywołania do <xref:System.Windows.UIElement.InvalidateArrange%2A> lub w <xref:System.Windows.UIElement.UpdateLayout%2A> szczególności mają znaczący wpływ na wydajność. W związku z tym należy unikać wywoływania tej metody, chyba że absolutnie wymaga dokładnego stanu układu [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] dla kolejnych wywołań innych w kodzie. Zaawansowany scenariusz, <xref:System.Windows.PropertyChangedCallback> w którym można wywołać <xref:System.Windows.UIElement.InvalidateArrange%2A> , to jeśli tworzysz dla właściwości zależności <xref:System.Windows.Freezable> , która nie <xref:System.Windows.FrameworkElement> jest klasą pochodną, która nadal ma wpływ na kolejność przebiegu układu w momencie jego zmiany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateMeasure">
      <MemberSignature Language="C#" Value="public void InvalidateMeasure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateMeasure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateMeasure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateMeasure();" />
      <MemberSignature Language="F#" Value="member this.InvalidateMeasure : unit -&gt; unit" Usage="uIElement.InvalidateMeasure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unieważnia stan pomiaru (układ) dla elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie tej metody również wywołuje <xref:System.Windows.UIElement.InvalidateArrange%2A> wewnętrznie, nie ma potrzeby wywoływania <xref:System.Windows.UIElement.InvalidateMeasure%2A> i <xref:System.Windows.UIElement.InvalidateArrange%2A> w razie sukcesu. Po unieważnieniu element będzie miał zaktualizowany układ, który będzie wykonywany asynchronicznie, chyba że <xref:System.Windows.UIElement.UpdateLayout%2A> zostanie wywołana w celu wymuszenia zmiany układu synchronicznego.  
  
 System układu platformy WPF Framework wykonuje swój własny sposób obsługi zmian w drzewie wizualnym elementu i w większości typowych przypadków unieważnienia układu system układu wywołuje odpowiednik tej metody w razie potrzeby. Tę metodę należy wywołać tylko wtedy, gdy tworzysz kompletną implementację układu, która wykonuje bezpośrednie manipulowanie drzewem elementów lub podobne zaawansowane scenariusze. Taki zaawansowany scenariusz jest tworzony w przypadku, gdy tworzysz <xref:System.Windows.PropertyChangedCallback> dla właściwości zależności, która nie <xref:System.Windows.Freezable> <xref:System.Windows.FrameworkElement> jest klasą pochodną, która nadal ma wpływ na przebieg pomiaru układu w momencie jego zmiany.  
  
 Częste wywołania do <xref:System.Windows.UIElement.InvalidateMeasure%2A> lub w <xref:System.Windows.UIElement.UpdateLayout%2A> szczególności mają znaczący wpływ na wydajność. W związku z tym należy unikać wywoływania tej metody, chyba że absolutnie wymaga dokładnego stanu układu [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] dla kolejnych wywołań innych w kodzie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateVisual">
      <MemberSignature Language="C#" Value="public void InvalidateVisual ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateVisual() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateVisual" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateVisual ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateVisual();" />
      <MemberSignature Language="F#" Value="member this.InvalidateVisual : unit -&gt; unit" Usage="uIElement.InvalidateVisual " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unieważnia renderowanie elementu i wymusza pełny nowy przebieg układu. <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />jest wywoływana po zakończeniu cyklu układu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wywołuje <xref:System.Windows.UIElement.InvalidateArrange%2A> wewnętrznie.  
  
 Ta metoda nie jest zazwyczaj wywoływana z kodu aplikacji. System układu platformy WPF Framework wykonuje własny sposób obsługi zmian w drzewie wizualnym elementu i wywołuje odpowiednik tej metody, jeśli jest to konieczne. Wywołanie tej metody jest niezbędne tylko w przypadku zaawansowanych scenariuszy. Taki zaawansowany scenariusz polega na tym, że tworzysz <xref:System.Windows.PropertyChangedCallback> dla właściwości zależności, która nie <xref:System.Windows.Freezable> <xref:System.Windows.FrameworkElement> jest klasą pochodną, która nadal ma wpływ na układ, gdy zmienia się.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
      </Docs>
    </Member>
    <Member MemberName="IsArrangeValid">
      <MemberSignature Language="C#" Value="public bool IsArrangeValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArrangeValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsArrangeValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArrangeValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArrangeValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArrangeValid : bool" Usage="System.Windows.UIElement.IsArrangeValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy obliczony rozmiar i położenie elementów podrzędnych w układzie tego elementu są prawidłowe.</summary>
        <value><see langword="true" />Jeśli rozmiar i położenie układu są prawidłowe; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można wymusić unieważnienie rozmieszczenia, wywołując <xref:System.Windows.UIElement.InvalidateArrange%2A> dla tego elementu (lub jego elementów nadrzędnych). Oznacza to, że układ rekompozycji w tym czasie jest określany przez system układu. Alternatywnie, natychmiastowe wywołanie <xref:System.Windows.UIElement.UpdateLayout%2A> można wykonać, ale należy to zrobić tylko wtedy, gdy okaże się, że żadne dalsze unieważnienia nie są oczekujące (duża liczba niekoniecznie wymuszonych aktualizacji ma konsekwencje wydajności).  
  
 <xref:System.Windows.UIElement.IsArrangeValid%2A>nie może `true` być <xref:System.Windows.UIElement.IsMeasureValid%2A> , chyba `true` że jest również (w procesie układu, porozumienie nie może być prawidłowe bez mierzenia pierwszego planu).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
        <altmember cref="P:System.Windows.UIElement.IsMeasureValid" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.UIElement.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]czy ten element jest włączony w.  Jest to właściwość zależności.</summary>
        <value><see langword="true" />Jeśli element jest włączony; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy zauważyć, że ta właściwość ma wpływ <xref:System.Windows.UIElement.IsEnabledCore%2A> na specyficzne dla klasy implementacje poszczególnych elementów, często w czasie wykonywania. W związku z tym, wartość domyślna wymieniona w tym miejscu nie jest czasami skuteczna. Na przykład, gdy <xref:System.Windows.Controls.Primitives.ScrollBar> <xref:System.Windows.UIElement.IsEnabled%2A> zostanie określony, oznacza to, że nie ma potrzeby obsługi paska przewijania. `false` Próba ustawienia tej wartości może być również przesłaniana przez wartość zwracaną przez <xref:System.Windows.UIElement.IsEnabledCore%2A>.  
  
 Elementy, które nie są włączone, nie uczestniczą w testowaniu trafień ani skupić się, dlatego nie będą źródłami zdarzeń wejściowych.  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsEnabledProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład pokazuje procedurę obsługi dla jednego przycisku, który po wykonaniu zostanie <xref:System.Windows.UIElement.IsEnabled%2A> ustawiony `false` na innym nazwanym przycisku `b1`.  
  
 [!code-csharp[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/CSharp/default.xaml.cs#handler)]
 [!code-vb[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/VisualBasic/default.xaml.vb#handler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsEnabled" /> właściwości w tym elemencie zostanie zmieniona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabledCore : bool" Usage="System.Windows.UIElement.IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która staje się wartością <see cref="P:System.Windows.UIElement.IsEnabled" /> zwracaną w klasach pochodnych.</summary>
        <value><see langword="true" />Jeśli element jest włączony; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Domyślna implementacja tej właściwości buforuje wartość, a także oblicza, czy element nadrzędny tego elementu jest włączony. (Jeśli element nadrzędny nie jest włączony, element podrzędny nie może być efektywnie włączony w praktyce [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]). Jeśli zdecydujesz się zastąpić tę implementację, należy wywołać podstawową implementację, aby zachować to zachowanie.  
  
<see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> Klasa zawiera istniejącą implementację zastępującą tej właściwości. To przesłonięcie określa, czy zawartość w obszarze prezentacji zawartości przekracza dostępną powierzchnię. Jeśli zawartość przekroczy obszar, część paska przewijania jest włączona. W przeciwnym razie pasek przewijania nie jest włączony.</para></block>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
        <altmember cref="P:System.Windows.UIElement.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.IsEnabled" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFocused : bool" Usage="System.Windows.UIElement.IsFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą, czy ten element ma fokus logiczny.  Jest to właściwość zależności.</summary>
        <value><see langword="true" />Jeśli ten element ma fokus logiczny; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fokus logiczny może różnić się od fokusu klawiatury, jeśli aplikacja ma wiele podziałów fokusu, na przykład między zawartością menu a pozostałą częścią aplikacji. W tym scenariuszu fokus klawiatury może znajdować się tylko w jednym elemencie interfejsu użytkownika aplikacji, jednak niektóre elementy w innych punktach widzenia mogą nadal utrzymywać fokus logiczny. Aby uzyskać więcej informacji na temat koncentracji logicznej, zobacz temat [Omówienie fokusu](~/docs/framework/wpf/advanced/focus-overview.md).  
  
 Fokus nie jest ustawiany przez ustawienie tej właściwości (jest tylko do odczytu). Typowym zastosowaniem tej właściwości jest użycie jej jako właściwości zależności dla <xref:System.Windows.Setter> lub. <xref:System.Windows.EventTrigger> Aby ustawić fokus programowo, wywołaj <xref:System.Windows.UIElement.Focus%2A>. Fokus można również ustawić za pomocą akcji użytkownika lub przez implementacje kontroli, co może obejmować zachowanie funkcji przechwytywania myszy.  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsFocusedProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład to program obsługi kodu, który zmienia tło kontrolki, gdy ma ona fokus.  
  
 [!code-csharp[PopupSimple#IsFocused](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSimple/CSharp/Window1.xaml.cs#isfocused)]  
  
 Innym typowym sposobem osiągnięcia tego samego skutku jest umieszczenie <xref:System.Windows.Trigger> <xref:System.Windows.Style> w kontrolce. to podejście nie wymaga obsługi określonych zdarzeń z kodem związanym i umożliwia projektantom większy dostęp do interaktywnego i graficznego charakteru [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. Aby zapoznać się z przykładem, zobacz [How to: Utwórz efekt](https://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1)blask zewnętrzny.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.IsFocused" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisible">
      <MemberSignature Language="C#" Value="public bool IsHitTestVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsHitTestVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHitTestVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHitTestVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisible : bool with get, set" Usage="System.Windows.UIElement.IsHitTestVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy ten element może być zwracany jako wynik testu trafień z pewnej części zawartości renderowanej. Jest to właściwość zależności.</summary>
        <value><see langword="true" />Jeśli ten element może zostać zwrócony jako wynik testu trafień z co najmniej jednego punktu; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość efektywna tej właściwości ma wpływ względne położenie elementów weryfikowalne trafień w drzewie logicznym. Na przykład jeśli element jest elementem podrzędnym elementu, który nie jest widoczny dla testu, wartość skuteczna właściwości w elemencie podrzędnym pozostanie `false`, nawet jeśli próbuje ustawić tę wartość lokalnie. Z tego powodu ważne jest, aby nie ustawił <xref:System.Windows.UIElement.IsHitTestVisible%2A> się `false` w kontrolce złożonej, chyba że nie ma żadnych testów wejściowych ani trafień na tym formancie. Aby uzyskać więcej informacji na temat testowania trafień, zobacz [test trafień w warstwie wizualnej](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).  
  
<a name="dependencyPropertyInfo_IsHitTestVisible"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsHitTestVisibleProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsHitTestVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsHitTestVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> właściwości zależności w tym elemencie zostanie zmieniona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsHitTestVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHitTestVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsHitTestVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHitTestVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputMethodEnabled : bool" Usage="System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)], czy system metody wejściowej, taki jak, jest włączony do przetwarzania danych wejściowych do tego elementu.</summary>
        <value><see langword="true" />Jeśli metoda wejściowa jest aktywna; w przeciwnym razie. <see langword="false" /> Wartość domyślna źródłowej dołączonej właściwości ma <see langword="true;" /> jednak wpływ na rzeczywisty stan metod wejścia w czasie wykonywania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zwraca wartość, która jest zwracana przez załączoną Właściwość <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> dla obecnie włączonych metod wejściowych (klawiatury, mowy i innych urządzeń wejściowych).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocused : bool" Usage="System.Windows.UIElement.IsKeyboardFocused" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy ten element ma fokus klawiatury.  Jest to właściwość zależności.</summary>
        <value><see langword="true" />Jeśli ten element ma fokus klawiatury; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do zmian określonej wartości tej właściwości mogą towarzyszyć zdarzenia dotyczące fokusu.  
  
 <xref:System.Windows.UIElement.IsKeyboardFocused%2A>i <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> są często używane w ramach obsługi zdarzeń klasy dla innych zdarzeń związanych z danymi wejściowymi, na przykład w celu ustalenia, czy element ma już fokus klawiatury, czy też do określenia, kiedy zdarzenia myszy i zdarzenia klawiatury są wykonywane w połączeniu.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
        <altmember cref="E:System.Windows.UIElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość właściwości zostanie <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> zmieniona w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithin : bool" Usage="System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy fokus klawiatury znajduje się w dowolnym miejscu elementu lub jego elementów podrzędnych drzewa wizualnego.  Jest to właściwość zależności.</summary>
        <value><see langword="true" />Jeśli fokus klawiatury znajduje się na elemencie lub jego elementach podrzędnych; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zmiany wartości tej właściwości zwykle powodują wystąpienie <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> zdarzenia, chyba że Klasa pochodna została zastąpiona <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> , aby pominąć zdarzenie.  
  
 Ta właściwość nie jest ustawiana bezpośrednio, ale można ustawić fokus na element poprzez wywołanie metody <xref:System.Windows.UIElement.Focus%2A>lub przez <xref:System.Windows.UIElement.MoveFocus%2A> wykonanie żądania. Jedno z tych wywołań metod może zmienić tę wartość właściwości.  
  
 <xref:System.Windows.UIElement.IsKeyboardFocused%2A>i <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> są zwykle używane w ramach obsługi zdarzeń klasy dla innych zdarzeń związanych z danymi wejściowymi, na przykład w celu ustalenia, czy element ma już fokus klawiatury, czy też do określenia, kiedy zdarzenia myszy i zdarzenia klawiatury są wykonywane w połączeniu.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość właściwości zostanie <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> zmieniona w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabled">
      <MemberSignature Language="C#" Value="public bool IsManipulationEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManipulationEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsManipulationEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsManipulationEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManipulationEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsManipulationEnabled : bool with get, set" Usage="System.Windows.UIElement.IsManipulationEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy na tym <see cref="T:System.Windows.UIElement" />komputerze są włączone zdarzenia manipulowania.</summary>
        <value><see langword="true" />Jeśli na tej <see cref="T:System.Windows.UIElement" />operacji włączono zdarzenia manipulowania; <see langword="false" />w przeciwnym razie. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustaw <xref:System.Windows.UIElement> tę właściwość na true <xref:System.Windows.UIElement.ManipulationStarting>, jeśli chcesz otrzymywać zdarzenia, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta> <xref:System.Windows.UIElement.ManipulationInertiaStarting> <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>,, i <xref:System.Windows.UIElement.ManipulationCompleted> . Aby uzyskać więcej informacji na temat manipulowania, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  Przykład aplikacji, która reaguje na manipulowanie, znajduje [się w przewodniku: Tworzenie pierwszej aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)dotykowej.  
  
   
  
## Examples  
 Poniższy przykład tworzy aplikację, która ma czerwony prostokąt.  Właściwość prostokąta ma ustawioną wartość PRAWDA, a okno aplikacji subskrybuje <xref:System.Windows.UIElement.ManipulationStarting>zdarzenia, <xref:System.Windows.UIElement.ManipulationDelta>i <xref:System.Windows.UIElement.ManipulationInertiaStarting>. <xref:System.Windows.UIElement.IsManipulationEnabled%2A> Ten przykład jest częścią większego przykładu w [instruktażu: Tworzenie pierwszej aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)dotykowej.  
  
 [!code-xaml[BasicManipulation#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsManipulationEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsManipulationEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsManipulationEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsManipulationEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.IsManipulationEnabled" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMeasureValid">
      <MemberSignature Language="C#" Value="public bool IsMeasureValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMeasureValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMeasureValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMeasureValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMeasureValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMeasureValid : bool" Usage="System.Windows.UIElement.IsMeasureValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy bieżący rozmiar zwrócony przez miarę układu jest prawidłowy.</summary>
        <value><see langword="true" />Jeśli przebieg pomiaru układu zwraca prawidłową i bieżącą wartość; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można wymusić unieważnienie pomiarów i rozmieszczenia, wywołując <xref:System.Windows.UIElement.InvalidateMeasure%2A> dla tego elementu (lub dowolnego elementu nadrzędnego w drzewie wizualnym). Oznacza to, że układ rekompozycji asynchronicznie występuje w czasie określonym przez system układu. Alternatywnie można wykonać natychmiastowe wywołanie <xref:System.Windows.UIElement.UpdateLayout%2A>. Jednakże należy wywołać <xref:System.Windows.UIElement.UpdateLayout%2A> tylko wtedy, gdy prawdopodobnie nie oczekuje się, że dalsze unieważnienia (duża liczba niepotrzebnych, wymuszonych aktualizacji będzie mieć konsekwencje wydajności).  
  
 Jeśli <xref:System.Windows.UIElement.IsMeasureValid%2A> jest `false`, musi<xref:System.Windows.UIElement.IsArrangeValid%2A> być`false` również (przez wymuszoną logikę procesu układu, porozumienie nie może być prawidłowe bez pomiaru pierwszego planu).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptured : bool" Usage="System.Windows.UIElement.IsMouseCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy wskaźnik myszy jest przechwytywany do tego elementu.  Jest to właściwość zależności.</summary>
        <value><see langword="true" />Jeśli element ma przechwycenie myszy; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Stan przechwytywania myszy jest związany z operacjami przeciągania i upuszczania w procesie.  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsMouseCapturedProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład umożliwia włączenie lub wyłączenie stanu przechwytywania myszy w zależności od tego, czy mysz jest już przechwycona dla elementu.  
  
 Jeśli przechwytywanie myszy jest w innym miejscu, przechwytywanie myszy jest ustawione na ten element. Jeśli element miał funkcję przechwytywania myszy, jest wyczyszczony przez <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> wywołanie z danymi wejściowymi o wartości null.  
  
 [!code-csharp[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#ismousecaptured)]
 [!code-vb[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość właściwości zostanie <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> zmieniona w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithin : bool" Usage="System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą, czy przechwytywanie myszy jest przechowywane przez ten element, czy przez elementy podrzędne w jego drzewie wizualnym. Jest to właściwość zależności.</summary>
        <value><see langword="true" />Jeśli ten element lub zawarty element ma funkcję przechwytywania myszy; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> zmian w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> zależności.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOver : bool" Usage="System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy pozycja wskaźnika myszy odnosi się do wyników testu trafień, które przynoszą do konta.  Jest to właściwość zależności.</summary>
        <value><see langword="true" />Jeśli wskaźnik myszy znajduje się nad tym samym elementem, wynik jako test trafień; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przeciwieństwie <xref:System.Windows.UIElement.IsMouseOver%2A>do, ta właściwość `true` jest tylko wtedy, gdy wskaźnik myszy znajduje się nad elementem literału — jako dla testu trafień. Jeśli wskaźnik myszy znajduje się nad elementem podrzędnym, w szczególności dla elementów, które są częścią bardziej szczegółowego szablonu i przedniego elementu, ta właściwość będzie `false`. Jeśli nie wiesz, jak kontrolka jest złożona (na przykład można użyć tej właściwości w szablonie kontrolki niestandardowej dla zdefiniowanej kontrolki), ta właściwość może zwracać nieoczekiwane wyniki. W przypadku większości scenariuszy, w których nie tworzysz formantów, <xref:System.Windows.UIElement.IsMouseOver%2A> Użyj zamiast tego.  
  
 Jeśli wskaźnik myszy jest przechwytywany przez ten element i ta właściwość jest `true` w czasie przechwytywania, ta właściwość będzie nadal zwracana `true` , dopóki przechwycenie myszy nie zostanie utracone i wskaźnik nie znajduje się nad jego zakresem.  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość właściwości zostanie <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> zmieniona w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> zależności.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseOver : bool" Usage="System.Windows.UIElement.IsMouseOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy wskaźnik myszy znajduje się nad tym elementem (w tym elementami podrzędnymi w drzewie wizualnym).  Jest to właściwość zależności.</summary>
        <value><see langword="true" />Jeśli wskaźnik myszy znajduje się nad elementem lub jego elementami podrzędnymi; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj formanty są złożone w taki sposób, że różne elementy wewnątrz kontrolki (drzewo wizualne) będą raportować stan myszy dla zawierającej kontrolki. Na przykład <xref:System.Windows.Controls.ListBox> formant stylu będzie raportowany <xref:System.Windows.UIElement.IsMouseOver%2A> tak `true` , jakby wskaźnik myszy znajduje się w dowolnym miejscu w geometrii, <xref:System.Windows.Controls.ListBoxItem>łącznie z dowolnym z nich.  
  
 Chociaż analogiczne zdarzenie "IsMouseOverChanged" nie istnieje, można wykonać kilka podobnych zdarzeń. Można na przykład obsłużyć <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>i <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.  
  
 Jeśli ten element przechwytuje mysz, ta właściwość `true` pozostanie do momentu utraty przechwycenia myszy, a wskaźnik myszy opuszcza granice elementu.  
  
 Niektóre kontrolki celowo przechwytuje mysz po niektórych akcjach, które nie pojawiają się bezpośrednio nad myszą. Może to prowadzić do <xref:System.Windows.UIElement.IsMouseOver%2A> `true` nawet wtedy, gdy mysz nie została przeniesiona.  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsMouseOverProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład odwołuje się do tej właściwości jako typu właściwości elementu <xref:System.Windows.Trigger>, części \<stylu. wyzwalacze > bloku. Jeśli wskaźnik myszy znajduje się nad kontrolką, tekst kontrolki zmieni się na niebieski, a kursor staje się ręką.  
  
 [!code-xaml[ListViewChkBox#Trigger](~/samples/snippets/csharp/VS_Snippets_Wpf/ListViewChkBox/CS/window1.xaml#trigger)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.IsMouseOver" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptured : bool" Usage="System.Windows.UIElement.IsStylusCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy pióro jest przechwytywane przez ten element.  Jest to właściwość zależności.</summary>
        <value><see langword="true" />Jeśli element ma funkcję przechwytywania pióra; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsStylusCapturedProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość właściwości zostanie <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> zmieniona w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithin : bool" Usage="System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą, czy przechwycenie piórem jest utrzymywane przez ten element, czy element w granicach elementów i jego drzewie wizualnym. Jest to właściwość zależności.</summary>
        <value><see langword="true" />Jeśli ten element lub zawarty element ma funkcję przechwytywania pióra; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz temat [Obsługa wprowadzania dotykowego w systemie Windows Vista](https://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) i [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="P:System.Windows.UIElement.IsStylusCaptured" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość właściwości zostanie <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> zmieniona w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To jest zdarzenie [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] , a nie zdarzenie kierowane.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> zależności.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOver : bool" Usage="System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy pozycja pióra odnosi się do wyników testu trafień, które przyjmują elementy.  Jest to właściwość zależności.</summary>
        <value><see langword="true" />Jeśli wskaźnik myszy znajduje się nad tym samym elementem, wynik jako test trafień; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przeciwieństwie <xref:System.Windows.UIElement.IsStylusOver%2A>do, ta właściwość `true` jest tylko wtedy, gdy pióro znajduje się nad elementem. Jeśli pióro znajduje się nad elementem podrzędnym lub przez elementy, które są częścią bardziej szczegółowego przenoszonego elementu (drzewo wizualne), ta właściwość `false`będzie.  
  
 Jeśli nie wiesz, jak kontrolka jest złożona (na przykład można użyć tej właściwości w szablonie kontrolki niestandardowej dla zdefiniowanej kontrolki), ta właściwość może zwracać nieoczekiwane wyniki. W przypadku większości scenariuszy, w których nie tworzysz formantów, <xref:System.Windows.UIElement.IsStylusOver%2A> Użyj zamiast tego.  
  
 Jeśli ten element ma funkcję przechwytywania pióra i ta `true` właściwość jest w czasie przechwytywania, ta właściwość pozostaje `true` do momentu utraty przechwycenia pióra, a pióro nie znajduje się nad jego zakresem.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość właściwości zostanie <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> zmieniona w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusOver : bool" Usage="System.Windows.UIElement.IsStylusOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kursor pióra znajduje się nad tym elementem (w tym elementy potomne elementu wizualnego).  Jest to właściwość zależności.</summary>
        <value><see langword="true" />Jeśli kursor pióra znajduje się nad elementem lub jego elementami podrzędnymi; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ten element ma funkcję przechwytywania pióra, ta właściwość będzie nadal `true` zwracana do momentu utraty przechwycenia pióra, a wskaźnik poza jego granice.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsStylusOverProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.IsStylusOver" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Windows.UIElement.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]czy ten element jest widoczny w.  Jest to właściwość zależności.</summary>
        <value><see langword="true" />Jeśli element jest widoczny; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.IsVisible%2A> Określenie wartości powoduje uwzględnienie wszystkich czynników układu. Z drugiej strony <xref:System.Windows.UIElement.Visibility%2A>, która jest właściwością settable, tylko wskazuje zamiar, aby program programowo był widoczny lub niewidoczny.  
  
 Elementy, <xref:System.Windows.UIElement.IsVisible%2A> w `false` których nie uczestniczą w zdarzeniach wejściowych (lub polecenia), nie mają wpływu na miarę ani nie mogą określać przebiegów układu, nie są skoncentrowane, nie są w kolejności tabulacji i nie będą zgłaszane w testach trafień. W przeciwieństwie do elementów <xref:System.Windows.UIElement.IsEnabled%2A> , `false` w których będzie nadal uczestniczyć w zdarzeniach i poleceniach, i testowania trafień, ale również nie jest możliwe skoncentrowanie się.  
  
<a name="dependencyPropertyInfo_IsVisible"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.IsVisibleProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość właściwości zostanie <see cref="P:System.Windows.UIElement.IsVisible" /> zmieniona w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie nie jest wywoływane, jeśli element nie jest renderowany przez system układu, z powodów innych niż wartość <xref:System.Windows.UIElement.IsVisible%2A> właściwości. Na przykład element może nie mieć skojarzonej wizualizacji.  
  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.IsVisible" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu klawisza, gdy fokus znajduje się na tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa kluczowych współdziała z innymi funkcjami platformy, takimi jak tworzenie poleceń i składanie tekstu. <xref:System.Windows.UIElement.KeyDown> Zdarzenie jest zdarzeniem wprowadzania tekstu niższego poziomu, które może nie zachowywać się zgodnie z oczekiwaniami w niektórych kontrolkach. Wynika to z faktu, że niektóre kontrolki mają założenia kontrolne lub obsługujące klasy, które udostępniają wyższego poziomu obsługę wprowadzania tekstu i powiązane zdarzenia.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, tak, że <xref:System.Windows.UIElement.KeyDown> jest częścią listy składowych klasy <xref:System.Windows.UIElement> , gdy jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.KeyDown> zdarzenia są dołączone do <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.KeyDownEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewKeyDown>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnKeyDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.KeyDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klucz zostanie wydzierżawiony, gdy fokus znajduje się na tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, tak, że <xref:System.Windows.UIElement.KeyUp> jest częścią listy składowych klasy <xref:System.Windows.UIElement> , gdy jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.KeyUp> zdarzenia są dołączone do <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.KeyUpEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewKeyUp>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnKeyUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.KeyUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler LayoutUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LayoutUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LayoutUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LayoutUpdated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LayoutUpdated;" />
      <MemberSignature Language="F#" Value="member this.LayoutUpdated : EventHandler " Usage="member this.LayoutUpdated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy układ różnych elementów wizualnych skojarzonych z bieżącymi <see cref="T:System.Windows.Threading.Dispatcher" /> zmianami.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aktualizacja układu może wystąpić w wyniku zmiany właściwości, zmiany rozmiaru okna lub jawnego żądania użytkownika.  
  
 Ten element członkowski jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zdarzeniem, a nie zdarzeniem kierowanym.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.RoutedEventHandler " Usage="member this.LostFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element utraci fokus logiczny.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fokus logiczny różni się od fokusu klawiatury, jeśli fokus jest celowo wymuszany przy użyciu wywołania metody, ale poprzedni fokus klawiatury istnieje w innym zakresie. W tym scenariuszu fokus klawiatury pozostaje tam, gdzie jest, a element, w <xref:System.Windows.UIElement.Focus%2A> którym wywoływana jest metoda nadal pobiera fokus logiczny.  
  
 Dokładniejsze interpretacja tego zdarzenia jest wywoływane, gdy wartość <xref:System.Windows.UIElement.IsFocused%2A> właściwości elementu w marszrucie zmieni się z `true` na `false`.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który utraci fokus, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który zyskał fokus.  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.LostFocusEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.RoutedEventHandler>|  
  
-   Brak odpowiedniego zdarzenia tunelowania.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnLostFocus%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.LostFocus" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klawiatura nie ma już fokusu w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ to zdarzenie używa routingu propagacji, element, który utracił fokus, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który utracił fokus.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.LostKeyboardFocus> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.LostKeyboardFocus> zdarzenia są dołączone do <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.LostKeyboardFocusEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.LostKeyboardFocus" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element utraci przechwytywanie myszy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy element przechwytuje mysz, odbiera dane wejściowe za pomocą myszy, nawet jeśli wskaźnik znajduje się poza granicami. Mysz jest zwykle przechwytywana tylko podczas operacji przeciągania i upuszczania.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który utraci przechwytywanie, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który utracił funkcję przechwytywania.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.LostMouseCapture> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.LostMouseCapture> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.LostMouseCaptureEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Nie zdefiniowano odpowiedniego zdarzenia tunelowania.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnLostMouseCapture%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.LostMouseCapture" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element utraci przechwytywanie pióra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy element przechwytuje pióro, otrzymuje dane wejściowe pióra, nawet jeśli wskaźnik znajduje się poza granicami. Pióro jest zazwyczaj przechwytywane tylko podczas operacji przeciągania i upuszczania.  
  
 Ponieważ to zdarzenie używa routingu propagacji, element, który utraci fokus, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który utracił fokus.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.LostStylusCapture> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.LostStylusCapture> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.LostStylusCaptureEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Nie zdefiniowano odpowiedniego zdarzenia tunelowania.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnLostStylusCapture%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.LostStylusCapture" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.LostTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.LostTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element utraci funkcję przechwytywania dotykowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.LostTouchCaptureEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Przesłoń <xref:System.Windows.UIElement.OnLostTouchCapture%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.LostTouchCapture" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationBoundaryFeedback As EventHandler(Of ManipulationBoundaryFeedbackEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^&gt; ^ ManipulationBoundaryFeedback;" />
      <MemberSignature Language="F#" Value="member this.ManipulationBoundaryFeedback : EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; " Usage="member this.ManipulationBoundaryFeedback : System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy manipulowanie napotyka granicę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_ManipulationBoundaryFeedback"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationBoundaryFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationBoundaryFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> Identyfikuje zdarzenie.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationCompleted As EventHandler(Of ManipulationCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationCompletedEventArgs ^&gt; ^ ManipulationCompleted;" />
      <MemberSignature Language="F#" Value="member this.ManipulationCompleted : EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; " Usage="member this.ManipulationCompleted : System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zakończeniu manipulowania i bezwładności dla <see cref="T:System.Windows.UIElement" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie służy do uzyskiwania informacji o manipulowaniu po jego zakończeniu.  Na przykład, można użyć <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType> właściwości, aby określić łączną kwotę manipulacji.  
  
 Aby uzyskać więcej informacji na temat manipulowania, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  Przykład aplikacji, która reaguje na manipulowanie, znajduje [się w przewodniku: Tworzenie pierwszej aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)dotykowej.  
  
<a name="routedEventInfo_ManipulationCompleted"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ManipulationCompletedEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.ManipulationCompletedEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompletedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationCompletedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationCompletedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationCompletedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationCompletedEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDelta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationDelta" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationDelta As EventHandler(Of ManipulationDeltaEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationDeltaEventArgs ^&gt; ^ ManipulationDelta;" />
      <MemberSignature Language="F#" Value="member this.ManipulationDelta : EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; " Usage="member this.ManipulationDelta : System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy urządzenie wejściowe zmienia pozycję podczas manipulowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.ManipulationDelta> Zdarzenie występuje kilka razy, gdy użytkownik przeciągnie palców na ekranie podczas manipulowania i ponownie, gdy nastąpi bezwładności.  Możesz użyć właściwości, <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> aby sprawdzić, czy zdarzenie występuje podczas bezwładności.  
  
 W przypadku wystąpienia zdarzenia <xref:System.Windows.UIElement.ManipulationDelta> nie ma to wpływu na element występujący w zdarzeniu.  Musisz podać logikę do elementu, który ma być manipulowany.  Właściwości <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> <xref:System.Windows.Input.ManipulationDelta>i <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> , które są typu, zawierają dane dotyczące sposobu zmieniania i interpretowania pozycji manipulacji jako przesuwania, zmiany rozmiarów lub obracania obiektu.  Te informacje są stosowane do elementu, który ma być manipulowany.  
  
 Aby uzyskać więcej informacji na temat manipulowania, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  Przykład aplikacji, która reaguje na manipulowanie, znajduje [się w przewodniku: Tworzenie pierwszej aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)dotykowej.  
  
<a name="routedEventInfo_ManipulationDelta"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ManipulationDeltaEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.ManipulationDeltaEventArgs>.|  
  
   
  
## Examples  
 Poniższy przykład pokazuje procedurę obsługi zdarzeń dla <xref:System.Windows.UIElement.ManipulationDelta> zdarzenia. W przykładzie użyta <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> jest właściwość do przenoszenia, zmiany rozmiaru i <xref:System.Windows.Shapes.Rectangle>obrotu.  Przykład sprawdza także, czy <xref:System.Windows.UIElement.ManipulationDelta> zdarzenie wystąpiło w czasie bezwładności i czy prostokąt dotyka krawędzi okna.  Jeśli te przypadki mają wartość true, aplikacja przestanie działać, aby zapobiec wychodzeniu przez prostokąt widocznego obszaru aplikacji. Ten przykład jest częścią większego przykładu w [instruktażu: Tworzenie pierwszej aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)dotykowej.  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDeltaEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationDeltaEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationDeltaEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationDeltaEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationDeltaEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.ManipulationDelta" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationInertiaStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationInertiaStarting As EventHandler(Of ManipulationInertiaStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationInertiaStartingEventArgs ^&gt; ^ ManipulationInertiaStarting;" />
      <MemberSignature Language="F#" Value="member this.ManipulationInertiaStarting : EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; " Usage="member this.ManipulationInertiaStarting : System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy urządzenie wejściowe utraci kontakt z <see cref="T:System.Windows.UIElement" /> obiektem podczas rozpoczęcia manipulowania i bezwładności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.ManipulationInertiaStarting> Zdarzenie występuje, gdy użytkownik dźwiga wszystkie palców z ekranu podczas manipulowania. Na przykład, jeśli użytkownik "zgłosi" na <xref:System.Windows.UIElement> powierzchni, użytkownik będzie <xref:System.Windows.UIElement> dotknięciem, aby zacząć akcję, przesunąć palec na ekran w celu uzyskania krótkiej odległości <xref:System.Windows.UIElement>, a następnie zwolnić. Gdy użytkownik zwolni element, rozpoczyna się i <xref:System.Windows.UIElement.ManipulationInertiaStarting> występuje zdarzenie.  Kontynuuje otrzymywanie <xref:System.Windows.UIElement.ManipulationDelta> zdarzeń wskazujących, że w elemencie występuje bezwładności. <xref:System.Windows.UIElement>  
  
 Możesz użyć tego zdarzenia, aby określić zachowanie bezwładności.  Na przykład można ustawić prędkość początkową używaną, gdy rozpoczyna się bezwładności.  Możesz również określić ilość bezwładności przez ustawienie żądanego opóźnienia lub przez ustawienie żądanego położenia.  Można ustawić te wartości dla każdego typu manipulacji (tłumaczenia, rozszerzanie lub obracanie) niezależnie od siebie.  Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.  
  
 Aby uzyskać więcej informacji na temat manipulowania, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  Przykład aplikacji, która reaguje na manipulowanie, znajduje [się w przewodniku: Tworzenie pierwszej aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)dotykowej.  
  
<a name="routedEventInfo_ManipulationInertiaStarting"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.|  
  
   
  
## Examples  
 Poniższy przykład pokazuje <xref:System.Windows.UIElement.ManipulationInertiaStarting> procedurę obsługi zdarzeń i ustawia żądane przyspieszenie dla translacji, rozwinięcia i rotacji, które są używane podczas bezwładności. Ten przykład jest częścią większego przykładu w [instruktażu: Tworzenie pierwszej aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)dotykowej.  
  
 [!code-csharp[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]
 [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationInertiaStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationInertiaStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationInertiaStartingEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarted As EventHandler(Of ManipulationStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartedEventArgs ^&gt; ^ ManipulationStarted;" />
      <MemberSignature Language="F#" Value="member this.ManipulationStarted : EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; " Usage="member this.ManipulationStarted : System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy urządzenie wejściowe rozpocznie manipulowanie <see cref="T:System.Windows.UIElement" /> obiektem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.ManipulationStarted> Zdarzenie występuje pozdarzeniu<xref:System.Windows.UIElement.ManipulationStarting> .  W tym celu można wykonać następujące czynności <xref:System.Windows.Input.ManipulationStartedEventArgs>:  
  
-   Pobierz element, do którego odnosi się pozycja manipulowania przy użyciu <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> właściwości.  
  
-   Pobierz Źródło manipulowania przy użyciu <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> właściwości.  
  
-   Anuluj manipulowanie, wywołując <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> metodę.  
  
 Aby uzyskać więcej informacji na temat manipulowania, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  Przykład aplikacji, która reaguje na manipulowanie, znajduje [się w przewodniku: Tworzenie pierwszej aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)dotykowej.  
  
<a name="routedEventInfo_ManipulationStarted"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ManipulationStartedEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.ManipulationStartedEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationStartedEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.ManipulationStarted" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarting As EventHandler(Of ManipulationStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartingEventArgs ^&gt; ^ ManipulationStarting;" />
      <MemberSignature Language="F#" Value="member this.ManipulationStarting : EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; " Usage="member this.ManipulationStarting : System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po pierwszym utworzeniu procesora manipulowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenie występuje w elemencie, który <xref:System.Windows.UIElement.IsManipulationEnabled%2A> ma właściwość ustawioną `true` , gdy użytkownik umieści na niej palca. <xref:System.Windows.UIElement.ManipulationStarting> Domyślnie kolejne zdarzenia manipulowania raportują pozycję manipulowania względem elementu, który ma <xref:System.Windows.UIElement.IsManipulationEnabled%2A> `true`ustawioną wartość.  Można określić, że pozycja powinna być odnosząca się do innego elementu przez <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> ustawienie właściwości. Na przykład można zmienić obiekt względem elementu nadrzędnego elementu.  
  
 W programie obsługi <xref:System.Windows.UIElement.ManipulationStarting>zdarzeń można także wykonać następujące czynności:  
  
-   Określ, <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> czy użytkownik potrzebuje więcej niż jednego palca do przeprowadzenia manipulowania przez ustawienie właściwości.  
  
-   Określ, które typy manipulacji są włączane przez <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> ustawienie właściwości <xref:System.Windows.Input.ManipulationModes> na Wyliczenie.  
  
-   Określ środek rotacji pojedynczego palca przez ustawienie <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> właściwości.  
  
-   Anuluj manipulowanie, wywołując <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> metodę.  
  
 Aby uzyskać więcej informacji na temat manipulowania, zobacz [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  Przykład aplikacji, która reaguje na manipulowanie, znajduje [się w przewodniku: Tworzenie pierwszej aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)dotykowej.  
  
<a name="routedEventInfo_ManipulationStarting"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.ManipulationStartingEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.ManipulationStartingEventArgs>.|  
  
   
  
## Examples  
 Poniższy przykład pokazuje procedurę obsługi zdarzeń dla <xref:System.Windows.UIElement.ManipulationStarting> zdarzenia i <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> ustawia element nadrzędny, który odbiera zdarzenia manipulowania, aby współrzędne manipulowania odnoszą się do elementu nadrzędnego.  Ten przykład jest częścią większego przykładu w [instruktażu: Tworzenie pierwszej aplikacji](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)dotykowej.  
  
 [!code-csharp[BasicManipulation#ManipulationStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationstarting)]
 [!code-vb[BasicManipulation#ManipulationStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationstarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationStartingEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.ManipulationStarting" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Measure">
      <MemberSignature Language="C#" Value="public void Measure (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Measure(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Measure (availableSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Measure(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="member this.Measure : System.Windows.Size -&gt; unit" Usage="uIElement.Measure availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">Dostępne miejsce, w którym element nadrzędny może przydzielić element podrzędny. Element podrzędny może zażądać większej ilości miejsca niż to, co jest dostępne; udostępniony rozmiar może być dostosowany, jeśli w modelu zawartości dla bieżącego elementu jest możliwe przewijanie.</param>
        <summary><see cref="P:System.Windows.UIElement.DesiredSize" /> Aktualizuje a<see cref="T:System.Windows.UIElement" />. Elementy nadrzędne wywołują tę metodę z <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> własnych implementacji w celu utworzenia cyklicznej aktualizacji układu. Wywołanie tej metody stanowi pierwszy przebieg ("pomiar" przebiegu) aktualizacji układu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obliczenie położenia układu w programie [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] składa się <xref:System.Windows.UIElement.Measure%2A> z wywołania i <xref:System.Windows.UIElement.Arrange%2A> wywołania. W trakcie `availableSize` wywołania element określa jego wymagania dotyczące rozmiaru przy użyciu danych wejściowych. <xref:System.Windows.UIElement.Measure%2A> W trakcie <xref:System.Windows.UIElement.Arrange%2A> wywołania zostanie sfinalizowany rozmiar elementu.  
  
 `availableSize`może to być dowolna liczba od zera do nieskończoności. Elementy należące do układu powinny zwracać minimalne <xref:System.Windows.Size> wymagania, których wymagają dla danego `availableSize`elementu.  
  
 Po pierwszym utworzeniu wystąpienia układu zawsze odbierane jest <xref:System.Windows.UIElement.Measure%2A> wywołanie przed. <xref:System.Windows.UIElement.Arrange%2A> Jednak po <xref:System.Windows.UIElement.Arrange%2A> pierwszym przebiegu układu może ono odebrać wywołanie <xref:System.Windows.UIElement.Measure%2A>bez. może się tak zdarzyć, gdy właściwość, która ma wpływ tylko <xref:System.Windows.UIElement.Arrange%2A> na zmiany (na przykład wyrównanie <xref:System.Windows.UIElement.Arrange%2A> ), lub gdy obiekt nadrzędny otrzymuje bez <xref:System.Windows.UIElement.Measure%2A>. Wywołanie spowoduje automatyczne <xref:System.Windows.UIElement.Arrange%2A> unieważnienie wywołania. <xref:System.Windows.UIElement.Measure%2A>  
  
 Aktualizacje układu są wykonywane asynchronicznie, tak że główny wątek nie oczekuje na każdą zmianę układu. Wykonywanie zapytania dotyczącego elementu za pośrednictwem sprawdzenia kodu wartości właściwości może nie odzwierciedlać zmian właściwości, które współpracują z charakterystyką zmiany wielkości lub <xref:System.Windows.FrameworkElement.Width%2A> układu (na przykład właściwość).  
  
> [!NOTE]
>  Aktualizacje układu mogą być wymuszane przy użyciu <xref:System.Windows.UIElement.UpdateLayout%2A> metody. Jednak wywołanie tej metody jest zwykle zbędne i może spowodować niską wydajność.  
  
 System układu przechowuje dwie osobne kolejki nieprawidłowych układów, jeden <xref:System.Windows.UIElement.Measure%2A> dla i jeden <xref:System.Windows.UIElement.Arrange%2A>dla. Kolejka układu jest sortowana na podstawie kolejności elementów w drzewie wizualnym elementu, który wykonuje układ; elementy znajdujące się wyżej w drzewie znajdują się w górnej części kolejki, aby uniknąć nadmiarowych układów spowodowanych przez powtórzone zmiany elementów nadrzędnych. Zduplikowane wpisy są automatycznie usuwane z kolejki, a elementy są automatycznie usuwane z kolejki, jeśli są już sprawdzone pod kątem układu.  
  
 Podczas aktualizowania układu <xref:System.Windows.UIElement.Measure%2A> kolejka jest opróżniana jako pierwsza, a następnie <xref:System.Windows.UIElement.Arrange%2A> kolejka. Element w <xref:System.Windows.UIElement.Arrange%2A> kolejce nigdy nie będzie układany, jeśli <xref:System.Windows.UIElement.Measure%2A> w kolejce znajduje się element.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="abstract member MeasureCore : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.MeasureCore : System.Windows.Size -&gt; System.Windows.Size" Usage="uIElement.MeasureCore availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">Dostępny rozmiar, który element nadrzędny może przydzielić dla elementu podrzędnego.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, zapewnia logikę pomiaru w celu poprawnego zmiany rozmiaru tego elementu, z uwzględnieniem rozmiaru dowolnej zawartości elementu podrzędnego.</summary>
        <returns>Wymagany rozmiar tego elementu w układzie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to bardziej powszechne do wygenerowania elementu <xref:System.Windows.FrameworkElement> <xref:System.Windows.UIElement>zamiast. W <xref:System.Windows.FrameworkElement>przypadku wyprowadzania z programu należy zauważyć, że <xref:System.Windows.UIElement.MeasureCore%2A> przesłonięcie <xref:System.Windows.FrameworkElement> na plomby <xref:System.Windows.UIElement.MeasureCore%2A> metody. W związku z tym, <xref:System.Windows.UIElement.MeasureCore%2A> przesłonić tylko jako środek do zmiany charakterystyki miary układu, <xref:System.Windows.UIElement> Jeśli pochodzi od dziedziczenia, które <xref:System.Windows.FrameworkElement>nie obejmuje. Może się tak zdarzyć, jeśli próbujesz utworzyć własną implementację na [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] poziomie podstawowym. W przeciwnym razie, jeśli pochodzą z <xref:System.Windows.FrameworkElement>programu, szablon implementacji dla działania miary <xref:System.Windows.FrameworkElement> jest implementacją programu.<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.  
  
 Element nadrzędny z elementami podrzędnymi musi być <xref:System.Windows.UIElement.Measure%2A> wywoływana dla każdego elementu podrzędnego, w przeciwnym razie te elementy podrzędne nie są skalowane ani układane i będą efektywnie znikać z układu.  
  
   
  
## Examples  
 Typowy przesłonięcie <xref:System.Windows.UIElement.MeasureCore%2A> następuje po tym przybliżeniu wzorca (nie istnieje Wbudowana kolekcja o nazwie `VisualChildren`; `VisualChildren` jest symbolem zastępczym, który reprezentuje dowolną kolekcję podrzędną, którą przechowuje element).  
  
 [!code-csharp[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementmeasureoverride)]
 [!code-vb[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementmeasureoverride)]  
  
-   Należy wywołać <xref:System.Windows.UIElement.Measure%2A> każdy element podrzędny.  
  
-   Ogólnie rzecz biorąc, implementacja powinna buforować informacje o <xref:System.Windows.UIElement.MeasureCore%2A> pomiarach między wywołaniami metody a i <xref:System.Windows.UIElement.ArrangeCore%2A> w tym samym elemencie.  
  
-   Wywoływanie podstawowych implementacji <xref:System.Windows.UIElement.MeasureCore%2A> elementu nie jest wymagane, ale może być odpowiednie, jeśli podstawowa implementacja zapewnia odpowiednią możliwość układu.  
  
-   Wywołania elementu podrzędnego powinny być takie same `availableSize` jak elementy nadrzędne lub podzbiór obszaru, w zależności od typu układu obsługiwanego przez element nadrzędny. <xref:System.Windows.UIElement.Measure%2A> Na przykład, można usunąć obszar dla obramowania lub wypełnienia określonego dla elementu, ScrollBar lub kontrolki niestandardowej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Implementacje muszą być w stanie przetworzyć podaną <paramref name="availableSize" /> wartość, która jest nieskończona. Wartość nieskończoność nie wskazuje żadnych żądanych ograniczeń i efektywnie dokonuje wyboru pomiaru do elementu nadrzędnego, poprzez cykliczne wywołania miary.  
  
Implementacje mogą rozważyć wartość podaną <paramref name="availableSize" /> dla jako ograniczenie elastyczne. Element podrzędny może określić większy rozmiar, nawet jeśli inne aspekty kodu aplikacji były w stanie określić bieżący rzeczywisty rozmiar elementu nadrzędnego. Żądanie dużego rozmiaru jest konwencją wskazującą, że element podrzędny jest pytany, czy element nadrzędny może obsługiwać przewijanie zawartości w regionie wyświetlania zawartości.</para></block>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu dowolnego przycisku myszy, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.MouseDown> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.MouseDown> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 Zdarzenie jest często wywoływane razem z albo <xref:System.Windows.UIElement.MouseLeftButtonDown> lub <xref:System.Windows.UIElement.MouseRightButtonDown>, które odpowiada naciśnięciu jednego z dwóch standardowych przycisków myszy. <xref:System.Windows.UIElement.MouseDown> <xref:System.Windows.UIElement.MouseLeftButtonDown>i <xref:System.Windows.UIElement.MouseRightButtonDown> są także zdarzenia kierowane, ale są to zdarzenia bezpośrednie kierowane, a odpowiednie zdarzenie specyficzne dla przycisku jest zgłaszane, <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> gdy zdarzenie osiągnie ten element wzdłuż trasy zdarzenia. Zobacz uwagi dla <xref:System.Windows.UIElement.MouseLeftButtonDown> lub <xref:System.Windows.UIElement.MouseRightButtonDown>.  
  
> [!IMPORTANT]
>  Niektóre kontrolki mogą mieć nieodłączną obsługę klas dla zdarzeń przycisków myszy. Lewe zdarzenie myszy w dół jest najbardziej prawdopodobną przyczyną obsługi klas w formancie. Obsługa klasy często oznacza zdarzenia klasy bazowej <xref:System.Windows.Input.Mouse> jako obsługiwane. Gdy zdarzenie zostanie oznaczone jako obsługiwane, inne programy obsługi wystąpienia dołączone do tego elementu nie są zwykle zgłaszane. Wszystkie inne procedury obsługi klasy lub wystąpienia, które są dołączone do elementów w kierunku propagacji do korzenia w drzewie interfejsu użytkownika, również nie są zwykle zgłaszane.  
  
 Można rozwiązać problem opisany w poprzednich ważnych i nadal odbieranych <xref:System.Windows.UIElement.MouseDown> zdarzeniach dla lewego przycisku myszy zdarzenia w klasie pochodnej, która ma obsługę klasy, przy użyciu jednego z następujących rozwiązań:  
  
-   Dołącz programy obsługi dla <xref:System.Windows.UIElement.PreviewMouseDown> zdarzenia, które nie jest oznaczone jako obsługiwane przez kontrolki. Zwróć uwagę, że ponieważ jest to zdarzenie w wersji zapoznawczej, trasa zaczyna się od elementu głównego i tuneluje do formantu.  
  
-   Zarejestrowanie procedury obsługi na formancie w sposób proceduralny przez <xref:System.Windows.UIElement.AddHandler%2A> wywołanie i wybranie opcji podpisu, która umożliwia programom obsługi nasłuchiwanie zdarzeń nawet wtedy, gdy są one już oznaczone jako obsługiwane w danych zdarzenia kierowanego.  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseDownEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewMouseDown>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnMouseDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.MouseDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Input.MouseEventHandler " Usage="member this.MouseEnter : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wskaźnik myszy zostanie przesunięty w granice tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseEnter>jest [zdarzeniem kierowanym](~/docs/framework/wpf/advanced/routed-events-overview.md) korzystającym z strategii routingu bezpośredniego obsługi zdarzeń. Zdarzenia kierowane bezpośrednio nie są zgłaszane na trasie; Zamiast tego są obsługiwane w tym samym elemencie, w którym zostały zgłoszone. Jednak umożliwiają one włączenie innych aspektów zachowań zdarzeń kierowanych, takich jak wyzwalacze zdarzeń w stylach.  
  
 Chociaż <xref:System.Windows.UIElement.MouseEnter> śledzi, gdy wskaźnik myszy wchodzi w zakres elementu, to zdarzenie jest bardziej dosłownie raporty <xref:System.Windows.UIElement.IsMouseOver%2A> , że wartość właściwości została zmieniona z `false` na `true` na tym elemencie.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.MouseEnter> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.MouseEnter> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 (Lub jakakolwiek <xref:System.Windows.Controls.Primitives.ButtonBase> Klasa pochodna) <xref:System.Windows.UIElement.KeyDown> ma natywną obsługę zdarzenia, gdy przycisk ma fokus, a naciśniętego klawisza jest pasekem miejsca. <xref:System.Windows.Controls.Button> Natywna obsługa wywołuje <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzenie z przyciskiem jako źródło, a także przechwytuje mysz, nawet gdy wskaźnik myszy nie zostanie przeniesiony. W wyniku przechwytywania <xref:System.Windows.UIElement.MouseEnter> myszy zdarzenie jest również wywoływane z przyciskiem jako źródło. Ogólnie rzecz biorąc, jeśli element przechwytuje mysz, <xref:System.Windows.UIElement.MouseEnter> jest zgłaszany, <xref:System.Windows.UIElement.GotMouseCapture> a także ewentualne inne zdarzenia związane z kontrolką.  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseEnterEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Przesłoń <xref:System.Windows.UIElement.OnMouseEnter%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.MouseEnter" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Input.MouseEventHandler " Usage="member this.MouseLeave : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wskaźnik myszy opuszcza granice tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseLeave>jest [zdarzeniem kierowanym](~/docs/framework/wpf/advanced/routed-events-overview.md) korzystającym z strategii routingu bezpośredniego obsługi zdarzeń. Zdarzenia kierowane bezpośrednio nie są zgłaszane na trasie; Zamiast tego są obsługiwane w tym samym elemencie, w którym zostały zgłoszone. Jednak umożliwiają one włączenie innych aspektów zachowań zdarzeń kierowanych, takich jak wyzwalacze zdarzeń w stylach.  
  
 Chociaż <xref:System.Windows.UIElement.MouseLeave> śledzi, gdy mysz opuszcza element, to zdarzenie jest bardziej dosłownie raporty <xref:System.Windows.UIElement.IsMouseOver%2A> , że wartość właściwości została zmieniona z `true` na `false` na tego elementu.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.MouseLeave> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.MouseLeave> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseLeaveEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Przesłoń <xref:System.Windows.UIElement.OnMouseLeave%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.MouseLeave" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu lewego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mimo że to [zdarzenie jest kierowane](~/docs/framework/wpf/advanced/routed-events-overview.md) do trasy propagacji za pośrednictwem drzewa elementów, jest to bezpośrednie kierowane zdarzenie, które jest zgłaszane i ponownie wywoływane w drzewie <xref:System.Windows.UIElement>elementów.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportują charakterystyczne dla przycisku myszy zdarzenia bazowego <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> , które jest dołączonym zdarzeniem przetwarzanym przez każdy element wraz z trasą zdarzenia.  
  
 Dane zdarzenia tego zdarzenia ujawniają dane zdarzenia bazowego <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzenia. Jeśli to zdarzenie jest oznaczone jako obsługiwane wzdłuż trasy zdarzenia, są nadal wywoływane zdarzenia dotyczące przycisku myszy. Jednak programy obsługi zdarzeń dla przycisku myszy muszą być dodawane jawnie <xref:System.Windows.UIElement.AddHandler%2A>, z opcją obsługi zdarzeń, które są już oznaczone jako obsługiwane, aby były detektorami zdarzenia. Jeśli znacznik <xref:System.Windows.UIElement.MouseLeftButtonDown> jest obsługiwany, oznacza to, że <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> są one uznawane za obsługiwane dla wszystkich dalszych odbiorników na trasie i we wszystkich powiązanych zdarzeniach. To prawdopodobnie dotyczy zdarzeń wygenerowanych przez program obsługi <xref:System.Windows.Controls.Control.MouseDoubleClick>klasy, takich jak.  
  
 Koncepcyjnie, pomyśl o tym zdarzeniu (i innych zdarzeniach myszy w <xref:System.Windows.UIElement>systemie) jako myszy "usługi" (z definicją usługi dostarczaną <xref:System.Windows.Input.Mouse> przez klasę). Zdarzenie dodaje wygodę niezbędną do sprawdzania, czy Stany przycisków myszy (w górę i w dół) oryginalnych zdarzeń myszy w danych zdarzenia. W przypadku bardziej zaawansowanych scenariuszy, takich jak sprawdzanie Stanów przycisków niestandardowymi, może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] <xref:System.Windows.Input.Mouse> <xref:System.Windows.UIElement>klasy w klasie zamiast.  
  
> [!IMPORTANT]
>  Niektóre klasy formantów mogą mieć nieodłączną obsługę klas dla zdarzeń przycisków myszy. Lewe zdarzenie myszy w dół jest najbardziej prawdopodobną przyczyną obsługi klas w formancie. Obsługa klasy często oznacza zdarzenia klasy bazowej <xref:System.Windows.Input.Mouse> jako obsługiwane. Gdy zdarzenie zostanie oznaczone jako obsługiwane, inne programy obsługi wystąpienia dołączone do tego elementu nie są zwykle zgłaszane. Wszystkie inne procedury obsługi klasy lub wystąpienia, które są dołączone do elementów w kierunku propagacji do korzenia w drzewie interfejsu użytkownika, również nie są zwykle zgłaszane.  
  
 Można rozwiązać problem opisany w poprzednich ważnych i nadal odbieranych <xref:System.Windows.UIElement.MouseLeftButtonDown> zdarzeniach dla lewego przycisku myszy zdarzenia w klasie pochodnej, która ma obsługę klasy, przy użyciu jednego z następujących rozwiązań:  
  
-   Dołącz programy obsługi dla <xref:System.Windows.UIElement.PreviewMouseDown> zdarzenia, które nie jest oznaczone jako obsługiwane przez kontrolki. Zwróć uwagę, że ponieważ jest to zdarzenie w wersji zapoznawczej, trasa zaczyna się od elementu głównego i tuneluje do formantu.  
  
-   Zarejestrowanie procedury obsługi na formancie w sposób proceduralny przez <xref:System.Windows.UIElement.AddHandler%2A> wywołanie i wybranie opcji podpisu, która umożliwia programom obsługi nasłuchiwanie zdarzeń nawet wtedy, gdy są one już oznaczone jako obsługiwane w danych zdarzenia kierowanego.  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Przesłoń <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po udostępnieniu lewego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mimo że to [zdarzenie jest kierowane](~/docs/framework/wpf/advanced/routed-events-overview.md) do trasy propagacji za pośrednictwem drzewa elementów, jest to bezpośrednie kierowane zdarzenie, które jest zgłaszane i ponownie wywoływane w drzewie <xref:System.Windows.UIElement>elementów.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportują charakterystyczne dla przycisku myszy zdarzenia bazowego <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> , które jest dołączonym zdarzeniem przetwarzanym przez każdy element wraz z trasą zdarzenia.  
  
 Dane zdarzenia tego zdarzenia ujawniają dane zdarzenia bazowego <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> zdarzenia. Jeśli to zdarzenie jest oznaczone jako obsługiwane wzdłuż trasy zdarzenia, są nadal wywoływane zdarzenia dotyczące przycisku myszy. Jednak programy obsługi zdarzeń dla przycisku myszy muszą być dodawane jawnie <xref:System.Windows.UIElement.AddHandler%2A>, z opcją obsługi zdarzeń, które są już oznaczone jako obsługiwane, aby były detektorami zdarzenia. Jeśli znacznik <xref:System.Windows.UIElement.MouseLeftButtonUp> jest obsługiwany, oznacza to, że <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> są one uznawane za obsługiwane dla wszystkich dalszych odbiorników na trasie i we wszystkich powiązanych zdarzeniach.  
  
 Koncepcyjnie, pomyśl o tym zdarzeniu (i innych zdarzeniach myszy w <xref:System.Windows.UIElement>systemie) jako myszy "usługi" (z definicją usługi dostarczaną <xref:System.Windows.Input.Mouse> przez klasę). Zdarzenie dodaje wygodę niezbędną do sprawdzania, czy Stany przycisków myszy (w górę i w dół) oryginalnych zdarzeń myszy w danych zdarzenia. W przypadku bardziej zaawansowanych scenariuszy, takich jak sprawdzanie Stanów przycisków niestandardowymi, może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] <xref:System.Windows.Input.Mouse> <xref:System.Windows.UIElement>klasy w klasie zamiast.  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Przesłoń <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wskaźnik myszy jest przesuwany nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.MouseMove> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.MouseMove> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseMoveEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewMouseMove>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnMouseMove%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.MouseMove" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu prawego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mimo że to [zdarzenie jest kierowane](~/docs/framework/wpf/advanced/routed-events-overview.md) do trasy propagacji za pośrednictwem drzewa elementów, jest to bezpośrednie kierowane zdarzenie, które jest zgłaszane i ponownie wywoływane w drzewie <xref:System.Windows.UIElement>elementów.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportują charakterystyczne dla przycisku myszy zdarzenia bazowego <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> , które jest dołączonym zdarzeniem przetwarzanym przez każdy element wraz z trasą zdarzenia.  
  
 Dane zdarzenia tego zdarzenia ujawniają dane zdarzenia bazowego <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzenia. Jeśli to zdarzenie jest oznaczone jako obsługiwane wzdłuż trasy zdarzenia, są nadal wywoływane zdarzenia dotyczące przycisku myszy. Jednak programy obsługi zdarzeń dla przycisku myszy muszą być dodawane jawnie <xref:System.Windows.UIElement.AddHandler%2A>, z opcją obsługi zdarzeń, które są już oznaczone jako obsługiwane, aby były detektorami zdarzenia. Jeśli znacznik <xref:System.Windows.UIElement.MouseRightButtonDown> jest obsługiwany, oznacza to, że <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> są one uznawane za obsługiwane dla wszystkich dalszych odbiorników na trasie i we wszystkich powiązanych zdarzeniach. To prawdopodobnie dotyczy zdarzeń wygenerowanych przez program obsługi <xref:System.Windows.Controls.Control.MouseDoubleClick>klasy, takich jak.  
  
 Koncepcyjnie, pomyśl o tym zdarzeniu (i innych zdarzeniach myszy w <xref:System.Windows.UIElement>systemie) jako myszy "usługi" (z definicją usługi dostarczaną <xref:System.Windows.Input.Mouse> przez klasę). Zdarzenie dodaje wygodę niezbędną do sprawdzania, czy Stany przycisków myszy (w górę i w dół) oryginalnych zdarzeń myszy w danych zdarzenia. W przypadku bardziej zaawansowanych scenariuszy, takich jak sprawdzanie Stanów przycisków niestandardowymi, może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] <xref:System.Windows.Input.Mouse> <xref:System.Windows.UIElement>klasy w klasie zamiast.  
  
 Zdarzenia myszy prawego przycisku często mają natywną obsługę w scenariuszach aplikacji. Na przykład prawy przycisk myszy w dół może wyświetlić menu kontekstowe. Zobacz temat [Przegląd](~/docs/framework/wpf/controls/contextmenu-overview.md).  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseRightButtonDownEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Przesłoń <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po udostępnieniu prawego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mimo że to [zdarzenie jest kierowane](~/docs/framework/wpf/advanced/routed-events-overview.md) do trasy propagacji za pośrednictwem drzewa elementów, jest to bezpośrednie kierowane zdarzenie, które jest zgłaszane i ponownie wywoływane w drzewie <xref:System.Windows.UIElement>elementów.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportują charakterystyczne dla przycisku myszy zdarzenia bazowego <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> , które jest dołączonym zdarzeniem przetwarzanym przez każdy element wraz z trasą zdarzenia.  
  
 Dane zdarzenia tego zdarzenia ujawniają dane zdarzenia bazowego <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> zdarzenia. Jeśli to zdarzenie jest oznaczone jako obsługiwane wzdłuż trasy zdarzenia, są nadal wywoływane zdarzenia dotyczące przycisku myszy. Jednak programy obsługi zdarzeń dla przycisku myszy muszą być dodawane jawnie <xref:System.Windows.UIElement.AddHandler%2A>, z opcją obsługi zdarzeń, które są już oznaczone jako obsługiwane, aby były detektorami zdarzenia. Jeśli znacznik <xref:System.Windows.UIElement.MouseRightButtonUp> jest obsługiwany, oznacza to, że <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> są one uznawane za obsługiwane dla wszystkich dalszych odbiorników na trasie i we wszystkich powiązanych zdarzeniach.  
  
 Koncepcyjnie, pomyśl o tym zdarzeniu (i innych zdarzeniach myszy w <xref:System.Windows.UIElement>systemie) jako myszy "usługi" (z definicją usługi dostarczaną <xref:System.Windows.Input.Mouse> przez klasę). Zdarzenie dodaje wygodę niezbędną do sprawdzania, czy Stany przycisków myszy (w górę i w dół) oryginalnych zdarzeń myszy w danych zdarzenia. W przypadku bardziej zaawansowanych scenariuszy, takich jak sprawdzanie Stanów przycisków niestandardowymi, może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] <xref:System.Windows.Input.Mouse> <xref:System.Windows.UIElement>klasy w klasie zamiast.  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseRightButtonUpEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Przesłoń <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po wydaniu dowolnego przycisku myszy nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.MouseUp> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.MouseUp> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 Zdarzenie jest często wywoływane razem z albo <xref:System.Windows.UIElement.MouseLeftButtonUp> lub <xref:System.Windows.UIElement.MouseRightButtonUp>, co odpowiada wersji jednego z dwóch standardowych przycisków myszy. <xref:System.Windows.UIElement.MouseUp> <xref:System.Windows.UIElement.MouseLeftButtonUp>i <xref:System.Windows.UIElement.MouseRightButtonUp> są także zdarzenia kierowane, ale są to zdarzenia bezpośrednie kierowane, a odpowiednie zdarzenie specyficzne dla przycisku jest zgłaszane, <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> gdy zdarzenie osiągnie ten element wzdłuż trasy zdarzenia. Zobacz uwagi dla <xref:System.Windows.UIElement.MouseLeftButtonUp> lub <xref:System.Windows.UIElement.MouseRightButtonUp>.  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseUpEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewMouseUp>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnMouseUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.MouseUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik obraca kółko myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przechwycenie fokusu lub myszy ma pierwszeństwo przed miejscem, gdzie wskaźnik myszy jest; w związku z tym, jeśli <xref:System.Windows.UIElement.MouseWheel> otrzymasz zdarzenie z elementu skoncentrowane lub przechwyconych, wskaźnik myszy może znajdować się nad innym elementem.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.MouseWheel> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.MouseWheel> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.MouseWheelEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewMouseWheel>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnMouseWheel%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.MouseWheel" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool&#xA;override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="uIElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">Żądanie przechodzenia, które zawiera właściwość wskazującą tryb przechodzenia w istniejącej kolejności tabulacji lub kierunek przechodzenia wizualnie.</param>
        <summary>Próbuje przenieść fokus z tego elementu do innego elementu. Kierunek przesuwania fokusu jest określany przez kierunek wskazówki, który jest interpretowany w organizacji elementu nadrzędnego wizualizacji dla tego elementu.</summary>
        <returns><see langword="true" />Jeśli żądane przechodzenie zostało wykonane; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Upewnij się, że wartość zwracana przez tę metodę jest sprawdzana. Zwracana wartość `false` może zostać zwrócona, jeśli przechodzenie zostanie uruchomione do tabulatora zdefiniowanego przez kompozycję kontrolki, a żądanie przechodzenia nie zażądało zawijania.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit&#xA;override this.OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit" Usage="uIElement.OnAccessKey e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia do zdarzenia klucza dostępu. Dane zdarzenia są raportowane, który klucz został wywołany, i <see cref="T:System.Windows.Input.AccessKeyManager" /> wskazuje, czy obiekt kontrolujący wysyłanie tych zdarzeń również wysłał to wywołanie klucza dostępu do innych elementów.</param>
        <summary>Zapewnia obsługę klas, gdy wywoływana jest klucz dostępu zrozumiały dla tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Brak rzeczywistego zdarzenia AccessKey w <xref:System.Windows.UIElement> klasie lub w innym miejscu, w którym można podnieść lub dołączyć procedury obsługi. Zamiast tego zdarzenie jest inicjowane za pośrednictwem dedykowanej klasy <xref:System.Windows.Input.AccessKeyManager>Menedżera, która przetwarza wszystkie dane wejściowe w celu wyszukiwania kluczy dostępu, które mają zastosowanie do całego modelu wejściowego.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Domyślna implementacja tej metody w programie <see cref="T:System.Windows.UIElement" /> ustawia fokus klawiatury na ten element (poprzez wywoływanie <see cref="M:System.Windows.UIElement.Focus" />). Implementacje powinny perpetuate to zachowanie, jeśli są skoncentrowane, ponieważ jest to oczekiwane zachowanie dla scenariuszy ułatwień dostępu. Należy zauważyć, że implementacja podstawowa nie zawiera żadnych danych zdarzeń zakończonych i nie zgłasza dalszych zdarzeń; właśnie ustawia fokus.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnChildDesiredSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildDesiredSizeChanged(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChildDesiredSizeChanged (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChildDesiredSizeChanged(System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="abstract member OnChildDesiredSizeChanged : System.Windows.UIElement -&gt; unit&#xA;override this.OnChildDesiredSizeChanged : System.Windows.UIElement -&gt; unit" Usage="uIElement.OnChildDesiredSizeChanged child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">Zmieniany jest rozmiar elementu podrzędnego.</param>
        <summary>Obsługuje zachowanie układu, gdy zmieniany jest rozmiar elementu podrzędnego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zazwyczaj nie jest wywoływana przez kod aplikacji. Jest on narażony, tak aby klasy elementów pochodnych mogły przeprowadzać dalsze testy na ich własny, prawdopodobnie nieprawidłowy stan układu. Klasy mogą również próbować zoptymalizować, aby zminimalizować czas przetwarzania dla przebiegu układu na podstawie zmian rozmiaru do elementów podrzędnych. Przykładem klasy pochodnej elementu, która <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> implementuje, <xref:System.Windows.Controls.Grid> jest formant.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Metoda ma domyślną implementację wywołania <see cref="M:System.Windows.UIElement.InvalidateMeasure" />. <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> Typowa implementacja to: wykonaj dowolną optymalizację, która obsługuje, a następnie zazwyczaj Wywołaj metodę <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> Base z co najmniej jednego z gałęzi kodu (ten, który wskazywał stan "zanieczyszczony") na własną logikę buforowania miary.  
  
Ta metoda jest wywoływana tylko w przetwarzaniu układu, jeśli była elementem podrzędnym, z którego pochodzi zmiana rozmiaru. W przeciwnym razie, jeśli element nadrzędny inicjuje <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> przebieg, zgodnie z regułami systemu układu, element nadrzędny jest już ponownie obliczany układ. System układu przetwarza układ w kolejności elementu podrzędnego między elementami podrzędnymi, więc nie jest wymagane przywrócenie do rozmiarów elementu nadrzędnego z wywołań układu elementu podrzędnego.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer&#xA;override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="uIElement.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca implementacje specyficzne <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] dla klasy dla infrastruktury.</summary>
        <returns>Implementacja specyficzna <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> dla typu.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Implementacja tej metody zwykle wywołuje konstruktora określonej <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementacji i zwraca ją jako wartość zwracaną.  
  
Wszystkie <see cref="T:System.Windows.UIElement" /> klasy pochodne powinny implementować tę metodę w celu zapewnienia <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> własnych implementacji do [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastruktury. Aby uzyskać szczegółowe informacje na temat implementowania <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />tego wzorca, zobacz.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.DragEnter" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.DragLeave" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.DragOver" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.DragEnter" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement.OnGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.GiveFeedbackEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.GiveFeedback" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> , który zawiera dane zdarzenia. Dane zdarzenia muszą zawierać identyfikator <see cref="E:System.Windows.UIElement.GotFocus" /> zdarzenia.</param>
        <summary>Podnosi zdarzenie <see cref="E:System.Windows.UIElement.GotFocus" /> kierowane przy użyciu dostarczonych danych zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda, chociaż wirtualna, ma domyślną implementację, która wywołuje zdarzenie.  
  
 Ta metoda na * implementacja metody jest przeznaczona do podniesienia poziomu zdarzenia i ta sama implementacja metody jest wywoływana wewnętrznie w celu podniesienia zdarzenia <xref:System.Windows.UIElement.IsFocused%2A> , gdy wartość właściwości zostanie zmieniona. Implementacja różni się od innych [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] na * implementacjach, które zapewniają wygodny sposób dodawania obsługi klasy dla tego zdarzenia. <xref:System.Windows.UIElement.OnGotFocus%2A>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>O ile nie istnieje zamierzone i nietypowe wymaganie, aby nie podnieść poziomu zdarzenia fokusu, upewnij się, że implementacja wywołuje implementację podstawową. W przeciwnym razie zdarzenie nie zostanie zgłoszone podczas typowych operacji użytkownika, które zwykle ustawiają fokus na tym elemencie. <see cref="E:System.Windows.UIElement.GotFocus" /> Jeśli nie zamierzasz skupić się na elemencie, możesz uniemożliwić skoncentrowanie się elementu przez ustawienie <see cref="P:System.Windows.UIElement.Focusable" /> na. <see langword="false" /></para></block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnGotMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnGotStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnGotTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klas dla <see cref="E:System.Windows.UIElement.GotTouchCapture" /> zdarzenia kierowanego, które występuje, gdy dotyk jest przechwytywany do tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnGotTouchCapture%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.UIElement.OnGotTouchCapture%2A> w klasie pochodnej, aby <xref:System.Windows.UIElement.GotTouchCapture> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.UIElement.OnGotTouchCapture%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsKeyboardFocusedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływana, gdy <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> zdarzenie nieobsłużone zostanie zgłoszone dla tego elementu. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wirtualna jest wyzwalana, gdy wartość <xref:System.Windows.UIElement.IsKeyboardFocused%2A> właściwości zależności zostanie zmieniona. Metoda wirtualna jest najpierw podnoszona i może manipulować danymi zdarzenia w razie potrzeby. <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> Następnie zdarzenie jest zgłaszane z tym samym wystąpieniem danych zdarzenia. Zwróć uwagę, <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> że zdarzenie nie jest zdarzeniem kierowanym. W związku z tym nie można oznaczyć go jako obsługiwanego w obsłudze klas.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsKeyboardFocusWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Wywoływane tuż przed podjęciem <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> zdarzenia przez ten element. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wirtualna jest wyzwalana, gdy wartość <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> właściwości zależności zostanie zmieniona. Metoda wirtualna jest najpierw podnoszona i może manipulować danymi zdarzenia w razie potrzeby. <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> Następnie zdarzenie jest zgłaszane z tym samym wystąpieniem danych zdarzenia. Zwróć uwagę, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> że zdarzenie nie jest zdarzeniem kierowanym. W związku z tym nie można oznaczyć go jako obsługiwanego w obsłudze klas.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływana, gdy <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> zdarzenie nieobsłużone zostanie zgłoszone dla tego elementu. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wirtualna jest wyzwalana, gdy wartość <xref:System.Windows.UIElement.IsMouseCaptured%2A> właściwości Dependency zmieni się jej wartość. Metoda wirtualna jest najpierw podnoszona i może manipulować danymi zdarzenia w razie potrzeby. <xref:System.Windows.UIElement.IsMouseCapturedChanged> Następnie zdarzenie jest zgłaszane z tym samym wystąpieniem danych zdarzenia. Zwróć uwagę, <xref:System.Windows.UIElement.IsMouseCapturedChanged> że zdarzenie nie jest zdarzeniem kierowanym; W związku z tym nie można oznaczyć go jako obsługiwanego w obsłudze klas.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Wywoływana, gdy <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> zdarzenie nieobsłużone zostanie zgłoszone dla tego elementu. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Ta metoda wirtualna jest wyzwalana, gdy wartość <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> właściwości Dependency zmieni się jej wartość. Metoda wirtualna jest najpierw podnoszona i może manipulować danymi zdarzenia w razie potrzeby. <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> Następnie zdarzenie jest zgłaszane z tym samym wystąpieniem danych zdarzenia. Zwróć uwagę, że zdarzenie nie jest zdarzeniem kierowanym; W związku z tym nie można oznaczyć go jako obsługiwanego w obsłudze klas.  
  
Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływana, gdy <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> zdarzenie nieobsłużone zostanie zgłoszone dla tego elementu. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wirtualna jest wyzwalana, gdy wartość <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> właściwości Dependency zmieni się jej wartość. Metoda wirtualna jest najpierw podnoszona i może manipulować danymi zdarzenia w razie potrzeby. <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> Następnie zdarzenie jest zgłaszane z tym samym wystąpieniem danych zdarzenia. Zwróć uwagę, <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> że zdarzenie nie jest zdarzeniem kierowanym. W związku z tym nie można oznaczyć go jako obsługiwanego w obsłudze klas.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Wywoływana, gdy <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> zdarzenie nieobsłużone zostanie zgłoszone dla tego elementu. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wirtualna jest wyzwalana, gdy wartość <xref:System.Windows.UIElement.IsStylusCaptured%2A> właściwości Dependency zmieni się jej wartość. Metoda wirtualna jest najpierw podnoszona i może manipulować danymi zdarzenia w razie potrzeby. <xref:System.Windows.UIElement.IsStylusCapturedChanged> Następnie zdarzenie jest zgłaszane z tym samym wystąpieniem danych zdarzenia. Zwróć uwagę, że zdarzenie nie jest zdarzeniem kierowanym. W związku z tym nie można oznaczyć go jako obsługiwanego w obsłudze klas.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływana, gdy <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> zdarzenie nieobsłużone zostanie zgłoszone dla tego elementu. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wirtualna jest wyzwalana, gdy wartość <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> właściwości Dependency zmieni się jej wartość. Metoda wirtualna jest najpierw podnoszona i może manipulować danymi zdarzenia w razie potrzeby. <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> Następnie zdarzenie jest zgłaszane z tym samym wystąpieniem danych zdarzenia. Zwróć uwagę, że zdarzenie nie jest zdarzeniem kierowanym. W związku z tym nie można oznaczyć go jako obsługiwanego w obsłudze klas.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływana, gdy <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> zdarzenie nieobsłużone zostanie zgłoszone dla tego elementu. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda wirtualna jest wyzwalana, gdy wartość <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> właściwości Dependency zmieni się jej wartość. Metoda wirtualna jest najpierw podnoszona i może manipulować danymi zdarzenia w razie potrzeby. <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> Następnie zdarzenie jest zgłaszane z tym samym wystąpieniem danych zdarzenia. Zwróć uwagę, że zdarzenie nie jest zdarzeniem kierowanym. W związku z tym nie można oznaczyć go jako obsługiwanego w obsłudze klas.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Naciśnięcia klawiszy są obsługiwane przez dedykowanego Menedżera wejściowych. Inne funkcje programistyczne korzystające z naciśnięć klawiszy, na przykład powiązania danych wejściowych i poleceń, mogą obsłużyć naciśnięcie klawisza, zanim zostanie uwidocznione jako ogólne naciśnięcie klawisza. Jeśli te funkcje systemu wejścia oznaczają zdarzenie jako obsłużone, a <xref:System.Windows.UIElement.OnKeyDown%2A> następnie nie są wywoływane.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Naciśnięcia klawiszy są obsługiwane przez dedykowanego Menedżera wejściowych. Inne funkcje programistyczne korzystające z naciśnięć klawiszy, na przykład powiązania danych wejściowych i poleceń, mogą obsłużyć naciśnięcie klawisza, zanim zostanie uwidocznione jako ogólne naciśnięcie klawisza. Jeśli te funkcje systemu wejścia oznaczają zdarzenie jako obsłużone, a <xref:System.Windows.UIElement.OnKeyUp%2A> następnie nie są wywoływane.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> , który zawiera dane zdarzenia. Dane zdarzenia muszą zawierać identyfikator <see cref="E:System.Windows.UIElement.LostFocus" /> zdarzenia.</param>
        <summary>Podnosi zdarzenie <see cref="E:System.Windows.UIElement.LostFocus" /> kierowane przy użyciu dostarczonych danych zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda, chociaż wirtualna, ma domyślną implementację, która wywołuje zdarzenie.  
  
 Ta metoda na * implementacja metody jest przeznaczona do podniesienia poziomu zdarzenia i ta sama implementacja metody jest wywoływana wewnętrznie w celu podniesienia zdarzenia <xref:System.Windows.UIElement.IsFocused%2A> , gdy wartość właściwości zostanie zmieniona. Ta implementacja różni się od innych [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] w zakresie * implementacji, które zapewniają wygodny sposób dodawania obsługi klasy dla tego zdarzenia.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>O ile nie istnieje zamierzone i nietypowe wymaganie, aby nie podnieść poziomu zdarzenia fokusu, upewnij się, że implementacja wywołuje implementację podstawową. W przeciwnym razie zdarzenie nie zostanie zgłoszone podczas typowych operacji użytkownika, które zwykle ustawiają fokus na tym elemencie. <see cref="E:System.Windows.UIElement.LostFocus" /> Jeśli nie zamierzasz skupić się na elemencie, możesz uniemożliwić skoncentrowanie się elementu przez ustawienie <see cref="P:System.Windows.UIElement.Focusable" /> na. <see langword="false" /></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> Zawiera dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnLostMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> Zawiera dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnLostStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawiera dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnLostTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.UIElement.LostTouchCapture" /> zdarzenia trasowanego, gdy ten element utraci funkcję przechwytywania dotykowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnLostTouchCapture%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.UIElement.OnLostTouchCapture%2A> w klasie pochodnej, aby <xref:System.Windows.UIElement.LostTouchCapture> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.UIElement.OnLostTouchCapture%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit&#xA;override this.OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit" Usage="uIElement.OnManipulationBoundaryFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia.</param>
        <summary>Wywoływana, <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> gdy wystąpi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> w klasie pochodnej, aby <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> metodę klasy bazowej, aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationCompleted(class System.Windows.Input.ManipulationCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationCompleted (e As ManipulationCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationCompleted(System::Windows::Input::ManipulationCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationCompleted : System.Windows.Input.ManipulationCompletedEventArgs -&gt; unit&#xA;override this.OnManipulationCompleted : System.Windows.Input.ManipulationCompletedEventArgs -&gt; unit" Usage="uIElement.OnManipulationCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationCompletedEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia.</param>
        <summary>Wywoływana, <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> gdy wystąpi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationCompleted%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.UIElement.OnManipulationCompleted%2A> w klasie pochodnej, aby <xref:System.Windows.UIElement.ManipulationCompleted> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.UIElement.OnManipulationCompleted%2A> metodę klasy bazowej, aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationDelta">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationDelta(class System.Windows.Input.ManipulationDeltaEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationDelta (e As ManipulationDeltaEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationDelta(System::Windows::Input::ManipulationDeltaEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationDelta : System.Windows.Input.ManipulationDeltaEventArgs -&gt; unit&#xA;override this.OnManipulationDelta : System.Windows.Input.ManipulationDeltaEventArgs -&gt; unit" Usage="uIElement.OnManipulationDelta e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationDeltaEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia.</param>
        <summary>Wywoływana, <see cref="E:System.Windows.UIElement.ManipulationDelta" /> gdy wystąpi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationDelta%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.UIElement.OnManipulationDelta%2A> w klasie pochodnej, aby <xref:System.Windows.UIElement.ManipulationDelta> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.UIElement.OnManipulationDelta%2A> metodę klasy bazowej, aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationInertiaStarting(class System.Windows.Input.ManipulationInertiaStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationInertiaStarting (e As ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationInertiaStarting(System::Windows::Input::ManipulationInertiaStartingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationInertiaStarting : System.Windows.Input.ManipulationInertiaStartingEventArgs -&gt; unit&#xA;override this.OnManipulationInertiaStarting : System.Windows.Input.ManipulationInertiaStartingEventArgs -&gt; unit" Usage="uIElement.OnManipulationInertiaStarting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationInertiaStartingEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia.</param>
        <summary>Wywoływana, <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> gdy wystąpi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> w klasie pochodnej, aby <xref:System.Windows.UIElement.ManipulationInertiaStarting> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> metodę klasy bazowej, aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarted(class System.Windows.Input.ManipulationStartedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarted (e As ManipulationStartedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarted(System::Windows::Input::ManipulationStartedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationStarted : System.Windows.Input.ManipulationStartedEventArgs -&gt; unit&#xA;override this.OnManipulationStarted : System.Windows.Input.ManipulationStartedEventArgs -&gt; unit" Usage="uIElement.OnManipulationStarted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartedEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Dane zdarzenia.</param>
        <summary>Wywoływana, <see cref="E:System.Windows.UIElement.ManipulationStarted" /> gdy wystąpi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationStarted%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.UIElement.OnManipulationStarted%2A> w klasie pochodnej, aby <xref:System.Windows.UIElement.ManipulationStarted> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.UIElement.OnManipulationStarted%2A> metodę klasy bazowej, aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarting(class System.Windows.Input.ManipulationStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarting (e As ManipulationStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarting(System::Windows::Input::ManipulationStartingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationStarting : System.Windows.Input.ManipulationStartingEventArgs -&gt; unit&#xA;override this.OnManipulationStarting : System.Windows.Input.ManipulationStartingEventArgs -&gt; unit" Usage="uIElement.OnManipulationStarting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartingEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klas dla <see cref="E:System.Windows.UIElement.ManipulationStarting" /> zdarzenia kierowanego, które występuje podczas pierwszego tworzenia procesora manipulowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnManipulationStarting%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.UIElement.OnManipulationStarting%2A> w klasie pochodnej, aby <xref:System.Windows.UIElement.ManipulationStarting> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.UIElement.OnManipulationStarting%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. To zdarzenie służy do raportowania szczegółowych informacji o naciśnięciu przycisku myszy i stanie obsługiwanym.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.MouseDown" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Akcje przycisków myszy są również obsługiwane przez dedykowanego Menedżera danych wejściowych. Inne funkcje programistyczne, które opierają się na akcjach przycisku myszy, takie jak powiązania danych wejściowych i poleceń, mogą wywoływać programy obsługi dla akcji, zanim zostanie ono ujawnione jako ogólna akcja przycisku myszy. Jeśli te funkcje systemu wejścia oznaczają <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> zdarzenie jako obsłużone, <xref:System.Windows.UIElement.OnMouseDown%2A> nie są wywoływane.  
  
 Jeśli używasz tej procedury obsługi klasy do oznaczania zdarzenia jako obsługiwanego, może to mieć wpływ na następujące <xref:System.Windows.UIElement.MouseLeftButtonDown> zdarzenia <xref:System.Windows.UIElement.MouseRightButtonDown>: i. Każde z tych zdarzeń może zostać zgłoszone w momencie <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> odebrania elementu odbiorczego.  
  
 Po oznaczeniu tego zdarzenia jako obsługiwanego w obsłudze klasy, podzdarzenia nadal są wywoływane; jednak przechodzą stan obsłużony w danych zdarzenia. Jeśli zdarzenie jest obsługiwane w obsłudze klas, programy obsługi wystąpień dla zdarzeń nie są wywoływane, chyba że jawnie użyto <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> `handledEventsToo` `true` programu w celu dołączenia programów obsługi. Procedury obsługi klas również nie są wywoływane, <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> Jeśli te procedury obsługi klas nie zostały zarejestrowane z podpisem za pomocą. `handledEventsToo` `true` Dzięki obsłudze <xref:System.Windows.UIElement.OnMouseDown%2A>, oznacza to, że obsługa klasy jest uwzględniana dla wszystkich możliwych akcji po kliknięciu przycisku myszy. Takie zachowanie może być niepożądane; W związku z tym należy zachować ostrożność podczas używania tej metody wirtualnej do oznaczania zdarzeń jako obsłużonych.  
  
 Każde zdarzenie bezpośrednie specyficzne dla przycisku ma także wirtualną metodę on *; Zastanów się, czy przesłanianie tych programów obsługi klas właściwych dla przycisku może być bardziej odpowiednie.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy w tym elemencie <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> zostanie zgłoszone nieobsłużone zdarzenie. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym z strategią routingu bezpośredniego. Oznaczanie zdarzenia jako obsługiwanego jest nadal przydatne do zapobiegania wywoływaniu typowych programów obsługi wystąpień (tych, które `handledEventsToo`nie są określone).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływane, gdy w tym elemencie <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> zostanie zgłoszone nieobsłużone zdarzenie. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym z strategią routingu bezpośredniego. Oznaczanie zdarzenia jako obsługiwanego jest nadal przydatne do zapobiegania wywoływaniu typowych programów obsługi wystąpień (tych, które `handledEventsToo`nie są określone).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłaszają naciśnięcie lewego przycisku myszy.</param>
        <summary>Wywoływane, gdy dla tego elementu <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> zgłoszono nieobsłużone zdarzenie. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseLeftButtonDown> Zdarzenie wydaje się podróżować trasą propagacji, ale rzeczywiście podróżuje w sposób pośredni. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>to podstawowe zdarzenie, które jest kierowane przez bąbelki, <xref:System.Windows.UIElement> a każdy z nich jest używany do wywołania bezpośredniego kierowanego zdarzenia <xref:System.Windows.UIElement.MouseLeftButtonDown>do trasy zdarzeń. Mimo że można oznaczyć <xref:System.Windows.UIElement.MouseLeftButtonDown> zdarzenie jako obsługiwane dla celów tego elementu, przewidziany stan nie perpetuate się do innych elementów wzdłuż trasy zdarzenia. Można jednak oznaczyć zdarzenie jako obsłużone w celu uniemożliwienia wywoływania ogólnych programów obsługi wystąpień (tych, które nie zostały określone `handledEventsToo`).  
  
 Domyślna implementacja ogólnej obsługi zdarzeń myszy w programie <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenie lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej Zarejestruj procedurę obsługi klasy alternatywnej dla <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Nie można zmienić zachowania <xref:System.Windows.UIElement> obsługi myszy przez zastąpienie. <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>  
  
 Alternatywnie można zastąpić tę metodę, aby zmienić obsługę zdarzeń dla określonego stanu myszy. Niezależnie od tego, czy chcesz wywołać implementację podstawową, zależy od danego scenariusza. Niepowodzenie wywołania elementu Base powoduje wyłączenie domyślnej obsługi danych wejściowych dla tego zdarzenia myszy w klasach nadrzędnych, <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>które również powinny być wywoływane. Na przykład można dziedziczyć z <xref:System.Windows.Controls.Button> klasy pochodnej i zastąpić <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> ją bez wywoływania podstawowej implementacji, jednak to zastąpienie spowoduje wyłączenie <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłaszają, że został wystawiony lewy przycisk myszy.</param>
        <summary>Wywoływane, gdy nieobsłużone <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> zdarzenie osiągnie element w swojej trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseLeftButtonUp> Zdarzenie wydaje się podróżować trasą propagacji, ale rzeczywiście podróżuje w sposób pośredni. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>to podstawowe zdarzenie, które jest kierowane przez bąbelki, <xref:System.Windows.UIElement> a każdy z nich jest używany do wywołania bezpośredniego kierowanego zdarzenia <xref:System.Windows.UIElement.MouseLeftButtonUp>do trasy zdarzeń. Mimo że można oznaczyć <xref:System.Windows.UIElement.MouseLeftButtonUp> zdarzenie jako obsługiwane dla celów tego elementu, przewidziany stan nie perpetuate się do innych elementów wzdłuż trasy zdarzenia. Można jednak oznaczyć zdarzenie jako obsłużone w celu uniemożliwienia wywoływania ogólnych programów obsługi wystąpień (tych, które nie zostały określone `handledEventsToo`).  
  
 Domyślna implementacja ogólnej obsługi zdarzeń myszy w programie <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenie lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej Zarejestruj procedurę obsługi klasy alternatywnej dla <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Nie można zmienić zachowania <xref:System.Windows.UIElement> obsługi myszy przez zastąpienie. <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.MouseMove" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłaszają naciśnięcie prawego przycisku myszy.</param>
        <summary>Wywoływane, gdy nieobsłużone <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> zdarzenie osiągnie element w swojej trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseRightButtonDown> Zdarzenie wydaje się podróżować trasą propagacji, ale rzeczywiście podróżuje w sposób pośredni. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>to podstawowe zdarzenie, które jest kierowane przez bąbelki, <xref:System.Windows.UIElement> a każdy z nich jest używany do wywołania bezpośredniego kierowanego zdarzenia <xref:System.Windows.UIElement.MouseRightButtonDown>do trasy zdarzeń. Mimo że można oznaczyć <xref:System.Windows.UIElement.MouseRightButtonDown> zdarzenie jako obsługiwane dla celów tego elementu, przewidziany stan nie perpetuate się do innych elementów wzdłuż trasy zdarzenia. Można jednak oznaczyć zdarzenie jako obsłużone w celu uniemożliwienia wywoływania ogólnych programów obsługi wystąpień (tych, które nie zostały określone `handledEventsToo`).  
  
 Domyślna implementacja ogólnej obsługi zdarzeń myszy w programie <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenie lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej Zarejestruj procedurę obsługi klasy alternatywnej dla <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Nie można zmienić zachowania <xref:System.Windows.UIElement> obsługi myszy przez zastąpienie. <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>  
  
 Alternatywnie można zastąpić tę metodę, aby zmienić obsługę zdarzeń dla określonego stanu myszy. Niezależnie od tego, czy chcesz wywołać implementację podstawową, zależy od danego scenariusza. Niepowodzenie wywołania elementu Base powoduje wyłączenie domyślnej obsługi danych wejściowych dla tego zdarzenia myszy w klasach nadrzędnych, <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>które również powinny być wywoływane. Na przykład można dziedziczyć z <xref:System.Windows.Controls.Control> klasy pochodnej i przesłonić <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> ją bez wywoływania Base; jednak to zastąpienie powoduje wyłączenie usług menu kontekstowego w kontrolce, <xref:System.Windows.Controls.Control> które są częścią zachowania domyślnego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia są raportowane po wydaniu prawego przycisku myszy.</param>
        <summary>Wywoływane, gdy nieobsłużone <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> zdarzenie osiągnie element w swojej trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseRightButtonUp> Zdarzenie wydaje się podróżować trasą propagacji, ale rzeczywiście podróżuje w sposób pośredni. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>to podstawowe zdarzenie, które jest kierowane przez bąbelki, <xref:System.Windows.UIElement> a każdy z nich jest używany do wywołania bezpośredniego kierowanego zdarzenia <xref:System.Windows.UIElement.MouseRightButtonUp>do trasy zdarzeń. Mimo że można oznaczyć <xref:System.Windows.UIElement.MouseRightButtonUp> zdarzenie jako obsługiwane dla celów tego elementu, przewidziany stan nie perpetuate się do innych elementów wzdłuż trasy zdarzenia. Można jednak oznaczyć zdarzenie jako obsłużone w celu uniemożliwienia wywoływania ogólnych programów obsługi wystąpień (tych, które nie zostały określone `handledEventsToo`).  
  
 Domyślna implementacja ogólnej obsługi zdarzeń myszy w programie <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenie lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej Zarejestruj procedurę obsługi klasy alternatywnej dla <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Nie można zmienić zachowania <xref:System.Windows.UIElement> obsługi myszy przez zastąpienie. <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłaszają, że przycisk myszy został wydzierżawiony.</param>
        <summary>Wywoływane, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.MouseUp" /> zdarzenie osiągnie element w swojej trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Akcje przycisków myszy są również obsługiwane przez dedykowanego Menedżera danych wejściowych. Inne funkcje programistyczne, które opierają się na akcjach przycisku myszy, takie jak powiązania danych wejściowych i poleceń, mogą wywoływać programy obsługi dla akcji, zanim zostanie ono ujawnione jako ogólna akcja przycisku myszy. Jeśli te funkcje systemu wejścia oznaczają <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> zdarzenie jako obsłużone, <xref:System.Windows.UIElement.OnMouseUp%2A> nie są wywoływane.  
  
 Jeśli używasz tej procedury obsługi klasy do oznaczania zdarzenia jako obsługiwanego, może to mieć wpływ na następujące <xref:System.Windows.UIElement.MouseLeftButtonUp> zdarzenia <xref:System.Windows.UIElement.MouseRightButtonUp>: i. Każde z tych zdarzeń może zostać zgłoszone w momencie <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> odebrania elementu odbiorczego.  
  
 Po oznaczeniu tego zdarzenia jako obsługiwanego w obsłudze klasy, podzdarzenia nadal są wywoływane; jednak przechodzą stan obsłużony w danych zdarzenia. Jeśli zdarzenie jest obsługiwane w obsłudze klas, programy obsługi wystąpień dla zdarzeń nie są wywoływane, chyba że jawnie użyto <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> `handledEventsToo` `true` programu w celu dołączenia programów obsługi. Procedury obsługi klas również nie są wywoływane, <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> Jeśli te procedury obsługi klas nie zostały zarejestrowane z podpisem za pomocą. `handledEventsToo` `true` Dzięki obsłudze <xref:System.Windows.UIElement.OnMouseUp%2A>, oznacza to, że obsługa klasy jest uwzględniana dla wszystkich możliwych akcji przycisku myszy. Takie zachowanie może być niepożądane; W związku z tym należy zachować ostrożność podczas używania tej metody wirtualnej do oznaczania zdarzeń jako obsłużonych.  
  
 Każde zdarzenie bezpośrednie specyficzne dla przycisku ma także wirtualną metodę on *; Zastanów się, czy przesłanianie tych programów obsługi klas właściwych dla przycisku może być bardziej odpowiednie.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseWheelEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.PreviewDrop" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement.OnPreviewGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.GiveFeedbackEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnPreviewGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnPreviewKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnPreviewLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia raportują, że co najmniej jeden przycisk myszy został naciśnięty.</param>
        <summary>Wywoływana, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> zdarzenie połączonej trasy osiągnie element w swojej trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Akcje przycisków myszy są również obsługiwane przez dedykowanego Menedżera danych wejściowych. Inne funkcje programistyczne, które opierają się na akcjach przycisku myszy, takie jak powiązania danych wejściowych i poleceń, mogą wywoływać programy obsługi dla akcji, zanim zostanie ono ujawnione jako ogólna akcja przycisku myszy. Jeśli te funkcje systemu wejścia oznaczają <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> zdarzenie jako obsłużone, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> nie są wywoływane.  
  
 Jeśli używasz tej procedury obsługi klasy do oznaczania zdarzenia jako obsługiwanego, może to mieć wpływ na następujące <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> zdarzenia <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>: i. Każde z tych zdarzeń może zostać zgłoszone w momencie <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> odebrania elementu odbiorczego.  
  
 Po oznaczeniu tego zdarzenia jako obsługiwanego w obsłudze klasy, podzdarzenia nadal są wywoływane; jednak przechodzą stan obsłużony w danych zdarzenia. Jeśli zdarzenie jest obsługiwane w obsłudze klas, programy obsługi wystąpień dla zdarzeń nie są wywoływane, chyba że jawnie użyto <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> `handledEventsToo` `true` programu w celu dołączenia programów obsługi. Procedury obsługi klas również nie są wywoływane, <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> Jeśli te procedury obsługi klas nie zostały zarejestrowane z podpisem za pomocą. `handledEventsToo` `true` Dzięki obsłudze <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>, oznacza to, że obsługa klasy jest uwzględniana dla wszystkich możliwych akcji po kliknięciu przycisku myszy. Takie zachowanie może być niepożądane; W związku z tym należy zachować ostrożność podczas używania tej metody wirtualnej do oznaczania zdarzeń jako obsłużonych.  
  
 Każde zdarzenie bezpośrednie specyficzne dla przycisku ma także wirtualną metodę on *; Zastanów się, czy przesłanianie tych programów obsługi klas właściwych dla przycisku może być bardziej odpowiednie.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłaszają naciśnięcie lewego przycisku myszy.</param>
        <summary>Wywoływane, gdy nieobsłużone <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> zdarzenie osiągnie element w swojej trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> Zdarzenie wydaje się kierować trasą tunelowania, ale rzeczywiście podróżuje w sposób pośredni. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>to zdarzenie bazowe, które jest trasowane przez tunel, a <xref:System.Windows.UIElement> każdy z nich jest używany do wywołania bezpośredniego kierowanego zdarzenia <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>do trasy zdarzeń. Mimo że można oznaczyć <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> zdarzenie jako obsługiwane dla celów tego elementu, przewidziany stan nie perpetuate się do innych elementów wzdłuż trasy zdarzenia. Można jednak oznaczyć zdarzenie jako obsłużone w celu uniemożliwienia wywoływania ogólnych programów obsługi wystąpień (tych, które nie zostały określone `handledEventsToo`).  
  
 Domyślna implementacja ogólnej obsługi zdarzeń myszy w programie <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenie lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej Zarejestruj procedurę obsługi klasy alternatywnej dla <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Nie można zmienić zachowania <xref:System.Windows.UIElement> obsługi myszy przez zastąpienie. <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>  
  
 Alternatywnie można zastąpić tę metodę, aby zmienić obsługę zdarzeń dla określonego stanu myszy. Niezależnie od tego, czy chcesz wywołać implementację podstawową, zależy od danego scenariusza. Niepowodzenie wywołania elementu Base powoduje wyłączenie domyślnej obsługi danych wejściowych dla tego zdarzenia myszy w klasach nadrzędnych, <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>które również powinny być wywoływane. Na przykład można dziedziczyć z <xref:System.Windows.Controls.Button> klasy pochodnej i zastąpić <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> ją bez wywoływania podstawowej implementacji, jednak to zastąpienie spowoduje wyłączenie <xref:System.Windows.Controls.Primitives.ButtonBase.Click> zdarzenia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłaszają, że został wystawiony lewy przycisk myszy.</param>
        <summary>Wywoływane, gdy nieobsłużone <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> zdarzenie osiągnie element w swojej trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> Zdarzenie wydaje się kierować trasą tunelowania, ale rzeczywiście podróżuje w sposób pośredni. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>to zdarzenie bazowe, które jest trasowane przez tunel, a <xref:System.Windows.UIElement> każdy z nich jest używany do wywołania bezpośredniego kierowanego zdarzenia <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>do trasy zdarzeń. Mimo że można oznaczyć <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> zdarzenie jako obsługiwane dla celów tego elementu, przewidziany stan nie perpetuate się do innych elementów wzdłuż trasy zdarzenia. Można jednak oznaczyć zdarzenie jako obsłużone w celu uniemożliwienia wywoływania ogólnych programów obsługi wystąpień (tych, które nie zostały określone `handledEventsToo`).  
  
 Domyślna implementacja ogólnej obsługi zdarzeń myszy w programie <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenie lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej Zarejestruj procedurę obsługi klasy alternatywnej dla <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Nie można zmienić zachowania <xref:System.Windows.UIElement> obsługi myszy przez zastąpienie. <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłaszają naciśnięcie prawego przycisku myszy.</param>
        <summary>Wywoływane, gdy nieobsłużone <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> zdarzenie osiągnie element w swojej trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> Zdarzenie wydaje się kierować trasą tunelowania, ale rzeczywiście podróżuje w sposób pośredni. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>to zdarzenie bazowe, które jest trasowane przez tunel, a <xref:System.Windows.UIElement> każdy z nich jest używany do wywołania bezpośredniego kierowanego zdarzenia <xref:System.Windows.UIElement.MouseRightButtonDown>do trasy zdarzeń. Mimo że można oznaczyć <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> zdarzenie jako obsługiwane dla celów tego elementu, przewidziany stan nie perpetuate się do innych elementów wzdłuż trasy zdarzenia. Można jednak oznaczyć zdarzenie jako obsłużone w celu uniemożliwienia wywoływania ogólnych programów obsługi wystąpień (tych, które nie zostały określone `handledEventsToo`).  
  
 Domyślna implementacja ogólnej obsługi zdarzeń myszy w programie <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenie lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej Zarejestruj procedurę obsługi klasy alternatywnej dla <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Nie można zmienić zachowania <xref:System.Windows.UIElement> obsługi myszy przez zastąpienie. <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>  
  
 Alternatywnie można zastąpić tę metodę, aby zmienić obsługę zdarzeń dla określonego stanu myszy. Niezależnie od tego, czy chcesz wywołać implementację podstawową, zależy od danego scenariusza. Niepowodzenie wywołania elementu Base powoduje wyłączenie domyślnej obsługi danych wejściowych dla tego zdarzenia myszy w klasach nadrzędnych, <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>które również powinny być wywoływane. Na przykład można dziedziczyć z <xref:System.Windows.Controls.Control> klasy pochodnej i przesłonić <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> ją bez wywoływania Base; jednak to zastąpienie powoduje wyłączenie usług menu kontekstowego w kontrolce, <xref:System.Windows.Controls.Control> które są częścią zachowania domyślnego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia są raportowane po wydaniu prawego przycisku myszy.</param>
        <summary>Wywoływane, gdy nieobsłużone <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> zdarzenie osiągnie element w swojej trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> Zdarzenie wydaje się kierować trasą tunelowania, ale rzeczywiście podróżuje w sposób pośredni. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>to zdarzenie bazowe, które jest trasowane przez tunel, a <xref:System.Windows.UIElement> każdy z nich jest używany do wywołania bezpośredniego kierowanego zdarzenia <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>do trasy zdarzeń. Mimo że można oznaczyć <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> zdarzenie jako obsługiwane dla celów tego elementu, przewidziany stan nie perpetuate się do innych elementów wzdłuż trasy zdarzenia. Można jednak oznaczyć zdarzenie jako obsłużone w celu uniemożliwienia wywoływania ogólnych programów obsługi wystąpień (tych, które nie zostały określone `handledEventsToo`).  
  
 Domyślna implementacja ogólnej obsługi zdarzeń myszy w programie <xref:System.Windows.UIElement> nasłuchuje <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> i konwertuje ją na odpowiednie zdarzenie lokalne. Jeśli chcesz przesłonić tę logikę, należy utworzyć klasę pochodną. W konstruktorze statycznym klasy pochodnej Zarejestruj procedurę obsługi klasy alternatywnej dla <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Nie można zmienić zachowania <xref:System.Windows.UIElement> obsługi myszy przez zastąpienie. <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> Zawierający dane zdarzenia. Dane zdarzenia zgłaszają, że co najmniej jeden przycisk myszy został wykryty.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Akcje przycisków myszy są również obsługiwane przez dedykowanego Menedżera danych wejściowych. Inne funkcje programistyczne, które opierają się na akcjach przycisku myszy, takie jak powiązania danych wejściowych i poleceń, mogą wywoływać programy obsługi dla akcji, zanim zostanie ono ujawnione jako ogólna akcja przycisku myszy. Jeśli te funkcje systemu wejścia oznaczają <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> zdarzenie jako obsłużone, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> nie są wywoływane.  
  
 Jeśli używasz tej procedury obsługi klasy do oznaczania zdarzenia jako obsługiwanego, może to mieć wpływ na następujące <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> zdarzenia <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>: i. Każde z tych zdarzeń może zostać zgłoszone w momencie <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> odebrania elementu odbiorczego.  
  
 Po oznaczeniu tego zdarzenia jako obsługiwanego w obsłudze klasy, podzdarzenia nadal są wywoływane; jednak przechodzą stan obsłużony w danych zdarzenia. Jeśli zdarzenie jest obsługiwane w obsłudze klas, programy obsługi wystąpień dla zdarzeń nie są wywoływane, chyba że jawnie użyto <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> `handledEventsToo` `true` programu w celu dołączenia programów obsługi. Procedury obsługi klas również nie są wywoływane, <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> Jeśli te procedury obsługi klas nie zostały zarejestrowane z podpisem za pomocą. `handledEventsToo` `true` Dzięki obsłudze <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>, oznacza to, że obsługa klasy jest uwzględniana dla wszystkich możliwych akcji przycisku myszy. Takie zachowanie może być niepożądane; W związku z tym należy zachować ostrożność podczas używania tej metody wirtualnej do oznaczania zdarzeń jako obsłużonych.  
  
 Każde zdarzenie bezpośrednie specyficzne dla przycisku ma także wirtualną metodę on *; Zastanów się, czy przesłanianie tych programów obsługi klas właściwych dla przycisku może być bardziej odpowiednie.  
  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseWheelEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement.OnPreviewQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.QueryContinueDragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusButtonEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusButtonEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusDownEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement.OnPreviewTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.TextCompositionEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego. Innym scenariuszem przeznaczonym dla zdarzeń w wersji zapoznawczej jest oznaczenie ich jako obsłużonych w taki sposób, aby nie były wywoływane zgodne procedury obsługi klasy propagacji.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.UIElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klas dla <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> zdarzenia kierowanego, gdy dotknięciem jest naciśnięcie tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> w klasie pochodnej, aby <xref:System.Windows.UIElement.PreviewTouchDown> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> zdarzenia trasowanego, gdy nastąpi przeniesienie dotyku w obrębie tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> w klasie pochodnej, aby <xref:System.Windows.UIElement.PreviewTouchMove> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> zdarzenia trasowanego, gdy nastąpi wyprowadzenie dotyku wewnątrz tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> w klasie pochodnej, aby <xref:System.Windows.UIElement.PreviewTouchUp> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement.OnQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.QueryContinueDragEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit&#xA;override this.OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit" Usage="uIElement.OnQueryCursor e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.QueryCursorEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnRender">
      <MemberSignature Language="C#" Value="protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRender(class System.Windows.Media.DrawingContext drawingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRender(System::Windows::Media::DrawingContext ^ drawingContext);" />
      <MemberSignature Language="F#" Value="abstract member OnRender : System.Windows.Media.DrawingContext -&gt; unit&#xA;override this.OnRender : System.Windows.Media.DrawingContext -&gt; unit" Usage="uIElement.OnRender drawingContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawingContext" Type="System.Windows.Media.DrawingContext" />
      </Parameters>
      <Docs>
        <param name="drawingContext">Instrukcje dotyczące rysowania określonego elementu. Ten kontekst jest udostępniany systemowi układu.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, uczestniczy w operacjach renderowania, które są kierowane przez system układu. Instrukcje renderowania dla tego elementu nie są używane bezpośrednio w przypadku wywołania tej metody i są zachowywane w celu późniejszego użycia asynchronicznego przez układ i rysowanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji w <xref:System.Windows.UIElement> klasie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje możliwe wdrożenie klasy pochodnej panelu.  
  
 [!code-csharp[LightWeightCustomPanel#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LightWeightCustomPanel/CSharp/OffsetPanel.cs#1)]
 [!code-vb[LightWeightCustomPanel#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LightWeightCustomPanel/visualbasic/offsetpanel.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Metodę <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> można zastąpić, aby dodać dalsze elementy graficzne (nie zdefiniowane wcześniej w drzewie logicznym) do renderowanego elementu, na przykład efektów lub modułów definiowania układu. <see cref="T:System.Windows.Media.DrawingContext" /> Obiekt jest przekazaniem jako argument, który zapewnia metody rysowania kształtów, tekstu, obrazów lub filmów wideo.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRenderSizeChanged (info As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ info);" />
      <MemberSignature Language="F#" Value="abstract member OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit&#xA;override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="uIElement.OnRenderSizeChanged info" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="info">Spakowane parametry (<see cref="T:System.Windows.SizeChangedInfo" />), w tym stare i nowe rozmiary oraz wymiar, który faktycznie zmienia się.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, uczestniczy w operacjach renderowania, które są kierowane przez system układu. Ta metoda jest wywoływana po aktualizacji układu i przed renderowaniem, jeśli element <see cref="P:System.Windows.UIElement.RenderSize" /> został zmieniony w wyniku aktualizacji układu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Typowy element platformy WPF Framework używa implementacji przesłonięcia z <xref:System.Windows.FrameworkElement>. Implementacja unieważnia <xref:System.Windows.FrameworkElement.Width%2A> i<xref:System.Windows.FrameworkElement.Height%2A> właściwości i obsługuje podstawy przeprowadzenia układu. <xref:System.Windows.FrameworkElement> <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> Zastępowanie<xref:System.Windows.UIElement> na poziomie oznacza, że implementacja elementu nie korzysta z implementacji na poziomie platformy WPF, a w związku z tym element musi obsługiwać logikę układu więcej bezpośrednio, zwykle pisząc zastępowanie systemu układu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusButtonEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusButtonEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement.OnStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusDownEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusDown" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> dołączone zdarzenie jest zgłaszane przez ten element. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 Celem tej metody jest podobna do wzorca zdarzeń [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] w odniesieniu do * metod: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Oznaczanie zdarzenia jako obsługiwanego jest nadal przydatne do zapobiegania wywoływaniu typowych programów obsługi wystąpień (tych, `handledEventsToo`które nie są określone).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> dołączone zdarzenie jest zgłaszane przez ten element. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji. Możesz wywoływać bazę przed lub po specjalnej obsłudze, w zależności od wymagań.  
  
 Celem tej metody jest podobna do wzorca zdarzeń [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] w odniesieniu do * metod: Ta metoda zapewnia metodę obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Oznaczanie zdarzenia jako obsługiwanego jest nadal przydatne do zapobiegania wywoływaniu typowych programów obsługi wystąpień (tych, `handledEventsToo`które nie są określone).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusMove" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement.OnStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.Stylus.StylusUp" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement.OnTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.TextCompositionEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywoływany, gdy nieobsłużone <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> zdarzenie dołączono do elementu w trasie, który jest pochodną tej klasy. Zaimplementuj tę metodę, aby dodać obsługę klasy dla tego zdarzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie ma domyślnej implementacji. Ponieważ Klasa pośrednicząca w dziedziczeniu może implementować tę metodę, zalecamy wywołanie podstawowej implementacji w implementacji.  
  
 Celem tej metody jest podobna do [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] wzorca zdarzeń dla * metod: Ta metoda zapewnia metodę do obsługi pasującego zdarzenia z klas pochodnych przez ustanowienie procedury obsługi klas zamiast procedury obsługi wystąpienia. W takim przypadku zdarzenie dopasowywania jest zdarzeniem kierowanym. Wzorzec implementacji metod on * jest różny dla zdarzeń kierowanych, ponieważ zdarzenie trasowane może być zgłaszane przez element podrzędny, który nie musi być elementem, który wywoła procedury obsługi. W związku z tym implementacja musi przeanalizować właściwości źródłowe danych zdarzenia. Nie należy próbować ponownie podnieść poziomu zdarzenia w większości przypadków.  
  
 Przez zastąpienie tej metody lub przez zarejestrowanie obsługi klas z <xref:System.Windows.EventManager.RegisterClassHandler%2A>, <xref:System.Windows.UIElement> klasy pochodne mogą wywołać metody obsługi klasy prywatnej, gdy zdarzenie jest odbierane wzdłuż trasy zdarzenia. Jednym z scenariuszy, w których obsługiwana jest Klasa, jest manipulowanie danymi zdarzenia i oznaczenie zdarzenia kierowanego jako obsługiwanego.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klas dla <see cref="E:System.Windows.UIElement.TouchDown" /> zdarzenia kierowanego, które występuje po naciśnięciu dotknięcia wewnątrz tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchDown%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.UIElement.OnTouchDown%2A> w klasie pochodnej, aby <xref:System.Windows.UIElement.TouchDown> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.UIElement.OnTouchDown%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.UIElement.TouchEnter" /> zdarzenia trasowanego, gdy nastąpi przejście z zewnątrz do wewnątrz granic tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchEnter%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.UIElement.OnTouchEnter%2A> w klasie pochodnej, aby <xref:System.Windows.UIElement.TouchEnter> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.UIElement.OnTouchEnter%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.UIElement.TouchLeave" /> zdarzenia trasowanego, gdy nastąpi przejście z wewnątrz do granic tego <see cref="T:System.Windows.UIElement" />elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchLeave%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.UIElement.OnTouchLeave%2A> w klasie pochodnej, aby <xref:System.Windows.UIElement.TouchLeave> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.UIElement.OnTouchLeave%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.UIElement.TouchMove" /> zdarzenia trasowanego, gdy nastąpi przeniesienie dotyku w obrębie tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchMove%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.UIElement.OnTouchMove%2A> w klasie pochodnej, aby <xref:System.Windows.UIElement.TouchMove> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.UIElement.OnTouchMove%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary>Zapewnia obsługę klasy dla <see cref="E:System.Windows.UIElement.TouchUp" /> zdarzenia trasowanego, gdy nastąpi wyprowadzenie dotyku wewnątrz tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.OnTouchUp%2A> Metoda nie ma domyślnej implementacji. Przesłoń <xref:System.Windows.UIElement.OnTouchUp%2A> w klasie pochodnej, aby <xref:System.Windows.UIElement.TouchUp> obsłużyć zdarzenie. Należy pamiętać, aby wywołać <xref:System.Windows.UIElement.OnTouchUp%2A> metodę klasy bazowej, tak aby klasy podstawowe otrzymywały zdarzenie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="uIElement.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">Poprzedni element nadrzędny. Ta wartość <see langword="null" /> <see cref="T:System.Windows.DependencyObject" /> może być określona, jeśli nie ma wcześniej elementu nadrzędnego.</param>
        <summary>Wywoływany, gdy element nadrzędny tego <see cref="T:System.Windows.UIElement" /> raportu zmieni się na jego bazowy element nadrzędny Visual.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Jeśli zastąpisz tę metodę, zawsze Wywołaj implementację podstawową. Domyślna implementacja podstawowa wykonuje pewną wewnętrzną konserwację stanu właściwości odwrotnej. Niepowodzenie wywołania podstawowej implementacji spowoduje unieważnienie tego stanu.  
  
Ta metoda przesłania <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />. <see cref="T:System.Windows.FrameworkElement" />i <see cref="T:System.Windows.Window" /> oba te <see cref="T:System.Windows.UIElement" /> elementy również przesłonią implementację <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />i <see cref="T:System.Windows.Window" /> plombuje.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public double Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Opacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Opacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Opacity As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Opacity { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Opacity : double with get, set" Usage="System.Windows.UIElement.Opacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia współczynnik nieprzezroczystości stosowany do całego <see cref="T:System.Windows.UIElement" /> elementu, gdy jest renderowany [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]w.  Jest to właściwość zależności.</summary>
        <value>Współczynnik nieprzezroczystości. Wartość domyślna to 1,0. Oczekiwane wartości należą do zakresu od 0,0 do 1,0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna 1,0 jest domyślnie dostarczana przez początkowe metadane tej właściwości zależności w <xref:System.Windows.UIElement> klasie. Inne klasy pochodne mogą potencjalnie zmienić tę wartość domyślną przez zastąpienie metadanych z poziomu konstruktora klasy.  
  
 Wartość <xref:System.Windows.UIElement.Opacity%2A> nie zostanie zastosowana do rzeczywistego układu, chyba że element jest również widoczny (<xref:System.Windows.UIElement.IsVisible%2A> is `true`).  
  
 <xref:System.Windows.UIElement.Opacity%2A>jest stosowany z elementów nadrzędnych w dół drzewa elementu do elementów podrzędnych, ale widoczne efekty ustawień nieprzezroczystości nie są wskazane w wartości właściwości poszczególnych elementów podrzędnych. Na przykład, jeśli lista ma nieprzezroczystość 50% (0,5), a jeden z jej elementów listy ma własną nieprzezroczystość ustawioną na 20% (0,2), widoczna nieprzezroczystość sieci dla tego elementu listy będzie renderowana tak, jakby była 10% (0,1), ale wartość właściwości elementu <xref:System.Windows.UIElement.Opacity%2A> listy nadal będzie  0,2 podczas zapytania.  
  
 Nawet jeśli zadeklarowana lub oceniona nieprzezroczystość ma wartość 0, element nadal uczestniczy w zdarzeniach wejściowych i poleceniach i może być możliwy do skoncentrowania. Ten aspekt może być przydatny, na przykład można użyć nieprzezroczystości-zero obiektu (na przykład kształtu) do maskowania obiektów bazowych z przezroczystymi elementami. Nieprzezroczystość — obiekt niebędący w stanie obsłużyć wszystkie przetwarzanie zdarzeń wejściowych dla bazowego obszaru. Jednak obiekt lub kształt musi być ustawiona na wartość <xref:System.Windows.Media.Brushes.Transparent%2A>, nawet jeśli tak, w przeciwnym razie testowanie trafień nie jest włączone i nie są odbierane żadne zdarzenia. `Background` `Fill`  
  
<a name="dependencyPropertyInfo_Opacity"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.OpacityProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.OpacityMask" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMask">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush OpacityMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush OpacityMask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.OpacityMask" />
      <MemberSignature Language="VB.NET" Value="Public Property OpacityMask As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ OpacityMask { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OpacityMask : System.Windows.Media.Brush with get, set" Usage="System.Windows.UIElement.OpacityMask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia maskę przezroczystości jako <see cref="T:System.Windows.Media.Brush" /> implementację, która jest stosowana do dowolnego maskowania kanału alfa dla renderowanej zawartości tego elementu.  Jest to właściwość zależności.</summary>
        <value>Pędzel do użycia na potrzeby maskowania nieprzezroczystości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość używa tylko wartości kanału alfa dla podanego <xref:System.Windows.Media.Brush>elementu. Pozostałe kanały <xref:System.Windows.Media.Brush>renderowanej zawartości (czerwony, zielony lub niebieski) są ignorowane.  
  
 Najbardziej typowym <xref:System.Windows.Media.Brush> celem <xref:System.Windows.Media.ImageBrush>jest, który może być używany dla różnych technik maskowania zdjęć, takich jak Vignette. Ale można użyć <xref:System.Windows.Media.Brush> dowolnego zdefiniowanego <xref:System.Windows.Media.LinearGradientBrush>(takiego jak).  
  
 W [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]programie ta wartość właściwości może używać składni wbudowanej, która jest specyficzna dla każdej implementacji <xref:System.Windows.Media.Brush> klasy abstrakcyjnej. Aby uzyskać więcej informacji, zobacz [malowanie przy użyciu pełnych kolorów i gradientów — Omówienie](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md).  
  
<a name="dependencyPropertyInfo_OpacityMask"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.OpacityMaskProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład znaczników pokazuje <xref:System.Windows.Media.ImageBrush> maskę nieprzezroczystości zastosowana do innej. <xref:System.Windows.Controls.Image>  
  
 [!code-xaml[OpacityMasksSnippet#UIElementOpacityMask](~/samples/snippets/csharp/VS_Snippets_Wpf/OpacityMasksSnippet/CS/ImageBrushExample.xaml#uielementopacitymask)]   
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Opacity" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMaskProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityMaskProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityMaskProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityMaskProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityMaskProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityMaskProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OpacityMaskProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.OpacityMaskProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.OpacityMask" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpacityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OpacityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.OpacityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.Opacity" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistId">
      <MemberSignature Language="C#" Value="public int PersistId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PersistId" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.PersistId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PersistId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PersistId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PersistId : int" Usage="System.Windows.UIElement.PersistId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("PersistId is an obsolete property and may be removed in a future release.  The value of this property is not defined.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość, która jednoznacznie identyfikuje ten element.</summary>
        <value>Unikatowy identyfikator dla tego elementu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PersistId%2A>jednoznacznie identyfikuje każdy element. Element zachowuje się tak samo <xref:System.Windows.UIElement.PersistId%2A> za każdym razem, [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] gdy jest załadowana taka sama wartość (łącznie z reprezentacją binarną). Ten identyfikator jest używany do wewnętrznego ładowania, analizowania i serializacji. Nie jest przeznaczona do użycia w kodzie aplikacji.  
  
 Ta właściwość nie ma relacji z <xref:System.Object.GetHashCode%2A> wynikiem dla danego wystąpienia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject&#xA;override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="uIElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">Kierunek żądanego przechodzenia fokusu.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, zwraca element, który otrzymuje fokus dla określonego kierunku przechodzenia fokusu, bez faktycznego przesuwania fokusu do tego elementu.</summary>
        <returns>Element, który uzyskał fokus, jeśli <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> został faktycznie wywołany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody w tej klasie jest niekompletna i zawsze zwraca wartość `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragEnter : System.Windows.DragEventHandler " Usage="member this.PreviewDragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłosi bazowe zdarzenie przeciągania z tym elementem jako element docelowy przeciągania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewDragEnter> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewDragEnter> zdarzenia są dołączone do <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewDragEnterEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.DragEnter>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewDragEnter" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragLeave : System.Windows.DragEventHandler " Usage="member this.PreviewDragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłosi bazowe zdarzenie przeciągania przy użyciu tego elementu jako punktu początkowego przeciągania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewDragLeave> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewDragLeave> zdarzenia są dołączone do <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewDragLeaveEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.DragLeave>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewDragLeave" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragOver : System.Windows.DragEventHandler " Usage="member this.PreviewDragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłosi bazowe zdarzenie przeciągania z tym elementem jako potencjalną tarczą docelową.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewDragOver> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewDragOver> zdarzenia są dołączone do <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewDragOverEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.DragOver>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewDragOver%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewDragOver" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberSignature Language="F#" Value="member this.PreviewDrop : System.Windows.DragEventHandler " Usage="member this.PreviewDrop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy system wejściowy zgłasza bazowe zdarzenie upuszczania z tym elementem jako element docelowy upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewDrop> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewDrop> zdarzenia są dołączone do <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewDropEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.DragEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.Drop>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewDrop%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewDrop" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po rozpoczęciu operacji przeciągania i upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewGiveFeedback> Zdarzenie włącza Źródło zdarzenia przeciągania, aby zmodyfikować jego wygląd, aby dać użytkownikowi opinię wizualną podczas operacji przeciągania i upuszczania.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewGiveFeedback> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewGiveFeedback> zdarzenia są dołączone do <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.GiveFeedback>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klawiatura ma fokus w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ to zdarzenie używa routingu tunelowania, element, który ma fokus, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który ma fokus.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> zdarzenia są dołączone do <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.GotKeyboardFocus>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu klawisza, gdy fokus znajduje się na tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa kluczowych współdziała z innymi funkcjami platformy, takimi jak tworzenie poleceń i składanie tekstu. <xref:System.Windows.UIElement.KeyDown> Zdarzenie jest zdarzeniem wprowadzania tekstu niższego poziomu, które może nie zachowywać się zgodnie z oczekiwaniami w niektórych kontrolkach. Wynika to z faktu, że niektóre kontrolki mają założenia kontrolne lub obsługujące klasy, które udostępniają wyższego poziomu obsługę wprowadzania tekstu i powiązane zdarzenia.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewKeyDown> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewKeyDown> zdarzenia są dołączone do <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewKeyDownEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.KeyDown>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewKeyDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klucz zostanie wydzierżawiony, gdy fokus znajduje się na tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obsługa kluczowych współdziała z innymi funkcjami platformy, takimi jak tworzenie poleceń i składanie tekstu. <xref:System.Windows.UIElement.KeyUp> Zdarzenie jest zdarzeniem wprowadzania tekstu niższego poziomu, które może nie zachowywać się zgodnie z oczekiwaniami w niektórych kontrolkach. Wynika to z faktu, że niektóre kontrolki mają założenia kontrolne lub obsługujące klasy, które udostępniają wyższego poziomu obsługę wprowadzania tekstu i powiązane zdarzenia. Aby uzyskać szczegółowe informacje, zapoznaj się z dokumentacją dla poszczególnych kontrolek.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewKeyUp> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewKeyUp> zdarzenia są dołączone do <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewKeyUpEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.KeyUp>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewKeyUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy klawiatura nie ma już fokusu w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ to zdarzenie używa routingu tunelowania, element, który utracił fokus, może być elementem podrzędnym zamiast elementu, w którym program obsługi zdarzeń jest rzeczywiście dołączony. <xref:System.Windows.RoutedEventArgs.Source%2A> Sprawdź dane zdarzenia, aby określić rzeczywisty element, który utracił fokus.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> zdarzenia są dołączone do <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.LostKeyboardFocus>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu dowolnego przycisku myszy, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewMouseDown> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewMouseDown> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 Zdarzenie jest często wywoływane razem z albo <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> lub <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, które odpowiada naciśnięciu jednego z dwóch standardowych przycisków myszy. <xref:System.Windows.UIElement.PreviewMouseDown> <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>i <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> są także zdarzenia kierowane, ale są to zdarzenia bezpośrednie kierowane, a odpowiednie zdarzenie specyficzne dla przycisku jest zgłaszane, <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> gdy zdarzenie osiągnie ten element wzdłuż trasy zdarzenia. Zobacz uwagi dla <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> lub <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseDownEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.MouseDown>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewMouseDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu lewego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mimo że to [zdarzenie jest kierowane](~/docs/framework/wpf/advanced/routed-events-overview.md) do trasy tunelowania za pośrednictwem drzewa elementów, jest to bezpośrednie, kierowane zdarzenie, które jest zgłaszane i ponownie wywoływane w drzewie <xref:System.Windows.UIElement>elementów.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportują charakterystyczne dla przycisku myszy zdarzenia bazowego <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> , które jest dołączonym zdarzeniem przetwarzanym przez każdy element wraz z trasą zdarzenia.  
  
 Dane zdarzenia tego zdarzenia ujawniają dane zdarzenia bazowego <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> zdarzenia. Jeśli to zdarzenie jest oznaczone jako obsługiwane wzdłuż trasy zdarzenia, są nadal wywoływane zdarzenia dotyczące przycisku myszy. Jednak programy obsługi zdarzeń dla przycisku myszy muszą być dodawane jawnie <xref:System.Windows.UIElement.AddHandler%2A>, z opcją obsługi zdarzeń, które są już oznaczone jako obsługiwane, aby były detektorami zdarzenia. Jeśli znacznik <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> jest obsługiwany, oznacza to, że <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> są one uznawane za obsługiwane dla wszystkich dalszych odbiorników na trasie i we wszystkich powiązanych zdarzeniach. To prawdopodobnie dotyczy zdarzeń wygenerowanych przez program obsługi <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>klasy, takich jak.  
  
 Koncepcyjnie, pomyśl o tym zdarzeniu (i innych zdarzeniach myszy w <xref:System.Windows.UIElement>systemie) jako myszy "usługi" (z definicją usługi dostarczaną <xref:System.Windows.Input.Mouse> przez klasę). Zdarzenie dodaje wygodę niezbędną do sprawdzania, czy Stany przycisków myszy (w górę i w dół) oryginalnych zdarzeń myszy w danych zdarzenia. W przypadku bardziej zaawansowanych scenariuszy, takich jak sprawdzanie Stanów przycisków niestandardowymi, może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] <xref:System.Windows.Input.Mouse> <xref:System.Windows.UIElement>klasy w klasie zamiast.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po udostępnieniu lewego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mimo że to [zdarzenie jest kierowane](~/docs/framework/wpf/advanced/routed-events-overview.md) do trasy tunelowania za pośrednictwem drzewa elementów, jest to bezpośrednie, kierowane zdarzenie, które jest zgłaszane i ponownie wywoływane w drzewie <xref:System.Windows.UIElement>elementów.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportują charakterystyczne dla przycisku myszy zdarzenia bazowego <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> , które jest dołączonym zdarzeniem przetwarzanym przez każdy element wraz z trasą zdarzenia.  
  
 Dane zdarzenia tego zdarzenia ujawniają dane zdarzenia bazowego <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> zdarzenia. Jeśli to zdarzenie jest oznaczone jako obsługiwane wzdłuż trasy zdarzenia, są nadal wywoływane zdarzenia dotyczące przycisku myszy. Jednak programy obsługi zdarzeń dla przycisku myszy muszą być dodawane jawnie <xref:System.Windows.UIElement.AddHandler%2A>, z opcją obsługi zdarzeń, które są już oznaczone jako obsługiwane, aby były detektorami zdarzenia. Jeśli znacznik <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> jest obsługiwany, oznacza to, że <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> są one uznawane za obsługiwane dla wszystkich dalszych odbiorników na trasie i we wszystkich powiązanych zdarzeniach.  
  
 Koncepcyjnie, pomyśl o tym zdarzeniu (i innych zdarzeniach myszy w <xref:System.Windows.UIElement>systemie) jako myszy "usługi" (z definicją usługi dostarczaną <xref:System.Windows.Input.Mouse> przez klasę). Zdarzenie dodaje wygodę niezbędną do sprawdzania, czy Stany przycisków myszy (w górę i w dół) oryginalnych zdarzeń myszy w danych zdarzenia. W przypadku bardziej zaawansowanych scenariuszy, takich jak sprawdzanie Stanów przycisków niestandardowymi, może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] <xref:System.Windows.Input.Mouse> <xref:System.Windows.UIElement>klasy w klasie zamiast.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po przesunięciu wskaźnika myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie występuje, gdy wskaźnik myszy najpierw przechodzi do granic elementów, a także gdy wskaźnik myszy jest przenoszony, gdy nadal pozostały w granicach elementów.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewMouseMove> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewMouseMove> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseMoveEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.MouseMove>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewMouseMove" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu prawego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mimo że to [zdarzenie jest kierowane](~/docs/framework/wpf/advanced/routed-events-overview.md) do trasy tunelowania za pośrednictwem drzewa elementów, jest to bezpośrednie, kierowane zdarzenie, które jest zgłaszane i ponownie wywoływane w drzewie <xref:System.Windows.UIElement>elementów.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportują charakterystyczne dla przycisku myszy zdarzenia bazowego <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> , które jest dołączonym zdarzeniem przetwarzanym przez każdy element wraz z trasą zdarzenia.  
  
 Dane zdarzenia tego zdarzenia ujawniają dane zdarzenia bazowego <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> zdarzenia. Jeśli to zdarzenie jest oznaczone jako obsługiwane wzdłuż trasy zdarzenia, są nadal wywoływane zdarzenia dotyczące przycisku myszy. Jednak programy obsługi zdarzeń dla przycisku myszy muszą być dodawane jawnie <xref:System.Windows.UIElement.AddHandler%2A>, z opcją obsługi zdarzeń, które są już oznaczone jako obsługiwane, aby były detektorami zdarzenia. Jeśli znacznik <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> jest obsługiwany, oznacza to, że <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> są one uznawane za obsługiwane dla wszystkich dalszych odbiorników na trasie i we wszystkich powiązanych zdarzeniach. To prawdopodobnie dotyczy zdarzeń wygenerowanych przez program obsługi <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>klasy, takich jak.  
  
 Koncepcyjnie, pomyśl o tym zdarzeniu (i innych zdarzeniach myszy w <xref:System.Windows.UIElement>systemie) jako myszy "usługi" (z definicją usługi dostarczaną <xref:System.Windows.Input.Mouse> przez klasę). Zdarzenie dodaje wygodę niezbędną do sprawdzania, czy Stany przycisków myszy (w górę i w dół) oryginalnych zdarzeń myszy w danych zdarzenia. W przypadku bardziej zaawansowanych scenariuszy, takich jak sprawdzanie Stanów przycisków niestandardowymi, może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] <xref:System.Windows.Input.Mouse> <xref:System.Windows.UIElement>klasy w klasie zamiast.  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po udostępnieniu prawego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mimo że to [zdarzenie jest kierowane](~/docs/framework/wpf/advanced/routed-events-overview.md) do trasy tunelowania za pośrednictwem drzewa elementów, jest to bezpośrednie, kierowane zdarzenie, które jest zgłaszane i ponownie wywoływane w drzewie <xref:System.Windows.UIElement>elementów.  
  
 To zdarzenie jest jednym z kilku powiązanych zdarzeń, które raportują charakterystyczne dla przycisku myszy zdarzenia bazowego <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> , które jest dołączonym zdarzeniem przetwarzanym przez każdy element wraz z trasą zdarzenia.  
  
 Dane zdarzenia tego zdarzenia ujawniają dane zdarzenia bazowego <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> zdarzenia. Jeśli to zdarzenie jest oznaczone jako obsługiwane wzdłuż trasy zdarzenia, są nadal wywoływane zdarzenia dotyczące przycisku myszy. Jednak programy obsługi zdarzeń dla przycisku myszy muszą być dodawane jawnie <xref:System.Windows.UIElement.AddHandler%2A>, z opcją obsługi zdarzeń, które są już oznaczone jako obsługiwane, aby były detektorami zdarzenia. Jeśli znacznik <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> jest obsługiwany, oznacza to, że <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> są one uznawane za obsługiwane dla wszystkich dalszych odbiorników na trasie i we wszystkich powiązanych zdarzeniach.  
  
 Koncepcyjnie, pomyśl o tym zdarzeniu (i innych zdarzeniach myszy w <xref:System.Windows.UIElement>systemie) jako myszy "usługi" (z definicją usługi dostarczaną <xref:System.Windows.Input.Mouse> przez klasę). Zdarzenie dodaje wygodę niezbędną do sprawdzania, czy Stany przycisków myszy (w górę i w dół) oryginalnych zdarzeń myszy w danych zdarzenia. W przypadku bardziej zaawansowanych scenariuszy, takich jak sprawdzanie Stanów przycisków niestandardowymi, może być konieczne użycie [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] <xref:System.Windows.Input.Mouse> <xref:System.Windows.UIElement>klasy w klasie zamiast.  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po wydaniu dowolnego przycisku myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewMouseUp> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewMouseUp> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 Zdarzenie jest często wywoływane razem z albo <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> lub <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, które odpowiada naciśnięciu jednego z dwóch standardowych przycisków myszy. <xref:System.Windows.UIElement.PreviewMouseUp> <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>i <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> są także zdarzenia kierowane, ale są to zdarzenia bezpośrednie kierowane, a odpowiednie zdarzenie specyficzne dla przycisku jest zgłaszane, <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> gdy zdarzenie osiągnie ten element wzdłuż trasy zdarzenia. Zobacz uwagi dla <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> lub <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseUpEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.MouseUp>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewMouseUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik obraca kółko myszy, gdy wskaźnik myszy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przechwycenie fokusu lub myszy ma pierwszeństwo przed miejscem, gdzie wskaźnik myszy jest; w związku z tym, jeśli otrzymasz to zdarzenie z elementu skoncentrowanego lub przechwyconego, wskaźnik myszy może faktycznie znajdować się nad innym elementem.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewMouseMove> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewMouseMove> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewMouseWheelEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.MouseWheel>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewMouseWheel" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zmianie stanu przycisku klawiatury lub myszy podczas operacji przeciągania i upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PreviewQueryContinueDrag> Zdarzenie włącza Źródło przeciągania, aby zadeklarować, czy operacja przeciągania i upuszczania powinna zostać anulowana.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewQueryContinueDrag> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewQueryContinueDrag> zdarzenia są dołączone do <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.QueryContinueDrag>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewQueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu przycisku pióra, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewStylusButtonDown> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewStylusButtonDown> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz temat [Obsługa wprowadzania dotykowego w systemie Windows Vista](https://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) i [przegląd danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.StylusButtonDown>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po udostępnieniu przycisku pióra, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewStylusButtonUp> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewStylusButtonUp> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.StylusButtonUp>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po dotknięciu dyskretyzatora przez pióro, gdy znajduje się on nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewStylusDown> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewStylusDown> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusDownEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.StylusDown>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewStylusDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest przemieszczane nad elementem bez dotykania dyskretyzatora.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewStylusInAirMove> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewStylusInAirMove> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.StylusInAirMove>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest wystarczająco blisko dyskretyzatora, aby zostało wykryte, w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewStylusInRange> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewStylusInRange> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.StylusInRange>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewStylusInRange" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest przemieszczane nad elementem. Pióro musi zostać przeniesione podczas wykrywania przez dyskretyzatora, aby zgłosić to zdarzenie, w przeciwnym razie <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> zostanie zgłoszone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewStylusMove> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewStylusMove> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusMoveEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.StylusMove>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewStylusMove" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest zbyt daleko od dyskretyzatora, aby zostało wykryte.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewStylusOutOfRange> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewStylusOutOfRange> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.StylusOutOfRange>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik wykonuje jeden z kilku gestów pióra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informacje o gestach pióra znajdują się w temacie <xref:System.Windows.Input.SystemGesture>.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewStylusSystemGesture> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewStylusSystemGesture> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.StylusSystemGesture>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik wywołuje pióro, gdy pióro znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewStylusDown> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewStylusDown> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewStylusUpEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.StylusUp>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewStylusUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberSignature Language="F#" Value="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element Pobiera tekst w sposób niezależny od urządzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To <xref:System.Windows.UIElement.PreviewTextInput> zdarzenie umożliwia składnikowi lub aplikacji nasłuchiwanie danych tekstowych w sposób niezależny od urządzenia. Klawiatura to podstawowy środek <xref:System.Windows.UIElement.PreviewTextInput>, ale może również generować <xref:System.Windows.UIElement.PreviewTextInput>mowę, pismo ręczne i inne urządzenia wejściowe.  
  
 Ze względu na kombinacje klawiszy — w domyślnych klawiaturach lub za pomocą edytorów metod wejściowych — wiele kluczowych zdarzeń może wywoływać tylko jedno zdarzenie wejściowe tekstu.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.PreviewTextInput> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.PreviewTextInput> zdarzenia są dołączone do <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewTextInputEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.TextInput>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewTextInput%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewTextInput" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy palec dotyka ekranu, gdy palcem znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Windows.UIElement.PreviewTouchDown> zdarzenia i <xref:System.Windows.UIElement.TouchDown> nie pojawiają się do momentu dotknięcia ekranu i przeniesienia. Naciśnięcie palca na ekranie i jego utrzymywanie bez przesuwania powoduje zachowanie <xref:System.Windows.Input.Stylus>nacisku i blokady. Zachowanie naciskania i przytrzymania jest równoważne kliknięciu prawym przyciskiem myszy.  
  
 Aby spowodować, <xref:System.Windows.UIElement.PreviewTouchDown> że <xref:System.Windows.UIElement.TouchDown> zdarzenia i wystąpienia są wykonywane zaraz po dotknięciu ekranu palcem, ustaw <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> właściwość dołączone na `false` dla tego elementu.  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewTouchDownEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.TouchDown>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy palec jest przenoszony na ekranie, gdy palcem znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewTouchMoveEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.TouchMove>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy Finger zostanie wysunięty z ekranu, gdy palcem znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.PreviewTouchUpEvent>|  
|Strategia routingu|Tunelowania|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie propagacji to <xref:System.Windows.UIElement.TouchUp>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zmianie stanu przycisku klawiatury lub myszy podczas operacji przeciągania i upuszczania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.QueryContinueDrag> Zdarzenie włącza Źródło przeciągania, aby określić, czy operacja przeciągania i upuszczania powinna zostać anulowana.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.QueryContinueDrag> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.QueryContinueDrag> zdarzenia są dołączone do <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.QueryContinueDragEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.QueryContinueDrag" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberSignature Language="F#" Value="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " Usage="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zażądaniu wyświetlenia kursora. To zdarzenie jest wywoływane na elemencie za każdym razem, gdy wskaźnik myszy jest przenoszony do nowej lokalizacji, co oznacza, że obiekt kursora może wymagać zmiany na podstawie jego nowej pozycji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.QueryCursor> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.QueryCursor> zdarzenia są dołączone do <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 Kursor, do którego odwołuje się ta nazwa zdarzenia, nie musi być kursorem tekstu (czasami znanym jako punkt wstawiania). Zamiast tego kursor w tym kontekście jest obiektem, który deklaruje wyświetlacz graficzny Onscreen związany z kilkoma możliwymi urządzeniami wejściowymi lub koncepcjami w programowaniu systemu Windows. Ten obiekt jest reprezentowany przez <xref:System.Windows.Input.Cursor> klasę w WPF. System wprowadzania WPF umożliwia zmianę tego kursora, gdy reprezentuje pozycję na ekranie wskaźnika myszy. Można użyć wstępnie zdefiniowanych wartości z <xref:System.Windows.Input.Cursors> wyliczenia lub można zadeklarować niestandardowy kursor jako plik obrazu.  
  
 Nasłuchiwanie <xref:System.Windows.UIElement.QueryCursor> dla zdarzenia nie jest efektywną techniką dla zarządzania kursorem. Zamiast tego każdy element powinien definiować własne zachowanie kursora z <xref:System.Windows.FrameworkContentElement.Cursor%2A> i. <xref:System.Windows.FrameworkContentElement.ForceCursor%2A> Należy się zależeć <xref:System.Windows.UIElement.QueryCursor> tylko, jeśli nie korzystasz z podstawowych elementów platformy WPF Framework lub w sytuacjach wyjątkowych, gdy Definiowanie zachowania kursora dla poszczególnych elementów nie spełnia Twoich potrzeb. Aby uzyskać więcej informacji na temat implementowania zachowania kursora <xref:System.Windows.UIElement.QueryCursor>w odpowiedzi <xref:System.Windows.Input.QueryCursorEventHandler>na, zobacz.  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.QueryCursorEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   Nie zdefiniowano odpowiedniego zdarzenia tunelowania.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnQueryCursor%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.QueryCursor" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.RaiseEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.RoutedEventArgs" /> , który zawiera dane zdarzenia, a także identyfikuje zdarzenie do wywołania.</param>
        <summary>Wywołuje określone zdarzenie kierowane. Wartość <see cref="T:System.Windows.RoutedEvent" /> do wyniesienia jest identyfikowana <see cref="T:System.Windows.RoutedEventArgs" /> w ramach podanego wystąpienia (jako <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> Właściwość danych zdarzenia).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr jest wpisywany jako wspólny typ podstawowy dla wszystkich danych zdarzeń kierowanych, jednak dane zdarzenia powinny być przekazywane jako najbardziej konkretny typ danych zdarzenia, który jest dostępny dla zdarzenia, które jest zgłaszane, ponieważ <xref:System.Windows.RoutedEventArgs> klasy pochodne zawierają `e` rzeczywiste specyficzne właściwości danych, które są przeznaczone dla konkretnego zdarzenia, gdy zostanie zgłoszone.  
  
 <xref:System.Windows.RoutedEventArgs>nie jest tylko właściwościami stanu zdarzenia; identyfikuje także, które zdarzenie zostało podniesione. Ten wzorzec podnoszenia zdarzeń i dane zdarzeń kierowanych różnią się [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] od zdarzeń i klas danych, które zwykle zawierają właściwości, które są związane ze zdarzeniem.  
  
   
  
## Examples  
 Poniższy przykład tworzy dane zdarzenia, dołącza identyfikator zdarzenia do danych, a następnie używa wystąpienia danych zdarzenia do wywołania niestandardowego zdarzenia kierowanego.  
  
 [!code-csharp[RoutedEventCustom#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#raiseevent)]
 [!code-vb[RoutedEventCustom#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberSignature Language="F#" Value="member this.ReleaseAllTouchCaptures : unit -&gt; unit" Usage="uIElement.ReleaseAllTouchCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie przechwycone urządzenia touch z tego elementu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseMouseCapture : unit -&gt; unit&#xA;override this.ReleaseMouseCapture : unit -&gt; unit" Usage="uIElement.ReleaseMouseCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia funkcję przechwytywania myszy, jeśli ten element przechwytuje przechwytywanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ten element nie zatrzymał przechwytywania, wywołanie tej metody nie ma żadnego wpływu. Rozważ sprawdzenie wartości <xref:System.Windows.UIElement.IsMouseCaptured%2A> przed wywołaniem tej metody.  
  
   
  
## Examples  
 Poniższy przykład jest równoległy do przykładu podanego <xref:System.Windows.UIElement.CaptureMouse%2A>dla: obsługuje przycisk myszy, aby zwolnić funkcję przechwytywania myszy i ponownie włączyć przesuwanie myszy.  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStylusCapture : unit -&gt; unit&#xA;override this.ReleaseStylusCapture : unit -&gt; unit" Usage="uIElement.ReleaseStylusCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia funkcję przechwytywania urządzenia pióra, jeśli ten element przechwytuje przechwytywanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ten element nie zatrzymał przechwytywania, wywołanie tej metody nie ma żadnego wpływu. Rozważ sprawdzenie wartości <xref:System.Windows.UIElement.IsStylusCaptured%2A> przed wywołaniem tej metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.ReleaseTouchCapture : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement.ReleaseTouchCapture touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Urządzenie do wydania.</param>
        <summary>Próbuje zwolnić określone urządzenie dotykowe z tego elementu.</summary>
        <returns><see langword="true" />Jeśli urządzenie dotykowe zostało wydane; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="touchDevice" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement.RemoveHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identyfikator zdarzenia kierowanego, do którego jest dołączona procedura obsługi.</param>
        <param name="handler">Określona implementacja programu obsługi do usunięcia z kolekcji programu obsługi zdarzeń w tym elemencie.</param>
        <summary>Usuwa określony moduł obsługi zdarzeń kierowany z tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Najbardziej typowym scenariuszem korzystania z [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] tego programu jest [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] zaimplementowanie zdarzenia "otoka", które jest skojarzone z niestandardowym zdarzeniem routingu, w szczególności w przypadku implementacji logiki "Remove" [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] dla programów obsługi na poziomie. W tym scenariuszu przedstawiono przykład opisany w poniższej sekcji uwagi.  
  
 Wywołanie tej metody nie działa, jeśli nie ma żadnych programów obsługi zarejestrowanych w kryteriach, które pasują do parametrów wejściowych dla wywołania metody.  
  
 Jeśli dołączono więcej niż jedną procedurę obsługi, która spełnia kryteria, tylko pierwsza procedura obsługi w magazynie obsługi zdarzeń zostanie usunięta. To zachowanie jest spójne z [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] zachowaniem `-=` operatora.  
  
 Nie `routedEvent` może `handler` być`null`ani. Próba dostarczenia żadnej wartości jako `null` spowoduje wystąpienie wyjątku.  
  
 Ta metoda ignoruje `handledEventsToo` informacje o parametrach, które są dostępne, jeśli program obsługi został po <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> raz pierwszy dodany wraz z podpisem, który umożliwia obsługę już obsłużonych zdarzeń. Każdy typ procedury obsługi jest usuwany.  
  
   
  
## Examples  
 Poniższy przykład używa <xref:System.Windows.UIElement.RemoveHandler%2A> jako części definicji otoki zdarzenia.  
  
 [!code-csharp[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#addremovehandler)]
 [!code-vb[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#addremovehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="RenderSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size RenderSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size RenderSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderSize" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size RenderSize { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberSignature Language="F#" Value="member this.RenderSize : System.Windows.Size with get, set" Usage="System.Windows.UIElement.RenderSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera (lub ustawia) końcowy rozmiar renderowania tego elementu.</summary>
        <value>Rozmiar renderowanego elementu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Nie należy podejmować próby ustawienia tej właściwości, w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] języku ani w kodzie, jeśli jest używany system układu platformy WPF. Prawie wszystkie typowe scenariusze aplikacji będą używać tego systemu układu. System układu nie będzie uwzględniał rozmiarów ustawionych bezpośrednio we <xref:System.Windows.UIElement.RenderSize%2A> właściwości. Właściwość jest zadeklarowana tylko do zapisu, aby umożliwić obsługę niektórych przypadków mostkowania na poziomie rdzenia WPF, które celowo omijają typowe protokoły układu, <xref:System.Windows.Documents.Adorner> takie jak obsługa klasy. <xref:System.Windows.UIElement.RenderSize%2A>  
  
 Ta właściwość może służyć do sprawdzania odpowiedniego rozmiaru renderowania w ramach przesłonięć systemu układów, takich jak <xref:System.Windows.UIElement.OnRender%2A> lub <xref:System.Windows.UIElement.GetLayoutClip%2A>.  
  
 Bardziej typowy scenariusz obsługuje <xref:System.Windows.FrameworkElement.SizeChanged> zdarzenie z przesłonięciem obsługi klasy <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> lub zdarzeniem.  
  
## Examples  
 Poniższy przykład pokazuje, <xref:System.Windows.UIElement.RenderSize%2A> jak niestandardowy moduł definiowania układu używa wartości w celu utworzenia i rozmiaru grafiki prostokąta, która definiuje moduł definiowania układu w ramach jego <xref:System.Windows.UIElement.OnRender%2A> implementacji.  
  
 [!code-csharp[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/csharp/VS_Snippets_Wpf/AdornersMiscCode/CSharp/Window1.xaml.cs#uielementdesiredsize)]
 [!code-vb[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/visualbasic/VS_Snippets_Wpf/AdornersMiscCode/visualbasic/window1.xaml.vb#uielementdesiredsize)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform RenderTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform RenderTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ RenderTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RenderTransform : System.Windows.Media.Transform with get, set" Usage="System.Windows.UIElement.RenderTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia informacje przekształcenia, które mają wpływ na położenie renderowania tego elementu.  Jest to właściwość zależności.</summary>
        <value>Opisuje szczegóły żądanego przekształcenia renderowania. Wartość domyślna to <see cref="P:System.Windows.Media.Transform.Identity" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Transformacja renderowania nie generuje ponownie rozmiaru układu ani informacji o rozmiarze renderowania. Przekształcenia renderowania są zwykle przeznaczone do animowania lub stosowania tymczasowego efektu do elementu. Na przykład element może powiększać, gdy jest ukierunkowany lub przekierowany do trybu failover, lub może ulec wahaniu obciążenia, aby narysować oczy do tej części [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  
  
<a name="dependencyPropertyInfo_RenderTransform"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.RenderTransformProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point RenderTransformOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point RenderTransformOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransformOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransformOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point RenderTransformOrigin { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberSignature Language="F#" Value="member this.RenderTransformOrigin : System.Windows.Point with get, set" Usage="System.Windows.UIElement.RenderTransformOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia punkt środkowy dowolnego możliwego przekształcenia renderowania zadeklarowanego przez <see cref="P:System.Windows.UIElement.RenderTransform" />, względem granic elementu.  Jest to właściwość zależności.</summary>
        <value>Wartość, która deklaruje transformację renderowania. Wartość domyślna to <see cref="T:System.Windows.Point" /> współrzędne ze współrzędnymi (0, 0).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.RenderTransformOrigin%2A>ma nieco niestandardowe użycie <xref:System.Windows.Point> wartości struktury, w <xref:System.Windows.Point> tym, że nie reprezentuje lokalizacji absolutnej w układzie współrzędnych. Zamiast tego wartości z zakresu od 0 do 1 są interpretowane jako współczynnik dla zakresu bieżącego elementu w każdej osi x, y. Na przykład (0,5, 0,5) spowoduje, że transformacja renderowania zostanie wyśrodkowana w elemencie lub (1, 1) spowoduje przekształcenie przekształcenia w prawym dolnym rogu elementu. <xref:System.Double.NaN>nie jest zaakceptowaną wartością.  
  
 Wartości wykraczające poza 0 i 1 są również akceptowane i spowodują bardziej niekonwencjonalne skutki transformacji. Na przykład, jeśli ustawisz <xref:System.Windows.UIElement.RenderTransformOrigin%2A> wartość (5, 5), a następnie <xref:System.Windows.Media.RotateTransform>Zastosuj, punkt obrotu będzie dobrze poza granicami samego elementu. Przekształcenie spowoduje nawirowanie elementu wokół dużego okręgu, który pochodzi poza prawą dolną. Źródło może znajdować się w miejscu wewnątrz elementu nadrzędnego i prawdopodobnie może być poza ramką lub widokiem. Ujemne wartości punktów są podobne, ale wykraczają poza lewe górne granice.  
  
 Przekształcenia renderowania nie wpływają na układ i są zwykle używane do animowania lub zastosowania tymczasowego efektu do elementu.  
  
<a name="xamlAttributeUsage_RenderTransformOrigin"></a>   
## <a name="xaml-attribute-usage"></a>Użycie atrybutu języka XAML  
  
```  
<object RenderTransformOrigin="xOrigin, yOrigin"/>  
```  
  
<a name="xamlPropertyElementUsage_RenderTransformOrigin"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.RenderTransformOrigin>  
    <Point X=" xOrigin " Y=" yOrigin "/>  
  </object.RenderTransformOrigin>  
</object>  
```  
  
<a name="xamlValues_RenderTransformOrigin"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *xOrigin*  
 Współczynnik początkowy punktu początkowego. Jest to zazwyczaj wartość z przedziału od 0 do 1. Zobacz uwagi.  
  
 *yOrigin*  
 Współczynnik punktu początkowego. Jest to zazwyczaj wartość z przedziału od 0 do 1. Zobacz uwagi.  
  
<a name="dependencyPropertyInfo_RenderTransformOrigin"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.RenderTransformOriginProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
   
  
## Examples  
 Poniższy przykład kompiluje elementy w kodzie, stosuje <xref:System.Windows.UIElement.RenderTransformOrigin%2A>a, a następnie <xref:System.Windows.UIElement.RenderTransform%2A>stosuje.  
  
 [!code-csharp[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/csharp/VS_Snippets_Wpf/transformanimations_snip/CSharp/RotateAboutCenterExample.cs#uielementrendertransformorigin)]
 [!code-vb[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/visualbasic/VS_Snippets_Wpf/transformanimations_snip/visualbasic/rotateaboutcenterexample.vb#uielementrendertransformorigin)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.RenderTransform" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOriginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformOriginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformOriginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformOriginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RenderTransformOriginProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.RenderTransformOrigin" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RenderTransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.RenderTransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.RenderTransform" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeCommandBindings : unit -&gt; bool" Usage="uIElement.ShouldSerializeCommandBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca czy procesy serializacji powinny serializować zawartość <see cref="P:System.Windows.UIElement.CommandBindings" /> właściwości w wystąpieniach tej klasy.</summary>
        <returns><see langword="true" />Jeśli wartość <see langword="false" />właściwości powinna być serializowana; w przeciwnym razie,. <see cref="P:System.Windows.UIElement.CommandBindings" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spowoduje to zwrócenie `true` wartości <xref:System.Windows.UIElement.CommandBindings%2A> , jeśli jest ustawiona lokalnie.  
  
 Ta `ShouldSerialize` Metoda jest dostępna, <xref:System.Windows.UIElement.CommandBindings%2A> ponieważ właściwość nie ma prostej wartości domyślnej. Ta metoda wskazuje, czy właściwość została zmieniona z wartości domyślnej. Ta metoda jest zazwyczaj wywoływana, jeśli tworzysz projektanta lub opracowujesz własny formant, który składa się <xref:System.Windows.UIElement>z.  
  
 Aby uzyskać więcej informacji, zobacz [Definiowanie wartości domyślnych za pomocą metod ShouldSerialize i Reset](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeInputBindings : unit -&gt; bool" Usage="uIElement.ShouldSerializeInputBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca czy procesy serializacji powinny serializować zawartość <see cref="P:System.Windows.UIElement.InputBindings" /> właściwości w wystąpieniach tej klasy.</summary>
        <returns><see langword="true" />Jeśli wartość <see langword="false" />właściwości powinna być serializowana; w przeciwnym razie,. <see cref="P:System.Windows.UIElement.InputBindings" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spowoduje to zwrócenie `true` wartości <xref:System.Windows.UIElement.InputBindings%2A> , jeśli jest ustawiona lokalnie.  
  
 Ta `ShouldSerialize` Metoda jest dostępna, <xref:System.Windows.UIElement.InputBindings%2A> ponieważ właściwość nie ma prostej wartości domyślnej. Ta metoda wskazuje, czy właściwość została zmieniona z wartości domyślnej. Ta metoda jest zazwyczaj wywoływana, jeśli tworzysz projektanta lub opracowujesz własny formant, który składa się <xref:System.Windows.UIElement>z.  
  
 Aby uzyskać więcej informacji, zobacz [Definiowanie wartości domyślnych za pomocą metod ShouldSerialize i Reset](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixels">
      <MemberSignature Language="C#" Value="public bool SnapsToDevicePixels { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SnapsToDevicePixels" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberSignature Language="VB.NET" Value="Public Property SnapsToDevicePixels As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SnapsToDevicePixels { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SnapsToDevicePixels : bool with get, set" Usage="System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy renderowanie tego elementu powinno używać ustawień pikseli specyficznych dla urządzenia podczas renderowania.  Jest to właściwość zależności.</summary>
        <value><see langword="true" />Jeśli element powinien być renderowany zgodnie z pikselami urządzenia; w przeciwnym razie. <see langword="false" /> Wartość domyślna zadeklarowana w <see cref="T:System.Windows.UIElement" /> to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz ustawić tę właściwość `true` na na element główny, aby włączyć renderowanie w pikselach w interfejsie użytkownika. W przypadku urządzeń działających pod większym [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)]niż 96, renderowanie przyciągania pikseli może zminimalizować wygładzanie artefaktów wizualizacji w sąsiedztwie pełnych linii jednojednostkowych.  
  
 W przypadku dziedziczenia <xref:System.Windows.FrameworkElement> przez lub dowolnych klas pochodnych zastępuje metadane tej właściwości <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> zależności, <xref:System.Windows.FrameworkElement> aby `true`ustawić właściwość metadanych. To osiąga to, że tylko najbardziej zewnętrzny element w <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> poddrzewie musi określać jako `true`, a wszystkie elementy podrzędne tego poddrzewa będą następnie raportować <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> jako `true` i będą miały <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> efekt wizualny.  
  
<a name="dependencyPropertyInfo_SnapsToDevicePixels"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/aa970908(v=vs.90)">Przyciąganie pikseli w aplikacjach WPF</related>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixelsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SnapsToDevicePixelsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SnapsToDevicePixelsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SnapsToDevicePixelsProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po naciśnięciu przycisku pióra, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.StylusButtonDown> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.StylusButtonDown> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusButtonDownEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewStylusButtonDown>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnStylusButtonDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.StylusButtonDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po udostępnieniu przycisku pióra, gdy wskaźnik znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.StylusButtonUp> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.StylusButtonUp> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusButtonUpEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewStylusButtonUp>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnStylusButtonUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.StylusButtonUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberSignature Language="F#" Value="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro dotyka dyskretyzatora, gdy pióro znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.StylusDown> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.StylusDown> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusDownEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewStylusDown>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnStylusDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.StylusDown" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberSignature Language="F#" Value="member this.StylusEnter : System.Windows.Input.StylusEventHandler " Usage="member this.StylusEnter : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro wprowadzi granice tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.StylusEnter>jest [zdarzeniem kierowanym](~/docs/framework/wpf/advanced/routed-events-overview.md) korzystającym z strategii routingu bezpośredniego obsługi zdarzeń. Zdarzenia kierowane bezpośrednio nie są zgłaszane na trasie; Zamiast tego są obsługiwane w tym samym elemencie, w którym zostały zgłoszone. Jednak umożliwiają one włączenie innych aspektów zachowań zdarzeń kierowanych, takich jak wyzwalacze zdarzeń w stylach.  
  
 Chociaż <xref:System.Windows.UIElement.StylusEnter> śledzi, gdy pióro wprowadza granice elementu, to zdarzenie jest bardziej dosłownie Raport <xref:System.Windows.UIElement.IsStylusOver%2A> , że wartość właściwości została zmieniona z `false` na `true` na tym elemencie.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.StylusEnter> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.StylusEnter> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusEnterEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Przesłoń <xref:System.Windows.UIElement.OnStylusEnter%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.StylusEnter" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest przemieszczane nad elementem bez dotykania dyskretyzatora.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.StylusInAirMove> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.StylusInAirMove> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusInAirMoveEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewStylusInAirMove>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnStylusInAirMove%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.StylusInAirMove" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberSignature Language="F#" Value="member this.StylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest wystarczająco blisko dyskretyzatora, aby zostało wykryte, w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.StylusInRange> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.StylusInRange> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusInRangeEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewStylusInRange>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnStylusInRange%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.StylusInRange" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberSignature Language="F#" Value="member this.StylusLeave : System.Windows.Input.StylusEventHandler " Usage="member this.StylusLeave : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro opuści granice elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.StylusLeave>jest [zdarzeniem kierowanym](~/docs/framework/wpf/advanced/routed-events-overview.md) korzystającym z strategii routingu bezpośredniego obsługi zdarzeń. Zdarzenia kierowane bezpośrednio nie są zgłaszane na trasie; Zamiast tego są obsługiwane w tym samym elemencie, w którym zostały zgłoszone. Jednak umożliwiają one włączenie innych aspektów zachowań zdarzeń kierowanych, takich jak wyzwalacze zdarzeń w stylach.  
  
 Chociaż <xref:System.Windows.UIElement.StylusLeave> śledzi, gdy pióro opuszcza granice elementu, to zdarzenie jest bardziej dosłownie raporty <xref:System.Windows.UIElement.IsStylusOver%2A> , że wartość właściwości została zmieniona z `true` na `false` na tego elementu.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.StylusLeave> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.StylusLeave> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusLeaveEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Przesłoń <xref:System.Windows.UIElement.OnStylusLeave%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.StylusLeave" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberSignature Language="F#" Value="member this.StylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest przenoszone nad tym elementem. Aby zgłosić to zdarzenie, pióro musi zostać przeniesione przez dyskretyzatora. W przeciwnym razie jest zgłaszane. <see cref="E:System.Windows.UIElement.StylusInAirMove" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.StylusMove> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.StylusMove> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusMoveEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewStylusMove>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnStylusMove%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.StylusMove" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy pióro jest zbyt daleko od dyskretyzatora, aby zostało wykryte, w tym elemencie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.StylusOutOfRange> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.StylusOutOfRange> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusOutOfRangeEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.StylusOutOfRange" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusPlugIns">
      <MemberSignature Language="C#" Value="protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.StylusPlugIns" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StylusPlugIns As StylusPlugInCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ StylusPlugIns { System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StylusPlugIns : System.Windows.Input.StylusPlugIns.StylusPlugInCollection" Usage="System.Windows.UIElement.StylusPlugIns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusPlugIns.StylusPlugInCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję wszystkich obiektów wtyczki pióra (dostosowania) skojarzonych z tym elementem.</summary>
        <value>Kolekcja wtyczek pióra jako wyspecjalizowana kolekcja.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przykładem kontrolki wypełniającej tę kolekcję jest <xref:System.Windows.Controls.InkCanvas>. <xref:System.Windows.Controls.InkCanvas>dodaje element <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> as elementu kolekcji, który umożliwia interakcję z wejściem pióra i wygenerowanie unikatowego renderowania w odpowiedzi na zdarzenia sterowane piórem. <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>  
  
 Aby uzyskać informacje na temat tworzenia niestandardowych wtyczek, które mogą odbierać i interpretować dane wejściowe pióra, zobacz [przechwytywanie danych wejściowych z pióra](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md).  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> wystąpienie i dodaje je <xref:System.Windows.UIElement.StylusPlugIns%2A> do kolekcji dla niestandardowej kontrolki obsługi atramentu.  
  
 [!code-csharp[StylusPluginSamples#3](~/samples/snippets/csharp/VS_Snippets_Wpf/StylusPluginSamples/CSharp/StylusControl.cs#3)]
 [!code-vb[StylusPluginSamples#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StylusPluginSamples/VisualBasic/StylusControl.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer" />
        <altmember cref="T:System.Windows.Controls.InkCanvas" />
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik wykonuje jeden z kilku gestów pióra.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat gestów <xref:System.Windows.Input.SystemGesture>pióra, zobacz.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.StylusSystemGesture> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.StylusSystemGesture> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusSystemGestureEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberSignature Language="F#" Value="member this.StylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.StylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik wywołuje pióro, gdy znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.StylusUp> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.StylusUp> zdarzenia są dołączone do <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
 W określonej relacji istnieje dotyk, mysz i dane wejściowe pióra. Aby uzyskać więcej informacji, zobacz [Informacje o danych wejściowych](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.StylusUpEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewStylusUp>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnStylusUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.StylusUp" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberSignature Language="F#" Value="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy ten element Pobiera tekst w sposób niezależny od urządzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  To zdarzenie może już być oznaczone jako obsługiwane przez wewnętrzne implementacje kontrolek złożonych. Zobacz uwagi poniżej.  
  
 <xref:System.Windows.UIElement.TextInput> Zdarzenie może już być oznaczone jako obsługiwane przez wewnętrzne implementacje kontrolek złożonych. Na przykład, <xref:System.Windows.Controls.TextBox> jest to złożona kontrolka, w <xref:System.Windows.UIElement.TextInput> której zdarzenie jest już oznaczone jako obsługiwane; w ramach jego złożenia. Kontrolki to, ponieważ kontrolka musi interpretować niektóre typy danych wejściowych, takich jak klawisze strzałek, jako mające specjalne znaczenie dla tej kontrolki. Jeśli używasz <xref:System.Windows.UIElement.PreviewTextInput> jako zdarzenia do dołączania obsługi dla wprowadzania tekstu, możesz uzyskać lepsze wyniki. Ta technika omija większość przypadków, w których kompozycja formantów już oznaczył to zdarzenie jako obsłużone i uniemożliwia programowi obsługi otrzymywanie zdarzenia wzdłuż trasy zdarzenia.  
  
 To <xref:System.Windows.UIElement.TextInput> zdarzenie umożliwia składnikowi lub aplikacji nasłuchiwanie danych tekstowych w sposób niezależny od urządzenia. Klawiatura jest podstawowym środkiem <xref:System.Windows.UIElement.TextInput>, ale może również podnieść <xref:System.Windows.UIElement.TextInput>mowę, pismo odręczne oraz inne urządzenia wejściowe.  
  
 Ze względu na kombinacje klawiszy — w domyślnych klawiaturach lub za pomocą edytorów metod wejściowych — wiele kluczowych zdarzeń może wywoływać tylko jedno zdarzenie wprowadzania tekstu.  
  
 To zdarzenie tworzy alias dla <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> dołączonego zdarzenia dla tej klasy, <xref:System.Windows.UIElement.TextInput> więc jest częścią listy składowych klasy, gdy <xref:System.Windows.UIElement> jest dziedziczona jako element podstawowy. Programy obsługi zdarzeń dołączone do <xref:System.Windows.UIElement.TextInput> zdarzenia są dołączone do <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> powiązanego dołączonego zdarzenia i odbierają to samo wystąpienie danych zdarzenia.  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.TextInputEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewTextInput>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnTextInput%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.TextInput" /> kierowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identyfikatory zdarzeń kierowanych są tworzone po zarejestrowaniu zdarzeń kierowanych. Identyfikatory te zawierają nazwę identyfikującą, typ właściciela, typ procedury obsługi, strategię routingu i metodę narzędzia służącą do dodawania właścicieli zdarzenia. Możesz użyć tych identyfikatorów, aby dodać obsługę klas.  
  
 Więcej informacji o rejestrowaniu zdarzeń kierowanych znajduje <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>się w temacie. Aby uzyskać więcej informacji na temat używania identyfikatorów zdarzeń kierowanych do dodawania obsługi klas <xref:System.Windows.EventManager.RegisterClassHandler%2A>, zobacz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberSignature Language="F#" Value="member this.TouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy palec dotyka ekranu, gdy palcem znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Windows.UIElement.PreviewTouchDown> zdarzenia i <xref:System.Windows.UIElement.TouchDown> nie pojawiają się do momentu dotknięcia ekranu i przeniesienia. Naciśnięcie palca na ekranie i jego utrzymywanie bez przesuwania powoduje zachowanie <xref:System.Windows.Input.Stylus>nacisku i blokady. Zachowanie naciskania i przytrzymania jest równoważne kliknięciu prawym przyciskiem myszy.  
  
 Aby spowodować, <xref:System.Windows.UIElement.PreviewTouchDown> że <xref:System.Windows.UIElement.TouchDown> zdarzenia i wystąpienia są wykonywane zaraz po dotknięciu ekranu palcem, ustaw <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> właściwość dołączone na `false` dla tego elementu.  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.TouchDownEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewTouchDown>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnTouchDown%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.TouchDown" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberSignature Language="F#" Value="member this.TouchEnter : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchEnter : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy nastąpi przejście z zewnątrz do wewnątrz granic tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie jest zawsze zgłaszane, niezależnie od tego, czy urządzenie dotykowe jest przechwytywane do tego elementu.  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.TouchEnterEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Przesłoń <xref:System.Windows.UIElement.OnTouchEnter%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.TouchEnter" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCaptured : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie urządzenia Touch, które są przechwytywane do tego elementu.</summary>
        <value>Wyliczenie <see cref="T:System.Windows.Input.TouchDevice" /> obiektów, które są przechwytywane do tego elementu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCapturedWithin : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie urządzenia Touch, które są przechwytywane do tego elementu lub wszelkich elementów podrzędnych w jego drzewie wizualnym.</summary>
        <value>Wyliczenie <see cref="T:System.Windows.Input.TouchDevice" /> obiektów, które są przechwytywane do tego elementu lub wszelkich elementów podrzędnych w jego drzewie wizualnym.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesDirectlyOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie urządzenia Touch, które znajdują się nad tym elementem.</summary>
        <value>Wyliczenie <see cref="T:System.Windows.Input.TouchDevice" /> obiektów znajdujących się na tym elemencie.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wszystkie urządzenia dotykowe, które znajdują się nad tym elementem lub wszystkie elementy podrzędne w jego drzewie wizualnym.</summary>
        <value>Wyliczenie <see cref="T:System.Windows.Input.TouchDevice" /> obiektów znajdujących się nad tym elementem lub dowolnym elementem podrzędnym w jego drzewie wizualnym.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberSignature Language="F#" Value="member this.TouchLeave : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchLeave : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy nastąpi przejście z wewnątrz do granic tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie jest zawsze zgłaszane, niezależnie od tego, czy urządzenie dotykowe jest przechwytywane do tego elementu.  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.TouchLeaveEvent>|  
|Strategia routingu|Bezpośrednie|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Przesłoń <xref:System.Windows.UIElement.OnTouchLeave%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.TouchLeave" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberSignature Language="F#" Value="member this.TouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy palec jest przenoszony na ekranie, gdy palcem znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.TouchMoveEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewTouchMove>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnTouchMove%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.TouchMove" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberSignature Language="F#" Value="member this.TouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy Finger zostanie wysunięty z ekranu, gdy palcem znajduje się nad tym elementem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a>Informacje dotyczące kierowanego zdarzenia  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.TouchUpEvent>|  
|Strategia routingu|Propagacja|  
|Delegate|<xref:System.EventHandler%601>typu <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Odpowiednie zdarzenie tunelowania to <xref:System.Windows.UIElement.PreviewTouchUp>.  
  
-   Przesłoń <xref:System.Windows.UIElement.OnTouchUp%2A> , aby zaimplementować obsługę klasy dla tego zdarzenia w klasach pochodnych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje zdarzenie <see cref="E:System.Windows.UIElement.TouchUp" /> kierowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslatePoint">
      <MemberSignature Language="C#" Value="public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point TranslatePoint(valuetype System.Windows.Point point, class System.Windows.UIElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Point TranslatePoint(System::Windows::Point point, System::Windows::UIElement ^ relativeTo);" />
      <MemberSignature Language="F#" Value="member this.TranslatePoint : System.Windows.Point * System.Windows.UIElement -&gt; System.Windows.Point" Usage="uIElement.TranslatePoint (point, relativeTo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="relativeTo" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="point">Wartość punktu, w odniesieniu do tego elementu.</param>
        <param name="relativeTo">Element do przetłumaczenia danego punktu na.</param>
        <summary>Tłumaczy punkt względem tego elementu na współrzędne, które są względne względem określonego elementu.</summary>
        <returns>Wartość punktu, w odniesieniu do elementu docelowego, a nie tego elementu źródłowego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przekazywanie `null` do`relativeTo` jest dozwolone i wskazuje, że współrzędne powinny być względem elementu głównego w drzewie logicznym, do którego należy ten element.  
  
 Ta metoda jest używana do tłumaczenia wartości punktów testów trafień. Wywołanie tej metody jest szczególnie istotne w przypadku tworzenia kontrolki i konieczności przetwarzania danych wejściowych na niższym poziomie. Jeśli używasz istniejących kontrolek, możesz na ogół założyć, że wypełnione kontrolki będą raportować prawidłowo przetłumaczone wyniki testów trafień.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uid">
      <MemberSignature Language="C#" Value="public string Uid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Uid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Uid" />
      <MemberSignature Language="VB.NET" Value="Public Property Uid As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Uid { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Uid : string with get, set" Usage="System.Windows.UIElement.Uid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia unikatowy identyfikator (dla lokalizacji) dla tego elementu. Jest to właściwość zależności.</summary>
        <value>Ciąg, który jest unikatowym identyfikatorem dla tego elementu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Używane przez projektantów do uzyskania `x:Uid` wartości (zobacz [Omówienie globalizacji i lokalizacji platformy WPF,](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md) Aby uzyskać więcej informacji).  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.UidProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/81defade-483b-4a89-b76d-9b25bba34010">X:Uid — — atrybut</related>
      </Docs>
    </Member>
    <Member MemberName="UidProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UidProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UidProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.UidProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UidProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UidProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable UidProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.UidProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.Uid" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLayout">
      <MemberSignature Language="C#" Value="public void UpdateLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.UpdateLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateLayout();" />
      <MemberSignature Language="F#" Value="member this.UpdateLayout : unit -&gt; unit" Usage="uIElement.UpdateLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapewnia, że wszystkie elementy wizualne elementów podrzędnych tego elementu są prawidłowo aktualizowane na potrzeby układu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po wywołaniu tej metody <xref:System.Windows.UIElement.IsMeasureValid%2A> elementy z `false` lub <xref:System.Windows.UIElement.IsArrangeValid%2A> `false` będą wywoływały charakterystyczne dla <xref:System.Windows.UIElement.MeasureCore%2A> elementu i <xref:System.Windows.UIElement.ArrangeCore%2A> metody, które wymuszają aktualizację układu, a wszystkie obliczone rozmiary będą weryfikowane.  
  
 Wywołanie tej metody nie ma wpływu, jeśli układ nie jest zmieniony lub nie jest on nieprawidłowy ani układ, ani stan pomiaru układu. Jeśli jednak układ jest nieprawidłowy w dowolnym aspekcie, <xref:System.Windows.UIElement.UpdateLayout%2A> wywołanie spowoduje ponowne wykonanie całego układu. W związku z tym należy unikać <xref:System.Windows.UIElement.UpdateLayout%2A> wywoływania po każdej zmianie przyrostowej i pomocniczej w drzewie elementów. Układ układu będzie przedłużony do układu elementu, przy użyciu algorytmu, który równoważy wydajność i walutę oraz z strategią ważenia, aby odroczyć zmiany katalogów głównych do momentu, gdy wszystkie elementy podrzędne są prawidłowe. Należy wywołać <xref:System.Windows.UIElement.UpdateLayout%2A> tylko wtedy, gdy absolutnie potrzebujesz zaktualizowanych rozmiarów i pozycji, a dopiero po upewnieniu się, że wszystkie zmiany właściwości, które kontrolują, i które mogą wpływać na układ, zostały wykonane.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public System.Windows.Visibility Visibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Visibility Visibility" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Visibility" />
      <MemberSignature Language="VB.NET" Value="Public Property Visibility As Visibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Visibility Visibility { System::Windows::Visibility get(); void set(System::Windows::Visibility value); };" />
      <MemberSignature Language="F#" Value="member this.Visibility : System.Windows.Visibility with get, set" Usage="System.Windows.UIElement.Visibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Visibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] widoczność tego elementu.  Jest to właściwość zależności.</summary>
        <value>Wartość wyliczenia. Wartość domyślna to <see cref="F:System.Windows.Visibility.Visible" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie tej właściwości ma wpływ na wartość <xref:System.Windows.UIElement.IsVisible%2A>, która z kolei może spowodować <xref:System.Windows.UIElement.IsVisibleChanged> wystąpienie zdarzenia. <xref:System.Windows.UIElement.IsVisible%2A> Jednak ma inne czynniki wpływające na to, na przykład ustawienia widoczności elementów nadrzędnych, które je zawierają.  
  
 Elementy, <xref:System.Windows.UIElement.Visibility%2A> w których <xref:System.Windows.Visibility.Visible> nie uczestniczą w zdarzeniach wejściowych (lub polecenia), nie wpływają na miarę ani nie są w kolejności tabulacji i nie będą raportowane w teście trafień.  
  
 W przypadku dziedziczenia przez <xref:System.Windows.Window> lub jego klas pochodnych, program <xref:System.Windows.Window> ponownie <xref:System.Windows.Visibility.Collapsed>definiuje domyślną wartość tej właściwości. Ma to wpływ na to, że nie uruchomiono przejścia pomiarowego układu na początkowo <xref:System.Windows.Window>utworzonym <xref:System.Windows.UIElement.RenderSize%2A> i zwraca (0, 0). Aby uzyskać szczegółowe informacje <xref:System.Windows.Window>, zobacz. <xref:System.Windows.Controls.Primitives.Popup>Ponadto ponownie <xref:System.Windows.Visibility.Collapsed>definiuje wartość domyślną, z podobnym <xref:System.Windows.Controls.Primitives.Popup> zachowaniem wynikający z i jego klasami pochodnymi.  
  
<a name="dependencyPropertyInfo_Visibility"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.UIElement.VisibilityProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
   
  
## Examples  
 W poniższym przykładzie jest implementowana procedura obsługi, która odwołuje się do dwóch różnych nazwanych przycisków, które są przeznaczone do wzajemnie wykluczających się par w interfejsie użytkownika. Przed uruchomieniem rzeczywistej logiki programu skojarzonej z przyciskiem sam przycisk jest ustawiony na <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>wartość, a drugi przycisk w parze jest ustawiony na. <xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>  
  
 [!code-csharp[MediaElement_snip#UIElementVisibility](~/samples/snippets/csharp/VS_Snippets_Wpf/MediaElement_snip/CSharp/PlaybackExample.cs#uielementvisibility)]
 [!code-vb[MediaElement_snip#UIElementVisibility](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MediaElement_snip/VB/PlaybackExample.vb#uielementvisibility)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsVisible" />
        <altmember cref="T:System.Windows.Visibility" />
      </Docs>
    </Member>
    <Member MemberName="VisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisibilityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.VisibilityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisibilityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisibilityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisibilityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.VisibilityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.UIElement.Visibility" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
