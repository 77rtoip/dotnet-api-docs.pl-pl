<Type Name="CoerceValueCallback" FullName="System.Windows.CoerceValueCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bbc70fa825fb1449321a5aebd633372a4e8df0e5" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69434872" /></Metadata><TypeSignature Language="C#" Value="public delegate object CoerceValueCallback(DependencyObject d, object baseValue);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CoerceValueCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.CoerceValueCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function CoerceValueCallback(d As DependencyObject, baseValue As Object) As Object " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Object ^ CoerceValueCallback(DependencyObject ^ d, System::Object ^ baseValue);" />
  <TypeSignature Language="F#" Value="type CoerceValueCallback = delegate of DependencyObject * obj -&gt; obj" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="d" Type="System.Windows.DependencyObject" />
    <Parameter Name="baseValue" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="d"><span data-ttu-id="1138d-101">Obiekt, w którym znajduje się właściwość.</span><span class="sxs-lookup"><span data-stu-id="1138d-101">The object that the property exists on.</span></span> <span data-ttu-id="1138d-102">Po wywołaniu wywołania zwrotnego System właściwości przekaże tę wartość.</span><span class="sxs-lookup"><span data-stu-id="1138d-102">When the callback is invoked, the property system will pass this value.</span></span></param>
    <param name="baseValue"><span data-ttu-id="1138d-103">Nowa wartość właściwości, przed podjęciem próby wykonania.</span><span class="sxs-lookup"><span data-stu-id="1138d-103">The new value of the property, prior to any coercion attempt.</span></span></param>
    <summary><span data-ttu-id="1138d-104">Udostępnia szablon metody, która jest wywoływana za każdym razem, gdy wartość właściwości zależności jest przeliczana lub zażądano założenia.</span><span class="sxs-lookup"><span data-stu-id="1138d-104">Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</span></span></summary>
    <returns><span data-ttu-id="1138d-105">Wartość przymusowa (z odpowiednim typem).</span><span class="sxs-lookup"><span data-stu-id="1138d-105">The coerced value (with appropriate type).</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1138d-106">Wywołania zwrotne oparte <xref:System.Windows.CoerceValueCallback> na programie można przypisywać do właściwości zależności za pomocą kilku różnych technik.</span><span class="sxs-lookup"><span data-stu-id="1138d-106">Callbacks based on <xref:System.Windows.CoerceValueCallback> can be assigned to a dependency property through several different techniques.</span></span> <span data-ttu-id="1138d-107">Każda z tych technik wymaga, aby najpierw utworzyć nowy obiekt metadanych właściwości (<xref:System.Windows.PropertyMetadata>lub klasę pochodną, taką jak <xref:System.Windows.FrameworkPropertyMetadata>).</span><span class="sxs-lookup"><span data-stu-id="1138d-107">Each of these techniques requires that you first create a new property metadata object (<xref:System.Windows.PropertyMetadata>, or a derived class such as <xref:System.Windows.FrameworkPropertyMetadata>).</span></span> <span data-ttu-id="1138d-108">Utwórz obiekt metadanych przy użyciu podpisu konstruktora, który przyjmuje `coerceValueCallback` parametr, i przypisz ten parametr do procedury obsługi wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="1138d-108">Create the metadata object using a constructor signature that takes the `coerceValueCallback` parameter, and assign that parameter to your callback handler.</span></span> <span data-ttu-id="1138d-109">Lub Utwórz metadane za pomocą dowolnej sygnatury i ustaw <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> właściwość przed umieszczeniem metadanych w użyciu.</span><span class="sxs-lookup"><span data-stu-id="1138d-109">Or construct the metadata by any signature and set the <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> property prior to putting the metadata in use.</span></span>  
  
 <span data-ttu-id="1138d-110">Po wykonaniu tych metadanych można:</span><span class="sxs-lookup"><span data-stu-id="1138d-110">When you have this metadata, you can:</span></span>  
  
-   <span data-ttu-id="1138d-111">Zdefiniuj nową właściwość zależności dla nowej klasy, przy użyciu dowolnej sygnatury <xref:System.Windows.DependencyProperty.Register%2A>, podając metadane `typeMetadata` jako wartość.</span><span class="sxs-lookup"><span data-stu-id="1138d-111">Define a new dependency property on a new class, using either signature of  <xref:System.Windows.DependencyProperty.Register%2A>, giving the metadata as the `typeMetadata` value.</span></span>  
  
-   <span data-ttu-id="1138d-112">Zastąp metadane (wywołanie <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) istniejącej właściwości zależności, gdy dziedziczysz z klasy, która jest właścicielem właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="1138d-112">Override the metadata (call <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) for an existing dependency property, when you derive from the class that owns the dependency property.</span></span>  
  
-   <span data-ttu-id="1138d-113">Dodaj istniejącą właściwość zależności do nowej <xref:System.Windows.DependencyObject> klasy przy użyciu nowych metadanych, wywołując <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>metodę.</span><span class="sxs-lookup"><span data-stu-id="1138d-113">Add an existing dependency property to a new <xref:System.Windows.DependencyObject> class, using new metadata, by calling <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="1138d-114">Implementacje tego wywołania zwrotnego powinny sprawdzać `baseValue` wartość w i określać na podstawie wartości lub typu, czy jest to wartość, która musi być dodatkowo wymuszona.</span><span class="sxs-lookup"><span data-stu-id="1138d-114">Implementations of this callback should check the value in `baseValue` and determine based on either the value or the type whether this is a value that needs to be further coerced.</span></span>  
  
 <span data-ttu-id="1138d-115">Właściwość for zależności jest wywoływana za każdym razem, gdy system właściwości lub inne wywołania <xref:System.Windows.DependencyObject.CoerceValue%2A> wywołujące w <xref:System.Windows.DependencyObject> wystąpieniu `dp`, określając identyfikator tej właściwości jako. <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A></span><span class="sxs-lookup"><span data-stu-id="1138d-115">The <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for a dependency property is invoked any time that the property system or any other caller calls <xref:System.Windows.DependencyObject.CoerceValue%2A> on a <xref:System.Windows.DependencyObject> instance, specifying that property's identifier as the `dp`.</span></span>  
  
 <span data-ttu-id="1138d-116">Zmiany wartości właściwości mogą pochodzić z dowolnego możliwego uczestnika w systemie właściwości.</span><span class="sxs-lookup"><span data-stu-id="1138d-116">Changes to the property value may have come from any possible participant in the property system.</span></span> <span data-ttu-id="1138d-117">Obejmuje to style, ogólne unieważnienie, wyzwalacze, dziedziczenie wartości właściwości i ustawienie wartości lokalnej.</span><span class="sxs-lookup"><span data-stu-id="1138d-117">This includes styles, generic invalidation, triggers, property value inheritance, and local value setting.</span></span>  
  
 <span data-ttu-id="1138d-118">Ogólnie rzecz biorąc, należy unikać określania więcej <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> niż jednego elementu dla danej właściwości zależności (zastępowanie lub Dodawanie nowych metadanych dla właściwości zależności, która już <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>miała).</span><span class="sxs-lookup"><span data-stu-id="1138d-118">Generally you should avoid specifying more than one <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for any given dependency property (overriding or adding with new metadata for a dependency property that already had a <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</span></span> <span data-ttu-id="1138d-119">Tylko jedno wywołanie zwrotne będzie mogło działać. Działające wywołanie zwrotne będzie to ten, który został zastosowany do najbardziej pochodnej klasy w dziedziczeniu w porównaniu <xref:System.Windows.DependencyObject> z obiektem wywołującym.</span><span class="sxs-lookup"><span data-stu-id="1138d-119">Only one of the callbacks will be able to act. The acting callback will be the one that was applied to the most derived class in the inheritance as compared to the <xref:System.Windows.DependencyObject> caller.</span></span> <span data-ttu-id="1138d-120">Inne wywołania zwrotne przypisane do metadanych dla właściwości zależności, które istniały wyżej w hierarchii właściciela, są zastępowane, gdy metadane są zastępowane.</span><span class="sxs-lookup"><span data-stu-id="1138d-120">Other callbacks as assigned to metadata for the dependency property as it existed higher in the owner hierarchy are replaced when the metadata is overridden.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1138d-121">Poniższy przykład zawiera implementację tego wywołania zwrotnego w celu wymuszenia przechowywanej wartości właściwości zależności na podstawie innych danych wejściowych, takich jak wartość innej właściwości.</span><span class="sxs-lookup"><span data-stu-id="1138d-121">The following example includes an implementation of this callback to coerce the stored value of a dependency property based on other inputs, such as another property's value.</span></span> <span data-ttu-id="1138d-122">W takim przypadku wywołania zwrotne sprawdzają, czy `ShirtType` właściwość odpowiada typowi koszulki, która ma przyciski; Jeśli tak, oznacza to `ButtonColor`, że określa początkowy kolor domyślny dla, jeśli typ koszul nie ma przycisków `ButtonColor` , spowoduje to przekształcenie wartości z powrotem do wartości początkowej, która powoduje [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] , że (niepokazywany) usunąć tę listę rozwijaną z efektywnych opcji.</span><span class="sxs-lookup"><span data-stu-id="1138d-122">In this case, the callback checks to see whether the `ShirtType` property corresponds to a type of shirt that has buttons; if so it establishes a starting default color for the `ButtonColor`, if the shirt type has no buttons, it coerces the `ButtonColor` value back to a starting value, which causes the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] (not shown) to remove that dropdown from the effective choices.</span></span>  
  
 [!code-csharp[DPCustom#CoerceValueCallback](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#coercevaluecallback)]
 [!code-vb[DPCustom#CoerceValueCallback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#coercevaluecallback)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
</Type>
