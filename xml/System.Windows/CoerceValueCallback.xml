<Type Name="CoerceValueCallback" FullName="System.Windows.CoerceValueCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="edddfb39d197bb5c7d9ebb6e4c366a99eae21935" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30713900" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate object CoerceValueCallback(DependencyObject d, object baseValue);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CoerceValueCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.CoerceValueCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function CoerceValueCallback(d As DependencyObject, baseValue As Object) As Object " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Object ^ CoerceValueCallback(DependencyObject ^ d, System::Object ^ baseValue);" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="d" Type="System.Windows.DependencyObject" />
    <Parameter Name="baseValue" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="d">Obiekt, że właściwość nie istnieje na. Po wywołaniu wywołania zwrotnego właściwości systemu zostaną spełnione tej wartości.</param>
    <param name="baseValue">Nowa wartość właściwości, przed wszelkie próby wymuszenia.</param>
    <summary>Zawiera szablon dla metody, która jest wywoływana, gdy wartość właściwości zależności jest ponownie oceniane pod lub koercja specjalnie jest żądanie.</summary>
    <returns>Wartość coerced (za pomocą odpowiedniego typu).</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na podstawie wywołania zwrotne <xref:System.Windows.CoerceValueCallback> można przypisać do właściwości zależności za pomocą kilku różnych technik. Każdy z tych metod wymaga utworzenia nowego obiektu metadanych właściwości (<xref:System.Windows.PropertyMetadata>, lub klasy pochodnej, takich jak <xref:System.Windows.FrameworkPropertyMetadata>). Tworzenie obiektu metadanych za pomocą sygnatury konstruktora, który pobiera `coerceValueCallback` parametru i przypisać parametru wywołania zwrotnego użytkownika. Lub konstrukcji metadanych podpisu, a zestaw <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> właściwości przed wprowadzanie metadanych do użycia.  
  
 Jeśli te metadane, można:  
  
-   Zdefiniuj nowe właściwości zależności na nową klasę, przy użyciu albo podpis <xref:System.Windows.DependencyProperty.Register%2A>, podając metadanych jako `typeMetadata` wartość.  
  
-   Zastępowanie metadanych (wywołanie <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) dla istniejącej właściwości zależności, gdy pochodzi z klasy, która jest właścicielem właściwości zależności.  
  
-   Dodawanie istniejącej właściwości zależności na nowy <xref:System.Windows.DependencyObject> przy użyciu nowych metadanych, wywołując <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.  
  
 Implementacje tego wywołania zwrotnego należy sprawdzić wartość `baseValue` i ustalić na podstawie wartości lub typem czy jest to wartość, która musi zostać przekształcone dalsze.  
  
 <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> Zależność właściwości jest wywoływana za każdym razem system właściwości lub inne obiekt wywołujący wywołuje <xref:System.Windows.DependencyObject.CoerceValue%2A> na <xref:System.Windows.DependencyObject> wystąpienia, określając identyfikator tej właściwości, jak `dp`.  
  
 Zmiany w wartości właściwości mogą pochodzić z wszystkie możliwe uczestnika właściwości systemu. W tym style, ogólny unieważniania wyzwalaczy, dziedziczenie wartości właściwości i ustawienia wartości lokalnej.  
  
 Ogólnie należy unikać określania więcej niż jednego <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> dla dowolnej podanej właściwości zależności (zastępowanie lub dodawanie o nowe metadane dla właściwości zależności, które już <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>). Tylko jeden z wywołań zwrotnych będzie działać. Wywołanie zwrotne działania będzie jedną, która została zastosowana do najbardziej pochodnej klasy w dziedziczeniu w porównaniu z <xref:System.Windows.DependencyObject> wywołującego. Inne wywołania zwrotne przypisane metadane dla właściwości zależności wyższy znajdowały się w hierarchii właściciela są zamieniane metadanych zostanie zastąpiona.  
  
   
  
## Examples  
 Poniższy przykład zawiera implementację tego wywołania zwrotnego wymuszone przechowywana wartość właściwości zależności oparte na inne składniki, takie jak wartość właściwości innego. W takim przypadku wywołania zwrotnego sprawdza, czy `ShirtType` właściwość odpowiada typu shirt, który zawiera przyciski; Jeśli tak stwierdzi początkowy domyślny kolor dla `ButtonColor`, jeśli typ shirt ma nie przycisków, jego przekształca wynik dane `ButtonColor` wartość do wartości początkowej, co powoduje, że [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] (tego nie pokazano) do usunięcia z efektywne możliwości tej listy rozwijanej.  
  
 [!code-csharp[DPCustom#CoerceValueCallback](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#coercevaluecallback)]
 [!code-vb[DPCustom#CoerceValueCallback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#coercevaluecallback)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
</Type>