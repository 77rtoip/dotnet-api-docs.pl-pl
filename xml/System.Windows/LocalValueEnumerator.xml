<Type Name="LocalValueEnumerator" FullName="System.Windows.LocalValueEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6ec629675688af65632301370015ffad0f9568c3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct LocalValueEnumerator : System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit LocalValueEnumerator extends System.ValueType implements class System.Collections.IEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LocalValueEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure LocalValueEnumerator&#xA;Implements IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public value class LocalValueEnumerator : System::Collections::IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="add46-101">Umożliwia wyliczenie lokalnego wartości wszystkich właściwości zależności, które istnieją na <see cref="T:System.Windows.DependencyObject" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="add46-101">Provides enumeration support for the local values of any dependency properties that exist on a <see cref="T:System.Windows.DependencyObject" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="add46-102">A *wartości lokalnej* jest wartością dla właściwości zależności, która została ustawiona bezpośrednio na właściwości zależności, wywołując <xref:System.Windows.DependencyObject.SetValue%2A>, lub więcej zwykle, używając metody dostępu set z [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] otoki właściwość, która wywołuje <xref:System.Windows.DependencyObject.SetValue%2A> wewnętrznie.</span><span class="sxs-lookup"><span data-stu-id="add46-102">A *local value* is a value for a dependency property that was set directly on a dependency property, by calling <xref:System.Windows.DependencyObject.SetValue%2A>, or more typically by using the set accessor of a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrapper that calls <xref:System.Windows.DependencyObject.SetValue%2A> internally.</span></span> <span data-ttu-id="add46-103">Przykładem uwarunkowania systemu innych właściwości, które nie są wartościami lokalnych są wartościami ustawionymi przez style, lub wartości domyślnej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="add46-103">Examples of other property system determinants that are not local values are values set through styles, or dependency property default values.</span></span> <span data-ttu-id="add46-104">Aby uzyskać więcej informacji, zobacz [pierwszeństwo wartość właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="add46-104">For details, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="add46-105">A <xref:System.Windows.LocalValueEnumerator> zwróconego przez <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> — metoda i implementuje <xref:System.Collections.IEnumerator> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="add46-105">A <xref:System.Windows.LocalValueEnumerator> is returned by the <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> method and implements the <xref:System.Collections.IEnumerator> interface.</span></span> <span data-ttu-id="add46-106">Publiczny <xref:System.Windows.LocalValueEnumerator> Konstruktor nie istnieje; w związku z tym należy wywołać <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> uzyskać wystąpienia tej klasy.</span><span class="sxs-lookup"><span data-stu-id="add46-106">A public <xref:System.Windows.LocalValueEnumerator> constructor does not exist; therefore, you must call <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> to obtain an instance of this class.</span></span>  
  
 <span data-ttu-id="add46-107">Nie należy modyfikować wartości lokalne (wywołując <xref:System.Windows.DependencyObject.SetValue%2A> lub <xref:System.Windows.DependencyObject.ClearValue%2A>) podczas wyliczania wartości lokalnej.</span><span class="sxs-lookup"><span data-stu-id="add46-107">Do not modify local values (by calling <xref:System.Windows.DependencyObject.SetValue%2A> or <xref:System.Windows.DependencyObject.ClearValue%2A>) while enumerating local values.</span></span> <span data-ttu-id="add46-108">Jeśli zmienisz lub wyczyść wartości właściwości w zależności od właściwości, które są zwracane przez moduł wyliczający, Zmień lub usuń zaznaczenie operacji unieważnia kolekcji modułu wyliczającego, tak jak w przypadku wielu <xref:System.Collections.IEnumerator> implementacji.</span><span class="sxs-lookup"><span data-stu-id="add46-108">If you change or clear the property values based on properties that are returned by the enumerator, the change or clear operations do not invalidate the enumerator collection, as is the case for many <xref:System.Collections.IEnumerator> implementations.</span></span> <span data-ttu-id="add46-109">Ponadto widoku modułu wyliczającego jest to migawka.</span><span class="sxs-lookup"><span data-stu-id="add46-109">Also, the enumerator view is a snapshot.</span></span> <span data-ttu-id="add46-110">Zmiany w kolekcji nie gwarancji bezpieczeństwa wątków i blokada nie jest wymuszana.</span><span class="sxs-lookup"><span data-stu-id="add46-110">A change to the collection is not guaranteed to be thread safe, and no lock is enforced.</span></span> <span data-ttu-id="add46-111">Inne wątki nadal mieć dostęp wolnego do lokalnej wartości w kontekście innym niż moduł wyliczający.</span><span class="sxs-lookup"><span data-stu-id="add46-111">Other threads still have free access to the local values from a context other than the enumerator.</span></span>  
  
 <span data-ttu-id="add46-112">Użyj tego typu Jeśli masz operacji w klasie gdzie ważne jest, aby wiedzieć, czy wartość właściwości pochodzi od wartości lokalnej.</span><span class="sxs-lookup"><span data-stu-id="add46-112">Use this type if you have operations in your class where it is important to know whether a property's value came from a local value.</span></span> <span data-ttu-id="add46-113">Na przykład użyć tego typu w <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> wdrożenia, którym chcesz zbadać metadanych lokalnie na wszystkich właściwości.</span><span class="sxs-lookup"><span data-stu-id="add46-113">For example, use this type in an <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementation, or where you want to query the metadata on all locally set properties.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
  </Docs>
  <Members>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.LocalValueEnumerator.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="add46-114">Pobiera liczbę elementów, które znajdują się w kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-114">Gets the number of items that are represented in the collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="add46-115">Liczba elementów w kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-115">The number of items in the collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="add46-116">Ta właściwość nie jest elementem członkowskim zdefiniowanych <xref:System.Collections.IEnumerator> , ale podano jako udogodnienie.</span><span class="sxs-lookup"><span data-stu-id="add46-116">This property is not a defined member of <xref:System.Collections.IEnumerator> but is provided as a convenience.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Windows.LocalValueEntry Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.LocalValueEntry Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.LocalValueEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As LocalValueEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::LocalValueEntry Current { System::Windows::LocalValueEntry get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LocalValueEntry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="add46-117">Pobiera bieżący element w kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-117">Gets the current element in the collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="add46-118">Bieżące <see cref="T:System.Windows.LocalValueEntry" /> w kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-118">The current <see cref="T:System.Windows.LocalValueEntry" /> in the collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="add46-119">Ta wersja ogólnie dostępne właściwości używa kolekcji, która jest wykonywana podczas tworzenia migawki.</span><span class="sxs-lookup"><span data-stu-id="add46-119">This generally accessible version of the property relies on a snapshot of the collection that is taken at creation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LocalValueEnumerator.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="add46-120">
            <see cref="T:System.Windows.LocalValueEnumerator" /> Do porównania z bieżącym <see cref="T:System.Windows.LocalValueEnumerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-120">The <see cref="T:System.Windows.LocalValueEnumerator" /> to compare with the current <see cref="T:System.Windows.LocalValueEnumerator" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="add46-121">Określa, czy podany <see cref="T:System.Windows.LocalValueEnumerator" /> jest odpowiednikiem to <see cref="T:System.Windows.LocalValueEnumerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-121">Determines whether the provided <see cref="T:System.Windows.LocalValueEnumerator" /> is equivalent to this <see cref="T:System.Windows.LocalValueEnumerator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="add46-122">
            <see langword="true" /> Jeśli określony <see cref="T:System.Windows.LocalValueEnumerator" /> jest taki sam, jak bieżący <see cref="T:System.Windows.LocalValueEnumerator" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-122">
              <see langword="true" /> if the specified <see cref="T:System.Windows.LocalValueEnumerator" /> is equal to the current <see cref="T:System.Windows.LocalValueEnumerator" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="add46-123">Ta implementacja obsługuje tylko równości odwołań.</span><span class="sxs-lookup"><span data-stu-id="add46-123">This implementation supports reference equality only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LocalValueEnumerator.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="add46-124">Zwraca wartość skrótu dla bieżącego <see cref="T:System.Windows.LocalValueEnumerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-124">Returns a hash code for the current <see cref="T:System.Windows.LocalValueEnumerator" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="add46-125">Wartość skrótu 32-bitową liczbę całkowitą.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-125">A 32-bit integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LocalValueEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="add46-126">Moduł wyliczający należy przechodzi do następnego elementu kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-126">Advances the enumerator to the next element of the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="add46-127">
            <see langword="true" /> Jeśli moduł wyliczający został pomyślnie poprawionym do następnego elementu; <see langword="false" /> po zakończeniu zbierania moduł wyliczający.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-127">
              <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.LocalValueEnumerator obj1, System.Windows.LocalValueEnumerator obj2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.LocalValueEnumerator obj1, valuetype System.Windows.LocalValueEnumerator obj2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LocalValueEnumerator.op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (obj1 As LocalValueEnumerator, obj2 As LocalValueEnumerator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::LocalValueEnumerator obj1, System::Windows::LocalValueEnumerator obj2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj1" Type="System.Windows.LocalValueEnumerator" />
        <Parameter Name="obj2" Type="System.Windows.LocalValueEnumerator" />
      </Parameters>
      <Docs>
        <param name="obj1">
          <span data-ttu-id="add46-128">Pierwszy obiekt, który ma zostać porównany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-128">The first object to compare.</span>
          </span>
        </param>
        <param name="obj2">
          <span data-ttu-id="add46-129">Drugi obiekt, który będzie porównywany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-129">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="add46-130">Porównuje czy dwa określone <see cref="T:System.Windows.LocalValueEnumerator" /> obiekty są takie same.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-130">Compares whether two specified <see cref="T:System.Windows.LocalValueEnumerator" /> objects are the same.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="add46-131">
            <see langword="true" /> Jeśli <paramref name="obj1" /><see cref="T:System.Windows.LocalValueEnumerator" /> jest równa <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEnumerator" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-131">
              <see langword="true" /> if the <paramref name="obj1" /><see cref="T:System.Windows.LocalValueEnumerator" /> is equal to the <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEnumerator" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="add46-132">Ta implementacja obsługuje tylko równości odwołań.</span><span class="sxs-lookup"><span data-stu-id="add46-132">This implementation supports reference equality only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.LocalValueEnumerator obj1, System.Windows.LocalValueEnumerator obj2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.LocalValueEnumerator obj1, valuetype System.Windows.LocalValueEnumerator obj2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LocalValueEnumerator.op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (obj1 As LocalValueEnumerator, obj2 As LocalValueEnumerator) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::LocalValueEnumerator obj1, System::Windows::LocalValueEnumerator obj2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj1" Type="System.Windows.LocalValueEnumerator" />
        <Parameter Name="obj2" Type="System.Windows.LocalValueEnumerator" />
      </Parameters>
      <Docs>
        <param name="obj1">
          <span data-ttu-id="add46-133">Pierwszy obiekt, który ma zostać porównany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-133">The first object to compare.</span>
          </span>
        </param>
        <param name="obj2">
          <span data-ttu-id="add46-134">Drugi obiekt, który będzie porównywany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-134">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="add46-135">Porównuje dwa określone <see cref="T:System.Windows.LocalValueEnumerator" /> określają, czy ich nie są takie same obiekty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-135">Compares two specified <see cref="T:System.Windows.LocalValueEnumerator" /> objects to determine whether they are not the same.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="add46-136">
            <see langword="true" /> Jeśli wystąpienia nie są równe; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-136">
              <see langword="true" /> if the instances are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="add46-137">Ta implementacja obsługuje tylko równości odwołań.</span><span class="sxs-lookup"><span data-stu-id="add46-137">This implementation supports reference equality only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LocalValueEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="add46-138">Ustawia modułu wyliczającego pozycji początkowej, czyli przed pierwszym elementem w kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-138">Sets the enumerator to its initial position, which is before the first element in the collection.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="add46-139">Opis tego członków, zobacz <see cref="P:System.Collections.IEnumerator.Current" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-139">For a description of this members, see <see cref="P:System.Collections.IEnumerator.Current" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="add46-140">Bieżący element w kolekcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="add46-140">The current element in the collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="add46-141">Ten element jest jawną implementacją członków.</span><span class="sxs-lookup"><span data-stu-id="add46-141">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="add46-142">Można go używać tylko wtedy, gdy <xref:System.Windows.LocalValueEnumerator> wystąpienia jest rzutowane na <xref:System.Collections.IEnumerator> interfejsu.</span><span class="sxs-lookup"><span data-stu-id="add46-142">It can be used only when the <xref:System.Windows.LocalValueEnumerator> instance is cast to an <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.LocalValueEnumerator.Current" />
      </Docs>
    </Member>
  </Members>
</Type>