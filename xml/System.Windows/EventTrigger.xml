<Type Name="EventTrigger" FullName="System.Windows.EventTrigger">
  <Metadata><Meta Name="ms.openlocfilehash" Value="36cfe232127007e87498dc0a893369ad37781969" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69444851" /></Metadata><TypeSignature Language="C#" Value="public class EventTrigger : System.Windows.TriggerBase, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventTrigger extends System.Windows.TriggerBase implements class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventTrigger" />
  <TypeSignature Language="VB.NET" Value="Public Class EventTrigger&#xA;Inherits TriggerBase&#xA;Implements IAddChild" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventTrigger : System::Windows::TriggerBase, System::Windows::Markup::IAddChild" />
  <TypeSignature Language="F#" Value="type EventTrigger = class&#xA;    inherit TriggerBase&#xA;    interface IAddChild" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.TriggerBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Actions")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje wyzwalacz, który stosuje zestaw akcji w odpowiedzi na zdarzenie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Trigger>obiekty <xref:System.Windows.Trigger.Setters%2A>mają właściwości, <xref:System.Windows.TriggerBase.EnterActions%2A>i <xref:System.Windows.TriggerBase.ExitActions%2A> , które stosują zmiany lub akcje na podstawie stanu pewnych <xref:System.Windows.EventTrigger.Actions%2A> właściwości, podczas gdy <xref:System.Windows.EventTrigger> obiekty uruchamiają zestaw po wystąpieniu określonego zdarzenia kierowanego. Na przykład możesz chcieć użyć <xref:System.Windows.EventTrigger> do uruchomienia zestawu animacji, gdy wskaźnik myszy znajduje się nad określonym [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] formantem. W <xref:System.Windows.Trigger>przeciwieństwie <xref:System.Windows.EventTrigger> do, nie ma koncepcji zakończenia stanu, więc akcja nie zostanie cofnięta, gdy stan, który spowodował zdarzenie, nie będzie już prawdziwy.  
  
 Należy pamiętać, że w <xref:System.Windows.EventTrigger>przypadku korzystania z programu należy wybrać zdarzenia, które nie zakłócają działania związanego z kontrolką. Kontrolki, <xref:System.Windows.Controls.Button> takie <xref:System.Windows.Controls.TextBox> jak lub wykonywanie określonych akcji dotyczących zdarzeń wejściowych użytkownika, takich jak kliknięcia myszą i zdarzenia klawiatury. Na przykład jeśli ustawisz styl przycisku <xref:System.Windows.Input.Mouse.MouseDown> i spróbujesz ustawić zdarzenie <xref:System.Windows.EventTrigger.RoutedEvent%2A> jako z <xref:System.Windows.EventTrigger>, <xref:System.Windows.EventTrigger> nigdy nie zostanie zastosowane, ponieważ zdarzenie jest najpierw obsługiwane przez przycisk. Zamiast tego można użyć <xref:System.Windows.Input.Mouse.PreviewMouseDown> zdarzenia lub innego zdarzenia.  
  
 W <xref:System.Windows.Data.Binding.TargetUpdated> przypadku korzystania z powiązania danych, jeśli używasz zdarzenia, musisz <xref:System.Windows.Data.Binding.NotifyOnTargetUpdated%2A> ustawić wartość <xref:System.Windows.Data.Binding> obiektu na `true` dla zdarzenia, które ma zostać zgłoszone.  
  
 Dodanie elementu podrzędnego <xref:System.Windows.EventTrigger> do obiektu <xref:System.Windows.TriggerActionCollection> niejawnie dodaje <xref:System.Windows.EventTrigger> go do obiektu. <xref:System.Windows.TriggerAction>  
  
   
  
## Examples  
 Ten przykład pokazuje, <xref:System.Windows.UIElement.MouseEnter> jak używać wyzwalaczy zdarzeń w stylu do animowania zdarzeń <xref:System.Windows.FrameworkElement>i <xref:System.Windows.UIElement.MouseLeave> . W tym przykładzie <xref:System.Windows.Style> <xref:System.Windows.Style.TargetType%2A> ma ustawioną wartość <xref:System.Windows.Shapes.Rectangle>. W związku z tym nie ma potrzeby kwalifikowania `MouseEnter` nazw `MouseLeave` zdarzeń i nazwy klasy.  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.EventSetter" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">Wprowadzenie do stylów i przykładu tworzenia szablonów</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.EventTrigger" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventTrigger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventTrigger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.EventTrigger" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventTrigger (System.Windows.RoutedEvent routedEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.RoutedEvent routedEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.#ctor(System.Windows.RoutedEvent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventTrigger(System::Windows::RoutedEvent ^ routedEvent);" />
      <MemberSignature Language="F#" Value="new System.Windows.EventTrigger : System.Windows.RoutedEvent -&gt; System.Windows.EventTrigger" Usage="new System.Windows.EventTrigger routedEvent" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><see cref="T:System.Windows.RoutedEvent" /> Uaktywnia ten wyzwalacz.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.EventTrigger" /> klasy z określonym zdarzeniem.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Actions">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerActionCollection Actions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerActionCollection Actions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.Actions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Actions As TriggerActionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerActionCollection ^ Actions { System::Windows::TriggerActionCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Actions : System.Windows.TriggerActionCollection" Usage="System.Windows.EventTrigger.Actions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerActionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję akcji do zastosowania, gdy wystąpi zdarzenie.</summary>
        <value>Wartością domyślną jest pusta kolekcja.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W <xref:System.Windows.Trigger>przeciwieństwie <xref:System.Windows.EventTrigger> do, nie ma koncepcji zakończenia stanu, więc akcja nie zostanie cofnięta, gdy stan, który spowodował zdarzenie, nie będzie już prawdziwy.  
  
 Dodanie elementu podrzędnego <xref:System.Windows.EventTrigger> do obiektu <xref:System.Windows.TriggerActionCollection> niejawnie dodaje <xref:System.Windows.EventTrigger> go do obiektu. <xref:System.Windows.TriggerAction>  
  
> [!NOTE]
>  Tę właściwość można ustawić [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] tylko za pośrednictwem podanej składni kolekcji lub przez uzyskanie dostępu do obiektu kolekcja i użycie jego różnych metod, takich jak Add. Właściwość uzyskiwania dostępu do obiektu kolekcji jest tylko do odczytu, a sama kolekcja to Read-Write.  
  
<a name="xamlPropertyElementUsage_Actions"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.Actions>  
    OneOrMoreTriggerActions  
  </object.Actions>  
</object>  
```  
  
<a name="xamlValues_Actions"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *OneOrMoreTriggerActions*  
 Co najmniej jeden obiekt. <xref:System.Windows.TriggerAction>  
  
   
  
## Examples  
 W tym przykładzie opisano sposób używania wyzwalaczy zdarzeń w stylu do animowania <xref:System.Windows.UIElement.MouseEnter> zdarzeń <xref:System.Windows.FrameworkElement>i <xref:System.Windows.UIElement.MouseLeave> . Jak wspomniano powyżej, dodanie <xref:System.Windows.TriggerAction> elementu podrzędnego <xref:System.Windows.EventTrigger> do obiektu <xref:System.Windows.TriggerActionCollection> niejawnie dodaje <xref:System.Windows.EventTrigger> go do obiektu. W związku z tym, w `<EventTrigger.Actions>` tym przykładzie, jest niejawny.  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">Wprowadzenie do stylów i przykładu tworzenia szablonów</related>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="protected virtual void AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddChild (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddChild(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddChild : obj -&gt; unit&#xA;override this.AddChild : obj -&gt; unit" Usage="eventTrigger.AddChild value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt, który ma zostać dodany <see cref="P:System.Windows.EventTrigger.Actions" /> do kolekcji tego wyzwalacza. <see cref="T:System.Windows.TriggerAction" /></param>
        <summary>Dodaje określony obiekt do <see cref="P:System.Windows.EventTrigger.Actions" /> kolekcji bieżącego wyzwalacza zdarzeń.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddText">
      <MemberSignature Language="C#" Value="protected virtual void AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member AddText : string -&gt; unit&#xA;override this.AddText : string -&gt; unit" Usage="eventTrigger.AddText text" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Ten parametr nie jest używany.</param>
        <summary>Ta metoda nie jest obsługiwana i powoduje wyjątek.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoutedEvent">
      <MemberSignature Language="C#" Value="public System.Windows.RoutedEvent RoutedEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.RoutedEvent RoutedEvent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.RoutedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property RoutedEvent As RoutedEvent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::RoutedEvent ^ RoutedEvent { System::Windows::RoutedEvent ^ get(); void set(System::Windows::RoutedEvent ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RoutedEvent : System.Windows.RoutedEvent with get, set" Usage="System.Windows.EventTrigger.RoutedEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Windows.RoutedEvent" /> , który będzie uaktywnia ten wyzwalacz.</summary>
        <value>Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.EventTrigger>s stosuje zestaw akcji po wystąpieniu określonego zdarzenia kierowanego. Na przykład można użyć <xref:System.Windows.EventTrigger>s do uruchomienia zestawu animacji, gdy wskaźnik myszy znajduje się nad określonym [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] formantem.  
  
 Jeśli szablon lub styl, który zawiera to <xref:System.Windows.EventTrigger> nie `TargetType` ma określonej właściwości, należy użyć nazwy zdarzenia z nazwą klasy przy użyciu `ClassName.EventName` składni.  
  
 <xref:System.Windows.EventTrigger>obiekty nie mogą obsługiwać już <xref:System.Windows.RoutedEventArgs.Handled%2A>zdarzeń. Kontrolki, <xref:System.Windows.Controls.Button> takie <xref:System.Windows.Controls.TextBox> jak lub wykonywanie określonych akcji dotyczących zdarzeń wejściowych użytkownika, takich jak kliknięcia myszą i zdarzenia klawiatury. Na przykład jeśli ustawisz styl przycisku <xref:System.Windows.Input.Mouse.MouseDown> i spróbujesz ustawić zdarzenie <xref:System.Windows.EventTrigger.RoutedEvent%2A> jako z <xref:System.Windows.EventTrigger>, <xref:System.Windows.EventTrigger> nigdy nie zostanie zastosowane, ponieważ zdarzenie jest najpierw obsługiwane przez przycisk. Zamiast tego można użyć <xref:System.Windows.Input.Mouse.PreviewMouseDown> zdarzenia lub innego zdarzenia.  
  
 W przypadku korzystania z <xref:System.Windows.Data.Binding.TargetUpdated> powiązania danych, jeśli używasz zdarzenia, musisz <xref:System.Windows.Data.Binding.NotifyOnTargetUpdated%2A> ustawić wartość <xref:System.Windows.Data.Binding> true dla zdarzenia, które ma zostać zgłoszone.  
  
   
  
## Examples  
 Ten przykład pokazuje, <xref:System.Windows.UIElement.MouseEnter> jak używać wyzwalaczy zdarzeń w stylu do animowania zdarzeń <xref:System.Windows.FrameworkElement>i <xref:System.Windows.UIElement.MouseLeave> . W tym przykładzie <xref:System.Windows.Style> <xref:System.Windows.Style.TargetType%2A> ma ustawioną wartość <xref:System.Windows.Shapes.Rectangle>. W związku z tym nie ma potrzeby kwalifikowania `MouseEnter` nazw `MouseLeave` zdarzeń i nazwy klasy.  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Windows.EventTrigger.RoutedEvent" /> Właściwość nie może mieć wartości null.</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">Wprowadzenie do stylów i przykładu tworzenia szablonów</related>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeActions">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeActions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.ShouldSerializeActions" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeActions () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeActions();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeActions : unit -&gt; bool" Usage="eventTrigger.ShouldSerializeActions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca czy procesy serializacji powinny serializować wartość <see cref="P:System.Windows.EventTrigger.Actions" /> efektywną właściwości w wystąpieniach tej klasy.</summary>
        <returns>Zwraca <see langword="true" /> <see langword="false" />czy wartość właściwości powinna być serializowana; w przeciwnym razie. <see cref="P:System.Windows.EventTrigger.Actions" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceName">
      <MemberSignature Language="C#" Value="public string SourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.SourceName" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceName : string with get, set" Usage="System.Windows.EventTrigger.SourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę obiektu ze zdarzeniem, które aktywuje ten wyzwalacz. Jest to używane tylko przez wyzwalacze elementu lub wyzwalacze szablonu.</summary>
        <value>Wartość domyślna to <see langword="null" />. Jeśli wartość tej właściwości to <see langword="null" />, element monitorowany pod kątem podniesienia poziomu zdarzenia jest szablonem nadrzędnym lub korzeniem drzewa logicznego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można ustawić tę właściwość na nazwę dowolnego elementu w zakresie, w którym jest stosowana kolekcja wyzwalacza (kolekcja, która <xref:System.Windows.EventTrigger> jest częścią). Jest to zazwyczaj nazwany element, który znajduje się w szablonie, który zawiera <xref:System.Windows.EventTrigger>. Jeśli <xref:System.Windows.FrameworkElement.Triggers%2A> właściwość jest ustawiana bezpośrednio dla elementu, jest to nazwany element w zakresie tego elementu nadrzędnego.  
  
 Można nazwać obiekt za pomocą składni [dyrektywy x:Name](~/docs/framework/xaml-services/x-name-directive.md) .  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Windows.EventTrigger" /> Gdy jest używany, nie można go modyfikować.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt podrzędny do dodania.</param>
        <summary>Dodaje obiekt podrzędny.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.Windows.EventTrigger> gdy wystąpienie jest rzutowane <xref:System.Windows.Markup.IAddChild> do interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Tekst, który ma zostać dodany do obiektu.</param>
        <summary>Dodaje zawartość tekstową węzła do obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.Windows.EventTrigger> gdy wystąpienie jest rzutowane <xref:System.Windows.Markup.IAddChild> do interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
