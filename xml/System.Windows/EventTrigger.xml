<Type Name="EventTrigger" FullName="System.Windows.EventTrigger">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="63c452f6d88bb4a26320d4420714a2ef7768c900" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36460445" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventTrigger : System.Windows.TriggerBase, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventTrigger extends System.Windows.TriggerBase implements class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventTrigger" />
  <TypeSignature Language="VB.NET" Value="Public Class EventTrigger&#xA;Inherits TriggerBase&#xA;Implements IAddChild" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventTrigger : System::Windows::TriggerBase, System::Windows::Markup::IAddChild" />
  <TypeSignature Language="F#" Value="type EventTrigger = class&#xA;    inherit TriggerBase&#xA;    interface IAddChild" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.TriggerBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Actions")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje wyzwalacz, który dotyczy działań w odpowiedzi na zdarzenia.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Trigger> obiekty mają <xref:System.Windows.Trigger.Setters%2A>, <xref:System.Windows.TriggerBase.EnterActions%2A>, i <xref:System.Windows.TriggerBase.ExitActions%2A> właściwości stosowane zmiany lub akcji w oparciu o stan niektórych właściwości podczas <xref:System.Windows.EventTrigger> obiektów uruchomić zestaw <xref:System.Windows.EventTrigger.Actions%2A> po wystąpieniu określonego kierowanego zdarzenia. Na przykład można użyć <xref:System.Windows.EventTrigger> uruchomić zestaw animacji, gdy wskaźnik myszy znajduje się nad określony [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] formantu. W odróżnieniu od <xref:System.Windows.Trigger>, <xref:System.Windows.EventTrigger> ma pojęcie zakończenia, stanu, tak akcja nie są zapisywane po warunek, który wywołał zdarzenie nie jest już wartość true.  
  
 Należy pamiętać, że przy użyciu <xref:System.Windows.EventTrigger>, musisz wybrać zdarzenia, które nie zakłóca zachowania związanego z używaniem formantu. Określa, takich jak <xref:System.Windows.Controls.Button> lub <xref:System.Windows.Controls.TextBox> wykonywanie określonych czynności na zdarzenia wejściowe użytkownika, takie jak kliknięcie myszą i zdarzenia z klawiatury. Na przykład, jeśli są style przycisku, a następnie spróbuj ustawić <xref:System.Windows.Input.Mouse.MouseDown> zdarzeń jako <xref:System.Windows.EventTrigger.RoutedEvent%2A> z <xref:System.Windows.EventTrigger>, <xref:System.Windows.EventTrigger> nigdy nie zostanie zastosowany, ponieważ zdarzenie najpierw pobiera obsługiwane za pomocą przycisku. Zamiast tego można użyć <xref:System.Windows.Input.Mouse.PreviewMouseDown> zdarzenie lub zdarzenia.  
  
 Korzystając z powiązania danych, jeśli używasz <xref:System.Windows.Data.Binding.TargetUpdated> zdarzenia, należy ustawić <xref:System.Windows.Data.Binding.NotifyOnTargetUpdated%2A> wartości z <xref:System.Windows.Data.Binding> do obiektu `true` dla się zdarzenia.  
  
 Dodawanie <xref:System.Windows.TriggerAction> dziecka <xref:System.Windows.EventTrigger> obiektu niejawnie dodaje go do <xref:System.Windows.TriggerActionCollection> dla <xref:System.Windows.EventTrigger> obiektu.  
  
   
  
## Examples  
 Ten przykład przedstawia sposób użycia wyzwalacze zdarzeń w stylu do animowania <xref:System.Windows.UIElement.MouseEnter> i <xref:System.Windows.UIElement.MouseLeave> zdarzenia <xref:System.Windows.FrameworkElement>. W tym przykładzie <xref:System.Windows.Style> ma <xref:System.Windows.Style.TargetType%2A> ustawioną <xref:System.Windows.Shapes.Rectangle>. W związku z tym nie istnieje potrzeba Aby zakwalifikować `MouseEnter` i `MouseLeave` nazwy zdarzenia z nazwą klasy.  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.EventSetter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.EventTrigger" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventTrigger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventTrigger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.EventTrigger" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventTrigger (System.Windows.RoutedEvent routedEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.RoutedEvent routedEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.#ctor(System.Windows.RoutedEvent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventTrigger(System::Windows::RoutedEvent ^ routedEvent);" />
      <MemberSignature Language="F#" Value="new System.Windows.EventTrigger : System.Windows.RoutedEvent -&gt; System.Windows.EventTrigger" Usage="new System.Windows.EventTrigger routedEvent" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
      </Parameters>
      <Docs>
        <param name="routedEvent">
          <see cref="T:System.Windows.RoutedEvent" /> Włączającą tego wyzwalacza.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.EventTrigger" /> klasy z określonego zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Actions">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerActionCollection Actions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerActionCollection Actions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.Actions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Actions As TriggerActionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerActionCollection ^ Actions { System::Windows::TriggerActionCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Actions : System.Windows.TriggerActionCollection" Usage="System.Windows.EventTrigger.Actions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerActionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję akcji do zastosowania po wystąpieniu zdarzenia.</summary>
        <value>Wartością domyślną jest pusta kolekcja.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W odróżnieniu od <xref:System.Windows.Trigger>, <xref:System.Windows.EventTrigger> ma pojęcie zakończenia, stanu, tak akcja nie są zapisywane po warunek, który wywołał zdarzenie nie jest już wartość true.  
  
 Dodawanie <xref:System.Windows.TriggerAction> dziecka <xref:System.Windows.EventTrigger> obiektu niejawnie dodaje go do <xref:System.Windows.TriggerActionCollection> dla <xref:System.Windows.EventTrigger> obiektu.  
  
> [!NOTE]
>  Tej właściwości można ustawić tylko [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] za pomocą składni kolekcji pokazano lub uzyskiwania dostępu do obiektu kolekcji i używając jej różnych metod, takich jak dodawanie. Właściwość do samego obiektu kolekcji jest tylko do odczytu, sama kolekcja odczytu i zapisu.  
  
<a name="xamlPropertyElementUsage_Actions"></a>   
## <a name="xaml-property-element-usage"></a>Użycie elementu właściwości języka XAML  
  
```  
<object>  
  <object.Actions>  
    OneOrMoreTriggerActions  
  </object.Actions>  
</object>  
```  
  
<a name="xamlValues_Actions"></a>   
## <a name="xaml-values"></a>Wartości XAML  
 *OneOrMoreTriggerActions*  
 Co najmniej jeden <xref:System.Windows.TriggerAction> obiektów.  
  
   
  
## Examples  
 W tym przykładzie przedstawiono sposób użycia wyzwalacze zdarzeń w stylu do animowania <xref:System.Windows.UIElement.MouseEnter> i <xref:System.Windows.UIElement.MouseLeave> zdarzenia <xref:System.Windows.FrameworkElement>. Jak wspomniano powyżej, dodawanie <xref:System.Windows.TriggerAction> dziecka <xref:System.Windows.EventTrigger> obiektu niejawnie dodaje go do <xref:System.Windows.TriggerActionCollection> dla <xref:System.Windows.EventTrigger> obiektu. W związku z tym, w tym przykładzie `<EventTrigger.Actions>` jest niejawnie.  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="protected virtual void AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddChild (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddChild(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddChild : obj -&gt; unit&#xA;override this.AddChild : obj -&gt; unit" Usage="eventTrigger.AddChild value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.Windows.TriggerAction" /> obiekt do dodania do <see cref="P:System.Windows.EventTrigger.Actions" /> kolekcji tego wyzwalacza.</param>
        <summary>Dodaje określony obiekt do <see cref="P:System.Windows.EventTrigger.Actions" /> kolekcji bieżącego wyzwalacza zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddText">
      <MemberSignature Language="C#" Value="protected virtual void AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member AddText : string -&gt; unit&#xA;override this.AddText : string -&gt; unit" Usage="eventTrigger.AddText text" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Ten parametr nie jest używany.</param>
        <summary>Ta metoda nie jest obsługiwane i powoduje wygenerowanie wyjątku.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoutedEvent">
      <MemberSignature Language="C#" Value="public System.Windows.RoutedEvent RoutedEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.RoutedEvent RoutedEvent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.RoutedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property RoutedEvent As RoutedEvent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::RoutedEvent ^ RoutedEvent { System::Windows::RoutedEvent ^ get(); void set(System::Windows::RoutedEvent ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RoutedEvent : System.Windows.RoutedEvent with get, set" Usage="System.Windows.EventTrigger.RoutedEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Windows.RoutedEvent" /> która uaktywni tego wyzwalacza.</summary>
        <value>Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.EventTrigger>s zastosować zestaw akcji po wystąpieniu określonego kierowanego zdarzenia. Na przykład można użyć <xref:System.Windows.EventTrigger>s, aby uruchomić zestaw animacji, gdy wskaźnik myszy znajduje się nad określony [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] formantu.  
  
 Jeśli szablon lub styl, który zawiera ten <xref:System.Windows.EventTrigger> nie ma `TargetType` właściwość określona, to trzeba jakości nazwy zdarzenia ze przy użyciu nazwy klasy `ClassName.EventName` składni.  
  
 <xref:System.Windows.EventTrigger> obiekty nie może obsłużyć zdarzenia, które zostały już <xref:System.Windows.RoutedEventArgs.Handled%2A>. Określa, takich jak <xref:System.Windows.Controls.Button> lub <xref:System.Windows.Controls.TextBox> wykonywanie określonych czynności na zdarzenia wejściowe użytkownika, takie jak kliknięcie myszą i zdarzenia z klawiatury. Na przykład, jeśli są style przycisku, a następnie spróbuj ustawić <xref:System.Windows.Input.Mouse.MouseDown> zdarzeń jako <xref:System.Windows.EventTrigger.RoutedEvent%2A> z <xref:System.Windows.EventTrigger>, <xref:System.Windows.EventTrigger> nigdy nie zostanie zastosowany, ponieważ zdarzenie najpierw pobiera obsługiwane za pomocą przycisku. Zamiast tego można użyć <xref:System.Windows.Input.Mouse.PreviewMouseDown> zdarzenie lub zdarzenia.  
  
 Korzystając z powiązania danych, jeśli używasz <xref:System.Windows.Data.Binding.TargetUpdated> zdarzenia, należy ustawić <xref:System.Windows.Data.Binding.NotifyOnTargetUpdated%2A> wartości z <xref:System.Windows.Data.Binding> obiektu na wartość true dla się zdarzenia.  
  
   
  
## Examples  
 Ten przykład przedstawia sposób użycia wyzwalacze zdarzeń w stylu do animowania <xref:System.Windows.UIElement.MouseEnter> i <xref:System.Windows.UIElement.MouseLeave> zdarzenia <xref:System.Windows.FrameworkElement>. W tym przykładzie <xref:System.Windows.Style> ma <xref:System.Windows.Style.TargetType%2A> ustawioną <xref:System.Windows.Shapes.Rectangle>. W związku z tym nie istnieje potrzeba Aby zakwalifikować `MouseEnter` i `MouseLeave` nazwy zdarzenia z nazwą klasy.  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Windows.EventTrigger.RoutedEvent" /> Właściwość nie może mieć wartości null.</exception>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeActions">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeActions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.ShouldSerializeActions" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeActions () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeActions();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeActions : unit -&gt; bool" Usage="eventTrigger.ShouldSerializeActions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca czy procesy serializacji powinny serializować wartość <see cref="P:System.Windows.EventTrigger.Actions" /> właściwości wystąpienia tej klasy.</summary>
        <returns>Zwraca <see langword="true" /> Jeśli <see cref="P:System.Windows.EventTrigger.Actions" /> wartość właściwości powinny być serializowane; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceName">
      <MemberSignature Language="C#" Value="public string SourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.SourceName" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceName : string with get, set" Usage="System.Windows.EventTrigger.SourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę obiektu zdarzenia, które aktywuje tego wyzwalacza. To jest używana tylko przez element Wyzwalacze lub wyzwalacze szablonu.</summary>
        <value>Wartość domyślna to <see langword="null" />. Jeśli wartość tej właściwości jest <see langword="null" />, element monitorowanych do podnoszenia zdarzenia jest nadrzędny opartego na szablonie lub w katalogu głównym drzewa logicznego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tę właściwość można ustawić na nazwę dowolnego elementu w ramach zakresu, gdzie kolekcji wyzwalacza (kolekcji tego <xref:System.Windows.EventTrigger> jest częścią) są stosowane. Zazwyczaj jest to element o nazwie, który znajduje się w szablonie, który zawiera to <xref:System.Windows.EventTrigger>. Jeśli konfigurujesz <xref:System.Windows.FrameworkElement.Triggers%2A> właściwość elementu bezpośrednio, to jest element nazwanym zakresem tego elementu nadrzędnego.  
  
 Można określić nazwę obiektów przy użyciu [x: Name — dyrektywa](~/docs/framework/xaml-services/x-name-directive.md) składni.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Po <see cref="T:System.Windows.EventTrigger" /> jest używana, nie może być modyfikowany.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Aby dodać obiekt podrzędny.</param>
        <summary>Dodaje obiekt podrzędny.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Windows.EventTrigger> wystąpienia jest rzutowane na <xref:System.Windows.Markup.IAddChild> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Tekst, aby dodać do obiektu.</param>
        <summary>Dodaje tekst węzła do obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Windows.EventTrigger> wystąpienia jest rzutowane na <xref:System.Windows.Markup.IAddChild> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>