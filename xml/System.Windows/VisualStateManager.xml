<Type Name="VisualStateManager" FullName="System.Windows.VisualStateManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7ae817a9cb02a9bd6660e4d5d7d17a532e5cf637" />
    <Meta Name="ms.sourcegitcommit" Value="4f9e960e786edf67b6a29655670b1a15e71c03de" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/02/2018" />
    <Meta Name="ms.locfileid" Value="39418209" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class VisualStateManager : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualStateManager extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualStateManager" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualStateManager&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualStateManager : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualStateManager = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zarządza Stany i przejścia między Stanami dla formantów logikę.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualStateManager> Pozwala na określenie stanów kontrolki wyglądu kontrolki, gdy jest on w pewnego stanu i zmianach stanów kontrolki. Na przykład <xref:System.Windows.Controls.Button> może być nieco inny wygląd, gdy zostanie naciśnięty niż, gdy nie zostanie naciśnięty. Dwustanowy, który <xref:System.Windows.Controls.Button> definiuje odpowiadają po jego kliknięciu (`"Pressed"`) i gdy nie jest (`"Normal"`). Wygląd kontrolki, gdy znajduje się w stanie jest definiowany przez <xref:System.Windows.VisualState>. A <xref:System.Windows.VisualState> zawiera zbiór <xref:System.Windows.Media.Animation.Storyboard> obiekty, które określają, jak zmienia się wygląd kontrolki gdy kontrolka jest w tym stanie. Dodawanie stany wizualne do kontrolki, ustawiając `VisualStateManager.VisualStateGroups` dołączona właściwość w formancie. Każdy <xref:System.Windows.VisualStateGroup> zawiera zbiór <xref:System.Windows.VisualState> obiektów, które wzajemnie się wykluczają. Kontrolka jest zawsze w stanie dokładnie jeden w każdym <xref:System.Windows.VisualStateGroup>.  
  
 <xref:System.Windows.VisualStateManager> Również pozwala na określenie, kiedy kontrolki przechodzi do określonego stanu. Metody, która powinna wywołać, aby zmienić stany zależy od danego scenariusza. Jeśli utworzysz formant, który używa <xref:System.Windows.VisualStateManager> w jego <xref:System.Windows.Controls.ControlTemplate>, wywołaj <xref:System.Windows.VisualStateManager.GoToState%2A> metody. Więcej informacji na temat sposobu tworzenia formantów, które używają <xref:System.Windows.VisualStateManager>, zobacz [Tworzenie formantu zawierający możliwe do dostosowania wyglądu](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md). Jeśli używasz <xref:System.Windows.VisualStateManager> poza <xref:System.Windows.Controls.ControlTemplate> (na przykład, jeśli używasz <xref:System.Windows.VisualStateManager> w <xref:System.Windows.Controls.UserControl> lub w pojedynczym elemencie), wywołaj <xref:System.Windows.VisualStateManager.GoToElementState%2A> metody. W obu przypadkach <xref:System.Windows.VisualStateManager> wykonuje logikę, która jest wymagana, aby prawidłowo uruchomić i zatrzymać scenorysy, które są skojarzone z danym stanem związane. Na przykład załóżmy, że formant definiuje stany, `State1` i `State2`, z których każdy ma scenorysu skojarzonych z nim. Jeśli formant znajduje się w `State1` i przekażesz `State2` do <xref:System.Windows.VisualStateManager.GoToState%2A> lub <xref:System.Windows.VisualStateManager.GoToElementState%2A>, <xref:System.Windows.VisualStateManager> scenorys jest uruchamiany w `State2` i zatrzymuje scenorysu w `State1`.  
  
 Formanty, które są dołączone [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] użyj <xref:System.Windows.VisualStateManager> zmiany stanów wizualnych. Po utworzeniu <xref:System.Windows.Controls.ControlTemplate> dla formantu, który jest dołączony [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], możesz dodać <xref:System.Windows.VisualState> obiektów z formantem <xref:System.Windows.Controls.ControlTemplate> Aby określić wygląd formantu w pewnego stanu. Aby znaleźć nazwy stanów wizualnych dla formantów, które są dołączone [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], zobacz [style i szablony kontrolek](~/docs/framework/wpf/controls/control-styles-and-templates.md). Definiowanie uchwytów logiki formantu przejścia między stanami, dzięki czemu nie trzeba podejmować żadnych działań innych niż <xref:System.Windows.VisualState> obiektów w nowym <xref:System.Windows.Controls.ControlTemplate>. Aby uzyskać więcej informacji o tym, jak utworzyć szablony kontroli dla istniejących formantów, zobacz [Dostosowywanie wyglądu istniejącego formantu przez stworzenie ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
 Jeśli chcesz zaimplementować własną logiką do przejścia między stanami, użytkownik musi dziedziczyć <xref:System.Windows.VisualStateManager>, Zastąp <xref:System.Windows.VisualStateManager.GoToStateCore%2A> metody, a następnie ustaw <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A?displayProperty=nameWithType> dołączonych właściwości formantu, który używa niestandardowej logiki.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Shapes.Rectangle> i dodaje <xref:System.Windows.VisualStateGroup> o nazwie `CommonStates` do `VisualStateManager.VisualStatesGroups` dołączona właściwość. W przykładzie zdefiniowano `MouseOver` i `Normal` <xref:System.Windows.VisualState> obiekty w `CommonStates` <xref:System.Windows.VisualStateGroup>. Po przesunięciu wskaźnika myszy <xref:System.Windows.Shapes.Rectangle>, zmienia się z czerwonego na zielony over co pół sekundy. Gdy użytkownik przesuwa wskaźnik myszy poza prostokąt, <xref:System.Windows.Controls.Grid> natychmiast zmiany z powrotem na czerwony. Należy pamiętać, że `Normal` stanu nie definiuje <xref:System.Windows.Media.Animation.Storyboard>. A <xref:System.Windows.Media.Animation.Storyboard> nie jest wymagane, ponieważ gdy <xref:System.Windows.Shapes.Rectangle> przechodzi z `MouseOver` do stanu `Normal` stanu, <xref:System.Windows.Media.Animation.Storyboard> dla `MouseOver` zostanie zatrzymana i <xref:System.Windows.Media.SolidColorBrush.Color%2A> właściwość <xref:System.Windows.Media.SolidColorBrush> zwraca czerwony.  
  
 [!code-xaml[VSMCustomControl#VSMNoTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml#vsmnotemplate)]  
  
 W poniższym przykładzie pokazano program obsługi zdarzeń, która jest zdefiniowana w poprzednim przykładzie i wywołania <xref:System.Windows.VisualStateManager.GoToElementState%2A> metodę, aby przejść między stanami. Jeśli prostokąt w poprzednim przykładzie było częścią <xref:System.Windows.Controls.ControlTemplate>, przykładu, musi wywołać <xref:System.Windows.VisualStateManager.GoToState%2A> metody.  
  
 [!code-csharp[VSMCustomControl#GoToElementState](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml.cs#gotoelementstate)]
 [!code-vb[VSMCustomControl#GoToElementState](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/window1.xaml.vb#gotoelementstate)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualStateManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualStateManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.VisualStateManager" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManager">
      <MemberSignature Language="C#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="ILAsm" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateManager.CustomVisualStateManager" />
      <MemberSignature Language="VB.NET" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="F#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" Usage="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Windows.VisualStateManager" /> obiekt, który przechodzi między Stanami formantu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A> jest `null`, <xref:System.Windows.VisualStateManager> używa własną logikę w celu przejścia między stanami. Jeśli chcesz zaimplementować własną logiką do przejścia między stanami, należy utworzyć klasę, która dziedziczy po elemencie <xref:System.Windows.VisualStateManager> i zastąpić <xref:System.Windows.VisualStateManager.GoToStateCore%2A> metody. Aby użyć niestandardowej klasy, ustaw <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A> właściwość do obiektu typu niestandardowego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManagerProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomVisualStateManagerProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomVisualStateManagerProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomVisualStateManagerProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomVisualStateManagerProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomVisualStateManagerProperty : System.Windows.DependencyProperty" Usage="System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static System.Windows.VisualStateManager GetCustomVisualStateManager (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.VisualStateManager GetCustomVisualStateManager(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetCustomVisualStateManager(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomVisualStateManager (obj As FrameworkElement) As VisualStateManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::VisualStateManager ^ GetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetCustomVisualStateManager : System.Windows.FrameworkElement -&gt; System.Windows.VisualStateManager" Usage="System.Windows.VisualStateManager.GetCustomVisualStateManager obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VisualStateManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj">Elementu do pobrania <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> dołączona właściwość.</param>
        <summary>Pobiera <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> dołączona właściwość.</summary>
        <returns>Menedżer stanu wizualnego, który przechodzi między Stanami formantu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVisualStateGroups">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetVisualStateGroups (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetVisualStateGroups(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetVisualStateGroups(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetVisualStateGroups (obj As FrameworkElement) As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetVisualStateGroups(System::Windows::FrameworkElement ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetVisualStateGroups : System.Windows.FrameworkElement -&gt; System.Collections.IList" Usage="System.Windows.VisualStateManager.GetVisualStateGroups obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj">Elementu do pobrania <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> dołączona właściwość.</param>
        <summary>Pobiera <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> dołączona właściwość.</summary>
        <returns>Kolekcja <see cref="T:System.Windows.VisualStateGroup" /> obiektów, które jest skojarzone z określonym obiektem.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToElementState">
      <MemberSignature Language="C#" Value="public static bool GoToElementState (System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToElementState(class System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToElementState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToElementState (stateGroupsRoot As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToElementState(System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, bool useTransitions);" />
      <MemberSignature Language="F#" Value="static member GoToElementState : System.Windows.FrameworkElement * string * bool -&gt; bool" Usage="System.Windows.VisualStateManager.GoToElementState (stateGroupsRoot, stateName, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stateGroupsRoot">Element główny, który zawiera <see cref="T:System.Windows.VisualStateManager" />.</param>
        <param name="stateName">Stan, do którego nastąpi przejście.</param>
        <param name="useTransitions">
          <see langword="true" /> Aby użyć <see cref="T:System.Windows.VisualTransition" /> obiekt do przejścia między stanami; w przeciwnym razie <see langword="false" />.</param>
        <summary>Przechodzi w elemencie między dwoma stanami. Ta metoda umożliwia stany przejścia, które są zdefiniowane przez aplikację, a nie zdefiniowane przez kontrolkę.</summary>
        <returns>
          <see langword="true" /> Jeśli kontrolka pomyślnie przeniesiona do nowego Państwa; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.Windows.VisualStateManager.GoToElementState%2A> metodę, aby zmienić stany w elemencie poza <xref:System.Windows.Controls.ControlTemplate> (na przykład, jeśli używasz <xref:System.Windows.VisualStateManager> w <xref:System.Windows.DataTemplate> lub <xref:System.Windows.Window>). Wywołaj <xref:System.Windows.VisualStateManager.GoToState%2A> metodę w przypadku zmiany stanów w kontrolce, która używa <xref:System.Windows.VisualStateManager> w jego <xref:System.Windows.Controls.ControlTemplate>.  
  
   
  
## Examples  
 Poniższy przykład tworzy aplikację, który monituje użytkownika o odgadnięcia liczbą z przedziału od 1 do 100.  Po użytkownik musi wprowadzić numer, aplikacja wskazuje, czy wynik jest zbyt duże, zbyt mała lub prawidłowe.  Następujące [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] tworzy interfejs użytkownika dla aplikacji i określa stany 4: `TooLow`, `TooHigh`, `Correct`, i `Guessing`. Kiedy rozpoczyna się aplikacja, jest `Guessing` stanu. .  
  
 [!code-xaml[VSMGoToElementState#GoToElementStateXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml#gotoelementstatexaml)]  
  
 Poniższy kod przedstawia logiki aplikacji.  Gdy użytkownik wprowadzi numer i kliknie przycisk, aplikacja wywołuje <xref:System.Windows.VisualStateManager.GoToElementState%2A> do którego nastąpi przejście `TooHigh`, `TooLow`, lub `Correct` opinie użytkowników dotyczące odgadnięcia.  Aby wypróbować w tym przykładzie, należy wywołać `GenerateNumber` metody, gdy aplikacja rozpocznie.  
  
 [!code-csharp[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml.cs#gotoelementstatecode)]
 [!code-vb[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmgotoelementstate/visualbasic/mainwindow.xaml.vb#gotoelementstatecode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stateGroupsRoot" /> jest <see langword="null" />.  - lub - <paramref name="stateName" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToState">
      <MemberSignature Language="C#" Value="public static bool GoToState (System.Windows.FrameworkElement control, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToState(class System.Windows.FrameworkElement control, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToState (control As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToState(System::Windows::FrameworkElement ^ control, System::String ^ stateName, bool useTransitions);" />
      <MemberSignature Language="F#" Value="static member GoToState : System.Windows.FrameworkElement * string * bool -&gt; bool" Usage="System.Windows.VisualStateManager.GoToState (control, stateName, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Formant do przejścia między stanami.</param>
        <param name="stateName">Stan, do którego nastąpi przejście.</param>
        <param name="useTransitions">
          <see langword="true" /> Aby użyć <see cref="T:System.Windows.VisualTransition" /> obiekt do przejścia między stanami; w przeciwnym razie <see langword="false" />.</param>
        <summary>Przechodzi sterowania między dwoma stanami. Ta metoda służy do stanów przejścia na kontrolkę, która ma <see cref="T:System.Windows.Controls.ControlTemplate" />.</summary>
        <returns>
          <see langword="true" /> Jeśli kontrolka pomyślnie przeniesiona do nowego Państwa; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.Windows.VisualStateManager.GoToState%2A> metodę w przypadku zmiany stanów w kontrolce, która używa <xref:System.Windows.VisualStateManager> w jego <xref:System.Windows.Controls.ControlTemplate>. Wywołaj <xref:System.Windows.VisualStateManager.GoToElementState%2A> metodę, aby zmienić stany w elemencie poza <xref:System.Windows.Controls.ControlTemplate> (na przykład, jeśli używasz <xref:System.Windows.VisualStateManager> w <xref:System.Windows.Controls.UserControl> lub w pojedynczym elemencie).  
  
   
  
## Examples  
 W poniższym przykładzie pokazano formant, który używa <xref:System.Windows.VisualStateManager.GoToState%2A> metodę, aby przejść między stanami. Na przykład cały, zobacz [tworzenie formant czy ma możliwe do dostosowania wyglądu](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md).  
  
 [!code-csharp[VSMCustomControl#UpdateStates](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/numericupdown.cs#updatestates)]
 [!code-vb[VSMCustomControl#UpdateStates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/numericupdown.vb#updatestates)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> jest <see langword="null" />.  - lub - <paramref name="stateName" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToStateCore">
      <MemberSignature Language="C#" Value="protected virtual bool GoToStateCore (System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot, string stateName, System.Windows.VisualStateGroup group, System.Windows.VisualState state, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GoToStateCore(class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot, string stateName, class System.Windows.VisualStateGroup group, class System.Windows.VisualState state, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToStateCore(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.String,System.Windows.VisualStateGroup,System.Windows.VisualState,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GoToStateCore (control As FrameworkElement, stateGroupsRoot As FrameworkElement, stateName As String, group As VisualStateGroup, state As VisualState, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GoToStateCore(System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, System::Windows::VisualStateGroup ^ group, System::Windows::VisualState ^ state, bool useTransitions);" />
      <MemberSignature Language="F#" Value="abstract member GoToStateCore : System.Windows.FrameworkElement * System.Windows.FrameworkElement * string * System.Windows.VisualStateGroup * System.Windows.VisualState * bool -&gt; bool&#xA;override this.GoToStateCore : System.Windows.FrameworkElement * System.Windows.FrameworkElement * string * System.Windows.VisualStateGroup * System.Windows.VisualState * bool -&gt; bool" Usage="visualStateManager.GoToStateCore (control, stateGroupsRoot, stateName, group, state, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="group" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="state" Type="System.Windows.VisualState" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Formant do przejścia między stanami.</param>
        <param name="stateGroupsRoot">Element główny, który zawiera <see cref="T:System.Windows.VisualStateManager" />.</param>
        <param name="stateName">Nazwa stanu, do którego nastąpi przejście.</param>
        <param name="group">
          <see cref="T:System.Windows.VisualStateGroup" /> , Stan, której należy.</param>
        <param name="state">Reprezentacja stanu, do którego nastąpi przejście.</param>
        <param name="useTransitions">
          <see langword="true" /> Aby użyć <see cref="T:System.Windows.VisualTransition" /> obiekt do przejścia między stanami; w przeciwnym razie <see langword="false" />.</param>
        <summary>Przejścia między Stanami formantu.</summary>
        <returns>
          <see langword="true" /> Jeśli kontrolka pomyślnie przeniesiona do nowego Państwa; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualStateManager.GoToStateCore%2A> Metoda wykonuje logikę niezbędną do odpowiednio uruchamiają i zatrzymują scenorysy, które są skojarzone z przejścia. Kiedy wywołuje kontrolki <xref:System.Windows.VisualStateManager.GoToState%2A> zmiany jego stanu <xref:System.Windows.VisualStateManager> wykonuje następujące czynności:  
  
-   Po pierwsze, jeśli <xref:System.Windows.VisualState> czy kontrolki są przenoszone do ma <xref:System.Windows.Media.Animation.Storyboard>, rozpoczyna się scenorysu. Następnie, jeśli <xref:System.Windows.VisualState> że kontrolki pochodzi z ma <xref:System.Windows.Media.Animation.Storyboard>, kończy się scenorysu.  
  
-   Jeśli formant znajduje się już w `stateName` stanu, <xref:System.Windows.VisualStateManager.GoToState%2A> nie podejmuje żadnych działań i zwraca `true`.  
  
-   Jeśli `stateName` nie istnieje w <xref:System.Windows.Controls.ControlTemplate> z `control`, <xref:System.Windows.VisualStateManager.GoToState%2A> nie podejmuje żadnych działań i zwraca `false`.  
  
 Możesz zaimplementować własną <xref:System.Windows.VisualStateManager> zapewnienie różnych logiki przejścia między stanami. Na przykład można zmienić logiki opisanych powyżej, lub można zapewnić logikę w celu przejścia między typami animacji niestandardowej.  Aby zaimplementować <xref:System.Windows.VisualStateManager>, utworzyć klasę, która dziedziczy z <xref:System.Windows.VisualStateManager> i zastąpić <xref:System.Windows.VisualStateManager.GoToStateCore%2A> metody. Aby użyć niestandardowej klasy, ustaw <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A> właściwość do obiektu typu niestandardowego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanged">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanged (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanged(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanged (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanged(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberSignature Language="F#" Value="member this.RaiseCurrentStateChanged : System.Windows.VisualStateGroup * System.Windows.VisualState * System.Windows.VisualState * System.Windows.FrameworkElement * System.Windows.FrameworkElement -&gt; unit" Usage="visualStateManager.RaiseCurrentStateChanged (stateGroup, oldState, newState, control, stateGroupsRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup">Obiekt, <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> zdarzenie.</param>
        <param name="oldState">Stan, który przechodzi z formantu.</param>
        <param name="newState">Stan formantu są przenoszone do.</param>
        <param name="control">Kontrolka, która są przenoszone do stanów.</param>
        <param name="stateGroupsRoot">Element główny, który zawiera <see cref="T:System.Windows.VisualStateManager" />.</param>
        <summary>Wywołuje <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> zdarzeń na określonym <see cref="T:System.Windows.VisualStateGroup" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Windows.VisualStateGroup> jest ustawiona na <xref:System.Windows.Controls.ControlTemplate> kontrolki, `control` parametr jest ustawiony na formant, który jest właścicielem <xref:System.Windows.Controls.ControlTemplate>.  Gdy <xref:System.Windows.VisualStateGroup> jest ustawiona na <xref:System.Windows.FrameworkElement>, `control` jest `null` i należy używać `stateGroupsRoot` parametru.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stateGroupsRoot" /> jest <see langword="null" />.  - lub - <paramref name="newState" /> jest <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Podczas zastępowania <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> w klasie pochodnej, pamiętaj wywołać klasy bazowej <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> metody, która zarejestrowana delegaci otrzymają zdarzenie.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanging">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanging (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanging(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanging (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanging(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberSignature Language="F#" Value="member this.RaiseCurrentStateChanging : System.Windows.VisualStateGroup * System.Windows.VisualState * System.Windows.VisualState * System.Windows.FrameworkElement * System.Windows.FrameworkElement -&gt; unit" Usage="visualStateManager.RaiseCurrentStateChanging (stateGroup, oldState, newState, control, stateGroupsRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup">Obiekt, <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> zdarzenie.</param>
        <param name="oldState">Stan, który przechodzi z formantu.</param>
        <param name="newState">Stan formantu są przenoszone do.</param>
        <param name="control">Kontrolka, która są przenoszone do stanów.</param>
        <param name="stateGroupsRoot">Element główny, który zawiera <see cref="T:System.Windows.VisualStateManager" />.</param>
        <summary>Wywołuje <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> zdarzeń na określonym <see cref="T:System.Windows.VisualStateGroup" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Windows.VisualStateGroup> jest ustawiona na <xref:System.Windows.Controls.ControlTemplate> kontrolki, `control` parametr jest ustawiony na formant, który jest właścicielem <xref:System.Windows.Controls.ControlTemplate>.  Gdy <xref:System.Windows.VisualStateGroup> jest ustawiona na <xref:System.Windows.FrameworkElement>, `control` jest `null` i należy używać `stateGroupsRoot` parametru.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stateGroupsRoot" /> jest <see langword="null" />.  - lub - <paramref name="newState" /> jest <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Podczas zastępowania <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> w klasie pochodnej, pamiętaj wywołać klasy bazowej <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> metody, która zarejestrowana delegaci otrzymają zdarzenie.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static void SetCustomVisualStateManager (System.Windows.FrameworkElement obj, System.Windows.VisualStateManager value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCustomVisualStateManager(class System.Windows.FrameworkElement obj, class System.Windows.VisualStateManager value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.SetCustomVisualStateManager(System.Windows.FrameworkElement,System.Windows.VisualStateManager)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCustomVisualStateManager (obj As FrameworkElement, value As VisualStateManager)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj, System::Windows::VisualStateManager ^ value);" />
      <MemberSignature Language="F#" Value="static member SetCustomVisualStateManager : System.Windows.FrameworkElement * System.Windows.VisualStateManager -&gt; unit" Usage="System.Windows.VisualStateManager.SetCustomVisualStateManager (obj, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
        <Parameter Name="value" Type="System.Windows.VisualStateManager" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do ustawienia właściwości dla elementu.</param>
        <param name="value">Menedżer stanu wizualnego, który przechodzi między Stanami formantu.</param>
        <summary>Zestawy <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> dołączona właściwość.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStateGroupsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisualStateGroupsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisualStateGroupsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisualStateGroupsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisualStateGroupsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisualStateGroupsProperty : System.Windows.DependencyProperty" Usage="System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>