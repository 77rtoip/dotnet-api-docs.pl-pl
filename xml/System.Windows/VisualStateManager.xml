<Type Name="VisualStateManager" FullName="System.Windows.VisualStateManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="98168fe8a5962d9aba67f7eb67ddd708a69e45ce" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69432794" /></Metadata><TypeSignature Language="C#" Value="public class VisualStateManager : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualStateManager extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualStateManager" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualStateManager&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualStateManager : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualStateManager = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zarządza stanami i logiką przejścia między Stanami dla kontrolek.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualStateManager> Pozwala określić Stany dla kontrolki, wygląd kontrolki, gdy znajduje się ona w określonym stanie, a gdy kontrolka zmienia Stany. Na przykład <xref:System.Windows.Controls.Button> może mieć nieco inny wygląd, gdy zostanie naciśnięty, gdy nie jest wciśnięty. Dwa stany, które <xref:System.Windows.Controls.Button> odpowiadają, gdy jest wciśnięty (`"Pressed"`) i gdy nie jest (`"Normal"`). Wygląd formantu, gdy jest on w stanie, jest definiowany przez <xref:System.Windows.VisualState>. A <xref:System.Windows.VisualState> zawiera<xref:System.Windows.Media.Animation.Storyboard> kolekcję obiektów, która określa wygląd wyglądu kontrolki, gdy kontrolka jest w tym stanie. Aby dodać Stany wizualne do kontrolki, należy ustawić `VisualStateManager.VisualStateGroups` przyłączoną właściwość formantu. Każda <xref:System.Windows.VisualStateGroup> z<xref:System.Windows.VisualState> nich zawiera kolekcję obiektów, które wzajemnie się wykluczają. Oznacza to, że formant jest zawsze w dokładnie jednym stanie w każdym z <xref:System.Windows.VisualStateGroup>nich.  
  
 Umożliwia <xref:System.Windows.VisualStateManager> również określenie, kiedy kontrolka przechodzi do określonego stanu. Metoda, która ma zostać wywołana w celu zmiany stanu, zależy od danego scenariusza. Jeśli utworzysz kontrolkę, która używa <xref:System.Windows.VisualStateManager> w niej <xref:System.Windows.Controls.ControlTemplate>, wywołaj <xref:System.Windows.VisualStateManager.GoToState%2A> metodę. Aby uzyskać więcej informacji na temat sposobu tworzenia formantów, które <xref:System.Windows.VisualStateManager>korzystają z, zobacz [Tworzenie kontrolki, która ma dostosowywalny wygląd](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md). <xref:System.Windows.VisualStateManager> <xref:System.Windows.VisualStateManager.GoToElementState%2A> <xref:System.Windows.Controls.UserControl> Jeśli używasz <xref:System.Windows.Controls.ControlTemplate> poza (na przykład jeśli używasz elementu a lub w pojedynczym elemencie), wywołaj metodę. <xref:System.Windows.VisualStateManager> W obu przypadkach <xref:System.Windows.VisualStateManager> wykonuje logikę, która jest wymagana do odpowiedniego uruchamiania i zatrzymywania scenorysów, które są skojarzone z danym stanem. Załóżmy na przykład, że formant definiuje Stany `State1` i `State2`, z których każdy ma skojarzony scenorys. Jeśli formant znajduje się w `State1` i przejdziesz <xref:System.Windows.VisualStateManager.GoToState%2A> `State2` do <xref:System.Windows.VisualStateManager.GoToElementState%2A>lub, <xref:System.Windows.VisualStateManager> uruchamia scenorys w `State2` i zatrzyma scenorys w `State1`.  
  
 Kontrolki, które są [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] dołączone przy <xref:System.Windows.VisualStateManager> użyciu, służą do zmiany Stanów wizualnych. Podczas tworzenia <xref:System.Windows.Controls.ControlTemplate> dla kontrolki, która jest [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]dołączona do, można dodać <xref:System.Windows.VisualState> obiekty do kontrolki <xref:System.Windows.Controls.ControlTemplate> , aby określić wygląd kontrolki w określonym stanie. Aby znaleźć nazwy stanów wizualnych dla formantów, które są dołączone do [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], zobacz [Style i szablony kontrolek](~/docs/framework/wpf/controls/control-styles-and-templates.md). Logika kontrolki obsługuje przejście między Stanami, więc nie trzeba wykonywać żadnych innych czynności niż definiować <xref:System.Windows.VisualState> obiekty w nowym. <xref:System.Windows.Controls.ControlTemplate> Aby uzyskać więcej informacji na temat sposobu tworzenia szablonów formantów dla istniejących kontrolek, zobacz [Dostosowywanie wyglądu istniejącej kontrolki przez utworzenie ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
 Jeśli chcesz zaimplementować własną logikę przechodzenia między Stanami, musisz dziedziczyć z <xref:System.Windows.VisualStateManager>, <xref:System.Windows.VisualStateManager.GoToStateCore%2A> zastąpić <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A?displayProperty=nameWithType> metodę i ustawić właściwość dołączoną w kontrolce używającej logiki niestandardowej.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Shapes.Rectangle> i <xref:System.Windows.VisualStateGroup> dodaje nazwę `CommonStates` do `VisualStateManager.VisualStatesGroups` dołączonej właściwości. W przykładzie zdefiniowano `MouseOver` obiekty `Normal` i <xref:System.Windows.VisualState> w `CommonStates` .<xref:System.Windows.VisualStateGroup> Gdy użytkownik przesuwa wskaźnik myszy nad <xref:System.Windows.Shapes.Rectangle>, zmieni się z czerwony na zielony w ciągu jednej połowy sekundy. Gdy użytkownik przesunie mysz z prostokąta, <xref:System.Windows.Controls.Grid> natychmiast zmieni się z powrotem na czerwony. Należy pamiętać, `Normal` że stan nie <xref:System.Windows.Media.Animation.Storyboard>definiuje. Element <xref:System.Windows.Media.Animation.Storyboard> nie jest wymagany, ponieważ `MouseOver` `Normal` <xref:System.Windows.Shapes.Rectangle> gdy przejścia ze `MouseOver` stanu są przenoszone do <xref:System.Windows.Media.Animation.Storyboard> <xref:System.Windows.Media.SolidColorBrush.Color%2A> stanu, jest ono zatrzymane i właściwość zwraca <xref:System.Windows.Media.SolidColorBrush> na czerwony.  
  
 [!code-xaml[VSMCustomControl#VSMNoTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml#vsmnotemplate)]  
  
 Poniższy przykład pokazuje procedurę obsługi zdarzeń, która jest zdefiniowana w poprzednim przykładzie, i wywołuje <xref:System.Windows.VisualStateManager.GoToElementState%2A> metodę w celu przejścia między Stanami. Jeśli prostokąt w poprzednim przykładzie był częścią <xref:System.Windows.Controls.ControlTemplate>obiektu, przykładem może być <xref:System.Windows.VisualStateManager.GoToState%2A> wywołanie metody.  
  
 [!code-csharp[VSMCustomControl#GoToElementState](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml.cs#gotoelementstate)]
 [!code-vb[VSMCustomControl#GoToElementState](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/window1.xaml.vb#gotoelementstate)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualStateManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualStateManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.VisualStateManager" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManager">
      <MemberSignature Language="C#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="ILAsm" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateManager.CustomVisualStateManager" />
      <MemberSignature Language="VB.NET" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="F#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" Usage="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Windows.VisualStateManager" /> obiekt, który przechodzi między Stanami formantu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A> jest `null` ,<xref:System.Windows.VisualStateManager> używa własnej logiki do przejścia między Stanami. Jeśli chcesz zaimplementować własną logikę przejścia między Stanami, Utwórz klasę, która dziedziczy z <xref:System.Windows.VisualStateManager> i <xref:System.Windows.VisualStateManager.GoToStateCore%2A> zastąpi metodę. Aby użyć klasy niestandardowej, należy ustawić <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A> właściwość na obiekt typu niestandardowego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManagerProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomVisualStateManagerProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomVisualStateManagerProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomVisualStateManagerProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomVisualStateManagerProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomVisualStateManagerProperty : System.Windows.DependencyProperty" Usage="System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static System.Windows.VisualStateManager GetCustomVisualStateManager (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.VisualStateManager GetCustomVisualStateManager(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetCustomVisualStateManager(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomVisualStateManager (obj As FrameworkElement) As VisualStateManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::VisualStateManager ^ GetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetCustomVisualStateManager : System.Windows.FrameworkElement -&gt; System.Windows.VisualStateManager" Usage="System.Windows.VisualStateManager.GetCustomVisualStateManager obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VisualStateManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj">Element, z którego ma <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> zostać pobrana dołączona właściwość.</param>
        <summary><see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> Pobiera dołączoną właściwość.</summary>
        <returns>Menedżer stanu wizualnego, który przechodzi między Stanami formantu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVisualStateGroups">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetVisualStateGroups (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetVisualStateGroups(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetVisualStateGroups(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetVisualStateGroups (obj As FrameworkElement) As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetVisualStateGroups(System::Windows::FrameworkElement ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetVisualStateGroups : System.Windows.FrameworkElement -&gt; System.Collections.IList" Usage="System.Windows.VisualStateManager.GetVisualStateGroups obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj">Element, z którego ma <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> zostać pobrana dołączona właściwość.</param>
        <summary><see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> Pobiera dołączoną właściwość.</summary>
        <returns>Kolekcja <see cref="T:System.Windows.VisualStateGroup" /> obiektów, która jest skojarzona z określonym obiektem.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToElementState">
      <MemberSignature Language="C#" Value="public static bool GoToElementState (System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToElementState(class System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToElementState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToElementState (stateGroupsRoot As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToElementState(System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, bool useTransitions);" />
      <MemberSignature Language="F#" Value="static member GoToElementState : System.Windows.FrameworkElement * string * bool -&gt; bool" Usage="System.Windows.VisualStateManager.GoToElementState (stateGroupsRoot, stateName, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stateGroupsRoot">Element główny, który zawiera <see cref="T:System.Windows.VisualStateManager" />.</param>
        <param name="stateName">Stan, do którego ma zostać przeniesiona.</param>
        <param name="useTransitions"><see langword="true" />Aby użyć <see cref="T:System.Windows.VisualTransition" /> obiektu do przejścia między Stanami; w przeciwnym <see langword="false" />razie,.</param>
        <summary>Przejście elementu między dwoma stanami. Użyj tej metody, aby przejść do Stanów, które są zdefiniowane przez aplikację, a nie zdefiniowanej przez kontrolkę.</summary>
        <returns><see langword="true" />Jeśli formant został pomyślnie przeniesiony do nowego stanu; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.Windows.VisualStateManager.GoToElementState%2A> metodę, aby zmienić Stany elementu poza <xref:System.Windows.Controls.ControlTemplate> (na przykład <xref:System.Windows.VisualStateManager> , jeśli <xref:System.Windows.DataTemplate> używasz elementu a lub <xref:System.Windows.Window>). Wywołaj <xref:System.Windows.VisualStateManager> <xref:System.Windows.Controls.ControlTemplate>metodę, jeśli zmieniasz Stany w kontrolce, która używa w niej elementu. <xref:System.Windows.VisualStateManager.GoToState%2A>  
  
   
  
## Examples  
 Poniższy przykład tworzy aplikację, która będzie monitował użytkownika o odpuszczenie liczby z zakresu od 1 do 100.  Gdy użytkownik wprowadzi liczbę, aplikacja wskazuje, czy wartość argumentu jest zbyt wysoka, zbyt niska czy poprawna.  Poniższe [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] polecenie tworzy interfejs użytkownika dla aplikacji i definiuje 4 Stany: `TooLow`, `TooHigh` `Correct`, i `Guessing`. Gdy aplikacja jest `Guessing` uruchomiona, jest w stanie. .  
  
 [!code-xaml[VSMGoToElementState#GoToElementStateXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml#gotoelementstatexaml)]  
  
 Poniższy kod przedstawia logikę aplikacji.  Gdy użytkownik wprowadzi numer i kliknie <xref:System.Windows.VisualStateManager.GoToElementState%2A> przycisk, aplikacja wywołuje `TooHigh`przejście do, `TooLow`lub `Correct` , aby przekazać użytkownikowi informacje zwrotne o przypuszczenie.  Aby wypróbować ten przykład, `GenerateNumber` Wywołaj metodę po rozpoczęciu aplikacji.  
  
 [!code-csharp[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml.cs#gotoelementstatecode)]
 [!code-vb[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmgotoelementstate/visualbasic/mainwindow.xaml.vb#gotoelementstatecode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="stateName" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToState">
      <MemberSignature Language="C#" Value="public static bool GoToState (System.Windows.FrameworkElement control, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToState(class System.Windows.FrameworkElement control, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToState (control As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToState(System::Windows::FrameworkElement ^ control, System::String ^ stateName, bool useTransitions);" />
      <MemberSignature Language="F#" Value="static member GoToState : System.Windows.FrameworkElement * string * bool -&gt; bool" Usage="System.Windows.VisualStateManager.GoToState (control, stateName, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Kontrolka do przejścia między Stanami.</param>
        <param name="stateName">Stan, do którego ma zostać przeniesiona.</param>
        <param name="useTransitions"><see langword="true" />Aby użyć <see cref="T:System.Windows.VisualTransition" /> obiektu do przejścia między Stanami; w przeciwnym <see langword="false" />razie,.</param>
        <summary>Przechodzi między dwoma stanami kontrolki. Użyj tej metody, aby przejść do Stanów kontroli, <see cref="T:System.Windows.Controls.ControlTemplate" />która ma.</summary>
        <returns><see langword="true" />Jeśli formant został pomyślnie przeniesiony do nowego stanu; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.Windows.VisualStateManager> <xref:System.Windows.Controls.ControlTemplate>metodę, jeśli zmieniasz Stany w kontrolce, która używa w niej elementu. <xref:System.Windows.VisualStateManager.GoToState%2A> Wywołaj <xref:System.Windows.VisualStateManager.GoToElementState%2A> metodę, aby zmienić Stany elementu poza <xref:System.Windows.Controls.ControlTemplate> (na przykład w przypadku użycia <xref:System.Windows.VisualStateManager> w <xref:System.Windows.Controls.UserControl> lub w pojedynczym elemencie).  
  
   
  
## Examples  
 Poniższy przykład ilustruje kontrolkę, która używa <xref:System.Windows.VisualStateManager.GoToState%2A> metody do przejścia między Stanami. Dla całego przykładu, zobacz [Tworzenie kontrolki, która ma dostosowywalny wygląd](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md).  
  
 [!code-csharp[VSMCustomControl#UpdateStates](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/numericupdown.cs#updatestates)]
 [!code-vb[VSMCustomControl#UpdateStates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/numericupdown.vb#updatestates)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="stateName" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToStateCore">
      <MemberSignature Language="C#" Value="protected virtual bool GoToStateCore (System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot, string stateName, System.Windows.VisualStateGroup group, System.Windows.VisualState state, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GoToStateCore(class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot, string stateName, class System.Windows.VisualStateGroup group, class System.Windows.VisualState state, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToStateCore(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.String,System.Windows.VisualStateGroup,System.Windows.VisualState,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GoToStateCore (control As FrameworkElement, stateGroupsRoot As FrameworkElement, stateName As String, group As VisualStateGroup, state As VisualState, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GoToStateCore(System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, System::Windows::VisualStateGroup ^ group, System::Windows::VisualState ^ state, bool useTransitions);" />
      <MemberSignature Language="F#" Value="abstract member GoToStateCore : System.Windows.FrameworkElement * System.Windows.FrameworkElement * string * System.Windows.VisualStateGroup * System.Windows.VisualState * bool -&gt; bool&#xA;override this.GoToStateCore : System.Windows.FrameworkElement * System.Windows.FrameworkElement * string * System.Windows.VisualStateGroup * System.Windows.VisualState * bool -&gt; bool" Usage="visualStateManager.GoToStateCore (control, stateGroupsRoot, stateName, group, state, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="group" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="state" Type="System.Windows.VisualState" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Kontrolka do przejścia między Stanami.</param>
        <param name="stateGroupsRoot">Element główny, który zawiera <see cref="T:System.Windows.VisualStateManager" />.</param>
        <param name="stateName">Nazwa stanu, do którego ma zostać przeniesiona.</param>
        <param name="group"><see cref="T:System.Windows.VisualStateGroup" /> , Do którego należy stan.</param>
        <param name="state">Reprezentacja stanu, do którego ma zostać przeniesiona.</param>
        <param name="useTransitions"><see langword="true" />Aby użyć <see cref="T:System.Windows.VisualTransition" /> obiektu do przejścia między Stanami; w przeciwnym <see langword="false" />razie,.</param>
        <summary>Przechodzi przez formant między Stanami.</summary>
        <returns><see langword="true" />Jeśli formant został pomyślnie przeniesiony do nowego stanu; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualStateManager.GoToStateCore%2A> Metoda wykonuje logikę niezbędną do odpowiednio uruchamiania i zatrzymywania scenorysów, które są skojarzone z przejściem. Gdy kontrolka wywołuje <xref:System.Windows.VisualStateManager.GoToState%2A> zmianę stanu <xref:System.Windows.VisualStateManager> , wykonuje następujące czynności:  
  
-   Po pierwsze, jeśli <xref:System.Windows.VisualState> kontrolka przeszedł do <xref:System.Windows.Media.Animation.Storyboard>ma, rozpocznie się tworzenie scenorysu. Następnie, jeśli <xref:System.Windows.VisualState> formant pochodzi z elementu <xref:System.Windows.Media.Animation.Storyboard>ma, kończy się scenorys.  
  
-   Jeśli formant jest już w `stateName` stanie, <xref:System.Windows.VisualStateManager.GoToState%2A> nie przyjmuje żadnej akcji ani nie zwraca `true`.  
  
-   Jeśli `stateName` nie istnieje <xref:System.Windows.Controls.ControlTemplate> w `control`, `false`nie przyjmuje żadnej akcji ani nie zwraca. <xref:System.Windows.VisualStateManager.GoToState%2A>  
  
 Można zaimplementować własne <xref:System.Windows.VisualStateManager> , aby zapewnić różne logikę przejścia między Stanami. Na przykład można zmienić opisanej wcześniej logikę lub można zapewnić przechodzenie między niestandardowymi typami animacji.  Aby zaimplementować obiekt <xref:System.Windows.VisualStateManager>, należy utworzyć klasę, która dziedziczy <xref:System.Windows.VisualStateManager> z i przesłania <xref:System.Windows.VisualStateManager.GoToStateCore%2A> metodę. Aby użyć klasy niestandardowej, należy ustawić <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A> właściwość na obiekt typu niestandardowego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanged">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanged (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanged(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanged (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanged(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberSignature Language="F#" Value="member this.RaiseCurrentStateChanged : System.Windows.VisualStateGroup * System.Windows.VisualState * System.Windows.VisualState * System.Windows.FrameworkElement * System.Windows.FrameworkElement -&gt; unit" Usage="visualStateManager.RaiseCurrentStateChanged (stateGroup, oldState, newState, control, stateGroupsRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup">Obiekt, na którym <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> wystąpiło zdarzenie.</param>
        <param name="oldState">Stan, z którego przechodzi formant.</param>
        <param name="newState">Stan, do którego jest przenoszony formant.</param>
        <param name="control">Formant, który przechodzi przez Stany.</param>
        <param name="stateGroupsRoot">Element główny, który zawiera <see cref="T:System.Windows.VisualStateManager" />.</param>
        <summary>Podnosi zdarzenie do określonego <see cref="T:System.Windows.VisualStateGroup" /> obiektu. <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy jest ustawiona <xref:System.Windows.Controls.ControlTemplate> na kontrolce, `control` parametr jest ustawiany na kontrolkę, która jest właścicielem <xref:System.Windows.Controls.ControlTemplate>. <xref:System.Windows.VisualStateGroup>  <xref:System.Windows.FrameworkElement> `control` Gdy jest ustawiona na, `stateGroupsRoot` jest inależyużyćparametru`null`. <xref:System.Windows.VisualStateGroup>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="newState" />jest <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> klasy pochodnej należy wywołać <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> metodę klasy bazowej, aby zarejestrowani pełnomocnicy otrzymywali zdarzenie.</para></block>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanging">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanging (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanging(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanging (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanging(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberSignature Language="F#" Value="member this.RaiseCurrentStateChanging : System.Windows.VisualStateGroup * System.Windows.VisualState * System.Windows.VisualState * System.Windows.FrameworkElement * System.Windows.FrameworkElement -&gt; unit" Usage="visualStateManager.RaiseCurrentStateChanging (stateGroup, oldState, newState, control, stateGroupsRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup">Obiekt, na którym <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> wystąpiło zdarzenie.</param>
        <param name="oldState">Stan, z którego przechodzi formant.</param>
        <param name="newState">Stan, do którego jest przenoszony formant.</param>
        <param name="control">Formant, który przechodzi przez Stany.</param>
        <param name="stateGroupsRoot">Element główny, który zawiera <see cref="T:System.Windows.VisualStateManager" />.</param>
        <summary>Podnosi zdarzenie do określonego <see cref="T:System.Windows.VisualStateGroup" /> obiektu. <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy jest ustawiona <xref:System.Windows.Controls.ControlTemplate> na kontrolce, `control` parametr jest ustawiany na kontrolkę, która jest właścicielem <xref:System.Windows.Controls.ControlTemplate>. <xref:System.Windows.VisualStateGroup>  <xref:System.Windows.FrameworkElement> `control` Gdy jest ustawiona na, `stateGroupsRoot` jest inależyużyćparametru`null`. <xref:System.Windows.VisualStateGroup>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="newState" />jest <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> klasy pochodnej należy wywołać <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> metodę klasy bazowej, aby zarejestrowani pełnomocnicy otrzymywali zdarzenie.</para></block>
      </Docs>
    </Member>
    <Member MemberName="SetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static void SetCustomVisualStateManager (System.Windows.FrameworkElement obj, System.Windows.VisualStateManager value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCustomVisualStateManager(class System.Windows.FrameworkElement obj, class System.Windows.VisualStateManager value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.SetCustomVisualStateManager(System.Windows.FrameworkElement,System.Windows.VisualStateManager)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCustomVisualStateManager (obj As FrameworkElement, value As VisualStateManager)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj, System::Windows::VisualStateManager ^ value);" />
      <MemberSignature Language="F#" Value="static member SetCustomVisualStateManager : System.Windows.FrameworkElement * System.Windows.VisualStateManager -&gt; unit" Usage="System.Windows.VisualStateManager.SetCustomVisualStateManager (obj, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
        <Parameter Name="value" Type="System.Windows.VisualStateManager" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt, dla którego ma zostać ustawiona właściwość.</param>
        <param name="value">Menedżer stanu wizualnego, który przechodzi między Stanami formantu.</param>
        <summary><see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> Ustawia przyłączoną właściwość.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStateGroups">
      <MemberSignature Language="C#" Value="see GetVisualStateGroups" />
      <MemberSignature Language="ILAsm" Value="see GetVisualStateGroups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateManager.VisualStateGroups" />
      <MemberSignature Language="VB.NET" Value="see GetVisualStateGroups" />
      <MemberSignature Language="F#" Value="see GetVisualStateGroups" Usage="see GetVisualStateGroups" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera lub ustawia kolekcję <see cref="T:System.Windows.VisualStateGroup" /> obiektów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
 
## Remarks  
 Każda <xref:System.Windows.VisualStateGroup> z<xref:System.Windows.VisualState> nich zawiera kolekcję obiektów. A <xref:System.Windows.VisualState> zawiera<xref:System.Windows.Media.Animation.Storyboard> kolekcję obiektów, które określają, jak wygląd kontrolki zmienia się, gdy kontrolka jest w określonym stanie. Na przykład <xref:System.Windows.Controls.Button> może mieć nieco inny wygląd, gdy zostanie naciśnięty, gdy nie jest wciśnięty. Dwa stany, które <xref:System.Windows.Controls.Button> odpowiadają, gdy jest wciśnięty (`"Pressed"`) i gdy nie jest (`"Normal"`).  
  
 Dodaj <xref:System.Windows.VisualState> do kontrolki, <xref:System.Windows.VisualStateManager.VisualStateGroups%2A> ustawiając właściwość dołączoną formantu. Należy umieścić Stany, które wzajemnie się wykluczają w ten sam <xref:System.Windows.VisualStateGroup>sposób. Na przykład <xref:System.Windows.Controls.CheckBox> ma dwa <xref:System.Windows.VisualStateGroup> obiekty. Jeden z nich zawiera Stany `Normal`, `MouseOver`, `Pressed`, i `Disabled`. Drugi zawiera Stany, `Checked`, `UnChecked`i `Indeterminate`. `UnChecked` `MouseOver` `Pressed` `MouseOver` Może znajdować się w Stanach i w tym samym czasie, ale nie może być jednocześnie w Stanach i. <xref:System.Windows.Controls.CheckBox>  
  
 Mimo że można dodawać <xref:System.Windows.VisualState> obiekty do dowolnego elementu, są one szczególnie przydatne, aby umożliwić innym osobom ponowne zdefiniowanie wizualnego zachowania <xref:System.Windows.Controls.Control>. Jeśli utworzysz kontrolkę niestandardową <xref:System.Windows.Controls.ControlTemplate>, która używa, możesz określić, które Stany mogą znajdować się w, <xref:System.Windows.TemplateVisualStateAttribute> dodając do jego definicji klasy. Następnie każda osoba, która tworzy <xref:System.Windows.Controls.ControlTemplate> nową kontrolkę, może <xref:System.Windows.VisualState> dodawać obiekty do szablonu. Stany o tej samej <xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=fullName> przynależności należy do tego <xref:System.Windows.VisualStateGroup>samego.  
  
 Aby uzyskać więcej informacji o sposobach <xref:System.Windows.VisualStateGroup> używania obiektów <xref:System.Windows.Controls.ControlTemplate>w, zobacz [Dostosowywanie wyglądu istniejącej kontrolki przez utworzenie ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md). Aby uzyskać więcej informacji na temat sposobu tworzenia formantów, które <xref:System.Windows.VisualStateManager>korzystają z, zobacz [Tworzenie kontrolki, która ma dostosowywalny wygląd](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md).  
     
## Examples  
 Poniższy przykład tworzy prostą <xref:System.Windows.Controls.ControlTemplate> dla elementu <xref:System.Windows.Controls.Button> , który zawiera jeden <xref:System.Windows.Controls.Grid>. Zawiera <xref:System.Windows.VisualStateGroup> on również nazwę `CommonStates`, która definiuje `MouseOver` Stany i `Normal` . Ma także, że w przypadku, gdy użytkownik przesuwa wskaźnik myszy nad <xref:System.Windows.Controls.Button>elementu <xref:System.Windows.Controls.Grid> , przyjmuje jedną połowę sekund na zmianę z zielonej na czerwony. <xref:System.Windows.VisualTransition> <xref:System.Windows.VisualStateGroup>  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStateGroupsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisualStateGroupsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisualStateGroupsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisualStateGroupsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisualStateGroupsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisualStateGroupsProperty : System.Windows.DependencyProperty" Usage="System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
