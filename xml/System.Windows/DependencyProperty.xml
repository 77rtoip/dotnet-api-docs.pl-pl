<Type Name="DependencyProperty" FullName="System.Windows.DependencyProperty">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f9af7c7588dee4a02565170423aec4646b42e947" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37550312" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependencyProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyProperty" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyProperty sealed" />
  <TypeSignature Language="F#" Value="type DependencyProperty = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="fa05c-101">Reprezentuje właściwość, którą można ustawić za pomocą metody takie jak, stylów, powiązań danych, animacji i dziedziczenia.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fa05c-101">Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-102">A <xref:System.Windows.DependencyProperty> obsługuje następujące funkcje w [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span><span class="sxs-lookup"><span data-stu-id="fa05c-102">A <xref:System.Windows.DependencyProperty> supports the following capabilities in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span></span>  
  
-   <span data-ttu-id="fa05c-103">Właściwość można ustawić w stylu.</span><span class="sxs-lookup"><span data-stu-id="fa05c-103">The property can be set in a style.</span></span> <span data-ttu-id="fa05c-104">Aby uzyskać więcej informacji, zobacz [Tworzenie szablonów i stylów](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-104">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
-   <span data-ttu-id="fa05c-105">Właściwość można ustawić za pomocą powiązania danych.</span><span class="sxs-lookup"><span data-stu-id="fa05c-105">The property can be set through data binding.</span></span> <span data-ttu-id="fa05c-106">Aby uzyskać więcej informacji na temat właściwości zależności powiązania danych, zobacz [porady: powiązywanie właściwości dwóch formantów](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-106">For more information about data binding dependency properties, see [How to: Bind the Properties of Two Controls](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span></span>  
  
-   <span data-ttu-id="fa05c-107">Można ustawić właściwości z odwołaniem do zasobu dynamicznego.</span><span class="sxs-lookup"><span data-stu-id="fa05c-107">The property can be set with a dynamic resource reference.</span></span> <span data-ttu-id="fa05c-108">Aby uzyskać więcej informacji, zobacz [zasoby XAML](~/docs/framework/wpf/advanced/xaml-resources.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-108">For more information, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
-   <span data-ttu-id="fa05c-109">Właściwości mogą dziedziczyć wartość automatycznie elementu nadrzędnego w drzewie elementów.</span><span class="sxs-lookup"><span data-stu-id="fa05c-109">The property can inherit its value automatically from a parent element in the element tree.</span></span> <span data-ttu-id="fa05c-110">Aby uzyskać więcej informacji, zobacz [dziedziczenie wartości właściwości](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-110">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
-   <span data-ttu-id="fa05c-111">Właściwości mogą być animowane.</span><span class="sxs-lookup"><span data-stu-id="fa05c-111">The property can be animated.</span></span> <span data-ttu-id="fa05c-112">Aby uzyskać więcej informacji, zobacz [Przegląd animacja](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-112">For more information, see [Animation Overview](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span></span>  
  
-   <span data-ttu-id="fa05c-113">Właściwość może zgłaszać, gdy poprzednią wartość właściwości została zmieniona i wartość właściwości może być przekształcone.</span><span class="sxs-lookup"><span data-stu-id="fa05c-113">The property can report when the previous value of the property has been changed and the property value can be coerced.</span></span> <span data-ttu-id="fa05c-114">Aby uzyskać więcej informacji, zobacz [zależność wartości wywołania zwrotnego i walidacji](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-114">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
-   <span data-ttu-id="fa05c-115">Właściwość raporty informacji [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], takie jak czy zmiana wartości właściwości powinny wymagać system układu, aby przeskładać wizualizacji dla elementu.</span><span class="sxs-lookup"><span data-stu-id="fa05c-115">The property reports information to [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], such as whether changing a property value should require the layout system to recompose the visuals for an element.</span></span>  
  
-   <span data-ttu-id="fa05c-116">Właściwość odbiera pomocy technicznej w [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span><span class="sxs-lookup"><span data-stu-id="fa05c-116">The property receives support in the [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span></span>  <span data-ttu-id="fa05c-117">Na przykład, właściwości mogą być edytowane w **właściwości** okna.</span><span class="sxs-lookup"><span data-stu-id="fa05c-117">For example, the property can be edited in the **Properties** window.</span></span>  
  
 <span data-ttu-id="fa05c-118">Aby dowiedzieć się więcej na temat właściwości zależności, zobacz [Przegląd właściwości zależności](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-118">To learn more about dependency properties, see [Dependency Properties Overview](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span></span> <span data-ttu-id="fa05c-119">Jeśli chcesz właściwości w niestandardowych typów do obsługi funkcji na powyższej liście, należy utworzyć właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-119">If you want properties on your custom types to support the capabilities in the preceding list, you should create a dependency property.</span></span>  <span data-ttu-id="fa05c-120">Aby dowiedzieć się, jak utworzyć niestandardowe właściwości zależności, zobacz [niestandardowe właściwości zależności](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-120">To learn how to create custom dependency properties, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="fa05c-121">Dołączona właściwość jest właściwością, która umożliwia dowolnego obiektu, do informacji w raporcie na typ, który definiuje dołączona właściwość.</span><span class="sxs-lookup"><span data-stu-id="fa05c-121">An attached property is a property that enables any object to report information to the type that defines the attached property.</span></span> <span data-ttu-id="fa05c-122">W [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], dowolny typ, który dziedziczy z <xref:System.Windows.DependencyObject> służy dołączoną właściwość niezależnie od tego, czy typ dziedziczy z typu, który definiuje właściwość.</span><span class="sxs-lookup"><span data-stu-id="fa05c-122">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], any type that inherits from <xref:System.Windows.DependencyObject> can use an attached property regardless of whether the type inherits from the type that defines the property.</span></span> <span data-ttu-id="fa05c-123">Dołączona właściwość jest funkcją [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] języka.</span><span class="sxs-lookup"><span data-stu-id="fa05c-123">An attached property is a feature of the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language.</span></span>  <span data-ttu-id="fa05c-124">Aby ustawić dołączoną właściwość [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], użyj *ownerType*.* propertyName* składni.</span><span class="sxs-lookup"><span data-stu-id="fa05c-124">To set an attached property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], use the *ownerType*.*propertyName* syntax.</span></span> <span data-ttu-id="fa05c-125">Na przykład dołączoną właściwość <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="fa05c-125">An example of an attached property is the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="fa05c-126">Jeśli chcesz utworzyć właściwości, które mogą być używane na wszystkich <xref:System.Windows.DependencyObject> typów, a następnie należy utworzyć dołączona właściwość.</span><span class="sxs-lookup"><span data-stu-id="fa05c-126">If you want to create a property that can be used on all <xref:System.Windows.DependencyObject> types, then you should create an attached property.</span></span> <span data-ttu-id="fa05c-127">Aby dowiedzieć się więcej na temat dołączonych właściwości, takie jak, utworzyć zobacz [Przegląd właściwości dołączonych](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-127">To learn more about attached properties, including how to create them, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
<a name="xamlAttributeUsage_DependencyProperty"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="fa05c-128">Użycie atrybutu języka XAML</span><span class="sxs-lookup"><span data-stu-id="fa05c-128">XAML Attribute Usage</span></span>  
  
```  
<object property="dependencyPropertyName"/>  
- or -  
<object property="ownerType.dependencyPropertyName"/>  
- or -  
<object property="attachedPropertyOwnerType.attachedPropertyName"/>  
```  
  
<a name="xamlValues_DependencyProperty"></a>   
## <a name="xaml-values"></a><span data-ttu-id="fa05c-129">Wartości XAML</span><span class="sxs-lookup"><span data-stu-id="fa05c-129">XAML Values</span></span>  
 `dependencyPropertyName`  
 <span data-ttu-id="fa05c-130">Ciąg, który określa <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> właściwości żądaną zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-130">A string that specifies the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> of the desired dependency property.</span></span> <span data-ttu-id="fa05c-131">To może być poprzedzona przez prefiks przestrzeni nazw XML, jeśli właściwość nie jest domyślny obszar nazw XML (Aby uzyskać więcej informacji, zobacz [przestrzeni nazw XAML i Namespace mapowania dla WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span><span class="sxs-lookup"><span data-stu-id="fa05c-131">This can be preceded by an XML namespace prefix if the property is not in the default XML namespace (for details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span></span>  
  
 <span data-ttu-id="fa05c-132">`ownerType`.`dependencyPropertyName`</span><span class="sxs-lookup"><span data-stu-id="fa05c-132">`ownerType`.`dependencyPropertyName`</span></span>  
 <span data-ttu-id="fa05c-133">Ciąg określający typ właściciela właściwości zależności, kropka (.), a następnie <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-133">A string that specifies an owner type of a dependency property, a dot (.), then the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="fa05c-134">`ownerType` może być poprzedzone prefiks przestrzeni nazw XML.</span><span class="sxs-lookup"><span data-stu-id="fa05c-134">`ownerType` can also be preceded by an XML namespace prefix.</span></span> <span data-ttu-id="fa05c-135">Na z późnym wiązaniem — style i szablony, w którym należy określić właściciela właściwości zależności do analizowania kontekstu, ponieważ jest to użycie `TargetType` nie jest jeszcze znany.</span><span class="sxs-lookup"><span data-stu-id="fa05c-135">This usage is particular to late-bound styles and templates, where the owner of the dependency property must be specified for parsing context because the `TargetType` is not yet known.</span></span> <span data-ttu-id="fa05c-136">Aby uzyskać więcej informacji, zobacz [Tworzenie szablonów i stylów](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-136">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
 <span data-ttu-id="fa05c-137">`attachedPropertyOwnerType` *.*</span><span class="sxs-lookup"><span data-stu-id="fa05c-137">`attachedPropertyOwnerType` *.*</span></span> `attachedPropertyName`  
 <span data-ttu-id="fa05c-138">Ciąg, który określa właściciela dołączoną właściwość, kropki (.), a następnie nazwę dołączonych właściwości.</span><span class="sxs-lookup"><span data-stu-id="fa05c-138">A string that specifies  the owner of an attached property, a dot (.), then the attached property name.</span></span> <span data-ttu-id="fa05c-139">`attachedPropertyOwnerType` może być poprzedzone prefiks przestrzeni nazw XML.</span><span class="sxs-lookup"><span data-stu-id="fa05c-139">`attachedPropertyOwnerType` can also be preceded by an XML namespace prefix.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AddOwner">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fa05c-140">Dodaje inny typ jako właściciele właściwości zależności, który został już zarejestrowany do typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-140">Adds another type as an owner of a dependency property that has already been registered to a type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="fa05c-141">Typ do dodania jako właściciela tej właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-141">The type to add as an owner of this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-142">Dodaje inny typ jako właściciele właściwości zależności, który został już zarejestrowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-142">Adds another type as an owner of a dependency property that has already been registered.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-143">Odwołanie do oryginalnego <see cref="T:System.Windows.DependencyProperty" /> identyfikator, który identyfikuje właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-143">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          </span>
          <span data-ttu-id="fa05c-144">Ten identyfikator powinny zostać ujawnione przez dodanie klasę jako <see langword="public static readonly" /> pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-144">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-145">Ta metoda umożliwia systemowi właściwości do rozpoznania właściwości zależności typu, który nie zarejestrował początkowo tej właściwości określonej zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-145">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="fa05c-146">Zazwyczaj <xref:System.Windows.DependencyProperty.AddOwner%2A> służy do dodawania właściwości zależności do klas, które nie udostępniają już tę właściwość zależności za pomocą dziedziczenia klas zarządzanych (dziedziczenia klas spowodowałoby właściwości otoki, aby być dziedziczone przez klasy pochodnej, dlatego czy zapewniają ogólne tabeli składowych dostęp do właściwości zależności już).</span><span class="sxs-lookup"><span data-stu-id="fa05c-146">Typically, <xref:System.Windows.DependencyProperty.AddOwner%2A> is used to add dependency properties to classes that do not already expose that dependency property through managed class inheritance (class inheritance would cause the wrapper properties to be inherited by the derived class, and thus would provide general members-table access to the dependency property already).</span></span> <span data-ttu-id="fa05c-147"><xref:System.Windows.DependencyProperty.AddOwner%2A> Umożliwia systemowi właściwości do rozpoznania właściwości zależności typu, który nie zarejestrował początkowo tę właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-147"><xref:System.Windows.DependencyProperty.AddOwner%2A> enables the property system to recognize a dependency property on a type that did not register that dependency property initially.</span></span>  
  
 <span data-ttu-id="fa05c-148">Ta sygnatura nie zezwala na określanie metadanych.</span><span class="sxs-lookup"><span data-stu-id="fa05c-148">This signature does not allow for specifying metadata.</span></span>  <span data-ttu-id="fa05c-149">Gdy ta metoda metadanych jest generowany automatycznie dla nowego <xref:System.Windows.DependencyProperty> i jego typ właściciela.</span><span class="sxs-lookup"><span data-stu-id="fa05c-149">When you use this method, the metadata is automatically generated for the new <xref:System.Windows.DependencyProperty> and its owner type.</span></span> <span data-ttu-id="fa05c-150">Wygenerowany automatycznie metadanych jest wynikiem metadanych scalony ze wszystkich typów podstawowych, które mają ta właściwość jest zdefiniowana.</span><span class="sxs-lookup"><span data-stu-id="fa05c-150">The auto-generated metadata is the result of the merged metadata from all of the base types that have this property defined.</span></span> <span data-ttu-id="fa05c-151">Jeśli brak scalonych metadanych nie jest dostępny, metadane domyślną dla właściwości jest używany.</span><span class="sxs-lookup"><span data-stu-id="fa05c-151">If no merged metadata is available, then the default metadata for the property is used.</span></span> <span data-ttu-id="fa05c-152">Jeśli właściwość jest zarejestrowana za pomocą <xref:System.Windows.DependencyProperty.RegisterAttached%2A> metody, a następnie metadanych domyślny jest taka sama jak metadane, który jest tworzony podczas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> została wywołana.</span><span class="sxs-lookup"><span data-stu-id="fa05c-152">If the property is registered by using the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, then the default metadata is the same as the metadata that is created when <xref:System.Windows.DependencyProperty.RegisterAttached%2A> was called.</span></span> <span data-ttu-id="fa05c-153">W przeciwnym razie <xref:System.Windows.PropertyMetadata> obiekt zostanie utworzony przy użyciu <xref:System.Windows.PropertyMetadata.DefaultValue%2A> właściwość ustawioną na domyślny typ właściwości i wszystkie inne właściwości <xref:System.Windows.PropertyMetadata> ustawiono `null`.</span><span class="sxs-lookup"><span data-stu-id="fa05c-153">Otherwise, the <xref:System.Windows.PropertyMetadata> object is created with the <xref:System.Windows.PropertyMetadata.DefaultValue%2A> property set to the property type's default and all other properties of the <xref:System.Windows.PropertyMetadata> is set to `null`.</span></span> <span data-ttu-id="fa05c-154">Użyj <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> podpisu, jeśli chcesz do udostępnienia metadanych dla wersji właściwości zależności w miarę dodawania do podanego typu.</span><span class="sxs-lookup"><span data-stu-id="fa05c-154">Use the <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> signature if you want to provide metadata for the version of the dependency property as added to the provided type.</span></span>  
  
 <span data-ttu-id="fa05c-155">Wartość zwracana przez tę metodę zwykle jest używana do deklarowania i udostępnić właściwości zależności przez przechowywanie identyfikatora właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-155">The return value of this method is typically used to declare and expose the dependency property by storing a dependency property identifier.</span></span> <span data-ttu-id="fa05c-156">Identyfikator zapewnia dostęp do właściwości zależności, aby wywołać system właściwości [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] dla właściwości zależności, szczególnie jako istnieje na dodawanie klasy właściciela.</span><span class="sxs-lookup"><span data-stu-id="fa05c-156">The identifier provides access to the dependency property if you want to call property system [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] against the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="fa05c-157">Dla tej samej nazwy właściwości pierwotnego właściciela i dodano właściciela powinny służyć do wskazania podobne funkcje.</span><span class="sxs-lookup"><span data-stu-id="fa05c-157">The same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="fa05c-158">Należy używać <xref:System.Windows.DependencyProperty> zwraca wartość <xref:System.Windows.DependencyProperty.AddOwner%2A> metoda definiują identyfikatora właściwości zależności, a także do deklarowania [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] otoki właściwości, dla właściwości zależności, które są dodawane do typów przy użyciu <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-158">You should use the <xref:System.Windows.DependencyProperty> return value of the <xref:System.Windows.DependencyProperty.AddOwner%2A> method to define the dependency property identifier, and also to declare [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="fa05c-159"><xref:System.Windows.DependencyProperty.AddOwner%2A> Metodologii, zaleca się powyżej jest używany podczas tworzenia właściwości zależności, które są zadeklarowane w obrębie [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="fa05c-159">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating the dependency properties that are declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="fa05c-160">Na przykład zarówno <xref:System.Windows.Controls.Border> i <xref:System.Windows.Controls.Control> zdefiniować `BorderBrush` właściwości zależności, które mają podobne funkcje.</span><span class="sxs-lookup"><span data-stu-id="fa05c-160">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="fa05c-161"><xref:System.Windows.Controls.Control> Definiuje jego `BorderBrush` właściwość system właściwości przez wywołanie metody <xref:System.Windows.DependencyProperty.AddOwner%2A> oparte na pierwotny właściciel <xref:System.Windows.Controls.Border> i jego zarejestrowany <xref:System.Windows.Controls.Border.BorderBrushProperty> identyfikator właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-161"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> based on the original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="fa05c-162"><xref:System.Windows.DependencyProperty.AddOwner%2A> Zwracają wartość jest następnie używany do ustanawiania nowego statycznego <xref:System.Windows.DependencyProperty> pola (<xref:System.Windows.Controls.Control.BorderBrushProperty>) dla tej właściwości na dodano właściciela i `BorderBrush` zadeklarowano również właściwość otoki.</span><span class="sxs-lookup"><span data-stu-id="fa05c-162">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a new static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner (ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="fa05c-163">Typ do dodania jako właściciela tej właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-163">The type to add as owner of this dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="fa05c-164">Metadane, które kwalifikują się właściwość zależności, ponieważ znajduje się na podany typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-164">The metadata that qualifies the dependency property as it exists on the provided type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-165">Dodaje inny typ jako właściciele właściwości zależności, który został już zarejestrowany, zapewniając metadane zależności właściwości dla właściwości zależności, będą znajdować się na typ właściciela podana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-165">Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-166">Odwołanie do oryginalnego <see cref="T:System.Windows.DependencyProperty" /> identyfikator, który identyfikuje właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-166">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          </span>
          <span data-ttu-id="fa05c-167">Ten identyfikator powinny zostać ujawnione przez dodanie klasę jako <see langword="public static readonly" /> pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-167">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-168">Ta metoda umożliwia systemowi właściwości do rozpoznania właściwości zależności typu, który nie zarejestrował początkowo tej właściwości określonej zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-168">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="fa05c-169">Wartość zwracana przez tę metodę służy do deklarowania i udostępnić właściwości zależności szczególnie w przypadku, ponieważ znajduje się na dodawanie klasy właściciela.</span><span class="sxs-lookup"><span data-stu-id="fa05c-169">The return value of this method is used to declare and expose the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="fa05c-170">Ogólnie rzecz biorąc dla tej samej nazwy właściwości pierwotnego właściciela i dodano właściciela powinny służyć do wskazania podobne funkcje.</span><span class="sxs-lookup"><span data-stu-id="fa05c-170">Generally, the same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="fa05c-171">Jest dobrą praktyką, aby udostępnić identyfikatorów, jak również jako nowe [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] otoki właściwości, dla właściwości zależności, które są dodawane do typów przy użyciu <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-171">It is good practice to expose the identifiers, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="fa05c-172"><xref:System.Windows.DependencyProperty.AddOwner%2A> Metodologii, zaleca się powyżej jest używany podczas tworzenia [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] zadeklarowane wewnątrz [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="fa05c-172">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="fa05c-173">Na przykład zarówno <xref:System.Windows.Controls.Border> i <xref:System.Windows.Controls.Control> zdefiniować `BorderBrush` właściwości zależności, które mają podobne funkcje.</span><span class="sxs-lookup"><span data-stu-id="fa05c-173">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="fa05c-174"><xref:System.Windows.Controls.Control> Definiuje jego `BorderBrush` właściwość system właściwości przez wywołanie metody <xref:System.Windows.DependencyProperty.AddOwner%2A> na pierwotny właściciel <xref:System.Windows.Controls.Border> i jego zarejestrowany <xref:System.Windows.Controls.Border.BorderBrushProperty> identyfikator właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-174"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> on original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="fa05c-175"><xref:System.Windows.DependencyProperty.AddOwner%2A> Zwracają wartość jest następnie używany do ustanawiania statycznego <xref:System.Windows.DependencyProperty> pola (<xref:System.Windows.Controls.Control.BorderBrushProperty>) dla tej właściwości na dodano właściciela i `BorderBrush` zadeklarowano również właściwość otoki.</span><span class="sxs-lookup"><span data-stu-id="fa05c-175">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>)for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 <span data-ttu-id="fa05c-176">Identyfikator właściwości zależności dodano właściciela powinna być używana do operacji takich jak <xref:System.Windows.DependencyObject.GetValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-176">The added owner's dependency property identifier should be used for operations such as <xref:System.Windows.DependencyObject.GetValue%2A>.</span></span> <span data-ttu-id="fa05c-177">Jednak operacje specyficznych dla typu obejmujących typy i wystąpienia klasy, która została dodana jako właściciela z innych metadanych, będzie nadal zwracają oczekiwane wyniki nawet wtedy, gdy oryginalne (nie dodano właściciela) w określono identyfikator właściwości zależności wywołania do metod, takich jak <xref:System.Windows.DependencyObject.GetValue%2A> lub <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-177">However, type-specific operations involving either types or instances of the class that was added as owner with different metadata will still return the expected results even if the original (not the added owner's) dependency property identifier is specified in calls to methods such as <xref:System.Windows.DependencyObject.GetValue%2A> or <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span></span> <span data-ttu-id="fa05c-178">Metadane dla właściciela dodano jest perpetuated przez <xref:System.Windows.DependencyProperty.AddOwner%2A> wywoływać samego siebie, niekoniecznie odwołuje się wyłącznie Dodawanie pola Identyfikator klasy, który jest właścicielem.</span><span class="sxs-lookup"><span data-stu-id="fa05c-178">The metadata for the added owner is perpetuated by the <xref:System.Windows.DependencyProperty.AddOwner%2A> call itself, not necessarily referenced exclusively by the adding owner class identifier field.</span></span> <span data-ttu-id="fa05c-179">Niemniej jednak jest dobrą praktyką, aby udostępnić identyfikator, a także jako nowe [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] otoki właściwości, dla właściwości zależności, które są dodawane do typów przy użyciu <xref:System.Windows.DependencyProperty.AddOwner%2A>, ponieważ w przeciwnym razie jest tworzony różnic między [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] i [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] reprezentacji właściwości.</span><span class="sxs-lookup"><span data-stu-id="fa05c-179">Nevertheless, it is good practice to expose the  identifier, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>, because failing to do so creates disparity between the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] representations of your properties.</span></span>  
  
 <span data-ttu-id="fa05c-180">Podany metadanych jest scalany z metadanych właściwości dla właściwości zależności, zgodnie z jego lokalizacją podstawowego właściciela.</span><span class="sxs-lookup"><span data-stu-id="fa05c-180">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="fa05c-181">Wszystkie właściwości, które zostały określone w odpowiednich oryginalnych metadanych podstawowa zostanie utrzymany.</span><span class="sxs-lookup"><span data-stu-id="fa05c-181">Any characteristics that were specified in the original base metadata will persist.</span></span> <span data-ttu-id="fa05c-182">Tylko te cechy, które konkretnie zostały zmienione w nowymi metadanymi spowoduje zastąpienie właściwości podstawowej metadanych.</span><span class="sxs-lookup"><span data-stu-id="fa05c-182">Only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="fa05c-183">Niektóre cechy, takie jak <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, są zastępowane, jeśli są one określone w nowymi metadanymi.</span><span class="sxs-lookup"><span data-stu-id="fa05c-183">Some characteristics, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are replaced if they are specified in the new metadata.</span></span> <span data-ttu-id="fa05c-184">Inne, takie jak <xref:System.Windows.PropertyChangedCallback>, są połączone.</span><span class="sxs-lookup"><span data-stu-id="fa05c-184">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="fa05c-185">Ostatecznie zachowania scalania jest zależna od typ metadanych właściwości, które są używane do zastąpienia, więc opisane tu zachowanie występuje dla istniejących klas metadanych właściwości używane przez [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-185">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="fa05c-186">Aby uzyskać więcej informacji, zobacz [metadane zależności właściwości](~/docs/framework/wpf/advanced/dependency-property-metadata.md) i [metadane właściwości szablonu](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-186">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata DefaultMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyMetadata DefaultMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultMetadata As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyMetadata ^ DefaultMetadata { System::Windows::PropertyMetadata ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMetadata : System.Windows.PropertyMetadata" Usage="System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa05c-187">Pobiera metadane domyślne właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-187">Gets the default metadata of the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa05c-188">Metadane domyślne właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-188">The default metadata of the dependency property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-189">Metadane domyślne są metadane właściwości, która jest dostępna dla danego obiektu lub obiektu typu pochodnego gdzie metadanych alternatywne, nie został dostarczony przez jawną <xref:System.Windows.DependencyProperty.Register%2A> lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> wywołania.</span><span class="sxs-lookup"><span data-stu-id="fa05c-189">The default metadata is the property metadata that is available to that particular object or an object of a derived type where no alternative metadata was supplied by an explicit <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> call.</span></span>  
  
 <span data-ttu-id="fa05c-190">Jeśli pierwotnego właściciela zastosowane metadanych do pierwszego <xref:System.Windows.DependencyProperty.Register%2A> wywołanie ustanowione właściwości zależności, a następnie tych metadanych są zwracane jako <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-190">If the original owner applied metadata to the first <xref:System.Windows.DependencyProperty.Register%2A> call that established the dependency property, then that metadata is returned as <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="fa05c-191">Jeśli metadanych nie została zastosowana w oryginalnym <xref:System.Windows.DependencyProperty.Register%2A> wywołaniu, domyślne metadanych jest generowany na podstawie poziomu <xref:System.Windows.DependencyProperty.Register%2A> wywołania i ta wartość jest zwracana jako <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-191">If no metadata was applied in the original <xref:System.Windows.DependencyProperty.Register%2A> call, then default metadata is generated from within the <xref:System.Windows.DependencyProperty.Register%2A> call and this value is returned as the <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="fa05c-192">Głównym celem o domyślnej metadane skojarzone z <xref:System.Windows.DependencyProperty> jest dostarczanie wartości domyślnej dla tej właściwości na dowolnym <xref:System.Windows.DependencyObject> albo typu pochodnego.</span><span class="sxs-lookup"><span data-stu-id="fa05c-192">The main purpose of having default metadata associated with a <xref:System.Windows.DependencyProperty> is to supply a default value for this property on any <xref:System.Windows.DependencyObject> or a derived type.</span></span>  
  
 <span data-ttu-id="fa05c-193">Nie dołączony właściwości nie można rzutować typu metadanych, zwracane przez tę właściwość, dla typów pochodnych <xref:System.Windows.PropertyMetadata> typ, nawet wtedy, gdy właściwość pierwotnie został zarejestrowany za pomocą typu pochodnego metadanych.</span><span class="sxs-lookup"><span data-stu-id="fa05c-193">For nonattached properties, the metadata type returned by this property cannot be cast to derived types of <xref:System.Windows.PropertyMetadata> type, even if the property was originally registered with a derived metadata type.</span></span> <span data-ttu-id="fa05c-194">Jeśli pierwotnie zarejestrowanego metadane, takie jak jego typ oryginalny prawdopodobnie pochodnej metadanych, należy wywołać <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> przekazywania, oryginalnym rejestrowanie zamiast tego wpisz jako parametr.</span><span class="sxs-lookup"><span data-stu-id="fa05c-194">If you want the originally registered metadata including its original possibly derived metadata type, call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> instead, passing the original registering type as a parameter.</span></span>  
  
 <span data-ttu-id="fa05c-195">W przypadku dołączonych właściwości typ metadanych zwróconych przez tę właściwość będą zgodne typu podanego w oryginalnym <xref:System.Windows.DependencyProperty.RegisterAttached%2A> metodę rejestracji.</span><span class="sxs-lookup"><span data-stu-id="fa05c-195">For attached properties, the type of the metadata returned by this property will match the type given in the original <xref:System.Windows.DependencyProperty.RegisterAttached%2A> registration method.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpdefaultvalue)]
[!code-vb[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpdefaultvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyProperty.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fa05c-196">Zwraca wartość skrótu dla tego <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-196">Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-197">Wartość skrótu dla tego <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-197">The hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-198">System właściwości używa swojego unikatowego identyfikatora <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, a wartość właściwości jest zwracany przez <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-198">The property system uses its own unique identifier <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, and the value of that property is returned by <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fa05c-199">Zwraca metadane skojarzone z tą właściwością zależności, zgodnie z jego lokalizacją dla określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-199">Returns the metadata associated with this dependency property as it exists for a particular type.</span>
          </span>
          <span data-ttu-id="fa05c-200">Może to być typ tam, gdzie właściwość zależności nie pierwszy z nich zarejestrowany, do którego został dodany później, lub typu, w którym właściwość zależności została uzyskana za pośrednictwem dziedziczenia, ale metadane zostały zostało pominięte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-200">This can be the type where the dependency property was first registered, one to which it was added subsequently, or a type where the dependency property was obtained through inheritance but the metadata was specifically overridden.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (Type forType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Type forType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata (forType As Type) As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(Type ^ forType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : Type -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata forType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="fa05c-201">Określony typ, z którego można pobrać metadanych właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-201">The specific type from which to retrieve the dependency property metadata.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-202">Zwraca metadane dla tej właściwości zależności, zgodnie z jego lokalizacją w określonym istniejącego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-202">Returns the metadata for this dependency property as it exists on a specified existing type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-203">Obiekt metadanych właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-203">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-204">Określanie typu lub odwołanie do obiektu, do użycia jako typ jest to konieczne, ponieważ metadane mogą się różnić od oryginalnej rejestracji ze względu na <xref:System.Windows.DependencyProperty.AddOwner%2A> lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> wywołań, które zmiany metadanych właściwości zależności, zgodnie z jego lokalizacją w danym typie.</span><span class="sxs-lookup"><span data-stu-id="fa05c-204">Specifying either the type or an object reference to use as type is necessary because the metadata can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that alter the metadata of the dependency property as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa05c-205">Poniższy przykład pobiera metadane dla właściwości zależności na podstawie jego typu.</span><span class="sxs-lookup"><span data-stu-id="fa05c-205">The following example gets metadata for a dependency property based on its type.</span></span> <span data-ttu-id="fa05c-206">Typ uzyskuje się za pomocą `typeof` operatora.</span><span class="sxs-lookup"><span data-stu-id="fa05c-206">The type is obtained by using a `typeof` operator.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatatype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatatype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObject -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">
          <span data-ttu-id="fa05c-207">Obiekt zależności, który jest sprawdzany pod kątem typu, aby określić wersję właściwości zależności typu metadanych powinny pochodzić z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-207">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-208">Zwraca metadane dla tej właściwości zależności, ponieważ znajduje się na wystąpienie określonego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-208">Returns the metadata for this dependency property as it exists on the specified object instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-209">Obiekt metadanych właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-209">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-210">Określanie typu lub odwołanie do obiektu jest konieczne, ponieważ metadane wszelkie danej właściwości zależności mogą się różnić od oryginalnej rejestracji ze względu na <xref:System.Windows.DependencyProperty.AddOwner%2A> lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> wywołań, które można dostosować metadanych właściwości modelu, ponieważ znajduje się na Typ.</span><span class="sxs-lookup"><span data-stu-id="fa05c-210">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
 <span data-ttu-id="fa05c-211">W przypadku żądania metadanych właściwości modelu w oparciu o wystąpienie, tylko przekazujesz wystąpienie, aby jego typu, które mogą być obliczane wewnętrznie.</span><span class="sxs-lookup"><span data-stu-id="fa05c-211">When you request property metadata based on an instance, you are really just passing the instance so that its type can be evaluated internally.</span></span> <span data-ttu-id="fa05c-212">Metadane zależności właściwości nie mogą różnić się dla każdego wystąpienia; jest zawsze spójne dla dowolnej kombinacji właściwości danego typu.</span><span class="sxs-lookup"><span data-stu-id="fa05c-212">Dependency property metadata does not vary per instance; it is always consistent for any given type-property combination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa05c-213">Poniższy przykład pobiera metadane dla właściwości zależności, w oparciu o określonym <xref:System.Windows.DependencyObject> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="fa05c-213">The following example gets metadata for a dependency property based on a specific <xref:System.Windows.DependencyObject> instance.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadoinstance)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadoinstance)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObjectType dependencyObjectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObjectType dependencyObjectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObjectType ^ dependencyObjectType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObjectType -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObjectType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObjectType" Type="System.Windows.DependencyObjectType" />
      </Parameters>
      <Docs>
        <param name="dependencyObjectType">
          <span data-ttu-id="fa05c-214">Określonego obiektu, który rejestruje zależność typu obiektu, z którego pożądany jest metadane zależności właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-214">A specific object that records the dependency object type from which the dependency property metadata is desired.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-215">Zwraca metadane dla tej właściwości zależności, zgodnie z jego lokalizacją w określonym typie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-215">Returns the metadata for this dependency property as it exists on a specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-216">Obiekt metadanych właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-216">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-217">Określanie typu lub odwołanie do obiektu jest konieczne, ponieważ metadane wszelkie danej właściwości zależności mogą się różnić od oryginalnej rejestracji ze względu na <xref:System.Windows.DependencyProperty.AddOwner%2A> lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> wywołań, które można dostosować metadanych właściwości modelu, ponieważ znajduje się na Typ.</span><span class="sxs-lookup"><span data-stu-id="fa05c-217">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa05c-218">Poniższy przykład pobiera metadane dla właściwości zależności, na podstawie jego <xref:System.Windows.DependencyObjectType>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-218">The following example gets metadata for a dependency property based on its <xref:System.Windows.DependencyObjectType>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadotype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadotype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalIndex">
      <MemberSignature Language="C#" Value="public int GlobalIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GlobalIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.GlobalIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GlobalIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalIndex : int" Usage="System.Windows.DependencyProperty.GlobalIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa05c-219">Pobiera wartość wewnętrznie generowane, który unikatowo identyfikuje właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-219">Gets an internally generated value that uniquely identifies the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa05c-220">Unikatowy identyfikator liczbowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-220">A unique numeric identifier.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-221">Ta wartość jest liczbą całkowitą nie Unikatowy identyfikator globalny (GUID).</span><span class="sxs-lookup"><span data-stu-id="fa05c-221">This value is an integer, not a globally unique identifier (GUID).</span></span> <span data-ttu-id="fa05c-222">Ogólnie rzecz biorąc ta wartość indeksu nie jest wymagane, a brak jest indeks dostępu do tabel wszystkich właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-222">Generally, using this index value is not required, and there is no index access to tables of all dependency properties.</span></span> <span data-ttu-id="fa05c-223">Właściwości zależności zamiast tego należy odwoływać się ich pola identyfikator.</span><span class="sxs-lookup"><span data-stu-id="fa05c-223">Dependency properties should instead be referenced by their identifier fields.</span></span>  
  
 <span data-ttu-id="fa05c-224"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> jest używana wewnętrznie do szybszy dostęp do struktury danych, które używają <xref:System.Windows.DependencyProperty.GlobalIndex%2A> jako indeks tablicę indeksowaną od zera.</span><span class="sxs-lookup"><span data-stu-id="fa05c-224"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> is used internally for faster access to data structures that use the <xref:System.Windows.DependencyProperty.GlobalIndex%2A> as a zero-based array index.</span></span> <span data-ttu-id="fa05c-225">Użycie podobnych niektóre aplikacje dla projektantów i narzędzi.</span><span class="sxs-lookup"><span data-stu-id="fa05c-225">A similar usage might have applications for designers or tools.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidType">
      <MemberSignature Language="C#" Value="public bool IsValidType (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidType(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidType (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidType(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidType : obj -&gt; bool" Usage="dependencyProperty.IsValidType value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="fa05c-226">Wartość do sprawdzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-226">The value to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-227">Określa, czy określona wartość jest dopuszczalny dla tej właściwości zależności typu, jak porównywany z typem właściwości podane w pierwotnej rejestracji właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-227">Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-228">
            <see langword="true" /> Jeśli określona wartość jest typu zarejestrowaną właściwość lub dopuszczalny Typ pochodny; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-228">
              <see langword="true" /> if the specified value is the registered property type or an acceptable derived type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-229">Wartość `null` jest prawidłowym typem dla właściwości zależności typu odwołania lub <xref:System.Nullable%601> właściwości zależności i zwróci `true` tych przypadkach.</span><span class="sxs-lookup"><span data-stu-id="fa05c-229">A value of `null` is a valid type for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="fa05c-230">W przypadkach, gdy właściwość zależności jest ani odwołaniem ani <xref:System.Nullable%601> typu <xref:System.Windows.DependencyProperty.IsValidType%2A> zwróci `false` na wartość null zamiast Zgłoś wyjątek.</span><span class="sxs-lookup"><span data-stu-id="fa05c-230">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa05c-231">W poniższym przykładzie użyto <xref:System.Windows.DependencyProperty.IsValidType%2A> w celu sprawdzenia przed wywołaniem <xref:System.Windows.DependencyObject.SetValue%2A> we właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-231">The following example uses <xref:System.Windows.DependencyProperty.IsValidType%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvalue)]
 [!code-vb[PropertySystemEsoterics#TrySetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidValue">
      <MemberSignature Language="C#" Value="public bool IsValidValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidValue : obj -&gt; bool" Usage="dependencyProperty.IsValidValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="fa05c-232">Wartość do sprawdzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-232">The value to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-233">Określa, czy podana wartość jest akceptowana w przypadku typu właściwości indent typ podstawowy, a także potencjalnie jeśli znajduje się w dozwolonym zakresem wartości dla tego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-233">Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-234">
            <see langword="true" /> Jeśli wartość jest dopuszczalne i poprawnego typu lub typ pochodny; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-234">
              <see langword="true" /> if the value is acceptable and is of the correct type or a derived type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-235">Dla właściwości zależności, można określić zakres dozwolonych wartości dla tego typu za pomocą <xref:System.Windows.ValidateValueCallback> dostarczanym rejestrację właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-235">For a dependency property, an allowed range of values for that type can be specified through a <xref:System.Windows.ValidateValueCallback> that is provided in the dependency property registration.</span></span>  
  
 <span data-ttu-id="fa05c-236">Ta metoda wywołuje <xref:System.Windows.DependencyProperty.IsValidType%2A> wewnętrznie.</span><span class="sxs-lookup"><span data-stu-id="fa05c-236">This method calls <xref:System.Windows.DependencyProperty.IsValidType%2A> internally.</span></span> <span data-ttu-id="fa05c-237">Jeśli nie ma właściwości zależności w danym <xref:System.Windows.ValidateValueCallback>, a następnie wywołaniem tej metody jest skutecznie równoważne z wywoływaniem <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-237">If the dependency property in question has no <xref:System.Windows.ValidateValueCallback>,then calling this method is effectively equivalent to calling <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span></span> <span data-ttu-id="fa05c-238">Jeśli właściwość zależności <xref:System.Windows.ValidateValueCallback>i jeśli <xref:System.Windows.DependencyProperty.IsValidType%2A> będzie musiał zwrócić `true`, zwracana wartość będzie zaimplementowanego w wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="fa05c-238">If the dependency property does have a <xref:System.Windows.ValidateValueCallback>, and if <xref:System.Windows.DependencyProperty.IsValidType%2A> would have returned `true`, then the value returned will be as implemented in the callback.</span></span>  
  
 <span data-ttu-id="fa05c-239">Wartość null jest prawidłową wartością dla właściwości zależności typu odwołania lub <xref:System.Nullable%601> właściwości zależności i zwróci `true` tych przypadkach.</span><span class="sxs-lookup"><span data-stu-id="fa05c-239">A null value is a valid value for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="fa05c-240">W przypadkach, gdy właściwość zależności jest ani odwołaniem ani <xref:System.Nullable%601> typu <xref:System.Windows.DependencyProperty.IsValidType%2A> zwróci `false` na wartość null zamiast Zgłoś wyjątek.</span><span class="sxs-lookup"><span data-stu-id="fa05c-240">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa05c-241">W poniższym przykładzie użyto <xref:System.Windows.DependencyProperty.IsValidValue%2A> w celu sprawdzenia przed wywołaniem <xref:System.Windows.DependencyObject.SetValue%2A> we właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-241">The following example uses <xref:System.Windows.DependencyProperty.IsValidValue%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvaluewithvalidate)]
 [!code-vb[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvaluewithvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.DependencyProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa05c-242">Pobiera nazwę właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-242">Gets the name of the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa05c-243">Nazwa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-243">The name of the property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-244">Tej właściwości pobiera nazwa podana jako `name` parametru podczas rejestracji właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-244">This property gets the name provided as the `name` parameter during dependency property registration.</span></span> <span data-ttu-id="fa05c-245">Ta nazwa jest niemodyfikowalna i nie może być `null` ani być pustym ciągiem.</span><span class="sxs-lookup"><span data-stu-id="fa05c-245">This name is immutable, and cannot be `null` or an empty string.</span></span> <span data-ttu-id="fa05c-246">W ten sam typ właściciela rejestrację zduplikowanej nazwy są niedozwolone i zgłosi wyjątek podczas próby zarejestrowania duplikat.</span><span class="sxs-lookup"><span data-stu-id="fa05c-246">Duplicate name registrations on the same owner type are not permitted, and will throw an exception when you attempt to register the duplicate.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="fa05c-247"><xref:System.Windows.DependencyProperty.Name%2A> Zależności właściwość musi postępuj zgodnie z Konwencją pasującą do nazwy identyfikatora właściwości zależności minus sufiks "Property".</span><span class="sxs-lookup"><span data-stu-id="fa05c-247">The <xref:System.Windows.DependencyProperty.Name%2A> of a dependency property must follow the convention of matching the name of its dependency property identifier minus the suffix "Property".</span></span> <span data-ttu-id="fa05c-248">Aby uzyskać więcej informacji, zobacz [niestandardowe właściwości zależności](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-248">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa05c-249">Poniższy przykład wykonuje kwerendę różne cechy identyfikatora właściwości zależności, w tym <xref:System.Windows.DependencyProperty.Name%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-249">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.Name%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OverrideMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fa05c-250">Dostarcza alternatywnych metadanych dla tej właściwości zależności, gdy nie jest obecny na wystąpieniach o określonym typie, a metadane, które zostały zapewnione na rejestrację właściwości zależności początkowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-250">Supplies alternate metadata for this dependency property when it is present on instances of a specified type, versus the metadata that was provided in the initial dependency property registration.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="fa05c-251">Typ, w której ta właściwość zależności jest dziedziczona i gdzie zostaną zastosowane podane metadane alternatywne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-251">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="fa05c-252">Metadane właściwości zależności typu nadrzędne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-252">The metadata to apply to the dependency property on the overriding type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-253">Określa alternatywne metadanych dla tej właściwości zależności, gdy nie jest obecny na wystąpieniach o określonym typie, zastępowanie metadanych, które istniały dla właściwości zależności, jak jest dziedziczona z typów podstawowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-253">Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-254">Metadane zależności właściwości powinna zostać zastąpiona, zanim system właściwość używa właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-254">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="fa05c-255">To jest równa czas, jaki konkretne wystąpienia są tworzone przy użyciu klasy, która rejestruje właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-255">This equates to the time that specific instances are created using the class that registers the dependency property.</span></span> <span data-ttu-id="fa05c-256">Wywołania <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> powinny zostać wykonane tylko w konstruktorach statycznych typu, który zapewnia siebie jako `forType` parametru tej metody lub za pośrednictwem podobne podczas tworzenia wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="fa05c-256">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="fa05c-257">Podjęto próbę zmiany metadanych po istnieje jedno wystąpienie typu właściciela nie generuje wyjątków, ale spowoduje zachowania niespójność w systemie właściwości.</span><span class="sxs-lookup"><span data-stu-id="fa05c-257">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="fa05c-258">Po nawiązaniu metadanych dla zastąpienia określonej klasy pochodnej przy użyciu tej metody kolejne próby, aby zastąpić metadane w tej samej klasy pochodnej zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="fa05c-258">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="fa05c-259">Podany metadanych jest scalany z metadanych właściwości dla właściwości zależności, zgodnie z jego lokalizacją podstawowego właściciela.</span><span class="sxs-lookup"><span data-stu-id="fa05c-259">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="fa05c-260">Wszystkie właściwości, które zostały określone w odpowiednich oryginalnych metadanych podstawowy utrwali; tylko te cechy, które konkretnie zostały zmienione w nowymi metadanymi spowoduje zastąpienie właściwości podstawowej metadanych.</span><span class="sxs-lookup"><span data-stu-id="fa05c-260">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="fa05c-261">Niektóre cechy, takie jak <xref:System.Windows.PropertyMetadata.DefaultValue%2A> zostały zastąpione, jeśli określona w nowymi metadanymi.</span><span class="sxs-lookup"><span data-stu-id="fa05c-261">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="fa05c-262">Inne, takie jak <xref:System.Windows.PropertyChangedCallback>, są połączone.</span><span class="sxs-lookup"><span data-stu-id="fa05c-262">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="fa05c-263">Ostatecznie zachowania scalania jest zależna od typ metadanych właściwości, które są używane do zastąpienia, więc opisane tu zachowanie występuje dla istniejących klas metadanych właściwości używane przez [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-263">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="fa05c-264">Aby uzyskać więcej informacji, zobacz [metadane zależności właściwości](~/docs/framework/wpf/advanced/dependency-property-metadata.md) i [metadane właściwości szablonu](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-264">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="fa05c-265">Próbowano zastąpić metadane dla właściwości zależności tylko do odczytu (nie można wykonać operacji przy użyciu tej sygnatury).</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-265">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fa05c-266">Metadane już została włączona dla właściwości zależności, zgodnie z jego lokalizacją dla podanego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-266">Metadata was already established for the dependency property as it exists on the provided type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata, System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata, key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata * System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="fa05c-267">Typ, w której ta właściwość zależności jest dziedziczona i gdzie zostaną zastosowane podane metadane alternatywne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-267">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="fa05c-268">Metadane właściwości zależności typu nadrzędne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-268">The metadata to apply to the dependency property on the overriding type.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="fa05c-269">Klucz dostępu dla właściwości zależności tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-269">The access key for a read-only dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-270">Dostarcza alternatywnych metadane dla właściwości zależności tylko do odczytu, gdy nie jest obecny na wystąpieniach o określonym typie, zastępowanie metadanych, które zostały zapewnione na rejestrację właściwości zależności początkowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-270">Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration.</span>
          </span>
          <span data-ttu-id="fa05c-271">Należy przekazać <see cref="T:System.Windows.DependencyPropertyKey" /> dla właściwości zależności tylko do odczytu, aby uniknąć zgłaszania wyjątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-271">You must pass the <see cref="T:System.Windows.DependencyPropertyKey" /> for the read-only dependency property to avoid raising an exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-272">Podpis zawiera podstawowej implementacji dla identyfikatora właściwości zależności tylko do odczytu (<xref:System.Windows.DependencyPropertyKey>) metody.</span><span class="sxs-lookup"><span data-stu-id="fa05c-272">This signature provides underlying implementation for a read-only dependency property identifier (<xref:System.Windows.DependencyPropertyKey>) method.</span></span> <span data-ttu-id="fa05c-273">Zastępowanie metadanych właściwości zależności odczytu i zapisu, użyć <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-273">If overriding metadata for a read-write dependency property, use <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="fa05c-274">Metadane zależności właściwości powinna zostać zastąpiona, zanim system właściwość używa właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-274">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="fa05c-275">To jest równa godzina określone obiekty są tworzone dla klasy, która rejestruje właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-275">This equates to the time that specific objects are created for the class that registers the dependency property.</span></span> <span data-ttu-id="fa05c-276">Wywołania <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> powinny zostać wykonane tylko w konstruktorach statycznych typu, który zapewnia siebie jako `forType` parametru tej metody lub za pośrednictwem podobne podczas tworzenia wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="fa05c-276">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="fa05c-277">Podjęto próbę zmiany metadanych po istnieje jedno wystąpienie typu właściciela nie generuje wyjątków, ale spowoduje zachowania niespójność w systemie właściwości.</span><span class="sxs-lookup"><span data-stu-id="fa05c-277">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="fa05c-278">Po nawiązaniu metadanych dla zastąpienia określonej klasy pochodnej przy użyciu tej metody kolejne próby, aby zastąpić metadane w tej samej klasy pochodnej zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="fa05c-278">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="fa05c-279">Podany metadanych jest scalany z metadanych właściwości dla właściwości zależności, zgodnie z jego lokalizacją podstawowego właściciela.</span><span class="sxs-lookup"><span data-stu-id="fa05c-279">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="fa05c-280">Wszystkie właściwości, które zostały określone w odpowiednich oryginalnych metadanych podstawowy utrwali; tylko te cechy, które konkretnie zostały zmienione w nowymi metadanymi spowoduje zastąpienie właściwości podstawowej metadanych.</span><span class="sxs-lookup"><span data-stu-id="fa05c-280">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="fa05c-281">Niektóre cechy, takie jak <xref:System.Windows.PropertyMetadata.DefaultValue%2A> zostały zastąpione, jeśli określona w nowymi metadanymi.</span><span class="sxs-lookup"><span data-stu-id="fa05c-281">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="fa05c-282">Inne, takie jak <xref:System.Windows.PropertyChangedCallback>, są połączone.</span><span class="sxs-lookup"><span data-stu-id="fa05c-282">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="fa05c-283">Zachowanie scalania zależy od typ metadanych właściwości, które są używane do zastępowania.</span><span class="sxs-lookup"><span data-stu-id="fa05c-283">The merge behavior depends on the property metadata type being used for the override.</span></span> <span data-ttu-id="fa05c-284">Aby uzyskać więcej informacji, zobacz [metadane zależności właściwości](~/docs/framework/wpf/advanced/dependency-property-metadata.md) i [metadane właściwości szablonu](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-284">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.DependencyProperty.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa05c-285">Pobiera typ obiektu, który jest zarejestrowany w systemie właściwości właściwość zależności lub dodaje się jako właściciel właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-285">Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa05c-286">Typ obiektu, który zarejestrowanych właściwości lub dodaje się jako właściciel właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-286">The type of the object that registered the property or added itself as owner of the property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-287">Ta wartość została dostarczona podczas rejestracji właściwości.</span><span class="sxs-lookup"><span data-stu-id="fa05c-287">This value was provided during property registration.</span></span> <span data-ttu-id="fa05c-288">Właściciel będzie albo oryginalnego rejestrowania typu w przypadku właściwości <xref:System.Windows.DependencyProperty> identyfikator wygenerowany na podstawie <xref:System.Windows.DependencyProperty.Register%2A> wywołania lub typ, który dodaje się jako właściciel w przypadku <xref:System.Windows.DependencyProperty> identyfikator wygenerowany na podstawie <xref:System.Windows.DependencyProperty.AddOwner%2A> wywołania.</span><span class="sxs-lookup"><span data-stu-id="fa05c-288">The owner will be either the original registering type in the case of a <xref:System.Windows.DependencyProperty> identifier generated from a <xref:System.Windows.DependencyProperty.Register%2A> call, or the type that added itself as owner in the case of a <xref:System.Windows.DependencyProperty> identifier generated from an <xref:System.Windows.DependencyProperty.AddOwner%2A> call.</span></span>  
  
 <span data-ttu-id="fa05c-289"><xref:System.Windows.DependencyProperty.OwnerType%2A> w dowolnej podanej <xref:System.Windows.DependencyProperty> jest niemodyfikowalna i nie może być `null` w prawidłowym <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-289">The <xref:System.Windows.DependencyProperty.OwnerType%2A> on any given <xref:System.Windows.DependencyProperty> is immutable, and cannot be `null` in a valid <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa05c-290">Poniższy przykład pobiera typ właściciela, na podstawie identyfikatora właściwości zależności `dp`, a następnie pobiera metadane na typ właściciela dla tego samego identyfikatora.</span><span class="sxs-lookup"><span data-stu-id="fa05c-290">The following example gets the owner type based on a dependency property identifier `dp`, and then gets metadata on the owner type for that same identifier.</span></span> <span data-ttu-id="fa05c-291">Ta operacja jest w rzeczywistości odpowiednikiem wprowadzenie <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> na `dp`.</span><span class="sxs-lookup"><span data-stu-id="fa05c-291">This operation is actually equivalent to getting <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> on `dp`.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Windows.DependencyProperty.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa05c-292">Pobiera typ, który używa jej wartość właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-292">Gets the type that the dependency property uses for its value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa05c-293">
            <see cref="T:System.Type" /> Wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-293">The <see cref="T:System.Type" /> of the property value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-294">Ta właściwość raporty typ wartości właściwości w postaci zadeklarowanej przez oryginalnej rejestracji właściwości, za pośrednictwem `propertyType` parametru.</span><span class="sxs-lookup"><span data-stu-id="fa05c-294">This property reports the type of the property's value as declared by the original property registration, through the `propertyType` parameter.</span></span> <span data-ttu-id="fa05c-295">Podobnie jak <xref:System.Windows.DependencyProperty.Name%2A>, właściwość typu właściwość zależności jest niezmienny po rejestracji.</span><span class="sxs-lookup"><span data-stu-id="fa05c-295">Similar to the <xref:System.Windows.DependencyProperty.Name%2A>, the property type of a dependency property is immutable after registration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa05c-296">Poniższy przykład wykonuje kwerendę różne cechy identyfikatora właściwości zależności, w tym <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-296">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span></span> <span data-ttu-id="fa05c-297">Ciąg nazwy typu <xref:System.Windows.DependencyProperty.PropertyType%2A> są uzyskiwane ze zwracanego <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-297">The type name string of the <xref:System.Windows.DependencyProperty.PropertyType%2A> is obtained from the returned <xref:System.Type>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadOnly : bool" Usage="System.Windows.DependencyProperty.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa05c-298">Pobiera wartość wskazującą, czy właściwość zależności identyfikowane przez to <see cref="T:System.Windows.DependencyProperty" /> wystąpienie jest właściwości zależności tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-298">Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" /> instance is a read-only dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa05c-299">
            <see langword="true" /> Jeśli właściwość zależności jest tylko do odczytu. w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-299">
              <see langword="true" /> if the dependency property is read-only; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-300">Właściwości zależności tylko do odczytu są zarejestrowane w systemie właściwości przez wywołanie metody <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> metody, w przeciwieństwie do <xref:System.Windows.DependencyProperty.Register%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="fa05c-300">Read-only dependency properties are registered within the property system by calling the <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> method as opposed to the <xref:System.Windows.DependencyProperty.Register%2A> method.</span></span> <span data-ttu-id="fa05c-301">Właściwości dołączone, również może być rejestrowany jako tylko do odczytu. zobacz <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-301">Attached properties can also be registered as read-only; see <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="fa05c-302">Właściwości zależności tylko do odczytu wymaga <xref:System.Windows.DependencyPropertyKey> identyfikatora zamiast <xref:System.Windows.DependencyProperty> identyfikator, aby wykonywać operacje metadane, takie jak zastępowanie metadane lub ustawienia wartości.</span><span class="sxs-lookup"><span data-stu-id="fa05c-302">Read-only dependency properties require a <xref:System.Windows.DependencyPropertyKey> identifier rather than a <xref:System.Windows.DependencyProperty> identifier to perform metadata operations such as overriding the metadata or setting the value.</span></span> <span data-ttu-id="fa05c-303">Jeśli użytkownik uzyskał zbiór <xref:System.Windows.DependencyProperty> identyfikatory za pomocą wywołania <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> lub inne [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] który uwidacznia identyfikatorów sprawdzenie <xref:System.Windows.DependencyProperty.ReadOnly%2A> wartość przed podjęciem próby wywołania <xref:System.Windows.DependencyObject.SetValue%2A> lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> za pomocą tego Identyfikator właściwości zależności jako parametr wejściowy, aby zweryfikować, że właściwość zależności, który reprezentuje identyfikator nie jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="fa05c-303">If you obtained a collection of <xref:System.Windows.DependencyProperty> identifiers through a call to <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> or another [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] that exposes identifiers, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value before attempting to call <xref:System.Windows.DependencyObject.SetValue%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> using that dependency property identifier as an input parameter, to verify that the dependency property that the identifier represents is not read-only.</span></span> <span data-ttu-id="fa05c-304">Jeśli wartość <xref:System.Windows.DependencyProperty.ReadOnly%2A> jest `true` na właściwość zależności jest programowy sposób uzyskać odwołania do <xref:System.Windows.DependencyPropertyKey> identyfikatora właściwości zależności, z metadanych lub <xref:System.Windows.DependencyProperty> identyfikator; identyfikator muszą być dostępne jako statyczne pole w celu wywołania <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> względem właściwości zależności tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="fa05c-304">If the value of <xref:System.Windows.DependencyProperty.ReadOnly%2A> is `true` on a dependency property, there is no programmatic way to obtain a reference to the <xref:System.Windows.DependencyPropertyKey> identifier of that dependency property, from the metadata or from the <xref:System.Windows.DependencyProperty> identifier; the identifier must be available as a static field in order to call <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> against a read-only dependency property.</span></span>  
  
 <span data-ttu-id="fa05c-305">Podczas tworzenia właściwości zależności niestandardowej, a następnie zarejestruj go jako tylko do odczytu, należy zdefiniować tylko akcesor pobierania dla [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] właściwość otoki.</span><span class="sxs-lookup"><span data-stu-id="fa05c-305">When you create a custom dependency property, and register it as read-only, you should define only a get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper property.</span></span> <span data-ttu-id="fa05c-306">W przeciwnym razie klasy mają mylące model obiektów dla otoki właściwości w porównaniu do dostępu do właściwości zależności zapasowy.</span><span class="sxs-lookup"><span data-stu-id="fa05c-306">Otherwise, your class will have a confusing object model for the property wrapper as compared to the access to the backing dependency property.</span></span> <span data-ttu-id="fa05c-307">Aby uzyskać więcej informacji, zobacz [niestandardowe właściwości zależności](~/docs/framework/wpf/advanced/custom-dependency-properties.md) lub [właściwości zależności tylko do odczytu](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-307">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md) or [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa05c-308">Poniższy przykład pobiera metadane domyślne i właściwości identyfikatora właściwości zależności z różnych pól właściwości zależności, a informacje są używane do wypełniania tabeli, aby zaimplementować "Przeglądarka metadanych".</span><span class="sxs-lookup"><span data-stu-id="fa05c-308">The following example obtains the default metadata and the dependency property identifier properties from various dependency property fields, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fa05c-309">Rejestruje właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-309">Registers a dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa05c-310">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-310">The name of the dependency property to register.</span>
          </span>
          <span data-ttu-id="fa05c-311">Nazwa musi być unikatowa w przestrzeni nazw rejestracji typu właściciela.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-311">The name must be unique within the registration namespace of the owner type.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa05c-312">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-312">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa05c-313">Typ właściciela, który rejestruje właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-313">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-314">Określona nazwa właściwości, typ właściwości i typ właściciela rejestruje właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-314">Registers a dependency property with the specified property name, property type, and owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-315">Identyfikator właściwości zależności, które mają być używane do ustawiania wartości <see langword="public static readonly" /> pole w klasie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-315">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="fa05c-316">Ten identyfikator jest następnie używany do odwołań właściwość zależności w późniejszym czasie, dla operacji, takich jak programowo ustawiając jej wartość lub uzyskiwanie metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-316">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-317">Aby uzyskać więcej informacji na temat rejestracji właściwość zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-317">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 [!code-csharp[WPFAquariumSln#Register3Param](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#register3param)]
 [!code-vb[WPFAquariumSln#Register3Param](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#register3param)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa05c-318">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-318">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa05c-319">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-319">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa05c-320">Typ właściciela, który rejestruje właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-320">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="fa05c-321">Metadane właściwości dla właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-321">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-322">Rejestruje właściwości zależności określona nazwa właściwości, typ właściwości, typ właściciela i metadanych właściwości modelu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-322">Registers a dependency property with the specified property name, property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-323">Identyfikator właściwości zależności, które mają być używane do ustawiania wartości <see langword="public static readonly" /> pole w klasie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-323">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="fa05c-324">Ten identyfikator jest następnie używany do odwołań właściwość zależności w późniejszym czasie, dla operacji, takich jak programowo ustawiając jej wartość lub uzyskiwanie metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-324">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-325">Aby uzyskać więcej informacji na temat rejestracji właściwość zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-325">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa05c-326">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-326">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa05c-327">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-327">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa05c-328">Typ właściciela, który rejestruje właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-328">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="fa05c-329">Metadane właściwości dla właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-329">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="fa05c-330">Odwołanie do wywołania zwrotnego, które należy wykonać wszelkie niestandardowego sprawdzania poprawności wartości właściwości zależności poza typowy Typ weryfikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-330">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-331">Określona nazwa właściwości, typ właściwości, typ właściciela, metadanych właściwości modelu i wywołanie zwrotne weryfikacji wartości dla właściwości rejestruje właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-331">Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-332">Identyfikator właściwości zależności, które mają być używane do ustawiania wartości <see langword="public static readonly" /> pole w klasie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-332">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="fa05c-333">Ten identyfikator jest następnie używany do odwołań właściwość zależności w późniejszym czasie, dla operacji, takich jak programowo ustawiając jej wartość lub uzyskiwanie metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-333">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-334">Aby uzyskać więcej informacji na temat rejestracji właściwość zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-334">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa05c-335">Poniższy przykład rejestruje właściwości zależności, w tym wywołanie zwrotne weryfikacji (definicja wywołanie zwrotne nie jest wyświetlany; szczegółowe informacje na temat definicji wywołania zwrotnego, <xref:System.Windows.ValidateValueCallback>).</span><span class="sxs-lookup"><span data-stu-id="fa05c-335">The following example registers a dependency property, including a validation callback (the callback definition is not shown; for details on the callback definition, see <xref:System.Windows.ValidateValueCallback>).</span></span>  
  
 [!code-csharp[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#currentdefinitionwithwrapper)]
 [!code-vb[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#currentdefinitionwithwrapper)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttached">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fa05c-336">Rejestruje dołączoną właściwość systemie właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-336">Registers an attached property with the property system.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa05c-337">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-337">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa05c-338">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-338">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa05c-339">Typ właściciela, który rejestruje właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-339">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-340">Rejestruje dołączoną właściwość określona nazwa właściwości, typ właściwości i typ właściciela.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-340">Registers an attached property with the specified property name, property type, and owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-341">Identyfikator właściwości zależności, które mają być używane do ustawiania wartości <see langword="public static readonly" /> pole w klasie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-341">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="fa05c-342">Ten identyfikator jest następnie używany do odwołań właściwość zależności w późniejszym czasie, dla operacji, takich jak programowo ustawiając jej wartość lub uzyskiwanie metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-342">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-343">Dołączona właściwość jest pojęciem właściwości zdefiniowane przez [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="fa05c-343">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="fa05c-344"> implementuje dołączonych właściwości jako właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-344"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="fa05c-345">Ponieważ [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] właściwości dołączone właściwości zależności, mogą mieć stosowane metadanych, który może służyć przez system właściwości Ogólne operacje, takie jak raportowanie layout charakterystyki.</span><span class="sxs-lookup"><span data-stu-id="fa05c-345">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="fa05c-346">Aby uzyskać więcej informacji, zobacz [Przegląd właściwości dołączonych](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-346">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="fa05c-347">Aby uzyskać więcej informacji na temat rejestracji właściwość zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-347">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa05c-348">Poniższy przykład rejestruje dołączoną właściwość dla klasy abstrakcyjnej za pomocą tego <xref:System.Windows.DependencyProperty.RegisterAttached%2A> podpisu.</span><span class="sxs-lookup"><span data-stu-id="fa05c-348">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa05c-349">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-349">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa05c-350">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-350">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa05c-351">Typ właściciela, który rejestruje właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-351">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="fa05c-352">Metadane właściwości dla właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-352">Property metadata for the dependency property.</span>
          </span>
          <span data-ttu-id="fa05c-353">Może to obejmować wartość domyślną, a także inne właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-353">This can include the default value as well as other characteristics.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-354">Rejestruje dołączoną właściwość określona nazwa właściwości, typ właściwości, typ właściciela i metadanych właściwości modelu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-354">Registers an attached property with the specified property name, property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-355">Identyfikator właściwości zależności, które mają być używane do ustawiania wartości <see langword="public static readonly" /> pole w klasie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-355">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="fa05c-356">Ten identyfikator jest następnie używany do odwołań właściwość zależności w późniejszym czasie, dla operacji, takich jak programowo ustawiając jej wartość lub uzyskiwanie metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-356">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-357">Dołączona właściwość jest pojęciem właściwości zdefiniowane przez [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="fa05c-357">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="fa05c-358"> implementuje dołączonych właściwości jako właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-358"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="fa05c-359">Ponieważ [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] właściwości dołączone właściwości zależności, mogą mieć stosowane metadanych, który może służyć przez system właściwości Ogólne operacje, takie jak raportowanie layout charakterystyki.</span><span class="sxs-lookup"><span data-stu-id="fa05c-359">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="fa05c-360">Aby uzyskać więcej informacji, zobacz [Przegląd właściwości dołączonych](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-360">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="fa05c-361">Aby uzyskać więcej informacji na temat rejestracji właściwość zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-361">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="fa05c-362">Użyj RegisterAttached dziedziczenie wartości właściwości zależności</span><span class="sxs-lookup"><span data-stu-id="fa05c-362">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="fa05c-363">Jednego konkretnego scenariusza dla rejestracji przy użyciu właściwości zależności <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zamiast <xref:System.Windows.DependencyProperty.Register%2A> służy do obsługi dziedziczenie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="fa05c-363">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="fa05c-364">Należy zarejestrować dziedziczenie wartości właściwości zależności za pomocą <xref:System.Windows.DependencyProperty.RegisterAttached%2A> nawet wtedy, gdy klasa definiuje metod dostępu do otoki właściwości, które uwidaczniają właściwości zależności, a nawet wtedy, gdy nie będą do udostępnienia Get * i * zestaw metod statycznych, aby zapewnić PRAWDA dołączone Właściwość metody dostępu pomocy technicznej.</span><span class="sxs-lookup"><span data-stu-id="fa05c-364">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="fa05c-365">Mimo że dziedziczenie wartości właściwości może pojawić się działać w przypadku właściwości zależności nie dołączony, zachowanie dziedziczenia nie dołączony właściwości przy użyciu pewnych granic elementu w drzewie środowiska uruchomieniowego jest niezdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="fa05c-365">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="fa05c-366">Rejestrowanie właściwości, jak skutecznie dołączone sprawia, że dołączona właściwość Właściwość globalną systemowi właściwości i gwarantuje, że dziedziczenie wartości właściwości działa w granicach wszystkich w obrębu drzewa.</span><span class="sxs-lookup"><span data-stu-id="fa05c-366">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="fa05c-367">Zawsze używaj <xref:System.Windows.DependencyProperty.RegisterAttached%2A> można zarejestrować właściwości, w którym można określić <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> w metadanych.</span><span class="sxs-lookup"><span data-stu-id="fa05c-367">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="fa05c-368">Aby uzyskać więcej informacji, zobacz [dziedziczenie wartości właściwości](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-368">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa05c-369">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-369">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa05c-370">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-370">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa05c-371">Typ właściciela, który rejestruje właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-371">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="fa05c-372">Metadane właściwości dla właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-372">Property metadata for the dependency property.</span>
          </span>
          <span data-ttu-id="fa05c-373">Może to obejmować wartość domyślną, a także inne właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-373">This can include the default value as well as other characteristics.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="fa05c-374">Odwołanie do wywołania zwrotnego, które należy wykonać wszelkie niestandardowego sprawdzania poprawności wartości właściwości zależności poza typowy Typ weryfikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-374">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-375">Rejestruje dołączoną właściwość z określonym typem właściwości, typ właściciela, metadanych właściwości modelu i wywołanie zwrotne weryfikacji wartości dla właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-375">Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-376">Identyfikator właściwości zależności, które mają być używane do ustawiania wartości <see langword="public static readonly" /> pole w klasie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-376">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="fa05c-377">Ten identyfikator jest następnie używany do odwołań właściwość zależności w późniejszym czasie, dla operacji, takich jak programowo ustawiając jej wartość lub uzyskiwanie metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-377">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-378">Dołączona właściwość jest pojęciem właściwości zdefiniowane przez [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="fa05c-378">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="fa05c-379"> implementuje dołączonych właściwości jako właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-379"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="fa05c-380">Ponieważ [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] właściwości dołączone właściwości zależności, mogą mieć stosowane metadanych, który może służyć przez system właściwości Ogólne operacje, takie jak raportowanie layout charakterystyki.</span><span class="sxs-lookup"><span data-stu-id="fa05c-380">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="fa05c-381">Aby uzyskać więcej informacji, zobacz [Przegląd właściwości dołączonych](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-381">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="fa05c-382">Aby uzyskać więcej informacji na temat rejestracji właściwość zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-382">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="fa05c-383">Użyj RegisterAttached dziedziczenie wartości właściwości zależności</span><span class="sxs-lookup"><span data-stu-id="fa05c-383">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="fa05c-384">Jednego konkretnego scenariusza dla rejestracji przy użyciu właściwości zależności <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zamiast <xref:System.Windows.DependencyProperty.Register%2A> służy do obsługi dziedziczenie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="fa05c-384">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="fa05c-385">Należy zarejestrować dziedziczenie wartości właściwości zależności za pomocą <xref:System.Windows.DependencyProperty.RegisterAttached%2A> nawet wtedy, gdy klasa definiuje metod dostępu do otoki właściwości, które uwidaczniają właściwości zależności, a nawet wtedy, gdy nie będą do udostępnienia Get * i * zestaw metod statycznych, aby zapewnić PRAWDA dołączone Właściwość metody dostępu pomocy technicznej.</span><span class="sxs-lookup"><span data-stu-id="fa05c-385">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="fa05c-386">Mimo że dziedziczenie wartości właściwości może pojawić się działać w przypadku właściwości zależności nie dołączony, zachowanie dziedziczenia nie dołączony właściwości przy użyciu pewnych granic elementu w drzewie środowiska uruchomieniowego jest niezdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="fa05c-386">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="fa05c-387">Rejestrowanie właściwości, jak skutecznie dołączone sprawia, że dołączona właściwość Właściwość globalną systemowi właściwości i gwarantuje, że dziedziczenie wartości właściwości działa w granicach wszystkich w obrębu drzewa.</span><span class="sxs-lookup"><span data-stu-id="fa05c-387">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="fa05c-388">Zawsze używaj <xref:System.Windows.DependencyProperty.RegisterAttached%2A> można zarejestrować właściwości, w którym można określić <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> w metadanych.</span><span class="sxs-lookup"><span data-stu-id="fa05c-388">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="fa05c-389">Aby uzyskać więcej informacji, zobacz [dziedziczenie wartości właściwości](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-389">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa05c-390">Poniższy przykład rejestruje dołączoną właściwość dla klasy abstrakcyjnej za pomocą tego <xref:System.Windows.DependencyProperty.RegisterAttached%2A> podpisu.</span><span class="sxs-lookup"><span data-stu-id="fa05c-390">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span> <span data-ttu-id="fa05c-391">Ta dołączoną właściwość jest właściwością typu wyliczenia, a rejestracja dodaje wywołanie zwrotne weryfikacji, aby sprawdzić, czy podana wartość jest wartością wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="fa05c-391">This attached property is an enumeration type property, and the registration adds a validation callback to verify that the provided value is a value of the enumeration.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttachedReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fa05c-392">Rejestruje w trybie tylko do odczytu dołączona właściwość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-392">Registers a read-only attached property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttachedReadOnly (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa05c-393">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-393">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa05c-394">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-394">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa05c-395">Typ właściciela, który rejestruje właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-395">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="fa05c-396">Metadane właściwości dla właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-396">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-397">Rejestruje tylko do odczytu właściwości dołączone, z określonym typem właściwości, typ właściciela i metadanych właściwości modelu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-397">Registers a read-only attached property, with the specified property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-398">Klucz właściwości zależności, które mają być używane do ustawiania wartości statycznego pola tylko do odczytu w klasie, która jest następnie używany do odwołań właściwość zależności w późniejszym czasie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-398">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-399">Ta metoda zwraca typ <xref:System.Windows.DependencyPropertyKey>, podczas gdy <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zwraca typ <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-399">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="fa05c-400">Zazwyczaj nie zostaną wprowadzone publiczne, klucze, które reprezentują właściwości tylko do odczytu, ponieważ klucze mogą być używane do ustawiania wartości właściwości zależności, wywołując <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-400">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="fa05c-401">Projekt klasy będzie miało wpływ na Twoje wymagania, ale zazwyczaj zalecane jest ograniczenie dostępu i widoczność dowolnego <xref:System.Windows.DependencyPropertyKey> tylko te części kodu, które są niezbędne, można ustawić tę właściwość zależności w ramach klasy lub aplikację logiki.</span><span class="sxs-lookup"><span data-stu-id="fa05c-401">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="fa05c-402">Zaleca się również udostępnić identyfikator właściwości zależności dla właściwości zależności tylko do odczytu, zapewniając wartość <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> jako `public static readonly` pola w swojej klasie.</span><span class="sxs-lookup"><span data-stu-id="fa05c-402">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="fa05c-403">Dołączone właściwości tylko do odczytu są rzadkie scenariuszu, ponieważ podstawowy scenariusz dla dołączonej właściwości jest jej użycia w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="fa05c-403">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="fa05c-404">Bez publicznej metody ustawiającej dołączonej właściwości nie można ustawić w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] składni.</span><span class="sxs-lookup"><span data-stu-id="fa05c-404">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="fa05c-405">Aby uzyskać więcej informacji na temat rejestracji właściwość zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-405">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="fa05c-406">Użyj RegisterAttached dziedziczenie wartości właściwości zależności</span><span class="sxs-lookup"><span data-stu-id="fa05c-406">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="fa05c-407">Jednego konkretnego scenariusza rejestrowania właściwości zależności jako dołączona jest obsługuje dziedziczenie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="fa05c-407">One particular scenario for registering a dependency property as attached is to support property value inheritance.</span></span> <span data-ttu-id="fa05c-408">Należy zarejestrować dziedziczenie wartości właściwości zależności za pomocą <xref:System.Windows.DependencyProperty.RegisterAttached%2A> nawet wtedy, gdy klasa definiuje metod dostępu do otoki właściwości, które uwidaczniają właściwości zależności, a nawet wtedy, gdy nie będą do udostępnienia Get * i * zestaw metod statycznych, aby zapewnić PRAWDA dołączone Właściwość metody dostępu pomocy technicznej.</span><span class="sxs-lookup"><span data-stu-id="fa05c-408">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="fa05c-409">Mimo że dziedziczenie wartości właściwości może pojawić się działać w przypadku właściwości zależności nie dołączony, zachowanie dziedziczenia nie dołączony właściwości przy użyciu pewnych granic elementu w drzewie środowiska uruchomieniowego jest niezdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="fa05c-409">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="fa05c-410">Rejestrowanie właściwości, jak skutecznie dołączone sprawia, że dołączona właściwość Właściwość globalną systemowi właściwości i gwarantuje, że dziedziczenie wartości właściwości działa w granicach wszystkich w obrębu drzewa.</span><span class="sxs-lookup"><span data-stu-id="fa05c-410">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="fa05c-411">Zawsze używaj <xref:System.Windows.DependencyProperty.RegisterAttached%2A> można zarejestrować właściwości, w którym można określić <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> w metadanych.</span><span class="sxs-lookup"><span data-stu-id="fa05c-411">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="fa05c-412">Aby uzyskać więcej informacji, zobacz [dziedziczenie wartości właściwości](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-412">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa05c-413">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-413">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa05c-414">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-414">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa05c-415">Typ właściciela, który rejestruje właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-415">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="fa05c-416">Metadane właściwości dla właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-416">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="fa05c-417">Odwołanie do utworzonych przez użytkownika wywołanie zwrotne, które należy wykonać wszelkie niestandardowego sprawdzania poprawności wartości właściwości zależności poza typowy Typ weryfikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-417">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-418">Rejestruje tylko do odczytu właściwości dołączone, z określonym typem właściwości, typ właściciela, metadanych właściwości modelu i wywołanie zwrotne weryfikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-418">Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-419">Klucz właściwości zależności, które mają być używane do ustawiania wartości statycznego pola tylko do odczytu w klasie, która jest następnie używany do odwoływać się do właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-419">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-420">Ta metoda zwraca typ <xref:System.Windows.DependencyPropertyKey>, podczas gdy <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zwraca typ <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-420">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="fa05c-421">Zazwyczaj klucze, które reprezentuje typ <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-421">Typically, the keys that represent the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="fa05c-422">Zazwyczaj nie zostaną wprowadzone publiczne, klucze, które reprezentują właściwości tylko do odczytu, ponieważ klucze mogą być używane do ustawiania wartości właściwości zależności, wywołując <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-422">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="fa05c-423">Projekt klasy będzie miało wpływ na Twoje wymagania, ale zazwyczaj zalecane jest ograniczenie dostępu i widoczność dowolnego <xref:System.Windows.DependencyPropertyKey> tylko te części kodu, które są niezbędne, można ustawić tę właściwość zależności w ramach klasy lub aplikację logiki.</span><span class="sxs-lookup"><span data-stu-id="fa05c-423">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="fa05c-424">Zaleca się również udostępnić identyfikator właściwości zależności dla właściwości zależności tylko do odczytu, zapewniając wartość <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> jako `public static readonly` pola w swojej klasie.</span><span class="sxs-lookup"><span data-stu-id="fa05c-424">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="fa05c-425">Dołączone właściwości tylko do odczytu są rzadkie scenariuszu, ponieważ podstawowy scenariusz dla dołączonej właściwości jest jej użycia w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="fa05c-425">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="fa05c-426">Bez publicznej metody ustawiającej dołączonej właściwości nie można ustawić w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] składni.</span><span class="sxs-lookup"><span data-stu-id="fa05c-426">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="fa05c-427">Aby uzyskać więcej informacji na temat rejestracji właściwość zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-427">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="fa05c-428">Użyj RegisterAttached dziedziczenie wartości właściwości zależności</span><span class="sxs-lookup"><span data-stu-id="fa05c-428">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="fa05c-429">Jednego konkretnego scenariusza rejestrowania właściwości zależności, jak dołączone zamiast <xref:System.Windows.DependencyProperty.Register%2A> służy do obsługi dziedziczenie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="fa05c-429">One particular scenario for registering a dependency property as attached instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="fa05c-430">Należy zarejestrować dziedziczenie wartości właściwości zależności za pomocą <xref:System.Windows.DependencyProperty.RegisterAttached%2A> nawet wtedy, gdy klasa definiuje metod dostępu do otoki właściwości, które uwidaczniają właściwości zależności, a nawet wtedy, gdy nie będą do udostępnienia Get * i * zestaw metod statycznych, aby zapewnić PRAWDA dołączone Właściwość metody dostępu pomocy technicznej.</span><span class="sxs-lookup"><span data-stu-id="fa05c-430">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="fa05c-431">Mimo że dziedziczenie wartości właściwości może pojawić się działać w przypadku właściwości zależności nie dołączony, zachowanie dziedziczenia nie dołączony właściwości przy użyciu pewnych granic elementu w drzewie środowiska uruchomieniowego jest niezdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="fa05c-431">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="fa05c-432">Rejestrowanie właściwości, jak skutecznie dołączone sprawia, że dołączona właściwość Właściwość globalną systemowi właściwości i gwarantuje, że dziedziczenie wartości właściwości działa w granicach wszystkich w obrębu drzewa.</span><span class="sxs-lookup"><span data-stu-id="fa05c-432">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="fa05c-433">Zawsze używaj <xref:System.Windows.DependencyProperty.RegisterAttached%2A> można zarejestrować właściwości, w którym można określić <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> w metadanych.</span><span class="sxs-lookup"><span data-stu-id="fa05c-433">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="fa05c-434">Aby uzyskać więcej informacji, zobacz [dziedziczenie wartości właściwości](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-434">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fa05c-435">Rejestruje właściwości zależności jako właściwości zależności tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-435">Registers a dependency property as a read-only dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterReadOnly (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa05c-436">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-436">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa05c-437">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-437">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa05c-438">Typ właściciela, który rejestruje właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-438">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="fa05c-439">Metadane właściwości dla właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-439">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-440">Rejestruje właściwości zależności tylko do odczytu z określonym typem właściwości, typ właściciela i metadanych właściwości modelu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-440">Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-441">Klucz właściwości zależności, które mają być używane do ustawiania wartości statycznego pola tylko do odczytu w klasie, która jest następnie używany do odwoływać się do właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-441">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-442">Ta metoda zwraca typ <xref:System.Windows.DependencyPropertyKey>, podczas gdy <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zwraca typ <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-442">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="fa05c-443">Zazwyczaj nie zostaną wprowadzone publiczne, klucze, które reprezentują właściwości tylko do odczytu, ponieważ klucze mogą być używane do ustawiania wartości właściwości zależności, wywołując <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-443">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="fa05c-444">Projekt klasy będzie miało wpływ na Twoje wymagania, ale zazwyczaj zalecane jest ograniczenie dostępu i widoczność dowolnego <xref:System.Windows.DependencyPropertyKey> tylko te części kodu, które są niezbędne, można ustawić tę właściwość zależności w ramach klasy lub aplikację logiki.</span><span class="sxs-lookup"><span data-stu-id="fa05c-444">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="fa05c-445">Zaleca się również udostępnić identyfikator właściwości zależności dla właściwości zależności tylko do odczytu, zapewniając wartość <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> jako `public static readonly` pola w swojej klasie.</span><span class="sxs-lookup"><span data-stu-id="fa05c-445">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="fa05c-446">Właściwości zależności tylko do odczytu są dość typowy scenariusz zarówno w istniejącym [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] i dostosowania, ponieważ inne [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] funkcje mogą wymagać właściwości zależności, nawet jeśli ta właściwość nie ma być można ustawić za obiekty wywołujące.</span><span class="sxs-lookup"><span data-stu-id="fa05c-446">Read-only dependency properties are a fairly typical scenario both in the existing [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] and for customization scenarios, because other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features might require a dependency property even if that property is not intended to be settable by callers.</span></span> <span data-ttu-id="fa05c-447">Można użyć wartości właściwości zależności tylko do odczytu jako podstawy dla innych operacji systemu właściwości, które przyjmują właściwość zależności, takie jak utworzenie <xref:System.Windows.Trigger> na właściwość zależności w stylu.</span><span class="sxs-lookup"><span data-stu-id="fa05c-447">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="fa05c-448">Aby uzyskać więcej informacji na temat rejestracji właściwość zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-448">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa05c-449">Poniższy przykład rejestruje `AquariumSize` właściwości zależności tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="fa05c-449">The following example registers an `AquariumSize` dependency property as read-only.</span></span> <span data-ttu-id="fa05c-450">W przykładzie zdefiniowano `AquariumSizeKey` kluczem wewnętrznym (tak że inne klasy w zestawie można zastąpić metadane) oraz udostępnia identyfikatora właściwości zależności na podstawie tego klucza jako `AquariumSizeProperty`.</span><span class="sxs-lookup"><span data-stu-id="fa05c-450">The example defines `AquariumSizeKey` as an internal key (so that other classes in the assembly could override metadata) and exposes the dependency property identifier based on that key as `AquariumSizeProperty`.</span></span> <span data-ttu-id="fa05c-451">Ponadto otoki jest tworzony dla `AquariumSize`, za pomocą tylko akcesor pobierania.</span><span class="sxs-lookup"><span data-stu-id="fa05c-451">Also, a wrapper is created for `AquariumSize`, with only a get accessor.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="fa05c-452">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-452">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="fa05c-453">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-453">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="fa05c-454">Typ właściciela, który rejestruje właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-454">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="fa05c-455">Metadane właściwości dla właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-455">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="fa05c-456">Odwołanie do utworzonych przez użytkownika wywołanie zwrotne, które należy wykonać wszelkie niestandardowego sprawdzania poprawności wartości właściwości zależności poza typowy Typ weryfikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-456">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa05c-457">Rejestruje właściwości zależności tylko do odczytu z określonym typem właściwości, typ właściciela, metadanych właściwości modelu i wywołanie zwrotne weryfikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-457">Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-458">Klucz właściwości zależności, które mają być używane do ustawiania wartości statycznego pola tylko do odczytu w klasie, która jest następnie używany do odwołań właściwość zależności w późniejszym czasie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-458">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-459">Ta metoda zwraca typ <xref:System.Windows.DependencyPropertyKey>, podczas gdy <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zwraca typ <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-459">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="fa05c-460">Zazwyczaj nie zostaną wprowadzone publiczne, klucze, które reprezentują właściwości tylko do odczytu, ponieważ klucze mogą być używane do ustawiania wartości właściwości zależności, wywołując <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-460">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="fa05c-461">Projekt klasy będzie miało wpływ na Twoje wymagania, ale zazwyczaj zalecane jest ograniczenie dostępu i widoczność dowolnego <xref:System.Windows.DependencyPropertyKey> tylko te części kodu, które są niezbędne, można ustawić tę właściwość zależności w ramach klasy lub aplikację logiki.</span><span class="sxs-lookup"><span data-stu-id="fa05c-461">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="fa05c-462">Zaleca się również udostępnić identyfikator właściwości zależności dla właściwości zależności tylko do odczytu, zapewniając wartość <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> jako `public static readonly` pola w swojej klasie.</span><span class="sxs-lookup"><span data-stu-id="fa05c-462">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="fa05c-463">Właściwości zależności tylko do odczytu są dość typowy scenariusz.</span><span class="sxs-lookup"><span data-stu-id="fa05c-463">Read-only dependency properties are a fairly typical scenario.</span></span> <span data-ttu-id="fa05c-464">Można użyć wartości właściwości zależności tylko do odczytu jako podstawy dla innych operacji systemu właściwości, które przyjmują właściwość zależności, takie jak utworzenie <xref:System.Windows.Trigger> na właściwość zależności w stylu.</span><span class="sxs-lookup"><span data-stu-id="fa05c-464">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="fa05c-465">Aby uzyskać więcej informacji na temat rejestracji właściwość zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-465">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 <span data-ttu-id="fa05c-466">Sprawdzanie poprawności właściwości zależności tylko do odczytu może być mniej ważne.</span><span class="sxs-lookup"><span data-stu-id="fa05c-466">Validation on a read-only dependency property might be less important.</span></span> <span data-ttu-id="fa05c-467">Poziom dostępu niepublicznych, które określisz dla klucza zmniejsza prawdopodobieństwo dla dowolnego nieprawidłowe dane wejściowe.</span><span class="sxs-lookup"><span data-stu-id="fa05c-467">The nonpublic access level you specify for the key reduces the likelihood for arbitrary invalid input.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dependencyProperty.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fa05c-468">Zwraca ciąg reprezentujący właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-468">Returns the string representation of the dependency property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa05c-469">Ciąg reprezentujący właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-469">The string representation of the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-470">Ta implementacja zwraca <xref:System.Windows.DependencyProperty.Name%2A> wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="fa05c-470">This implementation returns the <xref:System.Windows.DependencyProperty.Name%2A> property value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.DependencyProperty.Name" />
      </Docs>
    </Member>
    <Member MemberName="UnsetValue">
      <MemberSignature Language="C#" Value="public static readonly object UnsetValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object UnsetValue" />
      <MemberSignature Language="DocId" Value="F:System.Windows.DependencyProperty.UnsetValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnsetValue As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ UnsetValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnsetValue : obj" Usage="System.Windows.DependencyProperty.UnsetValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa05c-471">Określa wartość statyczna, która jest używana przez [! System właściwości include[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-MD.MD)] zamiast <see langword="null" /> aby wskazać, czy właściwość istnieje, ale nie ma jej wartości ustawione przez system właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-471">Specifies a static value that is used by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system rather than <see langword="null" /> to indicate that the property exists, but does not have its value set by the property system.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-472"><xref:System.Windows.DependencyProperty.UnsetValue> jest to wartość wartownik, która jest używany w scenariuszach gdzie [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] właściwość system nie mógł określić zażądano <xref:System.Windows.DependencyProperty> wartość.</span><span class="sxs-lookup"><span data-stu-id="fa05c-472"><xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value that is used for scenarios where the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system is unable to determine a requested <xref:System.Windows.DependencyProperty> value.</span></span> <span data-ttu-id="fa05c-473"><xref:System.Windows.DependencyProperty.UnsetValue> jest używana zamiast `null`, ponieważ `null` może być prawidłową wartością właściwości, a także prawidłowy (i często używane) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-473"><xref:System.Windows.DependencyProperty.UnsetValue> is used rather than `null`, because `null` could be a valid property value, as well as a valid (and frequently used) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span></span>  
  
 <span data-ttu-id="fa05c-474"><xref:System.Windows.DependencyProperty.UnsetValue> nigdy nie jest zwracana z <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-474"><xref:System.Windows.DependencyProperty.UnsetValue> is never returned out of <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="fa05c-475">Gdy wywołujesz <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> we właściwości zależności na <xref:System.Windows.DependencyObject> wypadku stosuje jedną z następujących:</span><span class="sxs-lookup"><span data-stu-id="fa05c-475">When you call <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> on a dependency property on a <xref:System.Windows.DependencyObject> instance, one of the following applies:</span></span>  
  
-   <span data-ttu-id="fa05c-476">Właściwości zależności ma wartość domyślną w metadanych i ta wartość jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="fa05c-476">A dependency property has a default value established in metadata and that value is returned.</span></span> <span data-ttu-id="fa05c-477">Ta wartość może pochodzić z <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-477">This value might come from <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
-   <span data-ttu-id="fa05c-478">Niektóre inne wartości zostało ustanowione przez system właściwości, a wartością domyślną jest już nieaktualny.</span><span class="sxs-lookup"><span data-stu-id="fa05c-478">Some other value was established by the property system, and the default value is no longer relevant.</span></span> <span data-ttu-id="fa05c-479">Aby uzyskać więcej informacji, zobacz [następstwo wartości właściwości](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-479">For details, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="fa05c-480">Ustawienie <xref:System.Windows.PropertyMetadata.DefaultValue%2A> z <xref:System.Windows.DependencyProperty.UnsetValue> specjalnie jest niedozwolone.</span><span class="sxs-lookup"><span data-stu-id="fa05c-480">Setting a <xref:System.Windows.PropertyMetadata.DefaultValue%2A> of <xref:System.Windows.DependencyProperty.UnsetValue> is specifically disallowed.</span></span>  
  
 <span data-ttu-id="fa05c-481"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> Zwraca <xref:System.Windows.DependencyProperty.UnsetValue> kiedy żądana właściwość nie została lokalnie ustawiona.</span><span class="sxs-lookup"><span data-stu-id="fa05c-481"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> returns <xref:System.Windows.DependencyProperty.UnsetValue> when the requested property has not been locally set.</span></span>  
  
 <span data-ttu-id="fa05c-482"><xref:System.Windows.DependencyProperty.UnsetValue> ma specjalne znaczenie, gdy jest używana jako wartość zwracaną <xref:System.Windows.CoerceValueCallback>.</span><span class="sxs-lookup"><span data-stu-id="fa05c-482"><xref:System.Windows.DependencyProperty.UnsetValue> has a special meaning when used as the return value of a <xref:System.Windows.CoerceValueCallback>.</span></span> <span data-ttu-id="fa05c-483">Aby uzyskać więcej informacji, zobacz [zależność wartości wywołania zwrotnego i walidacji](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-483">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 <span data-ttu-id="fa05c-484">Jeśli dokonywane jest wiązanie bazę danych, należy pamiętać, że <xref:System.Windows.DependencyProperty.UnsetValue> nie jest odpowiednikiem <xref:System.DBNull.Value>, w podobny sposób jak <xref:System.DBNull.Value> nie jest równoważna wartości true wartość null.</span><span class="sxs-lookup"><span data-stu-id="fa05c-484">If you are binding to a database, note that <xref:System.Windows.DependencyProperty.UnsetValue> is not equivalent to <xref:System.DBNull.Value>, in a similar way to how <xref:System.DBNull.Value> is not equivalent to a true null.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.ValidateValueCallback ValidateValueCallback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ValidateValueCallback ValidateValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidateValueCallback As ValidateValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ValidateValueCallback ^ ValidateValueCallback { System::Windows::ValidateValueCallback ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidateValueCallback : System.Windows.ValidateValueCallback" Usage="System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ValidateValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa05c-485">Pobiera wywołanie zwrotne weryfikacji wartości dla właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-485">Gets the value validation callback for the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa05c-486">Wywołanie zwrotne weryfikacji wartość tej właściwości zależności, zgodnie z <paramref name="validateValueCallback" /> parametru w pierwotnej rejestracji właściwość zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa05c-486">The value validation callback for this dependency property, as provided for the <paramref name="validateValueCallback" /> parameter in the original dependency property registration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa05c-487">Ta właściwość będzie zawierać `null` dla dowolnej właściwości zależności, bez weryfikacji zarejestrowanego wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="fa05c-487">This property will contain `null` for any dependency property with no registered validation callback.</span></span>  
  
 <span data-ttu-id="fa05c-488">Sprawdź poprawność wartości wywołania zwrotne musi działać w sensie statyczne: stosowane za pośrednictwem weryfikacji <xref:System.Windows.ValidateValueCallback> nie może określić, czy podana wartość jest prawidłowa dla każdego określonego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="fa05c-488">Validate value callbacks must act in a static sense: validation applied through the <xref:System.Windows.ValidateValueCallback> cannot determine whether the provided value is valid for any particular instance.</span></span> <span data-ttu-id="fa05c-489">Wywołanie zwrotne tylko można określić, czy wszystkie obiekty, które posiadają właściwości zależności powinien lub nie powinien akceptować podanej wartości jako prawidłowy.</span><span class="sxs-lookup"><span data-stu-id="fa05c-489">The callback can only determine whether all objects that possess the dependency property should or should not accept the provided value as valid.</span></span> <span data-ttu-id="fa05c-490">Jeśli potrzebujesz do wykonywania sprawdzania poprawności, która zależy od wartości innych właściwości zależności na konkretnym wystąpieniu, użycia, wiedząc <xref:System.Windows.CoerceValueCallback> zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="fa05c-490">If you need to perform validation that relies on knowing the values of other dependency properties on a particular instance, use a <xref:System.Windows.CoerceValueCallback> instead.</span></span> <span data-ttu-id="fa05c-491"><xref:System.Windows.CoerceValueCallback> Jest zarejestrowany w ramach metadane zależności właściwości, a nie bezpośrednio w ramach identyfikatora właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="fa05c-491">The <xref:System.Windows.CoerceValueCallback> is registered as part of dependency property metadata, rather than directly within the dependency property identifier.</span></span> <span data-ttu-id="fa05c-492">Aby uzyskać więcej informacji, zobacz [zależność wartości wywołania zwrotnego i walidacji](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="fa05c-492">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValidateValueCallback" />
      </Docs>
    </Member>
  </Members>
</Type>