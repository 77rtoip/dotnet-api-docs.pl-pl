<Type Name="DependencyProperty" FullName="System.Windows.DependencyProperty">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3e36dd257b906b7c94742536f4e333ac2cac8cd0" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33660023" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependencyProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyProperty" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyProperty sealed" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="756a7-101">Reprezentuje właściwości, które można ustawić za pomocą metody takie jak, stylów, powiązań danych, animacji i dziedziczenia.</span>
      <span class="sxs-lookup">
        <span data-stu-id="756a7-101">Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-102">A <xref:System.Windows.DependencyProperty> obsługuje następujące funkcje w [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span><span class="sxs-lookup"><span data-stu-id="756a7-102">A <xref:System.Windows.DependencyProperty> supports the following capabilities in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span></span>  
  
-   <span data-ttu-id="756a7-103">Właściwość można ustawić w stylu.</span><span class="sxs-lookup"><span data-stu-id="756a7-103">The property can be set in a style.</span></span> <span data-ttu-id="756a7-104">Aby uzyskać więcej informacji, zobacz [stylami i tworzenia szablonów](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-104">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
-   <span data-ttu-id="756a7-105">Właściwość można ustawić za pomocą wiązania z danymi.</span><span class="sxs-lookup"><span data-stu-id="756a7-105">The property can be set through data binding.</span></span> <span data-ttu-id="756a7-106">Aby uzyskać więcej informacji na temat właściwości zależności wiązania danych zobacz [porady: powiązanie właściwości formantów dwóch](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-106">For more information about data binding dependency properties, see [How to: Bind the Properties of Two Controls](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span></span>  
  
-   <span data-ttu-id="756a7-107">Można ustawić właściwości z odwołaniem zasobu dynamicznego.</span><span class="sxs-lookup"><span data-stu-id="756a7-107">The property can be set with a dynamic resource reference.</span></span> <span data-ttu-id="756a7-108">Aby uzyskać więcej informacji, zobacz [zasobów XAML](~/docs/framework/wpf/advanced/xaml-resources.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-108">For more information, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
-   <span data-ttu-id="756a7-109">Właściwości mogą dziedziczyć wartość automatycznie elementu nadrzędnego w drzewie elementu.</span><span class="sxs-lookup"><span data-stu-id="756a7-109">The property can inherit its value automatically from a parent element in the element tree.</span></span> <span data-ttu-id="756a7-110">Aby uzyskać więcej informacji, zobacz [dziedziczenie wartości właściwości](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-110">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
-   <span data-ttu-id="756a7-111">Można animować właściwości.</span><span class="sxs-lookup"><span data-stu-id="756a7-111">The property can be animated.</span></span> <span data-ttu-id="756a7-112">Aby uzyskać więcej informacji, zobacz [omówienie animacja](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-112">For more information, see [Animation Overview](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span></span>  
  
-   <span data-ttu-id="756a7-113">Właściwość zgłosić po zmianie poprzedniej wartości właściwości i wartości właściwości mogą zostać przekształcone.</span><span class="sxs-lookup"><span data-stu-id="756a7-113">The property can report when the previous value of the property has been changed and the property value can be coerced.</span></span> <span data-ttu-id="756a7-114">Aby uzyskać więcej informacji, zobacz [wywołania zwrotne właściwości zależności i sprawdzania poprawności](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-114">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
-   <span data-ttu-id="756a7-115">Właściwość raportuje informacje do [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], takie jak czy zmiana wartości właściwości powinny wymagać systemu układu, aby przeskładać elementy wizualne dla elementu.</span><span class="sxs-lookup"><span data-stu-id="756a7-115">The property reports information to [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], such as whether changing a property value should require the layout system to recompose the visuals for an element.</span></span>  
  
-   <span data-ttu-id="756a7-116">Właściwość otrzymuje wsparcie w [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span><span class="sxs-lookup"><span data-stu-id="756a7-116">The property receives support in the [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span></span>  <span data-ttu-id="756a7-117">Na przykład właściwość może być edytowany w **właściwości** okna.</span><span class="sxs-lookup"><span data-stu-id="756a7-117">For example, the property can be edited in the **Properties** window.</span></span>  
  
 <span data-ttu-id="756a7-118">Aby dowiedzieć się więcej na temat właściwości zależności, zobacz [Przegląd właściwości zależności](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-118">To learn more about dependency properties, see [Dependency Properties Overview](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span></span> <span data-ttu-id="756a7-119">Jeśli chcesz właściwości z typów niestandardowych do obsługi funkcji z powyższej listy, należy utworzyć właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-119">If you want properties on your custom types to support the capabilities in the preceding list, you should create a dependency property.</span></span>  <span data-ttu-id="756a7-120">Informacje na temat tworzenia właściwości zależności niestandardowych, zobacz [niestandardowe właściwości zależności](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-120">To learn how to create custom dependency properties, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="756a7-121">Dołączona właściwość jest właściwością umożliwiającą dowolnego obiektu na typ, który definiuje dołączona właściwość informacji w raporcie.</span><span class="sxs-lookup"><span data-stu-id="756a7-121">An attached property is a property that enables any object to report information to the type that defines the attached property.</span></span> <span data-ttu-id="756a7-122">W [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], dowolnego typu, która dziedziczy <xref:System.Windows.DependencyObject> można użyć właściwości dołączonej niezależnie od tego, czy typ dziedziczy z typu, który definiuje właściwość.</span><span class="sxs-lookup"><span data-stu-id="756a7-122">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], any type that inherits from <xref:System.Windows.DependencyObject> can use an attached property regardless of whether the type inherits from the type that defines the property.</span></span> <span data-ttu-id="756a7-123">Dołączona właściwość jest funkcją [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] języka.</span><span class="sxs-lookup"><span data-stu-id="756a7-123">An attached property is a feature of the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language.</span></span>  <span data-ttu-id="756a7-124">Aby ustawić właściwości dołączonej w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], użyj *ownerType*.* propertyName* składni.</span><span class="sxs-lookup"><span data-stu-id="756a7-124">To set an attached property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], use the *ownerType*.*propertyName* syntax.</span></span> <span data-ttu-id="756a7-125">Na przykład dołączona właściwość <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> właściwości.</span><span class="sxs-lookup"><span data-stu-id="756a7-125">An example of an attached property is the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="756a7-126">Jeśli chcesz utworzyć właściwość, która może być używana na wszystkich <xref:System.Windows.DependencyObject> typów, a następnie należy utworzyć dołączona właściwość.</span><span class="sxs-lookup"><span data-stu-id="756a7-126">If you want to create a property that can be used on all <xref:System.Windows.DependencyObject> types, then you should create an attached property.</span></span> <span data-ttu-id="756a7-127">Aby dowiedzieć się więcej na temat dołączone właściwości, oraz o sposobie ich tworzenia, zobacz [dołączony Przegląd właściwości](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-127">To learn more about attached properties, including how to create them, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
<a name="xamlAttributeUsage_DependencyProperty"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="756a7-128">Użycie atrybutu języka XAML</span><span class="sxs-lookup"><span data-stu-id="756a7-128">XAML Attribute Usage</span></span>  
  
```  
<object property="dependencyPropertyName"/>  
- or -  
<object property="ownerType.dependencyPropertyName"/>  
- or -  
<object property="attachedPropertyOwnerType.attachedPropertyName"/>  
```  
  
<a name="xamlValues_DependencyProperty"></a>   
## <a name="xaml-values"></a><span data-ttu-id="756a7-129">Wartości XAML</span><span class="sxs-lookup"><span data-stu-id="756a7-129">XAML Values</span></span>  
 `dependencyPropertyName`  
 <span data-ttu-id="756a7-130">Ciąg określający <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> właściwości żądaną zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-130">A string that specifies the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> of the desired dependency property.</span></span> <span data-ttu-id="756a7-131">To może być poprzedzony przez prefiks przestrzeni nazw XML, jeśli właściwość nie ma domyślnej przestrzeni nazw XML (Aby uzyskać więcej informacji, zobacz [przestrzeń nazw XAML i Namespace mapowanie WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span><span class="sxs-lookup"><span data-stu-id="756a7-131">This can be preceded by an XML namespace prefix if the property is not in the default XML namespace (for details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span></span>  
  
 <span data-ttu-id="756a7-132">`ownerType`.`dependencyPropertyName`</span><span class="sxs-lookup"><span data-stu-id="756a7-132">`ownerType`.`dependencyPropertyName`</span></span>  
 <span data-ttu-id="756a7-133">Ciąg określający typ właściciela właściwości zależności, kropkę (.), a następnie <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="756a7-133">A string that specifies an owner type of a dependency property, a dot (.), then the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="756a7-134">`ownerType` może być poprzedzone prefiks przestrzeni nazw XML.</span><span class="sxs-lookup"><span data-stu-id="756a7-134">`ownerType` can also be preceded by an XML namespace prefix.</span></span> <span data-ttu-id="756a7-135">Dla style późnym wiązaniem i szablony, w którym należy określić właściciela właściwości zależności do analizowania kontekstu, ponieważ jest to użycie `TargetType` nie jest jeszcze znany.</span><span class="sxs-lookup"><span data-stu-id="756a7-135">This usage is particular to late-bound styles and templates, where the owner of the dependency property must be specified for parsing context because the `TargetType` is not yet known.</span></span> <span data-ttu-id="756a7-136">Aby uzyskać więcej informacji, zobacz [stylami i tworzenia szablonów](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-136">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
 <span data-ttu-id="756a7-137">`attachedPropertyOwnerType` *.*</span><span class="sxs-lookup"><span data-stu-id="756a7-137">`attachedPropertyOwnerType` *.*</span></span> `attachedPropertyName`  
 <span data-ttu-id="756a7-138">Ciąg, który określa właściciela dołączona właściwość, kropkę (.), a następnie dołączona właściwość name.</span><span class="sxs-lookup"><span data-stu-id="756a7-138">A string that specifies  the owner of an attached property, a dot (.), then the attached property name.</span></span> <span data-ttu-id="756a7-139">`attachedPropertyOwnerType` może być poprzedzone prefiks przestrzeni nazw XML.</span><span class="sxs-lookup"><span data-stu-id="756a7-139">`attachedPropertyOwnerType` can also be preceded by an XML namespace prefix.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AddOwner">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="756a7-140">Dodaje innego typu jako właściciela właściwości zależności, który został już zarejestrowany do typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-140">Adds another type as an owner of a dependency property that has already been registered to a type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="756a7-141">Typ do dodania jako właściciela tej właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-141">The type to add as an owner of this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-142">Dodaje innego typu jako właściciela właściwości zależności, który został już zarejestrowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-142">Adds another type as an owner of a dependency property that has already been registered.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-143">Odwołanie do oryginalnej <see cref="T:System.Windows.DependencyProperty" /> identyfikator, który identyfikuje właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-143">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          </span>
          <span data-ttu-id="756a7-144">Ten identyfikator powinny zostać ujawnione przez dodanie klasę jako <see langword="public static readonly" /> pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-144">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-145">Ta metoda umożliwia systemowi właściwości rozpoznaje właściwości zależności na typ, który nie może zarejestrować danej właściwości zależności w szczególności początkowo.</span><span class="sxs-lookup"><span data-stu-id="756a7-145">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="756a7-146">Zazwyczaj <xref:System.Windows.DependencyProperty.AddOwner%2A> służy do dodawania właściwości zależności do klasy, które nie udostępniają już tą właściwością zależności za pomocą dziedziczenia klas zarządzanych (dziedziczenia klas spowodowałoby właściwości otoki być dziedziczone przez klasy pochodnej, dlatego czy zapewniają ogólne tabeli elementów członkowskich dostęp do właściwości zależności już).</span><span class="sxs-lookup"><span data-stu-id="756a7-146">Typically, <xref:System.Windows.DependencyProperty.AddOwner%2A> is used to add dependency properties to classes that do not already expose that dependency property through managed class inheritance (class inheritance would cause the wrapper properties to be inherited by the derived class, and thus would provide general members-table access to the dependency property already).</span></span> <span data-ttu-id="756a7-147"><xref:System.Windows.DependencyProperty.AddOwner%2A> Umożliwia systemowi właściwości rozpoznaje właściwości zależności na typ, który nie zarejestrował początkowo danej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-147"><xref:System.Windows.DependencyProperty.AddOwner%2A> enables the property system to recognize a dependency property on a type that did not register that dependency property initially.</span></span>  
  
 <span data-ttu-id="756a7-148">Ta sygnatura nie zezwala na określanie metadanych.</span><span class="sxs-lookup"><span data-stu-id="756a7-148">This signature does not allow for specifying metadata.</span></span>  <span data-ttu-id="756a7-149">Korzystając z tej metody, metadanych jest generowane automatycznie dla nowego <xref:System.Windows.DependencyProperty> i wpisz jego właściciela.</span><span class="sxs-lookup"><span data-stu-id="756a7-149">When you use this method, the metadata is automatically generated for the new <xref:System.Windows.DependencyProperty> and its owner type.</span></span> <span data-ttu-id="756a7-150">Metadane automatycznie generowanej powstaje na podstawie metadanych scalony ze wszystkich typów podstawowych, których tej właściwości zdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="756a7-150">The auto-generated metadata is the result of the merged metadata from all of the base types that have this property defined.</span></span> <span data-ttu-id="756a7-151">Jeśli brak scalonych metadanych nie jest dostępne, zostanie użyta domyślna metadane dla właściwości.</span><span class="sxs-lookup"><span data-stu-id="756a7-151">If no merged metadata is available, then the default metadata for the property is used.</span></span> <span data-ttu-id="756a7-152">Jeśli właściwość jest zarejestrowana przy użyciu <xref:System.Windows.DependencyProperty.RegisterAttached%2A> metody, a następnie metadanych domyślny jest taka sama jak metadanych, które jest tworzone, gdy <xref:System.Windows.DependencyProperty.RegisterAttached%2A> została wywołana.</span><span class="sxs-lookup"><span data-stu-id="756a7-152">If the property is registered by using the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, then the default metadata is the same as the metadata that is created when <xref:System.Windows.DependencyProperty.RegisterAttached%2A> was called.</span></span> <span data-ttu-id="756a7-153">W przeciwnym razie <xref:System.Windows.PropertyMetadata> obiekt jest tworzony z <xref:System.Windows.PropertyMetadata.DefaultValue%2A> właściwość domyślny typ właściwości i wszystkie inne właściwości <xref:System.Windows.PropertyMetadata> ma ustawioną wartość `null`.</span><span class="sxs-lookup"><span data-stu-id="756a7-153">Otherwise, the <xref:System.Windows.PropertyMetadata> object is created with the <xref:System.Windows.PropertyMetadata.DefaultValue%2A> property set to the property type's default and all other properties of the <xref:System.Windows.PropertyMetadata> is set to `null`.</span></span> <span data-ttu-id="756a7-154">Użyj <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> podpisu, aby zapewnić metadanych do wersji właściwości zależności, jak dodać do udostępnionego typu.</span><span class="sxs-lookup"><span data-stu-id="756a7-154">Use the <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> signature if you want to provide metadata for the version of the dependency property as added to the provided type.</span></span>  
  
 <span data-ttu-id="756a7-155">Zwracana wartość tej metody zwykle umożliwia deklarowanie i ujawnia właściwości zależności, przechowując identyfikatora właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-155">The return value of this method is typically used to declare and expose the dependency property by storing a dependency property identifier.</span></span> <span data-ttu-id="756a7-156">Identyfikator zapewnia dostęp do właściwości zależności, aby wywołać właściwości systemu [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] względem właściwości zależności, szczególnie jako istnieje na dodawanie klasy właściciela.</span><span class="sxs-lookup"><span data-stu-id="756a7-156">The identifier provides access to the dependency property if you want to call property system [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] against the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="756a7-157">Tej samej nazwie właściwości pierwotnego właściciela i dodany właściciela powinny być służy do wskazania podobnych możliwościach.</span><span class="sxs-lookup"><span data-stu-id="756a7-157">The same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="756a7-158">Należy używać <xref:System.Windows.DependencyProperty> wartość zwracana <xref:System.Windows.DependencyProperty.AddOwner%2A> metody do definiowania identyfikatora właściwości zależności, a także aby zadeklarować [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] otoki właściwości, dla właściwości zależności, które są dodawane do typów za pomocą <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span><span class="sxs-lookup"><span data-stu-id="756a7-158">You should use the <xref:System.Windows.DependencyProperty> return value of the <xref:System.Windows.DependencyProperty.AddOwner%2A> method to define the dependency property identifier, and also to declare [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="756a7-159"><xref:System.Windows.DependencyProperty.AddOwner%2A> Metodologii zalecanych jest używany podczas tworzenia właściwości zależności, które są zadeklarowane w [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="756a7-159">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating the dependency properties that are declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="756a7-160">Na przykład zarówno <xref:System.Windows.Controls.Border> i <xref:System.Windows.Controls.Control> zdefiniować `BorderBrush` właściwości zależności, które mają podobną funkcjonalność.</span><span class="sxs-lookup"><span data-stu-id="756a7-160">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="756a7-161"><xref:System.Windows.Controls.Control> Definiuje jego `BorderBrush` właściwości do właściwości systemu przez wywołanie metody <xref:System.Windows.DependencyProperty.AddOwner%2A> oparte na pierwotny właściciel <xref:System.Windows.Controls.Border> i jego zarejestrowanych <xref:System.Windows.Controls.Border.BorderBrushProperty> identyfikatora właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-161"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> based on the original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="756a7-162"><xref:System.Windows.DependencyProperty.AddOwner%2A> Zwrócić wartość jest następnie używany do ustanawiania nowego statycznego <xref:System.Windows.DependencyProperty> pola (<xref:System.Windows.Controls.Control.BorderBrushProperty>) dla tej właściwości na dodano właściciela i `BorderBrush` właściwości otoki jest również zadeklarowany.</span><span class="sxs-lookup"><span data-stu-id="756a7-162">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a new static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="ownerType">
          <span data-ttu-id="756a7-163">Typ do dodania jako właściciela tej właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-163">The type to add as owner of this dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="756a7-164">Metadane, które kwalifikują się właściwości zależności, ponieważ znajduje się na podanego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-164">The metadata that qualifies the dependency property as it exists on the provided type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-165">Dodaje innego typu jako właściciela właściwości zależności, który został już zarejestrowany, zapewniając metadanych właściwości zależności dla właściwości zależności będą znajdować się na typ podanego właściciela.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-165">Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-166">Odwołanie do oryginalnej <see cref="T:System.Windows.DependencyProperty" /> identyfikator, który identyfikuje właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-166">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span>
          </span>
          <span data-ttu-id="756a7-167">Ten identyfikator powinny zostać ujawnione przez dodanie klasę jako <see langword="public static readonly" /> pola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-167">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-168">Ta metoda umożliwia systemowi właściwości rozpoznaje właściwości zależności na typ, który nie może zarejestrować danej właściwości zależności w szczególności początkowo.</span><span class="sxs-lookup"><span data-stu-id="756a7-168">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="756a7-169">Zwracana wartość ta metoda służy do deklarowanie i ujawnia właściwości zależności szczególnie, ponieważ znajduje się ona na dodawanie klasy właściciela.</span><span class="sxs-lookup"><span data-stu-id="756a7-169">The return value of this method is used to declare and expose the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="756a7-170">Ogólnie rzecz biorąc tej samej nazwie właściwości pierwotnego właściciela i dodany właściciela powinny być służy do wskazania podobnych możliwościach.</span><span class="sxs-lookup"><span data-stu-id="756a7-170">Generally, the same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="756a7-171">Dobrym rozwiązaniem do udostępnienia identyfikatorów, a także jako nowy jest [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] otoki właściwości, dla właściwości zależności, które są dodawane do typów za pomocą <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span><span class="sxs-lookup"><span data-stu-id="756a7-171">It is good practice to expose the identifiers, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="756a7-172"><xref:System.Windows.DependencyProperty.AddOwner%2A> Metodologii zalecanych jest używany podczas tworzenia [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] zadeklarowanym w [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span><span class="sxs-lookup"><span data-stu-id="756a7-172">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="756a7-173">Na przykład zarówno <xref:System.Windows.Controls.Border> i <xref:System.Windows.Controls.Control> zdefiniować `BorderBrush` właściwości zależności, które mają podobną funkcjonalność.</span><span class="sxs-lookup"><span data-stu-id="756a7-173">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="756a7-174"><xref:System.Windows.Controls.Control> Definiuje jego `BorderBrush` właściwości do właściwości systemu przez wywołanie metody <xref:System.Windows.DependencyProperty.AddOwner%2A> na pierwotny właściciel <xref:System.Windows.Controls.Border> i jego zarejestrowanych <xref:System.Windows.Controls.Border.BorderBrushProperty> identyfikatora właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-174"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> on original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="756a7-175"><xref:System.Windows.DependencyProperty.AddOwner%2A> Zwrócić wartość jest następnie używany do ustanawiania statycznego <xref:System.Windows.DependencyProperty> pola (<xref:System.Windows.Controls.Control.BorderBrushProperty>) dla tej właściwości na dodano właściciela i `BorderBrush` właściwości otoki jest również zadeklarowany.</span><span class="sxs-lookup"><span data-stu-id="756a7-175">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>)for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 <span data-ttu-id="756a7-176">Identyfikator właściwości zależności właściciela dodano należy go używać w operacjach takich jak <xref:System.Windows.DependencyObject.GetValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="756a7-176">The added owner's dependency property identifier should be used for operations such as <xref:System.Windows.DependencyObject.GetValue%2A>.</span></span> <span data-ttu-id="756a7-177">Jednak określonego typu obejmującego typów lub wystąpienia klasy, która została dodana jako właściciela o metadanych, będzie nadal zwraca oczekiwanych rezultatów nawet wtedy, gdy oryginalne (nie dodano właściciela) określono identyfikator właściwości zależności w wywołań metod takich jak <xref:System.Windows.DependencyObject.GetValue%2A> lub <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="756a7-177">However, type-specific operations involving either types or instances of the class that was added as owner with different metadata will still return the expected results even if the original (not the added owner's) dependency property identifier is specified in calls to methods such as <xref:System.Windows.DependencyObject.GetValue%2A> or <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span></span> <span data-ttu-id="756a7-178">Metadane dla właściciela dodany jest perpetuated przez <xref:System.Windows.DependencyProperty.AddOwner%2A> wywołać się nie odwołuje się do wyłącznie przez dodanie pola Identyfikator klasy właściciela.</span><span class="sxs-lookup"><span data-stu-id="756a7-178">The metadata for the added owner is perpetuated by the <xref:System.Windows.DependencyProperty.AddOwner%2A> call itself, not necessarily referenced exclusively by the adding owner class identifier field.</span></span> <span data-ttu-id="756a7-179">Niemniej jednak jest dobrym rozwiązaniem, aby prezentować identyfikator, a także jako nowy [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] otoki właściwości, dla właściwości zależności, które są dodawane do typów za pomocą <xref:System.Windows.DependencyProperty.AddOwner%2A>, ponieważ w przeciwnym razie tworzy różnice między [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] i [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] reprezentacje właściwości.</span><span class="sxs-lookup"><span data-stu-id="756a7-179">Nevertheless, it is good practice to expose the  identifier, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>, because failing to do so creates disparity between the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] representations of your properties.</span></span>  
  
 <span data-ttu-id="756a7-180">Metadane podane jest scalany z metadanych właściwości dla właściwości zależności, ponieważ znajduje się na podstawowy właściciel.</span><span class="sxs-lookup"><span data-stu-id="756a7-180">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="756a7-181">Wszystkie właściwości, które zostały określone w oryginalnych metadanych podstawowej będzie umieszczony.</span><span class="sxs-lookup"><span data-stu-id="756a7-181">Any characteristics that were specified in the original base metadata will persist.</span></span> <span data-ttu-id="756a7-182">Tylko te właściwości, które w szczególności zostały zmienione w nowych metadanych spowoduje zastąpienie właściwości podstawowej metadanych.</span><span class="sxs-lookup"><span data-stu-id="756a7-182">Only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="756a7-183">Niektóre właściwości, takie jak <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, zostały zastąpione, jeśli są one określone w nowymi metadanymi.</span><span class="sxs-lookup"><span data-stu-id="756a7-183">Some characteristics, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are replaced if they are specified in the new metadata.</span></span> <span data-ttu-id="756a7-184">Inne, takie jak <xref:System.Windows.PropertyChangedCallback>, są połączone.</span><span class="sxs-lookup"><span data-stu-id="756a7-184">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="756a7-185">Ostatecznie, zachowanie scalania zależy od typu metadanych właściwości używany do zastąpienia, dlatego dla istniejącej klasy metadanych właściwości używane przez zachowanie opisane tutaj [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-185">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="756a7-186">Aby uzyskać więcej informacji, zobacz [metadanych właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-metadata.md) i [metadanych właściwości Framework](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-186">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata DefaultMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyMetadata DefaultMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultMetadata As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyMetadata ^ DefaultMetadata { System::Windows::PropertyMetadata ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="756a7-187">Pobiera metadane domyślnej właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-187">Gets the default metadata of the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="756a7-188">Metadane domyślnej właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-188">The default metadata of the dependency property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-189">Metadane domyślne są metadane właściwości, która jest dostępna dla tego konkretnego obiektu lub typu pochodnego obiektu gdzie metadanych alternatywną, nie został dostarczony przez jawne <xref:System.Windows.DependencyProperty.Register%2A> lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> wywołania.</span><span class="sxs-lookup"><span data-stu-id="756a7-189">The default metadata is the property metadata that is available to that particular object or an object of a derived type where no alternative metadata was supplied by an explicit <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> call.</span></span>  
  
 <span data-ttu-id="756a7-190">Jeśli właściciel oryginalnego zastosowano metadanych do pierwszej <xref:System.Windows.DependencyProperty.Register%2A> wywołaniu, które ustanowić właściwości zależności, a następnie tych metadanych jest zwracana jako <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="756a7-190">If the original owner applied metadata to the first <xref:System.Windows.DependencyProperty.Register%2A> call that established the dependency property, then that metadata is returned as <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="756a7-191">Jeśli metadanych nie została zastosowana w oryginalnym <xref:System.Windows.DependencyProperty.Register%2A> wywołań, a następnie metadanych domyślne są generowane na podstawie poziomu <xref:System.Windows.DependencyProperty.Register%2A> połączeń i ta wartość jest zwracana jako <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="756a7-191">If no metadata was applied in the original <xref:System.Windows.DependencyProperty.Register%2A> call, then default metadata is generated from within the <xref:System.Windows.DependencyProperty.Register%2A> call and this value is returned as the <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="756a7-192">Głównym celem o domyślnej metadane skojarzone z <xref:System.Windows.DependencyProperty> jest umożliwiają określanie wartości domyślnej dla tej właściwości na dowolnym <xref:System.Windows.DependencyObject> lub typu pochodnego.</span><span class="sxs-lookup"><span data-stu-id="756a7-192">The main purpose of having default metadata associated with a <xref:System.Windows.DependencyProperty> is to supply a default value for this property on any <xref:System.Windows.DependencyObject> or a derived type.</span></span>  
  
 <span data-ttu-id="756a7-193">Dla właściwości nie dołączony zwracane przez tę właściwość typu metadanych nie można rzutować na typy pochodne <xref:System.Windows.PropertyMetadata> typ, nawet jeśli właściwość pierwotnie został zarejestrowany z typu pochodnego metadanych.</span><span class="sxs-lookup"><span data-stu-id="756a7-193">For nonattached properties, the metadata type returned by this property cannot be cast to derived types of <xref:System.Windows.PropertyMetadata> type, even if the property was originally registered with a derived metadata type.</span></span> <span data-ttu-id="756a7-194">Jeśli pierwotnie zarejestrowanego metadanych, łącznie z jej oryginalnego typu pochodnego prawdopodobnie metadanych, należy wywołać <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> przekazywanie oryginalnego rejestrowanie zamiast tego typu jako parametr.</span><span class="sxs-lookup"><span data-stu-id="756a7-194">If you want the originally registered metadata including its original possibly derived metadata type, call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> instead, passing the original registering type as a parameter.</span></span>  
  
 <span data-ttu-id="756a7-195">W przypadku dołączonych właściwości typ metadanych zwróconych przez tę właściwość zostanie pasuje do typu podane w oryginalnym <xref:System.Windows.DependencyProperty.RegisterAttached%2A> metoda rejestracji.</span><span class="sxs-lookup"><span data-stu-id="756a7-195">For attached properties, the type of the metadata returned by this property will match the type given in the original <xref:System.Windows.DependencyProperty.RegisterAttached%2A> registration method.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpdefaultvalue)]
[!code-vb[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpdefaultvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="756a7-196">Zwraca wartość skrótu dla tego <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-196">Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-197">Wartość skrótu dla tego <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-197">The hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-198">Właściwość system używa swojego unikatowego identyfikatora <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, a wartość tej właściwości jest zwracany przez <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="756a7-198">The property system uses its own unique identifier <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, and the value of that property is returned by <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="756a7-199">Zwraca metadane skojarzone z tą właściwością zależności, ponieważ istnieje dla określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-199">Returns the metadata associated with this dependency property as it exists for a particular type.</span>
          </span>
          <span data-ttu-id="756a7-200">Może to być typ tam, gdzie właściwości zależności nie pierwsza z nich zarejestrowany, do której dodano później, lub typu, gdy właściwość zależności uzyskano za pośrednictwem dziedziczenia, ale metadane został zastąpiony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-200">This can be the type where the dependency property was first registered, one to which it was added subsequently, or a type where the dependency property was obtained through inheritance but the metadata was specifically overridden.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (Type forType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Type forType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata (forType As Type) As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(Type ^ forType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="756a7-201">Określony typ, z którego można pobrać metadanych właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-201">The specific type from which to retrieve the dependency property metadata.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-202">Zwraca metadane dla ta właściwość zależności, które znajdują się na określony typ istniejących.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-202">Returns the metadata for this dependency property as it exists on a specified existing type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-203">Właściwości obiektu metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-203">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-204">Określanie typu lub odwołanie do obiektu, do użycia jako typ jest niezbędne, ponieważ metadane mogą się różnić od oryginalnej rejestracji ze względu na <xref:System.Windows.DependencyProperty.AddOwner%2A> lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> wywołania, które zmienić metadanych właściwości zależności, ponieważ istnieje w typie.</span><span class="sxs-lookup"><span data-stu-id="756a7-204">Specifying either the type or an object reference to use as type is necessary because the metadata can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that alter the metadata of the dependency property as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="756a7-205">Poniższy przykład pobiera metadane dla właściwości zależności na podstawie jego typu.</span><span class="sxs-lookup"><span data-stu-id="756a7-205">The following example gets metadata for a dependency property based on its type.</span></span> <span data-ttu-id="756a7-206">Tego typu uzyskuje się za pomocą `typeof` operatora.</span><span class="sxs-lookup"><span data-stu-id="756a7-206">The type is obtained by using a `typeof` operator.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatatype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatatype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">
          <span data-ttu-id="756a7-207">Obiekt zależności, który jest sprawdzany pod kątem typu, w celu ustalenia, która wersja określonego typu właściwości zależności metadanych powinna pochodzić z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-207">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-208">Zwraca metadane dla tej właściwości zależności, ponieważ znajduje się na wystąpienie określonego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-208">Returns the metadata for this dependency property as it exists on the specified object instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-209">Właściwości obiektu metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-209">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-210">Określanie typu lub odwołanie do obiektu jest konieczne, ponieważ metadane żadnych danej właściwości zależności mogą się różnić od oryginalnej rejestracji ze względu na <xref:System.Windows.DependencyProperty.AddOwner%2A> lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> wywołania, które można dostosować metadanych właściwości, które znajdują się na Typ.</span><span class="sxs-lookup"><span data-stu-id="756a7-210">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
 <span data-ttu-id="756a7-211">W przypadku żądania metadanych właściwość w wystąpieniu, są tak naprawdę przekazywanie wystąpienie tak, aby jej typ może przyjmować wewnętrznie.</span><span class="sxs-lookup"><span data-stu-id="756a7-211">When you request property metadata based on an instance, you are really just passing the instance so that its type can be evaluated internally.</span></span> <span data-ttu-id="756a7-212">Metadane właściwości zależności nie zmienia się na każde wystąpienie; zawsze jest spójne dla dowolnej kombinacji właściwości danego typu.</span><span class="sxs-lookup"><span data-stu-id="756a7-212">Dependency property metadata does not vary per instance; it is always consistent for any given type-property combination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="756a7-213">Poniższy przykład pobiera metadane dla właściwości zależności oparte na konkretnej <xref:System.Windows.DependencyObject> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="756a7-213">The following example gets metadata for a dependency property based on a specific <xref:System.Windows.DependencyObject> instance.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadoinstance)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadoinstance)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObjectType dependencyObjectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObjectType dependencyObjectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObjectType ^ dependencyObjectType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObjectType" Type="System.Windows.DependencyObjectType" />
      </Parameters>
      <Docs>
        <param name="dependencyObjectType">
          <span data-ttu-id="756a7-214">Określonego obiektu, który rejestruje typ obiektu zależności, z którego jest pożądany metadanych właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-214">A specific object that records the dependency object type from which the dependency property metadata is desired.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-215">Zwraca metadane dla tej właściwości zależności, ponieważ znajduje się na określony typ.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-215">Returns the metadata for this dependency property as it exists on a specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-216">Właściwości obiektu metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-216">A property metadata object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-217">Określanie typu lub odwołanie do obiektu jest konieczne, ponieważ metadane żadnych danej właściwości zależności mogą się różnić od oryginalnej rejestracji ze względu na <xref:System.Windows.DependencyProperty.AddOwner%2A> lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> wywołania, które można dostosować metadanych właściwości, które znajdują się na Typ.</span><span class="sxs-lookup"><span data-stu-id="756a7-217">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="756a7-218">Poniższy przykład pobiera metadane dla właściwości zależności na podstawie jego <xref:System.Windows.DependencyObjectType>.</span><span class="sxs-lookup"><span data-stu-id="756a7-218">The following example gets metadata for a dependency property based on its <xref:System.Windows.DependencyObjectType>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadotype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadotype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalIndex">
      <MemberSignature Language="C#" Value="public int GlobalIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GlobalIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.GlobalIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GlobalIndex { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="756a7-219">Pobiera wartość wewnętrznie generowane, który unikatowo identyfikuje właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-219">Gets an internally generated value that uniquely identifies the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="756a7-220">Unikatowy identyfikator liczbowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-220">A unique numeric identifier.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-221">Ta wartość jest liczbą całkowitą nie Unikatowy identyfikator globalny (GUID).</span><span class="sxs-lookup"><span data-stu-id="756a7-221">This value is an integer, not a globally unique identifier (GUID).</span></span> <span data-ttu-id="756a7-222">Ogólnie rzecz biorąc przy użyciu tej wartości indeksu nie jest wymagane i brak jest indeks dostępu do tabel wszystkich właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-222">Generally, using this index value is not required, and there is no index access to tables of all dependency properties.</span></span> <span data-ttu-id="756a7-223">Właściwości zależności zamiast tego należy odwoływać się swoich pól identyfikator.</span><span class="sxs-lookup"><span data-stu-id="756a7-223">Dependency properties should instead be referenced by their identifier fields.</span></span>  
  
 <span data-ttu-id="756a7-224"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> jest używana wewnętrznie do szybszy dostęp do struktury danych, które używają <xref:System.Windows.DependencyProperty.GlobalIndex%2A> jako indeks tablicy liczony od zera.</span><span class="sxs-lookup"><span data-stu-id="756a7-224"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> is used internally for faster access to data structures that use the <xref:System.Windows.DependencyProperty.GlobalIndex%2A> as a zero-based array index.</span></span> <span data-ttu-id="756a7-225">Podobne obciążenie może być aplikacje dla projektantów lub narzędzia.</span><span class="sxs-lookup"><span data-stu-id="756a7-225">A similar usage might have applications for designers or tools.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidType">
      <MemberSignature Language="C#" Value="public bool IsValidType (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidType(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidType (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidType(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="756a7-226">Wartość do sprawdzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-226">The value to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-227">Określa, czy określona wartość jest akceptowalne dla typu ta właściwość zależności, ponieważ sprawdza, czy typ właściwości zawarte w pierwotnej rejestracji właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-227">Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-228">
            <see langword="true" /> Jeśli określona wartość jest typu zarejestrowanej właściwości lub dopuszczalne typu pochodnego; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-228">
              <see langword="true" /> if the specified value is the registered property type or an acceptable derived type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-229">Wartość `null` jest prawidłowym typem dla właściwości zależności typu odwołania lub <xref:System.Nullable%601> właściwości zależności i zwróci `true` dla tych przypadków.</span><span class="sxs-lookup"><span data-stu-id="756a7-229">A value of `null` is a valid type for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="756a7-230">W przypadkach, gdy właściwość zależności jest ani odwołaniem ani <xref:System.Nullable%601> typu <xref:System.Windows.DependencyProperty.IsValidType%2A> zwróci `false` na wartość null zamiast Zgłoś wyjątek.</span><span class="sxs-lookup"><span data-stu-id="756a7-230">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="756a7-231">W poniższym przykładzie użyto <xref:System.Windows.DependencyProperty.IsValidType%2A> w celu sprawdzenia przed wywołaniem <xref:System.Windows.DependencyObject.SetValue%2A> we właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-231">The following example uses <xref:System.Windows.DependencyProperty.IsValidType%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvalue)]
 [!code-vb[PropertySystemEsoterics#TrySetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidValue">
      <MemberSignature Language="C#" Value="public bool IsValidValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidValue(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="756a7-232">Wartość do sprawdzenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-232">The value to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-233">Określa, czy podana wartość jest akceptowany dla typu właściwości, wybierając typ podstawowy, a także potencjalnie jeśli znajduje się w dozwolonym zakresem wartości dla tego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-233">Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-234">
            <see langword="true" /> Jeśli wartość jest dopuszczalne i jest nieprawidłowego typu lub typu pochodnego; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-234">
              <see langword="true" /> if the value is acceptable and is of the correct type or a derived type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-235">Dla właściwości zależności, można określić zakres dozwolonych wartości dla tego typu za pomocą <xref:System.Windows.ValidateValueCallback> dostarczanym rejestracji właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-235">For a dependency property, an allowed range of values for that type can be specified through a <xref:System.Windows.ValidateValueCallback> that is provided in the dependency property registration.</span></span>  
  
 <span data-ttu-id="756a7-236">Ta metoda wywołuje <xref:System.Windows.DependencyProperty.IsValidType%2A> wewnętrznie.</span><span class="sxs-lookup"><span data-stu-id="756a7-236">This method calls <xref:System.Windows.DependencyProperty.IsValidType%2A> internally.</span></span> <span data-ttu-id="756a7-237">Jeśli nie ma właściwości zależności w <xref:System.Windows.ValidateValueCallback>, wywołanie tej metody jest równoważne wywołanie <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span><span class="sxs-lookup"><span data-stu-id="756a7-237">If the dependency property in question has no <xref:System.Windows.ValidateValueCallback>,then calling this method is effectively equivalent to calling <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span></span> <span data-ttu-id="756a7-238">Jeśli właściwość zależności <xref:System.Windows.ValidateValueCallback>i w razie <xref:System.Windows.DependencyProperty.IsValidType%2A> będzie musiał zwrócić `true`, zwracana wartość będzie zgodnie z implementacją w wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="756a7-238">If the dependency property does have a <xref:System.Windows.ValidateValueCallback>, and if <xref:System.Windows.DependencyProperty.IsValidType%2A> would have returned `true`, then the value returned will be as implemented in the callback.</span></span>  
  
 <span data-ttu-id="756a7-239">Wartość null jest prawidłową wartością dla właściwości zależności typu odwołania lub <xref:System.Nullable%601> właściwości zależności i zwróci `true` dla tych przypadków.</span><span class="sxs-lookup"><span data-stu-id="756a7-239">A null value is a valid value for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="756a7-240">W przypadkach, gdy właściwość zależności jest ani odwołaniem ani <xref:System.Nullable%601> typu <xref:System.Windows.DependencyProperty.IsValidType%2A> zwróci `false` na wartość null zamiast Zgłoś wyjątek.</span><span class="sxs-lookup"><span data-stu-id="756a7-240">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="756a7-241">W poniższym przykładzie użyto <xref:System.Windows.DependencyProperty.IsValidValue%2A> w celu sprawdzenia przed wywołaniem <xref:System.Windows.DependencyObject.SetValue%2A> we właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-241">The following example uses <xref:System.Windows.DependencyProperty.IsValidValue%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvaluewithvalidate)]
 [!code-vb[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvaluewithvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="756a7-242">Pobiera nazwę właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-242">Gets the name of the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="756a7-243">Nazwa właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-243">The name of the property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-244">Ta właściwość uzyskuje nazwę odpowiednio `name` parametru podczas rejestracji właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-244">This property gets the name provided as the `name` parameter during dependency property registration.</span></span> <span data-ttu-id="756a7-245">Ta nazwa jest niemodyfikowalna i nie może być `null` lub ciąg pusty.</span><span class="sxs-lookup"><span data-stu-id="756a7-245">This name is immutable, and cannot be `null` or an empty string.</span></span> <span data-ttu-id="756a7-246">Rejestracje zduplikowanej nazwy do tego samego typu właściciela nie są dozwolone i zgłosi wyjątek podczas próby zarejestrowania duplikatu.</span><span class="sxs-lookup"><span data-stu-id="756a7-246">Duplicate name registrations on the same owner type are not permitted, and will throw an exception when you attempt to register the duplicate.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="756a7-247"><xref:System.Windows.DependencyProperty.Name%2A> Zależności właściwości należy postępować zgodnie z Konwencją pasującego do nazwy identyfikatora właściwości zależności minus sufiks "Property".</span><span class="sxs-lookup"><span data-stu-id="756a7-247">The <xref:System.Windows.DependencyProperty.Name%2A> of a dependency property must follow the convention of matching the name of its dependency property identifier minus the suffix "Property".</span></span> <span data-ttu-id="756a7-248">Aby uzyskać więcej informacji, zobacz [właściwości zależności niestandardowe](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-248">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="756a7-249">Poniższy przykład wysyła zapytanie do różnych właściwości identyfikatora właściwości zależności, w tym <xref:System.Windows.DependencyProperty.Name%2A>.</span><span class="sxs-lookup"><span data-stu-id="756a7-249">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.Name%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OverrideMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="756a7-250">Dostaw alternatywny metadanych dla tej właściwości zależności, gdy nie jest obecny w wystąpieniach określonego typu, a metadane, które podano w rejestracji właściwości zależności początkowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-250">Supplies alternate metadata for this dependency property when it is present on instances of a specified type, versus the metadata that was provided in the initial dependency property registration.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="756a7-251">Typ, w którym ta właściwość zależności jest dziedziczona i gdzie zostaną zastosowane podane metadane alternatywny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-251">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="756a7-252">Metadane dla właściwości zależności na zastępowanie typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-252">The metadata to apply to the dependency property on the overriding type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-253">Określa alternatywny metadanych dla tej właściwości zależności, gdy nie jest obecny w wystąpieniach o określonym typie, zastępowanie metadanych, które istniały dla właściwości zależności, ponieważ został on odziedziczony z typów podstawowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-253">Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-254">Powinna zostać zastąpiona metadanych właściwości zależności, zanim system właściwości używa właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-254">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="756a7-255">To jest równa czas określone wystąpienia są tworzone przy użyciu klasy, która rejestruje właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-255">This equates to the time that specific instances are created using the class that registers the dependency property.</span></span> <span data-ttu-id="756a7-256">Wywołań <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> powinno być wykonywane jedynie konstruktorów statycznych typu, który udostępnia siebie jako `forType` parametru tej metody lub za pomocą podobnego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="756a7-256">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="756a7-257">Podjęto próbę zmiany metadanych po istnieje wystąpienie typu właściciela nie będą zgłaszać wyjątków, ale spowoduje niespójność zachowania w systemie właściwości.</span><span class="sxs-lookup"><span data-stu-id="756a7-257">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="756a7-258">Po ustanowieniu metadanych dla elementu override określonej klasy pochodnej z tą metodą, kolejne próby na zastępowanie metadanych na tej samej klasy pochodnej zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="756a7-258">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="756a7-259">Metadane podane jest scalany z metadanych właściwości dla właściwości zależności, ponieważ znajduje się na podstawowy właściciel.</span><span class="sxs-lookup"><span data-stu-id="756a7-259">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="756a7-260">Wszystkie właściwości, które zostały określone w oryginalnych metadanych podstawowej będzie trwać; tylko te właściwości, które w szczególności zostały zmienione w nowych metadanych spowoduje zastąpienie właściwości podstawowej metadanych.</span><span class="sxs-lookup"><span data-stu-id="756a7-260">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="756a7-261">Niektóre właściwości, takie jak <xref:System.Windows.PropertyMetadata.DefaultValue%2A> zostały zastąpione, jeśli określony w nowych metadanych.</span><span class="sxs-lookup"><span data-stu-id="756a7-261">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="756a7-262">Inne, takie jak <xref:System.Windows.PropertyChangedCallback>, są połączone.</span><span class="sxs-lookup"><span data-stu-id="756a7-262">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="756a7-263">Ostatecznie, zachowanie scalania zależy od typu metadanych właściwości używany do zastąpienia, dlatego dla istniejącej klasy metadanych właściwości używane przez zachowanie opisane tutaj [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-263">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="756a7-264">Aby uzyskać więcej informacji, zobacz [metadanych właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-metadata.md) i [metadanych właściwości Framework](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-264">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="756a7-265">Nastąpiła próba na zastępowanie metadanych właściwości tylko do odczytu zależności (nie można wykonać operacji przy użyciu tego podpisu).</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-265">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="756a7-266">Metadane już zostało ustanowione dla właściwości zależności, ponieważ znajduje się na podanego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-266">Metadata was already established for the dependency property as it exists on the provided type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata, System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata, key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::DependencyPropertyKey ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="forType">
          <span data-ttu-id="756a7-267">Typ, w którym ta właściwość zależności jest dziedziczona i gdzie zostaną zastosowane podane metadane alternatywny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-267">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="756a7-268">Metadane dla właściwości zależności na zastępowanie typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-268">The metadata to apply to the dependency property on the overriding type.</span>
          </span>
        </param>
        <param name="key">
          <span data-ttu-id="756a7-269">Klucz dostępu dla właściwości zależności tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-269">The access key for a read-only dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-270">Dostaw alternatywny metadane dla właściwości tylko do odczytu zależności, gdy nie jest obecny w wystąpieniach o określonym typie, zastępowanie metadanych, które podano w rejestracji właściwości zależności początkowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-270">Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration.</span>
          </span>
          <span data-ttu-id="756a7-271">Należy podać <see cref="T:System.Windows.DependencyPropertyKey" /> dla właściwości tylko do odczytu zależności uniknąć, który wywołał wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-271">You must pass the <see cref="T:System.Windows.DependencyPropertyKey" /> for the read-only dependency property to avoid raising an exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-272">Ta sygnatura zawiera implementacja dla identyfikatora właściwości zależności tylko do odczytu (<xref:System.Windows.DependencyPropertyKey>) metody.</span><span class="sxs-lookup"><span data-stu-id="756a7-272">This signature provides underlying implementation for a read-only dependency property identifier (<xref:System.Windows.DependencyPropertyKey>) method.</span></span> <span data-ttu-id="756a7-273">Jeśli Zastępowanie metadanych dla właściwości zależności odczytu i zapisu, użyj <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span><span class="sxs-lookup"><span data-stu-id="756a7-273">If overriding metadata for a read-write dependency property, use <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="756a7-274">Powinna zostać zastąpiona metadanych właściwości zależności, zanim system właściwości używa właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-274">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="756a7-275">To jest równa czasu określone obiekty są tworzone dla klasy, która rejestruje właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-275">This equates to the time that specific objects are created for the class that registers the dependency property.</span></span> <span data-ttu-id="756a7-276">Wywołań <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> powinno być wykonywane jedynie konstruktorów statycznych typu, który udostępnia siebie jako `forType` parametru tej metody lub za pomocą podobnego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="756a7-276">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="756a7-277">Podjęto próbę zmiany metadanych po istnieje wystąpienie typu właściciela nie będą zgłaszać wyjątków, ale spowoduje niespójność zachowania w systemie właściwości.</span><span class="sxs-lookup"><span data-stu-id="756a7-277">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="756a7-278">Po ustanowieniu metadanych dla elementu override określonej klasy pochodnej z tą metodą, kolejne próby na zastępowanie metadanych na tej samej klasy pochodnej zgłosi wyjątek.</span><span class="sxs-lookup"><span data-stu-id="756a7-278">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="756a7-279">Metadane podane jest scalany z metadanych właściwości dla właściwości zależności, ponieważ znajduje się na podstawowy właściciel.</span><span class="sxs-lookup"><span data-stu-id="756a7-279">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="756a7-280">Wszystkie właściwości, które zostały określone w oryginalnych metadanych podstawowej będzie trwać; tylko te właściwości, które w szczególności zostały zmienione w nowych metadanych spowoduje zastąpienie właściwości podstawowej metadanych.</span><span class="sxs-lookup"><span data-stu-id="756a7-280">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="756a7-281">Niektóre właściwości, takie jak <xref:System.Windows.PropertyMetadata.DefaultValue%2A> zostały zastąpione, jeśli określony w nowych metadanych.</span><span class="sxs-lookup"><span data-stu-id="756a7-281">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="756a7-282">Inne, takie jak <xref:System.Windows.PropertyChangedCallback>, są połączone.</span><span class="sxs-lookup"><span data-stu-id="756a7-282">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="756a7-283">Zachowanie scalania zależy od typu metadanych właściwości używany do zastąpienia.</span><span class="sxs-lookup"><span data-stu-id="756a7-283">The merge behavior depends on the property metadata type being used for the override.</span></span> <span data-ttu-id="756a7-284">Aby uzyskać więcej informacji, zobacz [metadanych właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-metadata.md) i [metadanych właściwości Framework](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-284">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="756a7-285">Pobiera typ obiektu, który jest zarejestrowany w systemie właściwość właściwości zależności lub dodaje się jako właściciela właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-285">Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="756a7-286">Typ obiektu, który zarejestrowany właściwość lub dodaje się jako właściciela właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-286">The type of the object that registered the property or added itself as owner of the property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-287">Ta wartość zostało podane podczas rejestracji właściwości.</span><span class="sxs-lookup"><span data-stu-id="756a7-287">This value was provided during property registration.</span></span> <span data-ttu-id="756a7-288">Właściciel będzie albo oryginalnego rejestracji typu w odniesieniu <xref:System.Windows.DependencyProperty> generowane na podstawie identyfikatora <xref:System.Windows.DependencyProperty.Register%2A> wywołania lub typ, który dodaje się jako właściciel w przypadku <xref:System.Windows.DependencyProperty> generowane na podstawie identyfikatora <xref:System.Windows.DependencyProperty.AddOwner%2A> wywołania.</span><span class="sxs-lookup"><span data-stu-id="756a7-288">The owner will be either the original registering type in the case of a <xref:System.Windows.DependencyProperty> identifier generated from a <xref:System.Windows.DependencyProperty.Register%2A> call, or the type that added itself as owner in the case of a <xref:System.Windows.DependencyProperty> identifier generated from an <xref:System.Windows.DependencyProperty.AddOwner%2A> call.</span></span>  
  
 <span data-ttu-id="756a7-289"><xref:System.Windows.DependencyProperty.OwnerType%2A> Na żadnej podanej <xref:System.Windows.DependencyProperty> jest niemodyfikowalna i nie może być `null` w prawidłowej <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="756a7-289">The <xref:System.Windows.DependencyProperty.OwnerType%2A> on any given <xref:System.Windows.DependencyProperty> is immutable, and cannot be `null` in a valid <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="756a7-290">Poniższy przykład pobiera typ właściciela na podstawie identyfikatora właściwości zależności `dp`, a następnie pobiera metadane dla typu właściciela dla tego samego identyfikatora.</span><span class="sxs-lookup"><span data-stu-id="756a7-290">The following example gets the owner type based on a dependency property identifier `dp`, and then gets metadata on the owner type for that same identifier.</span></span> <span data-ttu-id="756a7-291">Ta operacja jest w rzeczywistości odpowiednikiem pobierania <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> na `dp`.</span><span class="sxs-lookup"><span data-stu-id="756a7-291">This operation is actually equivalent to getting <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> on `dp`.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ PropertyType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="756a7-292">Pobiera typ, który używa właściwości zależności dla jej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-292">Gets the type that the dependency property uses for its value.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="756a7-293">
            <see cref="T:System.Type" /> Wartości właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-293">The <see cref="T:System.Type" /> of the property value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-294">Ta właściwość raportuje typ wartości właściwości w postaci zadeklarowanej przez pierwotnej rejestracji właściwości, za pomocą `propertyType` parametru.</span><span class="sxs-lookup"><span data-stu-id="756a7-294">This property reports the type of the property's value as declared by the original property registration, through the `propertyType` parameter.</span></span> <span data-ttu-id="756a7-295">Podobnie jak <xref:System.Windows.DependencyProperty.Name%2A>, typ właściwości właściwości zależności nie można modyfikować po rejestracji.</span><span class="sxs-lookup"><span data-stu-id="756a7-295">Similar to the <xref:System.Windows.DependencyProperty.Name%2A>, the property type of a dependency property is immutable after registration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="756a7-296">Poniższy przykład wysyła zapytanie do różnych właściwości identyfikatora właściwości zależności, w tym <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span><span class="sxs-lookup"><span data-stu-id="756a7-296">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span></span> <span data-ttu-id="756a7-297">Ciąg nazwy typu <xref:System.Windows.DependencyProperty.PropertyType%2A> są uzyskiwane z zwróconego <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="756a7-297">The type name string of the <xref:System.Windows.DependencyProperty.PropertyType%2A> is obtained from the returned <xref:System.Type>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="756a7-298">Pobiera wartość wskazującą, czy właściwość zależności jest identyfikowane przez to <see cref="T:System.Windows.DependencyProperty" /> wystąpienie jest właściwością tylko do odczytu zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-298">Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" /> instance is a read-only dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="756a7-299">
            <see langword="true" /> Jeśli właściwość zależności jest tylko do odczytu. w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-299">
              <see langword="true" /> if the dependency property is read-only; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-300">Właściwości tylko do odczytu zależności są zarejestrowane w systemie właściwości przez wywołanie metody <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> metody, w przeciwieństwie do <xref:System.Windows.DependencyProperty.Register%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="756a7-300">Read-only dependency properties are registered within the property system by calling the <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> method as opposed to the <xref:System.Windows.DependencyProperty.Register%2A> method.</span></span> <span data-ttu-id="756a7-301">Dołączone właściwości może być również zarejestrowany jako tylko do odczytu. zobacz <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="756a7-301">Attached properties can also be registered as read-only; see <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="756a7-302">Właściwości tylko do odczytu zależności wymagają <xref:System.Windows.DependencyPropertyKey> identyfikator zamiast <xref:System.Windows.DependencyProperty> identyfikator do wykonywania operacji na metadanych, takich jak zastępowanie metadanych lub ustawiania wartości.</span><span class="sxs-lookup"><span data-stu-id="756a7-302">Read-only dependency properties require a <xref:System.Windows.DependencyPropertyKey> identifier rather than a <xref:System.Windows.DependencyProperty> identifier to perform metadata operations such as overriding the metadata or setting the value.</span></span> <span data-ttu-id="756a7-303">Jeśli użytkownik uzyskał Kolekcja <xref:System.Windows.DependencyProperty> identyfikatory poprzez wywołanie <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> lub innym [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] który uwidacznia identyfikatorów, sprawdź <xref:System.Windows.DependencyProperty.ReadOnly%2A> wartość przed podjęciem ponownej próby wywołania <xref:System.Windows.DependencyObject.SetValue%2A> lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> za pomocą którego Identyfikator właściwości zależności jako parametr wejściowy, aby sprawdzić, czy właściwości zależności, który reprezentuje identyfikator nie jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="756a7-303">If you obtained a collection of <xref:System.Windows.DependencyProperty> identifiers through a call to <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> or another [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] that exposes identifiers, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value before attempting to call <xref:System.Windows.DependencyObject.SetValue%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> using that dependency property identifier as an input parameter, to verify that the dependency property that the identifier represents is not read-only.</span></span> <span data-ttu-id="756a7-304">Jeśli wartość <xref:System.Windows.DependencyProperty.ReadOnly%2A> jest `true` we właściwości zależności nie istnieje sposób programowy uzyskać odwołania do <xref:System.Windows.DependencyPropertyKey> identyfikatora właściwości zależności, z metadanych lub <xref:System.Windows.DependencyProperty> identyfikator; identyfikator muszą być dostępne jako statyczne pole w celu wywołania <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> względem właściwości zależności tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="756a7-304">If the value of <xref:System.Windows.DependencyProperty.ReadOnly%2A> is `true` on a dependency property, there is no programmatic way to obtain a reference to the <xref:System.Windows.DependencyPropertyKey> identifier of that dependency property, from the metadata or from the <xref:System.Windows.DependencyProperty> identifier; the identifier must be available as a static field in order to call <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> against a read-only dependency property.</span></span>  
  
 <span data-ttu-id="756a7-305">Podczas tworzenia właściwości zależności niestandardowe i zarejestruj go jako tylko do odczytu, należy zdefiniować tylko metody dostępu get dla [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] właściwości otoki.</span><span class="sxs-lookup"><span data-stu-id="756a7-305">When you create a custom dependency property, and register it as read-only, you should define only a get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper property.</span></span> <span data-ttu-id="756a7-306">W przeciwnym razie klasy mają mylące model obiektów dla otoki właściwości w porównaniu do dostępu do właściwości zależności zapasowego.</span><span class="sxs-lookup"><span data-stu-id="756a7-306">Otherwise, your class will have a confusing object model for the property wrapper as compared to the access to the backing dependency property.</span></span> <span data-ttu-id="756a7-307">Aby uzyskać więcej informacji, zobacz [właściwości zależności niestandardowe](~/docs/framework/wpf/advanced/custom-dependency-properties.md) lub [tylko do odczytu właściwości zależności](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-307">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md) or [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="756a7-308">Poniższy przykład uzyskuje metadanych domyślne i właściwości identyfikatora właściwości zależności z różnymi polami właściwości zależności, a informacje są używane do wypełnienia tabeli do zaimplementowania przeglądarką"metadanych".</span><span class="sxs-lookup"><span data-stu-id="756a7-308">The following example obtains the default metadata and the dependency property identifier properties from various dependency property fields, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="756a7-309">Rejestruje właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-309">Registers a dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="756a7-310">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-310">The name of the dependency property to register.</span>
          </span>
          <span data-ttu-id="756a7-311">Nazwa musi być unikatowa w ramach rejestracji przestrzeni nazw typu właściciela.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-311">The name must be unique within the registration namespace of the owner type.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="756a7-312">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-312">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="756a7-313">Typ właściciela, który rejestruje właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-313">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-314">Określona nazwa właściwości, typ właściwości i typ właściciela rejestruje właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-314">Registers a dependency property with the specified property name, property type, and owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-315">Identyfikator właściwości zależności, które mają być używane, aby ustawić wartość <see langword="public static readonly" /> pole w klasie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-315">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="756a7-316">Ten identyfikator jest następnie używany do później, odwołanie właściwości zależności dla operacji, takich jak programowo ustawiania dla niego wartości i uzyskiwanie metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-316">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-317">Aby uzyskać więcej informacji dotyczących rejestracji właściwości zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="756a7-317">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 [!code-csharp[WPFAquariumSln#Register3Param](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#register3param)]
 [!code-vb[WPFAquariumSln#Register3Param](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#register3param)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="756a7-318">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-318">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="756a7-319">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-319">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="756a7-320">Typ właściciela, który rejestruje właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-320">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="756a7-321">Metadane właściwości dla właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-321">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-322">Rejestruje właściwości zależności określona nazwa właściwości, typ właściwości, typ właściciela i metadane właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-322">Registers a dependency property with the specified property name, property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-323">Identyfikator właściwości zależności, które mają być używane, aby ustawić wartość <see langword="public static readonly" /> pole w klasie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-323">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="756a7-324">Ten identyfikator jest następnie używany do później, odwołanie właściwości zależności dla operacji, takich jak programowo ustawiania dla niego wartości i uzyskiwanie metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-324">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-325">Aby uzyskać więcej informacji dotyczących rejestracji właściwości zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="756a7-325">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="756a7-326">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-326">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="756a7-327">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-327">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="756a7-328">Typ właściciela, który rejestruje właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-328">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="756a7-329">Metadane właściwości dla właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-329">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="756a7-330">Odwołanie do wywołania zwrotnego, które należy wykonać wszelkie niestandardowego sprawdzania poprawności wartości właściwości zależności poza typowy Typ weryfikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-330">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-331">Określona nazwa właściwości, typ właściwości, typ właściciela, metadane właściwości i wywołanie zwrotne weryfikacji wartości dla właściwości rejestruje właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-331">Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-332">Identyfikator właściwości zależności, które mają być używane, aby ustawić wartość <see langword="public static readonly" /> pole w klasie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-332">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="756a7-333">Ten identyfikator jest następnie używany do później, odwołanie właściwości zależności dla operacji, takich jak programowo ustawiania dla niego wartości i uzyskiwanie metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-333">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-334">Aby uzyskać więcej informacji dotyczących rejestracji właściwości zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="756a7-334">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="756a7-335">Poniższy przykład rejestruje właściwości zależności, w tym wywołanie zwrotne weryfikacji (definicja wywołanie zwrotne nie jest wyświetlany; szczegółowe informacje dotyczące definicji wywołania zwrotnego, zobacz <xref:System.Windows.ValidateValueCallback>).</span><span class="sxs-lookup"><span data-stu-id="756a7-335">The following example registers a dependency property, including a validation callback (the callback definition is not shown; for details on the callback definition, see <xref:System.Windows.ValidateValueCallback>).</span></span>  
  
 [!code-csharp[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#currentdefinitionwithwrapper)]
 [!code-vb[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#currentdefinitionwithwrapper)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttached">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="756a7-336">Rejestruje dołączona właściwość z systemu właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-336">Registers an attached property with the property system.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="756a7-337">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-337">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="756a7-338">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-338">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="756a7-339">Typ właściciela, który rejestruje właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-339">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-340">Rejestruje dołączona właściwość o nazwie określonej właściwości, typ właściwości i typ właściciela.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-340">Registers an attached property with the specified property name, property type, and owner type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-341">Identyfikator właściwości zależności, które mają być używane, aby ustawić wartość <see langword="public static readonly" /> pole w klasie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-341">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="756a7-342">Ten identyfikator jest następnie używany do później, odwołanie właściwości zależności dla operacji, takich jak programowo ustawiania dla niego wartości i uzyskiwanie metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-342">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-343">Dołączona właściwość to pojęcie właściwości zdefiniowane przez [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="756a7-343">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="756a7-344"> implementuje dołączone właściwości jako właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-344"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="756a7-345">Ponieważ [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] właściwości zależności są dołączone właściwości, mogą oni mieć metadanych stosowane używaną przez system ogólne właściwości dla operacji, takich jak raportowanie właściwości układu.</span><span class="sxs-lookup"><span data-stu-id="756a7-345">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="756a7-346">Aby uzyskać więcej informacji, zobacz [dołączony Przegląd właściwości](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-346">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="756a7-347">Aby uzyskać więcej informacji dotyczących rejestracji właściwości zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="756a7-347">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="756a7-348">Poniższy przykład rejestruje dołączona właściwość dla klasy abstrakcyjnej za pomocą tej <xref:System.Windows.DependencyProperty.RegisterAttached%2A> podpisu.</span><span class="sxs-lookup"><span data-stu-id="756a7-348">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="756a7-349">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-349">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="756a7-350">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-350">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="756a7-351">Typ właściciela, który rejestruje właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-351">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="756a7-352">Metadane właściwości dla właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-352">Property metadata for the dependency property.</span>
          </span>
          <span data-ttu-id="756a7-353">Mogą to wartość domyślna, a także inne właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-353">This can include the default value as well as other characteristics.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-354">Rejestruje dołączona właściwość określona nazwa właściwości, typ właściwości, typ właściciela i metadane właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-354">Registers an attached property with the specified property name, property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-355">Identyfikator właściwości zależności, które mają być używane, aby ustawić wartość <see langword="public static readonly" /> pole w klasie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-355">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="756a7-356">Ten identyfikator jest następnie używany do później, odwołanie właściwości zależności dla operacji, takich jak programowo ustawiania dla niego wartości i uzyskiwanie metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-356">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-357">Dołączona właściwość to pojęcie właściwości zdefiniowane przez [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="756a7-357">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="756a7-358"> implementuje dołączone właściwości jako właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-358"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="756a7-359">Ponieważ [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] właściwości zależności są dołączone właściwości, mogą oni mieć metadanych stosowane używaną przez system ogólne właściwości dla operacji, takich jak raportowanie właściwości układu.</span><span class="sxs-lookup"><span data-stu-id="756a7-359">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="756a7-360">Aby uzyskać więcej informacji, zobacz [dołączony Przegląd właściwości](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-360">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="756a7-361">Aby uzyskać więcej informacji dotyczących rejestracji właściwości zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="756a7-361">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="756a7-362">Użyj RegisterAttached dziedziczenie wartość właściwości zależności</span><span class="sxs-lookup"><span data-stu-id="756a7-362">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="756a7-363">Jednego scenariusza rejestrowania właściwości zależności z <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zamiast <xref:System.Windows.DependencyProperty.Register%2A> służy do obsługi dziedziczenie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="756a7-363">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="756a7-364">Należy zarejestrować dziedziczenie wartość właściwości zależności z <xref:System.Windows.DependencyProperty.RegisterAttached%2A> nawet wtedy, gdy klasa definiuje otoki metod dostępu właściwości, które udostępniają właściwości zależności, a nawet wtedy, gdy nie zamierzasz ujawnia Get * i Set * statycznej metody w celu zapewnienia true dołączony metod dostępu do właściwości pomocy technicznej.</span><span class="sxs-lookup"><span data-stu-id="756a7-364">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="756a7-365">Mimo że dziedziczenie wartości właściwości mogą być wyświetlane dla właściwości zależności nie dołączony, zachowanie dziedziczenia właściwości nie dołączony do określonych granic elementu w drzewie środowiska uruchomieniowego jest niezdefiniowany.</span><span class="sxs-lookup"><span data-stu-id="756a7-365">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="756a7-366">Rejestrowanie właściwości, jak skutecznie dołączone powoduje dołączona właściwość globalnych właściwości w systemie właściwości i gwarantuje, że dziedziczenie wartości właściwości działa przez wszystkie granice w drzewie elementu.</span><span class="sxs-lookup"><span data-stu-id="756a7-366">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="756a7-367">Zawsze używaj <xref:System.Windows.DependencyProperty.RegisterAttached%2A> można zarejestrować właściwości, w którym można określić <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> w metadanych.</span><span class="sxs-lookup"><span data-stu-id="756a7-367">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="756a7-368">Aby uzyskać więcej informacji, zobacz [dziedziczenie wartości właściwości](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-368">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="756a7-369">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-369">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="756a7-370">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-370">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="756a7-371">Typ właściciela, który rejestruje właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-371">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="756a7-372">Metadane właściwości dla właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-372">Property metadata for the dependency property.</span>
          </span>
          <span data-ttu-id="756a7-373">Mogą to wartość domyślna, a także inne właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-373">This can include the default value as well as other characteristics.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="756a7-374">Odwołanie do wywołania zwrotnego, które należy wykonać wszelkie niestandardowego sprawdzania poprawności wartości właściwości zależności poza typowy Typ weryfikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-374">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-375">Rejestruje dołączona właściwość z określonym typem właściwości, typ właściciela, metadane właściwości i wywołanie zwrotne weryfikacji wartości dla właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-375">Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-376">Identyfikator właściwości zależności, które mają być używane, aby ustawić wartość <see langword="public static readonly" /> pole w klasie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-376">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span>
          </span>
          <span data-ttu-id="756a7-377">Ten identyfikator jest następnie używany do później, odwołanie właściwości zależności dla operacji, takich jak programowo ustawiania dla niego wartości i uzyskiwanie metadanych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-377">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-378">Dołączona właściwość to pojęcie właściwości zdefiniowane przez [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="756a7-378">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="756a7-379"> implementuje dołączone właściwości jako właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-379"> implements attached properties as dependency properties.</span></span> <span data-ttu-id="756a7-380">Ponieważ [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] właściwości zależności są dołączone właściwości, mogą oni mieć metadanych stosowane używaną przez system ogólne właściwości dla operacji, takich jak raportowanie właściwości układu.</span><span class="sxs-lookup"><span data-stu-id="756a7-380">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="756a7-381">Aby uzyskać więcej informacji, zobacz [dołączony Przegląd właściwości](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-381">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="756a7-382">Aby uzyskać więcej informacji dotyczących rejestracji właściwości zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="756a7-382">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="756a7-383">Użyj RegisterAttached dziedziczenie wartość właściwości zależności</span><span class="sxs-lookup"><span data-stu-id="756a7-383">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="756a7-384">Jednego scenariusza rejestrowania właściwości zależności z <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zamiast <xref:System.Windows.DependencyProperty.Register%2A> służy do obsługi dziedziczenie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="756a7-384">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="756a7-385">Należy zarejestrować dziedziczenie wartość właściwości zależności z <xref:System.Windows.DependencyProperty.RegisterAttached%2A> nawet wtedy, gdy klasa definiuje otoki metod dostępu właściwości, które udostępniają właściwości zależności, a nawet wtedy, gdy nie zamierzasz ujawnia Get * i Set * statycznej metody w celu zapewnienia true dołączony metod dostępu do właściwości pomocy technicznej.</span><span class="sxs-lookup"><span data-stu-id="756a7-385">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="756a7-386">Mimo że dziedziczenie wartości właściwości mogą być wyświetlane dla właściwości zależności nie dołączony, zachowanie dziedziczenia właściwości nie dołączony do określonych granic elementu w drzewie środowiska uruchomieniowego jest niezdefiniowany.</span><span class="sxs-lookup"><span data-stu-id="756a7-386">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="756a7-387">Rejestrowanie właściwości, jak skutecznie dołączone powoduje dołączona właściwość globalnych właściwości w systemie właściwości i gwarantuje, że dziedziczenie wartości właściwości działa przez wszystkie granice w drzewie elementu.</span><span class="sxs-lookup"><span data-stu-id="756a7-387">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="756a7-388">Zawsze używaj <xref:System.Windows.DependencyProperty.RegisterAttached%2A> można zarejestrować właściwości, w którym można określić <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> w metadanych.</span><span class="sxs-lookup"><span data-stu-id="756a7-388">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="756a7-389">Aby uzyskać więcej informacji, zobacz [dziedziczenie wartości właściwości](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-389">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="756a7-390">Poniższy przykład rejestruje dołączona właściwość dla klasy abstrakcyjnej za pomocą tej <xref:System.Windows.DependencyProperty.RegisterAttached%2A> podpisu.</span><span class="sxs-lookup"><span data-stu-id="756a7-390">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span> <span data-ttu-id="756a7-391">Ta dołączona właściwość jest właściwością typu wyliczenia i rejestracji dodaje wywołanie zwrotne weryfikacji, aby sprawdzić, czy podana wartość jest wartością wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="756a7-391">This attached property is an enumeration type property, and the registration adds a validation callback to verify that the provided value is a value of the enumeration.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttachedReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="756a7-392">Rejestruje w trybie tylko do odczytu dołączona właściwość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-392">Registers a read-only attached property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttachedReadOnly (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="756a7-393">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-393">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="756a7-394">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-394">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="756a7-395">Typ właściciela, który rejestruje właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-395">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="756a7-396">Metadane właściwości dla właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-396">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-397">Rejestruje tylko do odczytu dołączona właściwość, z określonym typem właściwości, typ właściciela i metadane właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-397">Registers a read-only attached property, with the specified property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-398">Klucz właściwości zależności, które mają być używane do wartości pola statycznego tylko do odczytu w klasie, która jest następnie używany do odwołać później właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-398">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-399">Ta metoda zwraca typ <xref:System.Windows.DependencyPropertyKey>, podczas gdy <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zwraca typ <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="756a7-399">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="756a7-400">Zazwyczaj nie zostaną wprowadzone publiczne, klucze, które reprezentują właściwości tylko do odczytu, ponieważ klucze można ustawić wartości właściwości zależności przez wywołanie metody <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="756a7-400">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="756a7-401">Projekt klasy będzie miało wpływ na wymagania dotyczące, ale ogólnie zaleca się ograniczyć dostęp i widoczności dowolnego <xref:System.Windows.DependencyPropertyKey> tylko te części kodu, które są niezbędne, można ustawić tej właściwości zależności w ramach klasy lub aplikacji logiki.</span><span class="sxs-lookup"><span data-stu-id="756a7-401">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="756a7-402">Zaleca się również ujawniać identyfikatora właściwości zależności dla właściwości tylko do odczytu zależności, w przypadku wystawianego wartość <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> jako `public static readonly` pole w klasie.</span><span class="sxs-lookup"><span data-stu-id="756a7-402">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="756a7-403">Dołączone właściwości tylko do odczytu są scenariusza rzadko, ponieważ podstawowy scenariusz dla właściwości dołączonej użyciem jej w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="756a7-403">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="756a7-404">Bez publicznej metody ustawiającej właściwości dołączonej nie można ustawić w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] składni.</span><span class="sxs-lookup"><span data-stu-id="756a7-404">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="756a7-405">Aby uzyskać więcej informacji dotyczących rejestracji właściwości zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="756a7-405">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="756a7-406">Użyj RegisterAttached dziedziczenie wartość właściwości zależności</span><span class="sxs-lookup"><span data-stu-id="756a7-406">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="756a7-407">Jednego scenariusza rejestrowania właściwości zależności jako dołączona jest zapewnienie pomocy technicznej dziedziczenie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="756a7-407">One particular scenario for registering a dependency property as attached is to support property value inheritance.</span></span> <span data-ttu-id="756a7-408">Należy zarejestrować dziedziczenie wartość właściwości zależności z <xref:System.Windows.DependencyProperty.RegisterAttached%2A> nawet wtedy, gdy klasa definiuje otoki metod dostępu właściwości, które udostępniają właściwości zależności, a nawet wtedy, gdy nie zamierzasz ujawnia Get * i Set * statycznej metody w celu zapewnienia true dołączony metod dostępu do właściwości pomocy technicznej.</span><span class="sxs-lookup"><span data-stu-id="756a7-408">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="756a7-409">Mimo że dziedziczenie wartości właściwości mogą być wyświetlane dla właściwości zależności nie dołączony, zachowanie dziedziczenia właściwości nie dołączony do określonych granic elementu w drzewie środowiska uruchomieniowego jest niezdefiniowany.</span><span class="sxs-lookup"><span data-stu-id="756a7-409">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="756a7-410">Rejestrowanie właściwości, jak skutecznie dołączone powoduje dołączona właściwość globalnych właściwości w systemie właściwości i gwarantuje, że dziedziczenie wartości właściwości działa przez wszystkie granice w drzewie elementu.</span><span class="sxs-lookup"><span data-stu-id="756a7-410">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="756a7-411">Zawsze używaj <xref:System.Windows.DependencyProperty.RegisterAttached%2A> można zarejestrować właściwości, w którym można określić <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> w metadanych.</span><span class="sxs-lookup"><span data-stu-id="756a7-411">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="756a7-412">Aby uzyskać więcej informacji, zobacz [dziedziczenie wartości właściwości](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-412">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="756a7-413">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-413">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="756a7-414">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-414">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="756a7-415">Typ właściciela, który rejestruje właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-415">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="defaultMetadata">
          <span data-ttu-id="756a7-416">Metadane właściwości dla właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-416">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="756a7-417">Odwołanie do utworzonych przez użytkownika wywołanie zwrotne, które należy wykonać wszelkie niestandardowego sprawdzania poprawności wartości właściwości zależności poza typowy Typ weryfikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-417">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-418">Rejestruje tylko do odczytu dołączona właściwość, z określonym typem właściwości, typ właściciela metadanych właściwości i wywołanie zwrotne weryfikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-418">Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-419">Klucz właściwości zależności, które mają być używane do wartości pola statycznego tylko do odczytu w klasie, która jest następnie używany do odwołania właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-419">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-420">Ta metoda zwraca typ <xref:System.Windows.DependencyPropertyKey>, podczas gdy <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zwraca typ <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="756a7-420">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="756a7-421">Zazwyczaj klucze, które reprezentują typ <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="756a7-421">Typically, the keys that represent the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="756a7-422">Zazwyczaj nie zostaną wprowadzone publiczne, klucze, które reprezentują właściwości tylko do odczytu, ponieważ klucze można ustawić wartości właściwości zależności przez wywołanie metody <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="756a7-422">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="756a7-423">Projekt klasy będzie miało wpływ na wymagania dotyczące, ale ogólnie zaleca się ograniczyć dostęp i widoczności dowolnego <xref:System.Windows.DependencyPropertyKey> tylko te części kodu, które są niezbędne, można ustawić tej właściwości zależności w ramach klasy lub aplikacji logiki.</span><span class="sxs-lookup"><span data-stu-id="756a7-423">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="756a7-424">Zaleca się również ujawniać identyfikatora właściwości zależności dla właściwości tylko do odczytu zależności, w przypadku wystawianego wartość <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> jako `public static readonly` pole w klasie.</span><span class="sxs-lookup"><span data-stu-id="756a7-424">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="756a7-425">Dołączone właściwości tylko do odczytu są scenariusza rzadko, ponieważ podstawowy scenariusz dla właściwości dołączonej użyciem jej w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="756a7-425">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="756a7-426">Bez publicznej metody ustawiającej właściwości dołączonej nie można ustawić w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] składni.</span><span class="sxs-lookup"><span data-stu-id="756a7-426">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="756a7-427">Aby uzyskać więcej informacji dotyczących rejestracji właściwości zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="756a7-427">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="756a7-428">Użyj RegisterAttached dziedziczenie wartość właściwości zależności</span><span class="sxs-lookup"><span data-stu-id="756a7-428">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="756a7-429">Jednego scenariusza rejestrowania właściwości zależności jako dołączony zamiast <xref:System.Windows.DependencyProperty.Register%2A> służy do obsługi dziedziczenie wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="756a7-429">One particular scenario for registering a dependency property as attached instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="756a7-430">Należy zarejestrować dziedziczenie wartość właściwości zależności z <xref:System.Windows.DependencyProperty.RegisterAttached%2A> nawet wtedy, gdy klasa definiuje otoki metod dostępu właściwości, które udostępniają właściwości zależności, a nawet wtedy, gdy nie zamierzasz ujawnia Get * i Set * statycznej metody w celu zapewnienia true dołączony metod dostępu do właściwości pomocy technicznej.</span><span class="sxs-lookup"><span data-stu-id="756a7-430">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="756a7-431">Mimo że dziedziczenie wartości właściwości mogą być wyświetlane dla właściwości zależności nie dołączony, zachowanie dziedziczenia właściwości nie dołączony do określonych granic elementu w drzewie środowiska uruchomieniowego jest niezdefiniowany.</span><span class="sxs-lookup"><span data-stu-id="756a7-431">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="756a7-432">Rejestrowanie właściwości, jak skutecznie dołączone powoduje dołączona właściwość globalnych właściwości w systemie właściwości i gwarantuje, że dziedziczenie wartości właściwości działa przez wszystkie granice w drzewie elementu.</span><span class="sxs-lookup"><span data-stu-id="756a7-432">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="756a7-433">Zawsze używaj <xref:System.Windows.DependencyProperty.RegisterAttached%2A> można zarejestrować właściwości, w którym można określić <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> w metadanych.</span><span class="sxs-lookup"><span data-stu-id="756a7-433">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="756a7-434">Aby uzyskać więcej informacji, zobacz [dziedziczenie wartości właściwości](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-434">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="756a7-435">Rejestruje właściwości zależności jako właściwość zależności tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-435">Registers a dependency property as a read-only dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterReadOnly (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="756a7-436">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-436">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="756a7-437">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-437">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="756a7-438">Typ właściciela, który rejestruje właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-438">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="756a7-439">Metadane właściwości dla właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-439">Property metadata for the dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-440">Rejestruje właściwości tylko do odczytu zależności, z określonym typem właściwości, typ właściciela i metadane właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-440">Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-441">Klucz właściwości zależności, które mają być używane do wartości pola statycznego tylko do odczytu w klasie, która jest następnie używany do odwołania właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-441">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-442">Ta metoda zwraca typ <xref:System.Windows.DependencyPropertyKey>, podczas gdy <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zwraca typ <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="756a7-442">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="756a7-443">Zazwyczaj nie zostaną wprowadzone publiczne, klucze, które reprezentują właściwości tylko do odczytu, ponieważ klucze można ustawić wartości właściwości zależności przez wywołanie metody <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="756a7-443">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="756a7-444">Projekt klasy będzie miało wpływ na wymagania dotyczące, ale ogólnie zaleca się ograniczyć dostęp i widoczności dowolnego <xref:System.Windows.DependencyPropertyKey> tylko te części kodu, które są niezbędne, można ustawić tej właściwości zależności w ramach klasy lub aplikacji logiki.</span><span class="sxs-lookup"><span data-stu-id="756a7-444">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="756a7-445">Zaleca się również ujawniać identyfikatora właściwości zależności dla właściwości tylko do odczytu zależności, w przypadku wystawianego wartość <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> jako `public static readonly` pole w klasie.</span><span class="sxs-lookup"><span data-stu-id="756a7-445">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="756a7-446">Właściwości tylko do odczytu zależności są dość typowy scenariusz zarówno w istniejących [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] i dostosowania, ponieważ inne [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] funkcje mogą wymagać właściwości zależności, nawet jeśli tej właściwości nie ma być można ustawić przez obiekty wywołujące.</span><span class="sxs-lookup"><span data-stu-id="756a7-446">Read-only dependency properties are a fairly typical scenario both in the existing [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] and for customization scenarios, because other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features might require a dependency property even if that property is not intended to be settable by callers.</span></span> <span data-ttu-id="756a7-447">Możesz użyć wartości właściwości tylko do odczytu zależności na podstawie innych operacji system właściwości, które przyjmują właściwość zależności, takich jak utworzenie <xref:System.Windows.Trigger> we właściwości zależności w stylu.</span><span class="sxs-lookup"><span data-stu-id="756a7-447">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="756a7-448">Aby uzyskać więcej informacji dotyczących rejestracji właściwości zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="756a7-448">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="756a7-449">Poniższy przykład rejestruje `AquariumSize` właściwości zależności jako tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="756a7-449">The following example registers an `AquariumSize` dependency property as read-only.</span></span> <span data-ttu-id="756a7-450">W przykładzie zdefiniowano `AquariumSizeKey` jako klucz wewnętrzny (aby klasy w zestawie można zastąpić metadanych) i ujawnia identyfikatora właściwości zależności na podstawie tego klucza jako `AquariumSizeProperty`.</span><span class="sxs-lookup"><span data-stu-id="756a7-450">The example defines `AquariumSizeKey` as an internal key (so that other classes in the assembly could override metadata) and exposes the dependency property identifier based on that key as `AquariumSizeProperty`.</span></span> <span data-ttu-id="756a7-451">Ponadto otoka jest tworzona dla `AquariumSize`, z metodą dostępu get.</span><span class="sxs-lookup"><span data-stu-id="756a7-451">Also, a wrapper is created for `AquariumSize`, with only a get accessor.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="756a7-452">Nazwa właściwości zależności, aby zarejestrować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-452">The name of the dependency property to register.</span>
          </span>
        </param>
        <param name="propertyType">
          <span data-ttu-id="756a7-453">Typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-453">The type of the property.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="756a7-454">Typ właściciela, który rejestruje właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-454">The owner type that is registering the dependency property.</span>
          </span>
        </param>
        <param name="typeMetadata">
          <span data-ttu-id="756a7-455">Metadane właściwości dla właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-455">Property metadata for the dependency property.</span>
          </span>
        </param>
        <param name="validateValueCallback">
          <span data-ttu-id="756a7-456">Odwołanie do utworzonych przez użytkownika wywołanie zwrotne, które należy wykonać wszelkie niestandardowego sprawdzania poprawności wartości właściwości zależności poza typowy Typ weryfikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-456">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="756a7-457">Rejestruje właściwości tylko do odczytu zależności, z określonym typem właściwości, typ właściciela metadanych właściwości i wywołanie zwrotne weryfikacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-457">Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-458">Klucz właściwości zależności, które mają być używane do wartości pola statycznego tylko do odczytu w klasie, która jest następnie używany do odwołać później właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-458">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-459">Ta metoda zwraca typ <xref:System.Windows.DependencyPropertyKey>, podczas gdy <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zwraca typ <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="756a7-459">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="756a7-460">Zazwyczaj nie zostaną wprowadzone publiczne, klucze, które reprezentują właściwości tylko do odczytu, ponieważ klucze można ustawić wartości właściwości zależności przez wywołanie metody <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="756a7-460">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="756a7-461">Projekt klasy będzie miało wpływ na wymagania dotyczące, ale ogólnie zaleca się ograniczyć dostęp i widoczności dowolnego <xref:System.Windows.DependencyPropertyKey> tylko te części kodu, które są niezbędne, można ustawić tej właściwości zależności w ramach klasy lub aplikacji logiki.</span><span class="sxs-lookup"><span data-stu-id="756a7-461">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="756a7-462">Zaleca się również ujawniać identyfikatora właściwości zależności dla właściwości tylko do odczytu zależności, w przypadku wystawianego wartość <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> jako `public static readonly` pole w klasie.</span><span class="sxs-lookup"><span data-stu-id="756a7-462">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="756a7-463">Właściwości tylko do odczytu zależności są dość typowy scenariusz.</span><span class="sxs-lookup"><span data-stu-id="756a7-463">Read-only dependency properties are a fairly typical scenario.</span></span> <span data-ttu-id="756a7-464">Możesz użyć wartości właściwości tylko do odczytu zależności na podstawie innych operacji system właściwości, które przyjmują właściwość zależności, takich jak utworzenie <xref:System.Windows.Trigger> we właściwości zależności w stylu.</span><span class="sxs-lookup"><span data-stu-id="756a7-464">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="756a7-465">Aby uzyskać więcej informacji dotyczących rejestracji właściwości zależności, zobacz <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="756a7-465">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 <span data-ttu-id="756a7-466">Sprawdzanie poprawności właściwości tylko do odczytu zależności może być mniej ważne.</span><span class="sxs-lookup"><span data-stu-id="756a7-466">Validation on a read-only dependency property might be less important.</span></span> <span data-ttu-id="756a7-467">Poziom dostępu niepubliczne, które określisz klucza zmniejsza prawdopodobieństwo dla dowolnego nieprawidłowe dane wejściowe.</span><span class="sxs-lookup"><span data-stu-id="756a7-467">The nonpublic access level you specify for the key reduces the likelihood for arbitrary invalid input.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="756a7-468">Zwraca reprezentację ciągu właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-468">Returns the string representation of the dependency property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="756a7-469">Reprezentacja ciągu właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-469">The string representation of the dependency property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-470">Ta implementacja zwraca <xref:System.Windows.DependencyProperty.Name%2A> wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="756a7-470">This implementation returns the <xref:System.Windows.DependencyProperty.Name%2A> property value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.DependencyProperty.Name" />
      </Docs>
    </Member>
    <Member MemberName="UnsetValue">
      <MemberSignature Language="C#" Value="public static readonly object UnsetValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object UnsetValue" />
      <MemberSignature Language="DocId" Value="F:System.Windows.DependencyProperty.UnsetValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnsetValue As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ UnsetValue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="756a7-471">Określa wartość statyczną, który jest używany przez [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] właściwości systemu zamiast <see langword="null" /> aby wskazać, że właściwość istnieje, ale nie ma jej wartość właściwości systemu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-471">Specifies a static value that is used by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system rather than <see langword="null" /> to indicate that the property exists, but does not have its value set by the property system.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-472"><xref:System.Windows.DependencyProperty.UnsetValue> jest wartością wartownik, która jest używana w scenariuszach, gdzie [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] właściwości system nie mógł określić zażądano <xref:System.Windows.DependencyProperty> wartość.</span><span class="sxs-lookup"><span data-stu-id="756a7-472"><xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value that is used for scenarios where the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system is unable to determine a requested <xref:System.Windows.DependencyProperty> value.</span></span> <span data-ttu-id="756a7-473"><xref:System.Windows.DependencyProperty.UnsetValue> jest używany zamiast `null`, ponieważ `null` może mieć prawidłową wartość właściwości, a także prawidłowy (i często używane) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="756a7-473"><xref:System.Windows.DependencyProperty.UnsetValue> is used rather than `null`, because `null` could be a valid property value, as well as a valid (and frequently used) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span></span>  
  
 <span data-ttu-id="756a7-474"><xref:System.Windows.DependencyProperty.UnsetValue> nigdy nie jest zwracana z <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="756a7-474"><xref:System.Windows.DependencyProperty.UnsetValue> is never returned out of <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="756a7-475">Podczas wywoływania <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> we właściwości zależności na <xref:System.Windows.DependencyObject> wystąpienia, jedno z następujących dotyczy:</span><span class="sxs-lookup"><span data-stu-id="756a7-475">When you call <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> on a dependency property on a <xref:System.Windows.DependencyObject> instance, one of the following applies:</span></span>  
  
-   <span data-ttu-id="756a7-476">Właściwość dependency ma wartość domyślną w metadanych i ta wartość jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="756a7-476">A dependency property has a default value established in metadata and that value is returned.</span></span> <span data-ttu-id="756a7-477">Ta wartość może pochodzić z <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="756a7-477">This value might come from <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
-   <span data-ttu-id="756a7-478">Wartość zostało ustanowione przez właściwości systemu, a wartość domyślna jest już nieaktualny.</span><span class="sxs-lookup"><span data-stu-id="756a7-478">Some other value was established by the property system, and the default value is no longer relevant.</span></span> <span data-ttu-id="756a7-479">Aby uzyskać więcej informacji, zobacz [pierwszeństwo wartość właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-479">For details, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="756a7-480">Ustawienie <xref:System.Windows.PropertyMetadata.DefaultValue%2A> z <xref:System.Windows.DependencyProperty.UnsetValue> w szczególności jest niedozwolone.</span><span class="sxs-lookup"><span data-stu-id="756a7-480">Setting a <xref:System.Windows.PropertyMetadata.DefaultValue%2A> of <xref:System.Windows.DependencyProperty.UnsetValue> is specifically disallowed.</span></span>  
  
 <span data-ttu-id="756a7-481"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> Zwraca <xref:System.Windows.DependencyProperty.UnsetValue> gdy żądana właściwość nie została lokalnie ustawiona.</span><span class="sxs-lookup"><span data-stu-id="756a7-481"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> returns <xref:System.Windows.DependencyProperty.UnsetValue> when the requested property has not been locally set.</span></span>  
  
 <span data-ttu-id="756a7-482"><xref:System.Windows.DependencyProperty.UnsetValue> ma specjalnego znaczenia, gdy jest używany jako wartość zwracaną <xref:System.Windows.CoerceValueCallback>.</span><span class="sxs-lookup"><span data-stu-id="756a7-482"><xref:System.Windows.DependencyProperty.UnsetValue> has a special meaning when used as the return value of a <xref:System.Windows.CoerceValueCallback>.</span></span> <span data-ttu-id="756a7-483">Aby uzyskać więcej informacji, zobacz [wywołania zwrotne właściwości zależności i sprawdzania poprawności](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-483">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 <span data-ttu-id="756a7-484">Są wiązane z bazą danych, należy pamiętać, że <xref:System.Windows.DependencyProperty.UnsetValue> nie jest odpowiednikiem <xref:System.DBNull.Value>, w podobny sposób jak <xref:System.DBNull.Value> nie jest równoważna wartości true wartość null.</span><span class="sxs-lookup"><span data-stu-id="756a7-484">If you are binding to a database, note that <xref:System.Windows.DependencyProperty.UnsetValue> is not equivalent to <xref:System.DBNull.Value>, in a similar way to how <xref:System.DBNull.Value> is not equivalent to a true null.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.ValidateValueCallback ValidateValueCallback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ValidateValueCallback ValidateValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidateValueCallback As ValidateValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ValidateValueCallback ^ ValidateValueCallback { System::Windows::ValidateValueCallback ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ValidateValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="756a7-485">Pobiera wywołanie zwrotne weryfikacji wartości dla właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-485">Gets the value validation callback for the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="756a7-486">Wywołanie zwrotne weryfikacji wartość dla tej właściwości zależności, zgodnie z <paramref name="validateValueCallback" /> parametru w pierwotnej rejestracji właściwości zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="756a7-486">The value validation callback for this dependency property, as provided for the <paramref name="validateValueCallback" /> parameter in the original dependency property registration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="756a7-487">Ta właściwość będzie zawierać `null` dla każdej właściwości zależności, bez sprawdzania poprawności w zarejestrowany wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="756a7-487">This property will contain `null` for any dependency property with no registered validation callback.</span></span>  
  
 <span data-ttu-id="756a7-488">Zweryfikować wartości wywołania zwrotne musi działać w statycznej znaczeniu: Sprawdzanie poprawności stosowane przy użyciu <xref:System.Windows.ValidateValueCallback> nie może określić, czy podana wartość jest nieprawidłowa dla dowolne wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="756a7-488">Validate value callbacks must act in a static sense: validation applied through the <xref:System.Windows.ValidateValueCallback> cannot determine whether the provided value is valid for any particular instance.</span></span> <span data-ttu-id="756a7-489">Wywołania zwrotnego tylko można określić, czy wszystkie obiekty, które posiadają właściwości zależności powinien lub nie powinien akceptować podanej wartości jako prawidłowy.</span><span class="sxs-lookup"><span data-stu-id="756a7-489">The callback can only determine whether all objects that possess the dependency property should or should not accept the provided value as valid.</span></span> <span data-ttu-id="756a7-490">Jeśli potrzebujesz sprawdzania poprawności opartym na wiedzy o wartości innych właściwości zależności na konkretnym wystąpieniu, użyj <xref:System.Windows.CoerceValueCallback> zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="756a7-490">If you need to perform validation that relies on knowing the values of other dependency properties on a particular instance, use a <xref:System.Windows.CoerceValueCallback> instead.</span></span> <span data-ttu-id="756a7-491"><xref:System.Windows.CoerceValueCallback> Jest zarejestrowany w ramach metadanych właściwości zależności, a nie bezpośrednio z poziomu identyfikatora właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="756a7-491">The <xref:System.Windows.CoerceValueCallback> is registered as part of dependency property metadata, rather than directly within the dependency property identifier.</span></span> <span data-ttu-id="756a7-492">Aby uzyskać więcej informacji, zobacz [wywołania zwrotne właściwości zależności i sprawdzania poprawności](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="756a7-492">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValidateValueCallback" />
      </Docs>
    </Member>
  </Members>
</Type>