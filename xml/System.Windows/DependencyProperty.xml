<Type Name="DependencyProperty" FullName="System.Windows.DependencyProperty">
  <Metadata><Meta Name="ms.openlocfilehash" Value="21210545d8206e6e4e474c2b2e8040e528891f8a" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69434647" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyProperty" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyProperty sealed" />
  <TypeSignature Language="F#" Value="type DependencyProperty = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0b54c-101">Reprezentuje właściwość, którą można ustawić za pomocą metod, takich jak style, powiązanie danych, animacja i dziedziczenie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-101">Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-102">Program <xref:System.Windows.DependencyProperty> A obsługuje następujące możliwości w [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]programie:</span><span class="sxs-lookup"><span data-stu-id="0b54c-102">A <xref:System.Windows.DependencyProperty> supports the following capabilities in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:</span></span>  
  
-   <span data-ttu-id="0b54c-103">Właściwość można ustawić w stylu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-103">The property can be set in a style.</span></span> <span data-ttu-id="0b54c-104">Aby uzyskać więcej informacji, zobacz [Style i tworzenia szablonów](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-104">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
-   <span data-ttu-id="0b54c-105">Właściwość można ustawić za pomocą powiązania danych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-105">The property can be set through data binding.</span></span> <span data-ttu-id="0b54c-106">Aby uzyskać więcej informacji na temat właściwości zależności powiązań danych [, zobacz How to: Powiąż właściwości dwóch kontrolek](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-106">For more information about data binding dependency properties, see [How to: Bind the Properties of Two Controls](~/docs/framework/wpf/data/how-to-bind-the-properties-of-two-controls.md).</span></span>  
  
-   <span data-ttu-id="0b54c-107">Właściwość można ustawić z odwołaniem do zasobu dynamicznego.</span><span class="sxs-lookup"><span data-stu-id="0b54c-107">The property can be set with a dynamic resource reference.</span></span> <span data-ttu-id="0b54c-108">Aby uzyskać więcej informacji, zobacz [zasoby XAML](~/docs/framework/wpf/advanced/xaml-resources.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-108">For more information, see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md).</span></span>  
  
-   <span data-ttu-id="0b54c-109">Właściwość może dziedziczyć swoją wartość automatycznie z elementu nadrzędnego w drzewie elementów.</span><span class="sxs-lookup"><span data-stu-id="0b54c-109">The property can inherit its value automatically from a parent element in the element tree.</span></span> <span data-ttu-id="0b54c-110">Aby uzyskać więcej informacji, zobacz [dziedziczenie wartości właściwości](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-110">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
-   <span data-ttu-id="0b54c-111">Właściwość można animować.</span><span class="sxs-lookup"><span data-stu-id="0b54c-111">The property can be animated.</span></span> <span data-ttu-id="0b54c-112">Aby uzyskać więcej informacji, zobacz [Omówienie animacji](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-112">For more information, see [Animation Overview](~/docs/framework/wpf/graphics-multimedia/animation-overview.md).</span></span>  
  
-   <span data-ttu-id="0b54c-113">Właściwość może raportować, kiedy została zmieniona Poprzednia wartość właściwości, a wartość właściwości może być wymuszona.</span><span class="sxs-lookup"><span data-stu-id="0b54c-113">The property can report when the previous value of the property has been changed and the property value can be coerced.</span></span> <span data-ttu-id="0b54c-114">Aby uzyskać więcej informacji, zobacz [wywołania zwrotne właściwości zależności i walidacja](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-114">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
-   <span data-ttu-id="0b54c-115">Właściwość raportuje informacje do [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], na przykład czy zmiana wartości właściwości powinna wymagać od systemu układu przetworzenia wizualizacji dla elementu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-115">The property reports information to [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], such as whether changing a property value should require the layout system to recompose the visuals for an element.</span></span>  
  
-   <span data-ttu-id="0b54c-116">Właściwość otrzymuje obsługę w [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0b54c-116">The property receives support in the [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].</span></span>  <span data-ttu-id="0b54c-117">Na przykład właściwość można edytować w oknie **Właściwości** .</span><span class="sxs-lookup"><span data-stu-id="0b54c-117">For example, the property can be edited in the **Properties** window.</span></span>  
  
 <span data-ttu-id="0b54c-118">Aby dowiedzieć się więcej o właściwościach zależności, zobacz [Omówienie właściwości zależności](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-118">To learn more about dependency properties, see [Dependency Properties Overview](~/docs/framework/wpf/advanced/dependency-properties-overview.md).</span></span> <span data-ttu-id="0b54c-119">Jeśli chcesz, aby właściwości typów niestandardowych obsługiwały możliwości z powyższej listy, należy utworzyć właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-119">If you want properties on your custom types to support the capabilities in the preceding list, you should create a dependency property.</span></span>  <span data-ttu-id="0b54c-120">Aby dowiedzieć się, jak utworzyć niestandardowe właściwości zależności, zobacz [niestandardowe właściwości zależności](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-120">To learn how to create custom dependency properties, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="0b54c-121">Dołączona właściwość jest właściwością, która umożliwia każdemu obiektowi zgłaszanie informacji do typu, który definiuje załączoną właściwość.</span><span class="sxs-lookup"><span data-stu-id="0b54c-121">An attached property is a property that enables any object to report information to the type that defines the attached property.</span></span> <span data-ttu-id="0b54c-122">W [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]programie każdy typ, który dziedziczy <xref:System.Windows.DependencyObject> z, może korzystać z dołączonej właściwości niezależnie od tego, czy typ dziedziczy z typu, który definiuje właściwość.</span><span class="sxs-lookup"><span data-stu-id="0b54c-122">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], any type that inherits from <xref:System.Windows.DependencyObject> can use an attached property regardless of whether the type inherits from the type that defines the property.</span></span> <span data-ttu-id="0b54c-123">Dołączona właściwość jest funkcją [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] języka.</span><span class="sxs-lookup"><span data-stu-id="0b54c-123">An attached property is a feature of the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language.</span></span>  <span data-ttu-id="0b54c-124">Aby ustawić dołączoną właściwość w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], użyj elementu *OwnerType*. *Składnia propertyName* .</span><span class="sxs-lookup"><span data-stu-id="0b54c-124">To set an attached property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], use the *ownerType*.*propertyName* syntax.</span></span> <span data-ttu-id="0b54c-125">Przykładem dołączonej właściwości jest <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> właściwość.</span><span class="sxs-lookup"><span data-stu-id="0b54c-125">An example of an attached property is the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="0b54c-126">Jeśli chcesz utworzyć właściwość, która może być używana dla wszystkich <xref:System.Windows.DependencyObject> typów, należy utworzyć dołączoną właściwość.</span><span class="sxs-lookup"><span data-stu-id="0b54c-126">If you want to create a property that can be used on all <xref:System.Windows.DependencyObject> types, then you should create an attached property.</span></span> <span data-ttu-id="0b54c-127">Aby dowiedzieć się więcej o dołączanych właściwościach, w tym o sposobie ich tworzenia, zobacz [Omówienie dołączanych właściwości](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-127">To learn more about attached properties, including how to create them, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
<a name="xamlAttributeUsage_DependencyProperty"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="0b54c-128">Użycie atrybutu języka XAML</span><span class="sxs-lookup"><span data-stu-id="0b54c-128">XAML Attribute Usage</span></span>  
  
```xaml 
<object property="dependencyPropertyName"/>  
```

<span data-ttu-id="0b54c-129">—lub—</span><span class="sxs-lookup"><span data-stu-id="0b54c-129">-or-</span></span>

```xaml
<object property="ownerType.dependencyPropertyName"/>  
```

<span data-ttu-id="0b54c-130">—lub—</span><span class="sxs-lookup"><span data-stu-id="0b54c-130">-or-</span></span>

```xaml
<object property="attachedPropertyOwnerType.attachedPropertyName"/>  
```  
  
<a name="xamlValues_DependencyProperty"></a>   
## <a name="xaml-values"></a><span data-ttu-id="0b54c-131">Wartości XAML</span><span class="sxs-lookup"><span data-stu-id="0b54c-131">XAML Values</span></span>  
 `dependencyPropertyName`  
 <span data-ttu-id="0b54c-132">Ciąg określający <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> pożądaną właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-132">A string that specifies the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> of the desired dependency property.</span></span> <span data-ttu-id="0b54c-133">Może to być poprzedzone prefiksem przestrzeni nazw XML, jeśli właściwość nie znajduje się w domyślnej przestrzeni nazw XML (Aby uzyskać szczegółowe informacje, zobacz sekcję [przestrzenie nazw XAML i mapowanie przestrzeni nazw dla WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)).</span><span class="sxs-lookup"><span data-stu-id="0b54c-133">This can be preceded by an XML namespace prefix if the property is not in the default XML namespace (for details, see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).)</span></span>  
  
 <span data-ttu-id="0b54c-134">`ownerType`.`dependencyPropertyName`</span><span class="sxs-lookup"><span data-stu-id="0b54c-134">`ownerType`.`dependencyPropertyName`</span></span>  
 <span data-ttu-id="0b54c-135">Ciąg określający typ właściciela właściwości zależności, kropki (.), a następnie <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0b54c-135">A string that specifies an owner type of a dependency property, a dot (.), then the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0b54c-136">`ownerType`może być również poprzedzony prefiksem przestrzeni nazw XML.</span><span class="sxs-lookup"><span data-stu-id="0b54c-136">`ownerType` can also be preceded by an XML namespace prefix.</span></span> <span data-ttu-id="0b54c-137">To użycie jest szczególnie powiązane ze stylami i szablonami, w których właściciel właściwości zależności musi być określony dla kontekstu analizy, ponieważ `TargetType` nie jest jeszcze znany.</span><span class="sxs-lookup"><span data-stu-id="0b54c-137">This usage is particular to late-bound styles and templates, where the owner of the dependency property must be specified for parsing context because the `TargetType` is not yet known.</span></span> <span data-ttu-id="0b54c-138">Aby uzyskać więcej informacji, zobacz [Style i tworzenia szablonów](~/docs/framework/wpf/controls/styling-and-templating.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-138">For more information, see [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md).</span></span>  
  
 <span data-ttu-id="0b54c-139">`attachedPropertyOwnerType` *.*</span><span class="sxs-lookup"><span data-stu-id="0b54c-139">`attachedPropertyOwnerType` *.*</span></span> `attachedPropertyName`  
 <span data-ttu-id="0b54c-140">Ciąg określający właściciela dołączonej właściwości, kropkę (.), a następnie nazwę dołączonej właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-140">A string that specifies  the owner of an attached property, a dot (.), then the attached property name.</span></span> <span data-ttu-id="0b54c-141">`attachedPropertyOwnerType`może być również poprzedzony prefiksem przestrzeni nazw XML.</span><span class="sxs-lookup"><span data-stu-id="0b54c-141">`attachedPropertyOwnerType` can also be preceded by an XML namespace prefix.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AddOwner">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0b54c-142">Dodaje inny typ jako właściciela właściwości zależności, która została już zarejestrowana w typie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-142">Adds another type as an owner of a dependency property that has already been registered to a type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType"><span data-ttu-id="0b54c-143">Typ, który ma zostać dodany jako właściciel tej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-143">The type to add as an owner of this dependency property.</span></span></param>
        <summary><span data-ttu-id="0b54c-144">Dodaje inny typ jako właściciela właściwości zależności, która została już zarejestrowana.</span><span class="sxs-lookup"><span data-stu-id="0b54c-144">Adds another type as an owner of a dependency property that has already been registered.</span></span></summary>
        <returns><span data-ttu-id="0b54c-145">Odwołanie do oryginalnego <see cref="T:System.Windows.DependencyProperty" /> identyfikatora, który identyfikuje właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-145">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span></span> <span data-ttu-id="0b54c-146">Ten identyfikator powinien być narażony przez Dodawanie klasy jako <see langword="public static readonly" /> pole.</span><span class="sxs-lookup"><span data-stu-id="0b54c-146">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-147">Ta metoda umożliwia systemowi właściwości rozpoznawanie właściwości zależności w typie, który nie zarejestrował wcześniej konkretnej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-147">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="0b54c-148"><xref:System.Windows.DependencyProperty.AddOwner%2A> Zwykle jest używany do dodawania właściwości zależności do klas, które nie uwidaczniają już właściwości zależności za pomocą dziedziczenia klasy zarządzanej (dziedziczenie klas mogłoby spowodować dziedziczenie właściwości otoki przez klasę pochodną i w ten sposób zapewnia ogólne elementy członkowskie — dostęp do tabeli do właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-148">Typically, <xref:System.Windows.DependencyProperty.AddOwner%2A> is used to add dependency properties to classes that do not already expose that dependency property through managed class inheritance (class inheritance would cause the wrapper properties to be inherited by the derived class, and thus would provide general members-table access to the dependency property already).</span></span> <span data-ttu-id="0b54c-149"><xref:System.Windows.DependencyProperty.AddOwner%2A>umożliwia systemowi właściwości rozpoznawanie właściwości zależności w typie, który nie zarejestrował właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-149"><xref:System.Windows.DependencyProperty.AddOwner%2A> enables the property system to recognize a dependency property on a type that did not register that dependency property initially.</span></span>  
  
 <span data-ttu-id="0b54c-150">Ta sygnatura nie zezwala na określanie metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-150">This signature does not allow for specifying metadata.</span></span>  <span data-ttu-id="0b54c-151">W przypadku korzystania z tej metody metadane są generowane automatycznie dla nowego <xref:System.Windows.DependencyProperty> i jego typu właściciela.</span><span class="sxs-lookup"><span data-stu-id="0b54c-151">When you use this method, the metadata is automatically generated for the new <xref:System.Windows.DependencyProperty> and its owner type.</span></span> <span data-ttu-id="0b54c-152">Generowane automatycznie metadane są wynikiem scalonych metadanych ze wszystkich typów podstawowych, które mają zdefiniowaną tę właściwość.</span><span class="sxs-lookup"><span data-stu-id="0b54c-152">The auto-generated metadata is the result of the merged metadata from all of the base types that have this property defined.</span></span> <span data-ttu-id="0b54c-153">Jeśli żadne scalone metadane nie są dostępne, zostaną użyte domyślne metadane dla właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-153">If no merged metadata is available, then the default metadata for the property is used.</span></span> <span data-ttu-id="0b54c-154">Jeśli właściwość jest zarejestrowana przy użyciu <xref:System.Windows.DependencyProperty.RegisterAttached%2A> metody, metadane domyślne są takie same jak metadane, które są tworzone, gdy <xref:System.Windows.DependencyProperty.RegisterAttached%2A> została wywołana.</span><span class="sxs-lookup"><span data-stu-id="0b54c-154">If the property is registered by using the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, then the default metadata is the same as the metadata that is created when <xref:System.Windows.DependencyProperty.RegisterAttached%2A> was called.</span></span> <span data-ttu-id="0b54c-155">W przeciwnym razie <xref:System.Windows.PropertyMetadata.DefaultValue%2A> <xref:System.Windows.PropertyMetadata> `null`obiekt jest tworzony z właściwością ustawioną na wartość domyślną typu właściwości, a wszystkie inne właściwości mają ustawioną wartość. <xref:System.Windows.PropertyMetadata></span><span class="sxs-lookup"><span data-stu-id="0b54c-155">Otherwise, the <xref:System.Windows.PropertyMetadata> object is created with the <xref:System.Windows.PropertyMetadata.DefaultValue%2A> property set to the property type's default and all other properties of the <xref:System.Windows.PropertyMetadata> is set to `null`.</span></span> <span data-ttu-id="0b54c-156">Użyj podpisu <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> , jeśli chcesz podać metadane dla wersji właściwości zależności dodanej do podanego typu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-156">Use the <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> signature if you want to provide metadata for the version of the dependency property as added to the provided type.</span></span>  
  
 <span data-ttu-id="0b54c-157">Wartość zwracana przez tę metodę jest zwykle używana do deklarowania i uwidaczniania właściwości zależności przez zapisanie identyfikatora właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-157">The return value of this method is typically used to declare and expose the dependency property by storing a dependency property identifier.</span></span> <span data-ttu-id="0b54c-158">Identyfikator zapewnia dostęp do właściwości zależności, jeśli chcesz wywołać system [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] właściwości dla właściwości zależności, szczególnie, gdy istnieje ona w klasie dodawania właściciela.</span><span class="sxs-lookup"><span data-stu-id="0b54c-158">The identifier provides access to the dependency property if you want to call property system [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] against the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="0b54c-159">Aby wskazać podobną funkcję, należy użyć tej samej nazwy właściwości dla oryginalnego właściciela i dodanego właściciela.</span><span class="sxs-lookup"><span data-stu-id="0b54c-159">The same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="0b54c-160">Należy użyć <xref:System.Windows.DependencyProperty> wartości <xref:System.Windows.DependencyProperty.AddOwner%2A> zwracanej przez metodę w celu zdefiniowania identyfikatora właściwości zależności, a także zadeklarować [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] otoki właściwości dla właściwości zależności, które są dodawane do typów przy użyciu <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span><span class="sxs-lookup"><span data-stu-id="0b54c-160">You should use the <xref:System.Windows.DependencyProperty> return value of the <xref:System.Windows.DependencyProperty.AddOwner%2A> method to define the dependency property identifier, and also to declare [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="0b54c-161">Zalecana powyżej [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]Metoda jest używana podczas tworzenia właściwości zależności, które są zadeklarowane w ramach. <xref:System.Windows.DependencyProperty.AddOwner%2A></span><span class="sxs-lookup"><span data-stu-id="0b54c-161">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating the dependency properties that are declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="0b54c-162">Na przykład zarówno <xref:System.Windows.Controls.Border> , jak <xref:System.Windows.Controls.Control> i definiować `BorderBrush` właściwość zależności, która ma podobną funkcjonalność.</span><span class="sxs-lookup"><span data-stu-id="0b54c-162">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="0b54c-163"><xref:System.Windows.Controls.Control>definiuje jej `BorderBrush` właściwość do systemu właściwości przez wywołanie <xref:System.Windows.DependencyProperty.AddOwner%2A> na podstawie pierwotnego właściciela <xref:System.Windows.Controls.Border> i zarejestrowanej <xref:System.Windows.Controls.Border.BorderBrushProperty> właściwości zależności identyfikator.</span><span class="sxs-lookup"><span data-stu-id="0b54c-163"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> based on the original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="0b54c-164">Wartość zwracana jest następnie używana do ustanowienia nowego pola statycznego <xref:System.Windows.DependencyProperty> (<xref:System.Windows.Controls.Control.BorderBrushProperty>) dla tej `BorderBrush` właściwości na dodanym właścicielu, a także otoki właściwości. <xref:System.Windows.DependencyProperty.AddOwner%2A></span><span class="sxs-lookup"><span data-stu-id="0b54c-164">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a new static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner (ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="ownerType"><span data-ttu-id="0b54c-165">Typ, który ma zostać dodany jako właściciel tej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-165">The type to add as owner of this dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="0b54c-166">Metadane, które kwalifikują właściwość zależności, tak jak istnieje w podanym typie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-166">The metadata that qualifies the dependency property as it exists on the provided type.</span></span></param>
        <summary><span data-ttu-id="0b54c-167">Dodaje inny typ jako właściciela właściwości zależności, która została już zarejestrowana, dostarczając metadane właściwości zależności dla właściwości zależności, która będzie znajdować się w podanym typie właściciela.</span><span class="sxs-lookup"><span data-stu-id="0b54c-167">Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</span></span></summary>
        <returns><span data-ttu-id="0b54c-168">Odwołanie do oryginalnego <see cref="T:System.Windows.DependencyProperty" /> identyfikatora, który identyfikuje właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-168">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span></span> <span data-ttu-id="0b54c-169">Ten identyfikator powinien być narażony przez Dodawanie klasy jako <see langword="public static readonly" /> pole.</span><span class="sxs-lookup"><span data-stu-id="0b54c-169">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-170">Ta metoda umożliwia systemowi właściwości rozpoznawanie właściwości zależności w typie, który nie zarejestrował wcześniej konkretnej właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-170">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="0b54c-171">Wartość zwracana przez tę metodę jest używana do deklarowania i uwidaczniania właściwości zależności, szczególnie w przypadku, gdy istnieje ona w klasie Dodaj właściciela.</span><span class="sxs-lookup"><span data-stu-id="0b54c-171">The return value of this method is used to declare and expose the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="0b54c-172">Ogólnie rzecz biorąc, należy użyć tej samej nazwy właściwości dla oryginalnego właściciela i dodanego właściciela, aby wskazać podobną funkcjonalność.</span><span class="sxs-lookup"><span data-stu-id="0b54c-172">Generally, the same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="0b54c-173">Dobrym sposobem jest uwidocznienie identyfikatorów, a także nowych [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] otok właściwości, dla właściwości zależności, które są dodawane do typów przy użyciu. <xref:System.Windows.DependencyProperty.AddOwner%2A></span><span class="sxs-lookup"><span data-stu-id="0b54c-173">It is good practice to expose the identifiers, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="0b54c-174">Zalecana powyżej [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]metodologia jest używana podczas tworzenia deklaracji zadeklarowanej w ramach. <xref:System.Windows.DependencyProperty.AddOwner%2A></span><span class="sxs-lookup"><span data-stu-id="0b54c-174">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] declared within [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="0b54c-175">Na przykład zarówno <xref:System.Windows.Controls.Border> , jak <xref:System.Windows.Controls.Control> i definiować `BorderBrush` właściwość zależności, która ma podobną funkcjonalność.</span><span class="sxs-lookup"><span data-stu-id="0b54c-175">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="0b54c-176"><xref:System.Windows.Controls.Control>definiuje jej `BorderBrush` właściwość do systemu właściwości, wywołując <xref:System.Windows.DependencyProperty.AddOwner%2A> dla oryginalnego właściciela <xref:System.Windows.Controls.Border> i zarejestrowaną <xref:System.Windows.Controls.Border.BorderBrushProperty> właściwość zależności identyfikator.</span><span class="sxs-lookup"><span data-stu-id="0b54c-176"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> on original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="0b54c-177">Wartość zwracana jest następnie używana do ustanowienia pola statycznego <xref:System.Windows.DependencyProperty> (<xref:System.Windows.Controls.Control.BorderBrushProperty>) dla tej `BorderBrush` właściwości na dodanym właścicielu, a także otoka właściwości. <xref:System.Windows.DependencyProperty.AddOwner%2A></span><span class="sxs-lookup"><span data-stu-id="0b54c-177">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 <span data-ttu-id="0b54c-178">Identyfikator właściwości zależności dodanego właściciela powinien być używany w przypadku operacji takich <xref:System.Windows.DependencyObject.GetValue%2A>jak.</span><span class="sxs-lookup"><span data-stu-id="0b54c-178">The added owner's dependency property identifier should be used for operations such as <xref:System.Windows.DependencyObject.GetValue%2A>.</span></span> <span data-ttu-id="0b54c-179">Jednak operacje specyficzne dla typu obejmujące zarówno typy, jak i wystąpienia klasy, które zostały dodane jako właściciel z różnymi metadanymi, będą nadal zwracały oczekiwane wyniki, nawet jeśli oryginalny (nie dodany właściciel) identyfikator właściwości zależności jest określony w wywołania metod takich jak <xref:System.Windows.DependencyObject.GetValue%2A> lub. <xref:System.Windows.DependencyProperty.GetMetadata%2A></span><span class="sxs-lookup"><span data-stu-id="0b54c-179">However, type-specific operations involving either types or instances of the class that was added as owner with different metadata will still return the expected results even if the original (not the added owner's) dependency property identifier is specified in calls to methods such as <xref:System.Windows.DependencyObject.GetValue%2A> or <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span></span> <span data-ttu-id="0b54c-180">Metadane dodawanego właściciela to perpetuated przez <xref:System.Windows.DependencyProperty.AddOwner%2A> wywołanie, które nie muszą być odwoływane wyłącznie przez Dodawanie pola identyfikatora klasy właściciela.</span><span class="sxs-lookup"><span data-stu-id="0b54c-180">The metadata for the added owner is perpetuated by the <xref:System.Windows.DependencyProperty.AddOwner%2A> call itself, not necessarily referenced exclusively by the adding owner class identifier field.</span></span> <span data-ttu-id="0b54c-181">Niemniej jednak dobrym sposobem uwidocznienia identyfikatora, a także nowych [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] otok właściwości, dla właściwości zależności, które są dodawane do typów przy użyciu <xref:System.Windows.DependencyProperty.AddOwner%2A>, ponieważ Niewykonanie tej [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] czynności powoduje utworzenie różnic między i [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] reprezentacje właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-181">Nevertheless, it is good practice to expose the  identifier, as well as new [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>, because failing to do so creates disparity between the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] representations of your properties.</span></span>  
  
 <span data-ttu-id="0b54c-182">Podane metadane są scalane z metadanymi właściwości dla właściwości zależności, ponieważ istnieją one w podstawowym właścicielu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-182">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="0b54c-183">Wszystkie cechy, które zostały określone w oryginalnych metadanych podstawowych, zostaną zachowane.</span><span class="sxs-lookup"><span data-stu-id="0b54c-183">Any characteristics that were specified in the original base metadata will persist.</span></span> <span data-ttu-id="0b54c-184">Tylko te cechy, które zostały odpowiednio zmienione w nowych metadanych, przesłonią charakterystykę podstawowych metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-184">Only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="0b54c-185">Niektóre cechy, takie jak <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, są zastępowane, jeśli zostały określone w nowych metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-185">Some characteristics, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are replaced if they are specified in the new metadata.</span></span> <span data-ttu-id="0b54c-186">Inne, takie jak <xref:System.Windows.PropertyChangedCallback>, są łączone.</span><span class="sxs-lookup"><span data-stu-id="0b54c-186">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="0b54c-187">Ostatecznie zachowanie scalania zależy od typu metadanych właściwości używanego do przesłonięcia, więc zachowanie opisane tutaj dotyczy istniejących klas metadanych właściwości używanych przez [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-187">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="0b54c-188">Aby uzyskać szczegółowe informacje, zobacz metadane [właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-metadata.md) i [metadane właściwości struktury](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-188">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata DefaultMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyMetadata DefaultMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultMetadata As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyMetadata ^ DefaultMetadata { System::Windows::PropertyMetadata ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMetadata : System.Windows.PropertyMetadata" Usage="System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b54c-189">Pobiera domyślne metadane właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-189">Gets the default metadata of the dependency property.</span></span></summary>
        <value><span data-ttu-id="0b54c-190">Domyślne metadane właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-190">The default metadata of the dependency property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-191">Metadane domyślne to metadane właściwości, które są dostępne dla danego obiektu lub obiektu typu pochodnego, w przypadku których nie dostarczono metadanych alternatywnych przez jawne <xref:System.Windows.DependencyProperty.Register%2A> lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> wywołanie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-191">The default metadata is the property metadata that is available to that particular object or an object of a derived type where no alternative metadata was supplied by an explicit <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> call.</span></span>  
  
 <span data-ttu-id="0b54c-192">Jeśli oryginalny właściciel zastosował metadane do pierwszego <xref:System.Windows.DependencyProperty.Register%2A> wywołania, które ustanowił właściwość zależności, to metadane są zwracane jako. <xref:System.Windows.DependencyProperty.DefaultMetadata%2A></span><span class="sxs-lookup"><span data-stu-id="0b54c-192">If the original owner applied metadata to the first <xref:System.Windows.DependencyProperty.Register%2A> call that established the dependency property, then that metadata is returned as <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="0b54c-193">Jeśli w oryginalnym <xref:System.Windows.DependencyProperty.Register%2A> wywołaniu nie zastosowano żadnych metadanych, domyślne metadane są generowane <xref:System.Windows.DependencyProperty.Register%2A> w wywołaniu i ta <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>wartość jest zwracana jako.</span><span class="sxs-lookup"><span data-stu-id="0b54c-193">If no metadata was applied in the original <xref:System.Windows.DependencyProperty.Register%2A> call, then default metadata is generated from within the <xref:System.Windows.DependencyProperty.Register%2A> call and this value is returned as the <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="0b54c-194">Głównym celem posiadania domyślnych metadanych skojarzonych z obiektem <xref:System.Windows.DependencyProperty> jest podanie wartości domyślnej dla tej właściwości w dowolnym <xref:System.Windows.DependencyObject> lub typie pochodnym.</span><span class="sxs-lookup"><span data-stu-id="0b54c-194">The main purpose of having default metadata associated with a <xref:System.Windows.DependencyProperty> is to supply a default value for this property on any <xref:System.Windows.DependencyObject> or a derived type.</span></span>  
  
 <span data-ttu-id="0b54c-195">W przypadku niedołączonych właściwości Typ metadanych zwracany przez tę właściwość nie może być rzutowany na typy <xref:System.Windows.PropertyMetadata> pochodne typu, nawet jeśli właściwość została pierwotnie zarejestrowana przy użyciu pochodnego typu metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-195">For nonattached properties, the metadata type returned by this property cannot be cast to derived types of <xref:System.Windows.PropertyMetadata> type, even if the property was originally registered with a derived metadata type.</span></span> <span data-ttu-id="0b54c-196">Jeśli chcesz, aby pierwotnie zarejestrowane metadane z uwzględnieniem oryginalnego, prawdopodobnie pochodnego typu <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> metadanych, wywołaj zamiast tego, przekazując oryginalny typ rejestrowania jako parametr.</span><span class="sxs-lookup"><span data-stu-id="0b54c-196">If you want the originally registered metadata including its original possibly derived metadata type, call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> instead, passing the original registering type as a parameter.</span></span>  
  
 <span data-ttu-id="0b54c-197">W przypadku dołączonych właściwości Typ metadanych zwracanych przez tę właściwość będzie zgodny z typem podanym w oryginalnej <xref:System.Windows.DependencyProperty.RegisterAttached%2A> metodzie rejestracji.</span><span class="sxs-lookup"><span data-stu-id="0b54c-197">For attached properties, the type of the metadata returned by this property will match the type given in the original <xref:System.Windows.DependencyProperty.RegisterAttached%2A> registration method.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpdefaultvalue)]
[!code-vb[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpdefaultvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyProperty.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b54c-198">Zwraca kod skrótu dla tego <see cref="T:System.Windows.DependencyProperty" />elementu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-198">Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span></span></summary>
        <returns><span data-ttu-id="0b54c-199">Kod skrótu dla tego <see cref="T:System.Windows.DependencyProperty" />elementu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-199">The hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-200">System właściwości używa własnego identyfikatora <xref:System.Windows.DependencyProperty.GlobalIndex%2A>unikatowego, a wartość tej właściwości jest zwracana przez. <xref:System.Windows.DependencyProperty.GetHashCode%2A></span><span class="sxs-lookup"><span data-stu-id="0b54c-200">The property system uses its own unique identifier <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, and the value of that property is returned by <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0b54c-201">Zwraca metadane skojarzone z tą właściwością zależności, ponieważ istnieje dla określonego typu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-201">Returns the metadata associated with this dependency property as it exists for a particular type.</span></span> <span data-ttu-id="0b54c-202">Może to być typ, w którym właściwość zależności została po raz pierwszy zarejestrowana, do której został dodany później, lub typu, w którym właściwość zależności została uzyskana przez dziedziczenie, ale metadane zostały zasłonięte.</span><span class="sxs-lookup"><span data-stu-id="0b54c-202">This can be the type where the dependency property was first registered, one to which it was added subsequently, or a type where the dependency property was obtained through inheritance but the metadata was specifically overridden.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (Type forType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Type forType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata (forType As Type) As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(Type ^ forType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : Type -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata forType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="0b54c-203">Konkretny typ, z którego mają zostać pobrane metadane właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-203">The specific type from which to retrieve the dependency property metadata.</span></span></param>
        <summary><span data-ttu-id="0b54c-204">Zwraca metadane dla tej właściwości zależności, która istnieje w określonym istniejącym typie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-204">Returns the metadata for this dependency property as it exists on a specified existing type.</span></span></summary>
        <returns><span data-ttu-id="0b54c-205">Obiekt metadanych właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-205">A property metadata object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-206">Określenie typu lub odwołania do obiektu, który ma być używany jako typ, jest konieczne, ponieważ metadane mogą się różnić od oryginalnej rejestracji z <xref:System.Windows.DependencyProperty.AddOwner%2A> powodu <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> lub wywołań, które zmieniają metadane właściwości zależności, tak jak w typie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-206">Specifying either the type or an object reference to use as type is necessary because the metadata can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that alter the metadata of the dependency property as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b54c-207">Poniższy przykład pobiera metadane dla właściwości zależności na podstawie jej typu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-207">The following example gets metadata for a dependency property based on its type.</span></span> <span data-ttu-id="0b54c-208">Typ jest uzyskiwany za pomocą `typeof` operatora.</span><span class="sxs-lookup"><span data-stu-id="0b54c-208">The type is obtained by using a `typeof` operator.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatatype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatatype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObject -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject"><span data-ttu-id="0b54c-209">Obiekt zależności, który jest sprawdzany dla typu, aby określić, która wersja właściwości zależności powinna pochodzić z metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-209">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</span></span></param>
        <summary><span data-ttu-id="0b54c-210">Zwraca metadane dla tej właściwości zależności, która istnieje w określonym wystąpieniu obiektu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-210">Returns the metadata for this dependency property as it exists on the specified object instance.</span></span></summary>
        <returns><span data-ttu-id="0b54c-211">Obiekt metadanych właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-211">A property metadata object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-212">Określenie typu lub odwołania do obiektu jest konieczne, ponieważ metadane danej właściwości zależności mogą się różnić od oryginalnej rejestracji z powodu <xref:System.Windows.DependencyProperty.AddOwner%2A> lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> wywołań, które mogą udoskonalać metadane właściwości, ponieważ istnieją one na Wprowadź.</span><span class="sxs-lookup"><span data-stu-id="0b54c-212">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
 <span data-ttu-id="0b54c-213">Podczas żądania metadanych właściwości w oparciu o wystąpienie, wystarczy tylko przekazać wystąpienie, aby można było oszacować jego typ wewnętrznie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-213">When you request property metadata based on an instance, you are really just passing the instance so that its type can be evaluated internally.</span></span> <span data-ttu-id="0b54c-214">Metadane właściwości zależności nie różnią się w zależności od wystąpienia; jest on zawsze spójny dla każdej kombinacji właściwości typu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-214">Dependency property metadata does not vary per instance; it is always consistent for any given type-property combination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b54c-215">Poniższy przykład pobiera metadane dla właściwości zależności w oparciu o określone <xref:System.Windows.DependencyObject> wystąpienie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-215">The following example gets metadata for a dependency property based on a specific <xref:System.Windows.DependencyObject> instance.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadoinstance)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadoinstance)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObjectType dependencyObjectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObjectType dependencyObjectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObjectType ^ dependencyObjectType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObjectType -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObjectType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObjectType" Type="System.Windows.DependencyObjectType" />
      </Parameters>
      <Docs>
        <param name="dependencyObjectType"><span data-ttu-id="0b54c-216">Konkretny obiekt, który rejestruje typ obiektu zależności, z którego żądane są metadane właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-216">A specific object that records the dependency object type from which the dependency property metadata is desired.</span></span></param>
        <summary><span data-ttu-id="0b54c-217">Zwraca metadane dla tej właściwości zależności, która istnieje w określonym typie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-217">Returns the metadata for this dependency property as it exists on a specified type.</span></span></summary>
        <returns><span data-ttu-id="0b54c-218">Obiekt metadanych właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-218">A property metadata object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-219">Określenie typu lub odwołania do obiektu jest konieczne, ponieważ metadane danej właściwości zależności mogą się różnić od oryginalnej rejestracji z powodu <xref:System.Windows.DependencyProperty.AddOwner%2A> lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> wywołań, które mogą udoskonalać metadane właściwości, ponieważ istnieją one na Wprowadź.</span><span class="sxs-lookup"><span data-stu-id="0b54c-219">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b54c-220">Poniższy przykład pobiera metadane dla właściwości zależności na podstawie jej <xref:System.Windows.DependencyObjectType>.</span><span class="sxs-lookup"><span data-stu-id="0b54c-220">The following example gets metadata for a dependency property based on its <xref:System.Windows.DependencyObjectType>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadotype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadotype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalIndex">
      <MemberSignature Language="C#" Value="public int GlobalIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GlobalIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.GlobalIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GlobalIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalIndex : int" Usage="System.Windows.DependencyProperty.GlobalIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b54c-221">Pobiera wewnętrznie wygenerowaną wartość, która jednoznacznie identyfikuje właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-221">Gets an internally generated value that uniquely identifies the dependency property.</span></span></summary>
        <value><span data-ttu-id="0b54c-222">Unikatowy identyfikator liczbowy.</span><span class="sxs-lookup"><span data-stu-id="0b54c-222">A unique numeric identifier.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-223">Ta wartość jest liczbą całkowitą, a nie globalnie unikatowym identyfikatorem (GUID).</span><span class="sxs-lookup"><span data-stu-id="0b54c-223">This value is an integer, not a globally unique identifier (GUID).</span></span> <span data-ttu-id="0b54c-224">Ogólnie używanie tej wartości indeksu nie jest wymagane i nie ma dostępu do indeksu do tabel wszystkich właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-224">Generally, using this index value is not required, and there is no index access to tables of all dependency properties.</span></span> <span data-ttu-id="0b54c-225">W przypadku właściwości zależności należy odwoływać się do nich pola identyfikatorów.</span><span class="sxs-lookup"><span data-stu-id="0b54c-225">Dependency properties should instead be referenced by their identifier fields.</span></span>  
  
 <span data-ttu-id="0b54c-226"><xref:System.Windows.DependencyProperty.GlobalIndex%2A>jest używany wewnętrznie do szybszego dostępu do struktur danych, które <xref:System.Windows.DependencyProperty.GlobalIndex%2A> korzystają z indeksu tablicowego opartego na zero.</span><span class="sxs-lookup"><span data-stu-id="0b54c-226"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> is used internally for faster access to data structures that use the <xref:System.Windows.DependencyProperty.GlobalIndex%2A> as a zero-based array index.</span></span> <span data-ttu-id="0b54c-227">Podobne użycie może mieć aplikacje dla projektantów lub narzędzi.</span><span class="sxs-lookup"><span data-stu-id="0b54c-227">A similar usage might have applications for designers or tools.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidType">
      <MemberSignature Language="C#" Value="public bool IsValidType (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidType(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidType (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidType(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidType : obj -&gt; bool" Usage="dependencyProperty.IsValidType value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="0b54c-228">Wartość do sprawdzenia.</span><span class="sxs-lookup"><span data-stu-id="0b54c-228">The value to check.</span></span></param>
        <summary><span data-ttu-id="0b54c-229">Określa, czy określona wartość jest akceptowalna dla tego typu właściwości zależności, sprawdzana względem typu właściwości podanego w oryginalnej rejestracji właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-229">Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</span></span></summary>
        <returns><span data-ttu-id="0b54c-230"><see langword="true" />Jeśli określona wartość jest zarejestrowanym typem właściwości lub akceptowalnym typem pochodnym; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="0b54c-230"><see langword="true" /> if the specified value is the registered property type or an acceptable derived type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-231">Wartość `null` jest prawidłowym typem dla właściwości zależności typu odwołania lub <xref:System.Nullable%601> dla właściwości zależności i zwróci `true` się w tych przypadkach.</span><span class="sxs-lookup"><span data-stu-id="0b54c-231">A value of `null` is a valid type for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="0b54c-232">W przypadkach, gdy właściwość dependency nie jest odwołaniem ani <xref:System.Nullable%601> typem, <xref:System.Windows.DependencyProperty.IsValidType%2A> program zwróci `false` wartość null zamiast zgłosić wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0b54c-232">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b54c-233">Poniższy przykład używa <xref:System.Windows.DependencyProperty.IsValidType%2A> jako sprawdzenie przed wywołaniem <xref:System.Windows.DependencyObject.SetValue%2A> właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-233">The following example uses <xref:System.Windows.DependencyProperty.IsValidType%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvalue)]
 [!code-vb[PropertySystemEsoterics#TrySetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidValue">
      <MemberSignature Language="C#" Value="public bool IsValidValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidValue : obj -&gt; bool" Usage="dependencyProperty.IsValidValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="0b54c-234">Wartość do sprawdzenia.</span><span class="sxs-lookup"><span data-stu-id="0b54c-234">The value to check.</span></span></param>
        <summary><span data-ttu-id="0b54c-235">Określa, czy podana wartość jest akceptowana dla typu właściwości za pomocą podstawowego sprawdzania typów, a także może być w dozwolonym zakresie wartości dla tego typu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-235">Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</span></span></summary>
        <returns><span data-ttu-id="0b54c-236"><see langword="true" />Jeśli wartość jest akceptowalna i jest prawidłowym typem lub typem pochodnym; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="0b54c-236"><see langword="true" /> if the value is acceptable and is of the correct type or a derived type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-237">Dla właściwości zależności dozwolony zakres wartości dla tego typu może być określony za pomocą <xref:System.Windows.ValidateValueCallback> , który jest dostępny w rejestracji właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-237">For a dependency property, an allowed range of values for that type can be specified through a <xref:System.Windows.ValidateValueCallback> that is provided in the dependency property registration.</span></span>  
  
 <span data-ttu-id="0b54c-238">Ta metoda wywołuje <xref:System.Windows.DependencyProperty.IsValidType%2A> wewnętrznie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-238">This method calls <xref:System.Windows.DependencyProperty.IsValidType%2A> internally.</span></span> <span data-ttu-id="0b54c-239">Jeśli dana właściwość zależności ma wartość nie <xref:System.Windows.ValidateValueCallback>, wywołanie tej metody jest efektywnie równoważne wywołaniu. <xref:System.Windows.DependencyProperty.IsValidType%2A></span><span class="sxs-lookup"><span data-stu-id="0b54c-239">If the dependency property in question has no <xref:System.Windows.ValidateValueCallback>,then calling this method is effectively equivalent to calling <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span></span> <span data-ttu-id="0b54c-240">Jeśli właściwość dependency ma <xref:System.Windows.ValidateValueCallback>wartość, a w przypadku <xref:System.Windows.DependencyProperty.IsValidType%2A> zwrócenia `true`wartości zwrócona będzie jako zaimplementowana w wywołaniu zwrotnym.</span><span class="sxs-lookup"><span data-stu-id="0b54c-240">If the dependency property does have a <xref:System.Windows.ValidateValueCallback>, and if <xref:System.Windows.DependencyProperty.IsValidType%2A> would have returned `true`, then the value returned will be as implemented in the callback.</span></span>  
  
 <span data-ttu-id="0b54c-241">Wartość null jest prawidłową wartością dla właściwości zależności typu odwołania lub dla <xref:System.Nullable%601> właściwości zależności, która zwróci `true` te przypadki.</span><span class="sxs-lookup"><span data-stu-id="0b54c-241">A null value is a valid value for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="0b54c-242">W przypadkach, gdy właściwość dependency nie jest odwołaniem ani <xref:System.Nullable%601> typem, <xref:System.Windows.DependencyProperty.IsValidType%2A> program zwróci `false` wartość null zamiast zgłosić wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0b54c-242">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b54c-243">Poniższy przykład używa <xref:System.Windows.DependencyProperty.IsValidValue%2A> jako sprawdzenie przed wywołaniem <xref:System.Windows.DependencyObject.SetValue%2A> właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-243">The following example uses <xref:System.Windows.DependencyProperty.IsValidValue%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvaluewithvalidate)]
 [!code-vb[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvaluewithvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.DependencyProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b54c-244">Pobiera nazwę właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-244">Gets the name of the dependency property.</span></span></summary>
        <value><span data-ttu-id="0b54c-245">Nazwa właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-245">The name of the property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-246">Ta właściwość pobiera nazwę podaną jako `name` parametr podczas rejestracji właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-246">This property gets the name provided as the `name` parameter during dependency property registration.</span></span> <span data-ttu-id="0b54c-247">Ta nazwa jest niezmienna i nie może `null` być lub ciągiem pustym.</span><span class="sxs-lookup"><span data-stu-id="0b54c-247">This name is immutable, and cannot be `null` or an empty string.</span></span> <span data-ttu-id="0b54c-248">Zduplikowane rejestracje nazw dla tego samego typu właściciela są niedozwolone i będą zgłaszać wyjątek podczas próby zarejestrowania duplikatu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-248">Duplicate name registrations on the same owner type are not permitted, and will throw an exception when you attempt to register the duplicate.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0b54c-249"><xref:System.Windows.DependencyProperty.Name%2A> Właściwość zależności musi następować przy użyciu konwencji odpowiadającej nazwie identyfikatora właściwości zależności pomniejszonej o sufiks "Property".</span><span class="sxs-lookup"><span data-stu-id="0b54c-249">The <xref:System.Windows.DependencyProperty.Name%2A> of a dependency property must follow the convention of matching the name of its dependency property identifier minus the suffix "Property".</span></span> <span data-ttu-id="0b54c-250">Aby uzyskać szczegółowe informacje, zobacz [niestandardowe właściwości zależności](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-250">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b54c-251">Poniższy przykład wykonuje zapytania o różne cechy identyfikatora właściwości zależności, w <xref:System.Windows.DependencyProperty.Name%2A>tym.</span><span class="sxs-lookup"><span data-stu-id="0b54c-251">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.Name%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OverrideMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0b54c-252">Dostarcza alternatywnych metadanych dla tej właściwości zależności, gdy jest ona obecna w wystąpieniach określonego typu, a także metadanych, które zostały podane w początkowej rejestracji właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-252">Supplies alternate metadata for this dependency property when it is present on instances of a specified type, versus the metadata that was provided in the initial dependency property registration.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="0b54c-253">Typ, w którym ta właściwość zależności jest dziedziczona i gdzie zostaną zastosowane podane alternatywne metadane.</span><span class="sxs-lookup"><span data-stu-id="0b54c-253">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="0b54c-254">Metadane do zastosowania do właściwości zależności w typie przesłania.</span><span class="sxs-lookup"><span data-stu-id="0b54c-254">The metadata to apply to the dependency property on the overriding type.</span></span></param>
        <summary><span data-ttu-id="0b54c-255">Określa alternatywne metadane dla tej właściwości zależności, gdy jest ona obecna w wystąpieniach określonego typu, zastępując metadane, które istniały dla właściwości zależności, ponieważ zostały odziedziczone z typów podstawowych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-255">Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-256">Metadane właściwości zależności powinny zostać zastąpione, zanim system właściwości użyje właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-256">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="0b54c-257">Jest to równe czas tworzenia określonych wystąpień przy użyciu klasy, która rejestruje właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-257">This equates to the time that specific instances are created using the class that registers the dependency property.</span></span> <span data-ttu-id="0b54c-258">Wywołania powinny być wykonywane tylko w konstruktorach statycznych typu, który dostarcza siebie `forType` jako parametr tej metody lub za pomocą podobnego tworzenia wystąpienia. <xref:System.Windows.DependencyProperty.OverrideMetadata%2A></span><span class="sxs-lookup"><span data-stu-id="0b54c-258">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="0b54c-259">Próba zmiany metadanych po wystąpieniu wystąpienia typu właściciela nie spowoduje wywołania wyjątków, ale spowoduje niespójne zachowania w systemie właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-259">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="0b54c-260">Po ustanowieniu metadanych dla konkretnego przesłonięcia klasy pochodnej przy użyciu tej metody, kolejne próby zastąpienia metadanych w tej samej klasie pochodnej spowodują wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0b54c-260">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="0b54c-261">Podane metadane są scalane z metadanymi właściwości dla właściwości zależności, ponieważ istnieją one w podstawowym właścicielu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-261">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="0b54c-262">Wszystkie cechy, które zostały określone w oryginalnych metadanych podstawowych, będą utrwalane; tylko te cechy, które zostały odpowiednio zmienione w nowych metadanych, przesłonią charakterystykę podstawowych metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-262">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="0b54c-263">Niektóre cechy, takie <xref:System.Windows.PropertyMetadata.DefaultValue%2A> jak są zastępowane w przypadku określenia w nowych metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-263">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="0b54c-264">Inne, takie jak <xref:System.Windows.PropertyChangedCallback>, są łączone.</span><span class="sxs-lookup"><span data-stu-id="0b54c-264">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="0b54c-265">Ostatecznie zachowanie scalania zależy od typu metadanych właściwości używanego do przesłonięcia, więc zachowanie opisane tutaj dotyczy istniejących klas metadanych właściwości używanych przez [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-265">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dependency properties.</span></span> <span data-ttu-id="0b54c-266">Aby uzyskać szczegółowe informacje, zobacz metadane [właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-metadata.md) i [metadane właściwości struktury](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-266">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0b54c-267">Podjęto próbę zastąpienia metadanych właściwości zależności tylko do odczytu (nie można wykonać tej operacji przy użyciu tej sygnatury).</span><span class="sxs-lookup"><span data-stu-id="0b54c-267">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="0b54c-268">Metadane zostały już ustanowione dla właściwości zależności, która istnieje w podanym typie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-268">Metadata was already established for the dependency property as it exists on the provided type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata, System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata, key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata * System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="0b54c-269">Typ, w którym ta właściwość zależności jest dziedziczona i gdzie zostaną zastosowane podane alternatywne metadane.</span><span class="sxs-lookup"><span data-stu-id="0b54c-269">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="0b54c-270">Metadane do zastosowania do właściwości zależności w typie przesłania.</span><span class="sxs-lookup"><span data-stu-id="0b54c-270">The metadata to apply to the dependency property on the overriding type.</span></span></param>
        <param name="key"><span data-ttu-id="0b54c-271">Klucz dostępu dla właściwości zależności tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-271">The access key for a read-only dependency property.</span></span></param>
        <summary><span data-ttu-id="0b54c-272">Dostarcza alternatywne metadane dla właściwości zależności tylko do odczytu, gdy jest ona obecna w wystąpieniach określonego typu, zastępując metadane dostarczone w początkowej rejestracji właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-272">Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration.</span></span> <span data-ttu-id="0b54c-273">Należy przekazać <see cref="T:System.Windows.DependencyPropertyKey" /> właściwość zależności tylko do odczytu, aby uniknąć ponoszenia wyjątku.</span><span class="sxs-lookup"><span data-stu-id="0b54c-273">You must pass the <see cref="T:System.Windows.DependencyPropertyKey" /> for the read-only dependency property to avoid raising an exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-274">Ta sygnatura zawiera podstawową implementację metody identyfikatora właściwości zależności tylko do odczytu<xref:System.Windows.DependencyPropertyKey>().</span><span class="sxs-lookup"><span data-stu-id="0b54c-274">This signature provides underlying implementation for a read-only dependency property identifier (<xref:System.Windows.DependencyPropertyKey>) method.</span></span> <span data-ttu-id="0b54c-275">W przypadku zastępowania metadanych dla właściwości zależności odczytu i zapisu Użyj <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span><span class="sxs-lookup"><span data-stu-id="0b54c-275">If overriding metadata for a read-write dependency property, use <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="0b54c-276">Metadane właściwości zależności powinny zostać zastąpione, zanim system właściwości użyje właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-276">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="0b54c-277">Jest to równe czas tworzenia określonych obiektów dla klasy, która rejestruje właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-277">This equates to the time that specific objects are created for the class that registers the dependency property.</span></span> <span data-ttu-id="0b54c-278">Wywołania powinny być wykonywane tylko w konstruktorach statycznych typu, który dostarcza siebie `forType` jako parametr tej metody lub za pomocą podobnego tworzenia wystąpienia. <xref:System.Windows.DependencyProperty.OverrideMetadata%2A></span><span class="sxs-lookup"><span data-stu-id="0b54c-278">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="0b54c-279">Próba zmiany metadanych po wystąpieniu wystąpienia typu właściciela nie spowoduje wywołania wyjątków, ale spowoduje niespójne zachowania w systemie właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-279">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="0b54c-280">Po ustanowieniu metadanych dla konkretnego przesłonięcia klasy pochodnej przy użyciu tej metody, kolejne próby zastąpienia metadanych w tej samej klasie pochodnej spowodują wyjątek.</span><span class="sxs-lookup"><span data-stu-id="0b54c-280">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="0b54c-281">Podane metadane są scalane z metadanymi właściwości dla właściwości zależności, ponieważ istnieją one w podstawowym właścicielu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-281">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="0b54c-282">Wszystkie cechy, które zostały określone w oryginalnych metadanych podstawowych, będą utrwalane; tylko te cechy, które zostały odpowiednio zmienione w nowych metadanych, przesłonią charakterystykę podstawowych metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-282">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="0b54c-283">Niektóre cechy, takie <xref:System.Windows.PropertyMetadata.DefaultValue%2A> jak są zastępowane w przypadku określenia w nowych metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-283">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="0b54c-284">Inne, takie jak <xref:System.Windows.PropertyChangedCallback>, są łączone.</span><span class="sxs-lookup"><span data-stu-id="0b54c-284">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="0b54c-285">Zachowanie scalania jest zależne od typu metadanych właściwości używanego podczas przesłonięcia.</span><span class="sxs-lookup"><span data-stu-id="0b54c-285">The merge behavior depends on the property metadata type being used for the override.</span></span> <span data-ttu-id="0b54c-286">Aby uzyskać szczegółowe informacje, zobacz metadane [właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-metadata.md) i [metadane właściwości struktury](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-286">For details, see [Dependency Property Metadata](~/docs/framework/wpf/advanced/dependency-property-metadata.md) and [Framework Property Metadata](~/docs/framework/wpf/advanced/framework-property-metadata.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.DependencyProperty.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b54c-287">Pobiera typ obiektu, który zarejestrował właściwość zależności z systemem właściwości lub został dodany jako właściciel właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-287">Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</span></span></summary>
        <value><span data-ttu-id="0b54c-288">Typ obiektu, który zarejestrował właściwość lub dodany jako właściciel właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-288">The type of the object that registered the property or added itself as owner of the property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-289">Ta wartość została podana podczas rejestracji właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-289">This value was provided during property registration.</span></span> <span data-ttu-id="0b54c-290">Właściciel będzie oryginalnym typem <xref:System.Windows.DependencyProperty> rejestrowania w przypadku identyfikatora wygenerowanego <xref:System.Windows.DependencyProperty.Register%2A> na podstawie wywołania lub typu, który został dodany jako właściciel <xref:System.Windows.DependencyProperty> w przypadku identyfikatora wygenerowanego na podstawie <xref:System.Windows.DependencyProperty.AddOwner%2A> wywołania.</span><span class="sxs-lookup"><span data-stu-id="0b54c-290">The owner will be either the original registering type in the case of a <xref:System.Windows.DependencyProperty> identifier generated from a <xref:System.Windows.DependencyProperty.Register%2A> call, or the type that added itself as owner in the case of a <xref:System.Windows.DependencyProperty> identifier generated from an <xref:System.Windows.DependencyProperty.AddOwner%2A> call.</span></span>  
  
 <span data-ttu-id="0b54c-291">W każdym podanym <xref:System.Windows.DependencyProperty> miejscu jest niezmienne i nie `null` może być prawidłowy <xref:System.Windows.DependencyProperty>. <xref:System.Windows.DependencyProperty.OwnerType%2A></span><span class="sxs-lookup"><span data-stu-id="0b54c-291">The <xref:System.Windows.DependencyProperty.OwnerType%2A> on any given <xref:System.Windows.DependencyProperty> is immutable, and cannot be `null` in a valid <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b54c-292">Poniższy przykład pobiera typ właściciela na podstawie identyfikatora `dp`właściwości zależności, a następnie pobiera metadane dla tego samego identyfikatora dla właściciela.</span><span class="sxs-lookup"><span data-stu-id="0b54c-292">The following example gets the owner type based on a dependency property identifier `dp`, and then gets metadata on the owner type for that same identifier.</span></span> <span data-ttu-id="0b54c-293">Ta operacja jest w <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> `dp`rzeczywistości równoznaczna z wprowadzeniem.</span><span class="sxs-lookup"><span data-stu-id="0b54c-293">This operation is actually equivalent to getting <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> on `dp`.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Windows.DependencyProperty.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b54c-294">Pobiera typ, którego właściwość zależności używa dla jej wartości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-294">Gets the type that the dependency property uses for its value.</span></span></summary>
        <value><span data-ttu-id="0b54c-295"><see cref="T:System.Type" /> Wartość właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-295">The <see cref="T:System.Type" /> of the property value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-296">Ta właściwość służy do raportowania typu wartości właściwości zadeklarowanej przez oryginalną rejestrację właściwości za pomocą `propertyType` parametru.</span><span class="sxs-lookup"><span data-stu-id="0b54c-296">This property reports the type of the property's value as declared by the original property registration, through the `propertyType` parameter.</span></span> <span data-ttu-id="0b54c-297">Podobnie jak, typ właściwości właściwości zależności jest niezmienny po rejestracji. <xref:System.Windows.DependencyProperty.Name%2A></span><span class="sxs-lookup"><span data-stu-id="0b54c-297">Similar to the <xref:System.Windows.DependencyProperty.Name%2A>, the property type of a dependency property is immutable after registration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b54c-298">Poniższy przykład wykonuje zapytania o różne cechy identyfikatora właściwości zależności, w <xref:System.Windows.DependencyProperty.PropertyType%2A>tym.</span><span class="sxs-lookup"><span data-stu-id="0b54c-298">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span></span> <span data-ttu-id="0b54c-299">Ciąg nazwy typu <xref:System.Windows.DependencyProperty.PropertyType%2A> jest uzyskiwany z zwracanego <xref:System.Type>elementu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-299">The type name string of the <xref:System.Windows.DependencyProperty.PropertyType%2A> is obtained from the returned <xref:System.Type>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadOnly : bool" Usage="System.Windows.DependencyProperty.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b54c-300">Pobiera wartość wskazującą, czy właściwość zależności identyfikowana przez to <see cref="T:System.Windows.DependencyProperty" /> wystąpienie jest właściwością zależności tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-300">Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" /> instance is a read-only dependency property.</span></span></summary>
        <value><span data-ttu-id="0b54c-301"><see langword="true" />Jeśli właściwość zależności jest tylko do odczytu; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="0b54c-301"><see langword="true" /> if the dependency property is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-302">Właściwości zależności tylko do odczytu są rejestrowane w systemie właściwości przez wywołanie <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> metody zamiast <xref:System.Windows.DependencyProperty.Register%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="0b54c-302">Read-only dependency properties are registered within the property system by calling the <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> method as opposed to the <xref:System.Windows.DependencyProperty.Register%2A> method.</span></span> <span data-ttu-id="0b54c-303">Dołączone właściwości można także zarejestrować jako tylko do odczytu. Zobacz <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span><span class="sxs-lookup"><span data-stu-id="0b54c-303">Attached properties can also be registered as read-only; see <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="0b54c-304">Właściwości zależności tylko do odczytu wymagają <xref:System.Windows.DependencyPropertyKey> identyfikatora, a nie <xref:System.Windows.DependencyProperty> identyfikatora do wykonywania operacji na metadanych, takich jak zastępowanie metadanych lub ustawienie wartości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-304">Read-only dependency properties require a <xref:System.Windows.DependencyPropertyKey> identifier rather than a <xref:System.Windows.DependencyProperty> identifier to perform metadata operations such as overriding the metadata or setting the value.</span></span> <span data-ttu-id="0b54c-305"><xref:System.Windows.DependencyProperty> Jeśli uzyskano kolekcję identyfikatorów za pośrednictwem <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> wywołania lub innego [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] , które ujawnia identyfikatory, sprawdź <xref:System.Windows.DependencyProperty.ReadOnly%2A> wartość przed podjęciem próby wywołania <xref:System.Windows.DependencyObject.SetValue%2A> lub <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> użycia tego elementu Identyfikator właściwości zależności jako parametr wejściowy, aby sprawdzić, czy właściwość zależności, którą reprezentuje identyfikator, nie jest tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-305">If you obtained a collection of <xref:System.Windows.DependencyProperty> identifiers through a call to <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> or another [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] that exposes identifiers, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value before attempting to call <xref:System.Windows.DependencyObject.SetValue%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> using that dependency property identifier as an input parameter, to verify that the dependency property that the identifier represents is not read-only.</span></span> <span data-ttu-id="0b54c-306">Jeśli wartość <xref:System.Windows.DependencyProperty.ReadOnly%2A> jest `true` we właściwości zależności, nie ma programistycznego sposobu <xref:System.Windows.DependencyPropertyKey> uzyskania odwołania do identyfikatora tej <xref:System.Windows.DependencyProperty> właściwości zależności, z metadanych lub z identyfikatora; identyfikator musi być dostępny jako pole statyczne, aby można było wywołać <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> właściwość zależności tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-306">If the value of <xref:System.Windows.DependencyProperty.ReadOnly%2A> is `true` on a dependency property, there is no programmatic way to obtain a reference to the <xref:System.Windows.DependencyPropertyKey> identifier of that dependency property, from the metadata or from the <xref:System.Windows.DependencyProperty> identifier; the identifier must be available as a static field in order to call <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> against a read-only dependency property.</span></span>  
  
 <span data-ttu-id="0b54c-307">Podczas tworzenia niestandardowej właściwości zależności i rejestrowania jej jako tylko do odczytu należy zdefiniować tylko metodę dostępu get dla [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] właściwości otoki.</span><span class="sxs-lookup"><span data-stu-id="0b54c-307">When you create a custom dependency property, and register it as read-only, you should define only a get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper property.</span></span> <span data-ttu-id="0b54c-308">W przeciwnym razie Klasa będzie miała mylący model obiektów dla otoki właściwości w porównaniu z dostępem do właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-308">Otherwise, your class will have a confusing object model for the property wrapper as compared to the access to the backing dependency property.</span></span> <span data-ttu-id="0b54c-309">Aby uzyskać szczegółowe informacje, zobacz [właściwości zależności niestandardowych](~/docs/framework/wpf/advanced/custom-dependency-properties.md) lub [właściwości zależności tylko do odczytu](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-309">For details, see [Custom Dependency Properties](~/docs/framework/wpf/advanced/custom-dependency-properties.md) or [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b54c-310">Poniższy przykład pobiera domyślne metadane i właściwości zależności identyfikatora właściwości z różnych pól właściwości zależności i używa tych informacji do wypełniania tabeli w celu zaimplementowania "przeglądarki metadanych".</span><span class="sxs-lookup"><span data-stu-id="0b54c-310">The following example obtains the default metadata and the dependency property identifier properties from various dependency property fields, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0b54c-311">Rejestruje właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-311">Registers a dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0b54c-312">Nazwa właściwości zależności do zarejestrowania.</span><span class="sxs-lookup"><span data-stu-id="0b54c-312">The name of the dependency property to register.</span></span> <span data-ttu-id="0b54c-313">Nazwa musi być unikatowa w obrębie przestrzeni nazw rejestracji typu właściciela.</span><span class="sxs-lookup"><span data-stu-id="0b54c-313">The name must be unique within the registration namespace of the owner type.</span></span></param>
        <param name="propertyType"><span data-ttu-id="0b54c-314">Typ właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-314">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="0b54c-315">Typ właściciela, który rejestruje właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-315">The owner type that is registering the dependency property.</span></span></param>
        <summary><span data-ttu-id="0b54c-316">Rejestruje właściwość zależności z określoną nazwą właściwości, typem właściwości i typem właściciela.</span><span class="sxs-lookup"><span data-stu-id="0b54c-316">Registers a dependency property with the specified property name, property type, and owner type.</span></span></summary>
        <returns><span data-ttu-id="0b54c-317">Identyfikator właściwości zależności, który powinien zostać użyty do ustawienia wartości <see langword="public static readonly" /> pola w klasie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-317">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="0b54c-318">Ten identyfikator jest następnie używany do odwoływania się do właściwości zależności później, w przypadku operacji, takich jak Ustawianie jej wartości programowo lub uzyskiwanie metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-318">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-319">Aby uzyskać więcej informacji na temat rejestracji właściwości zależności <xref:System.Windows.DependencyProperty>, zobacz.</span><span class="sxs-lookup"><span data-stu-id="0b54c-319">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 [!code-csharp[WPFAquariumSln#Register3Param](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#register3param)]
 [!code-vb[WPFAquariumSln#Register3Param](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#register3param)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0b54c-320">Nazwa właściwości zależności do zarejestrowania.</span><span class="sxs-lookup"><span data-stu-id="0b54c-320">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="0b54c-321">Typ właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-321">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="0b54c-322">Typ właściciela, który rejestruje właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-322">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="0b54c-323">Metadane właściwości dla właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-323">Property metadata for the dependency property.</span></span></param>
        <summary><span data-ttu-id="0b54c-324">Rejestruje właściwość zależności z określoną nazwą właściwości, typem właściwości, typem właściciela i metadanymi właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-324">Registers a dependency property with the specified property name, property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="0b54c-325">Identyfikator właściwości zależności, który powinien zostać użyty do ustawienia wartości <see langword="public static readonly" /> pola w klasie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-325">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="0b54c-326">Ten identyfikator jest następnie używany do odwoływania się do właściwości zależności później, w przypadku operacji, takich jak Ustawianie jej wartości programowo lub uzyskiwanie metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-326">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-327">Aby uzyskać więcej informacji na temat rejestracji właściwości zależności <xref:System.Windows.DependencyProperty>, zobacz.</span><span class="sxs-lookup"><span data-stu-id="0b54c-327">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0b54c-328">Nazwa właściwości zależności do zarejestrowania.</span><span class="sxs-lookup"><span data-stu-id="0b54c-328">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="0b54c-329">Typ właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-329">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="0b54c-330">Typ właściciela, który rejestruje właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-330">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="0b54c-331">Metadane właściwości dla właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-331">Property metadata for the dependency property.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="0b54c-332">Odwołanie do wywołania zwrotnego, które powinno wykonać wszelkie niestandardowe sprawdzanie poprawności wartości właściwości zależności poza typowym sprawdzaniem poprawności typu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-332">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="0b54c-333">Rejestruje właściwość zależności z określoną nazwą właściwości, typem właściwości, typem właściciela, metadanymi właściwości i wywołaniem zwrotnym walidacji wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-333">Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</span></span></summary>
        <returns><span data-ttu-id="0b54c-334">Identyfikator właściwości zależności, który powinien zostać użyty do ustawienia wartości <see langword="public static readonly" /> pola w klasie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-334">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="0b54c-335">Ten identyfikator jest następnie używany do odwoływania się do właściwości zależności później, w przypadku operacji, takich jak Ustawianie jej wartości programowo lub uzyskiwanie metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-335">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-336">Aby uzyskać więcej informacji na temat rejestracji właściwości zależności <xref:System.Windows.DependencyProperty>, zobacz.</span><span class="sxs-lookup"><span data-stu-id="0b54c-336">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b54c-337">Poniższy przykład rejestruje właściwość zależności, łącznie z wywołaniem zwrotnym walidacji (definicja wywołania zwrotnego nie jest wyświetlana; Aby uzyskać szczegółowe informacje na temat <xref:System.Windows.ValidateValueCallback>definicji wywołania zwrotnego, zobacz).</span><span class="sxs-lookup"><span data-stu-id="0b54c-337">The following example registers a dependency property, including a validation callback (the callback definition is not shown; for details on the callback definition, see <xref:System.Windows.ValidateValueCallback>).</span></span>  
  
 [!code-csharp[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#currentdefinitionwithwrapper)]
 [!code-vb[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#currentdefinitionwithwrapper)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttached">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0b54c-338">Rejestruje załączoną właściwość w systemie właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-338">Registers an attached property with the property system.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0b54c-339">Nazwa właściwości zależności do zarejestrowania.</span><span class="sxs-lookup"><span data-stu-id="0b54c-339">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="0b54c-340">Typ właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-340">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="0b54c-341">Typ właściciela, który rejestruje właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-341">The owner type that is registering the dependency property.</span></span></param>
        <summary><span data-ttu-id="0b54c-342">Rejestruje załączoną właściwość o określonej nazwie właściwości, typie właściwości i typie właściciela.</span><span class="sxs-lookup"><span data-stu-id="0b54c-342">Registers an attached property with the specified property name, property type, and owner type.</span></span></summary>
        <returns><span data-ttu-id="0b54c-343">Identyfikator właściwości zależności, który powinien zostać użyty do ustawienia wartości <see langword="public static readonly" /> pola w klasie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-343">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="0b54c-344">Ten identyfikator jest następnie używany do odwoływania się do właściwości zależności później, w przypadku operacji, takich jak Ustawianie jej wartości programowo lub uzyskiwanie metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-344">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-345">Dołączona właściwość jest koncepcji właściwości zdefiniowanej przez [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0b54c-345">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="0b54c-346">implementuje dołączone właściwości jako właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-346">implements attached properties as dependency properties.</span></span> <span data-ttu-id="0b54c-347">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Ponieważ dołączone właściwości są właściwościami zależności, mogą mieć zastosowane metadane, które mogą być używane przez system właściwości ogólnych dla operacji, takich jak charakterystyki układu raportowania.</span><span class="sxs-lookup"><span data-stu-id="0b54c-347">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="0b54c-348">Aby uzyskać więcej informacji, zobacz [Omówienie dołączonej właściwości](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-348">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="0b54c-349">Aby uzyskać więcej informacji na temat rejestracji właściwości zależności <xref:System.Windows.DependencyProperty>, zobacz.</span><span class="sxs-lookup"><span data-stu-id="0b54c-349">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b54c-350">Poniższy przykład rejestruje załączoną właściwość w klasie abstrakcyjnej przy użyciu tej <xref:System.Windows.DependencyProperty.RegisterAttached%2A> sygnatury.</span><span class="sxs-lookup"><span data-stu-id="0b54c-350">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0b54c-351">Nazwa właściwości zależności do zarejestrowania.</span><span class="sxs-lookup"><span data-stu-id="0b54c-351">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="0b54c-352">Typ właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-352">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="0b54c-353">Typ właściciela, który rejestruje właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-353">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="0b54c-354">Metadane właściwości dla właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-354">Property metadata for the dependency property.</span></span> <span data-ttu-id="0b54c-355">Może to obejmować wartość domyślną, a także inne cechy.</span><span class="sxs-lookup"><span data-stu-id="0b54c-355">This can include the default value as well as other characteristics.</span></span></param>
        <summary><span data-ttu-id="0b54c-356">Rejestruje dołączoną właściwość o określonej nazwie właściwości, typie właściwości, typie właściciela i metadanych właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-356">Registers an attached property with the specified property name, property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="0b54c-357">Identyfikator właściwości zależności, który powinien zostać użyty do ustawienia wartości <see langword="public static readonly" /> pola w klasie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-357">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="0b54c-358">Ten identyfikator jest następnie używany do odwoływania się do właściwości zależności później, w przypadku operacji, takich jak Ustawianie jej wartości programowo lub uzyskiwanie metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-358">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-359">Dołączona właściwość jest koncepcji właściwości zdefiniowanej przez [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0b54c-359">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="0b54c-360">implementuje dołączone właściwości jako właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-360">implements attached properties as dependency properties.</span></span> <span data-ttu-id="0b54c-361">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Ponieważ dołączone właściwości są właściwościami zależności, mogą mieć zastosowane metadane, które mogą być używane przez system właściwości ogólnych dla operacji, takich jak charakterystyki układu raportowania.</span><span class="sxs-lookup"><span data-stu-id="0b54c-361">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="0b54c-362">Aby uzyskać więcej informacji, zobacz [Omówienie dołączonej właściwości](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-362">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="0b54c-363">Aby uzyskać więcej informacji na temat rejestracji właściwości zależności <xref:System.Windows.DependencyProperty>, zobacz.</span><span class="sxs-lookup"><span data-stu-id="0b54c-363">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="0b54c-364">Użyj RegisterAttached dla właściwości zależności dziedziczenia wartości</span><span class="sxs-lookup"><span data-stu-id="0b54c-364">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="0b54c-365">Jednym z określonych scenariuszy rejestrowania właściwości zależności przy użyciu <xref:System.Windows.DependencyProperty.RegisterAttached%2A> polecenia INSTEAD <xref:System.Windows.DependencyProperty.Register%2A> of jest obsługa dziedziczenia wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-365">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="0b54c-366">Należy zarejestrować właściwości <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zależności wartości, nawet jeśli klasa definiuje metody dostępu otoki właściwości, które uwidaczniają właściwość zależności, a nawet jeśli nie zamierzasz uwidocznić funkcji get \* i Set \* static, aby zapewnić wartość true. metody dostępu do obsługi właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-366">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="0b54c-367">Chociaż dziedziczenie wartości właściwości może wydawać się niedołączone właściwości zależności, zachowanie dziedziczenia dla niedołączonej właściwości przy użyciu określonych granic elementów w drzewie środowiska uruchomieniowego jest niezdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="0b54c-367">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="0b54c-368">Zarejestrowanie właściwości jako dołączone efektywnie powoduje, że dołączona właściwość jest właściwością globalną do systemu właściwości i zapewnia, że dziedziczenie wartości właściwości działa dla wszystkich granic w drzewie elementów.</span><span class="sxs-lookup"><span data-stu-id="0b54c-368">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="0b54c-369">Zawsze używaj <xref:System.Windows.DependencyProperty.RegisterAttached%2A> do rejestrowania właściwości, które są <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> określone w metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-369">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="0b54c-370">Aby uzyskać więcej informacji, zobacz [dziedziczenie wartości właściwości](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-370">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0b54c-371">Nazwa właściwości zależności do zarejestrowania.</span><span class="sxs-lookup"><span data-stu-id="0b54c-371">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="0b54c-372">Typ właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-372">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="0b54c-373">Typ właściciela, który rejestruje właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-373">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="0b54c-374">Metadane właściwości dla właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-374">Property metadata for the dependency property.</span></span> <span data-ttu-id="0b54c-375">Może to obejmować wartość domyślną, a także inne cechy.</span><span class="sxs-lookup"><span data-stu-id="0b54c-375">This can include the default value as well as other characteristics.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="0b54c-376">Odwołanie do wywołania zwrotnego, które powinno wykonać wszelkie niestandardowe sprawdzanie poprawności wartości właściwości zależności poza typowym sprawdzaniem poprawności typu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-376">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="0b54c-377">Rejestruje załączoną właściwość o określonym typie właściwości, typie właściciela, metadanych właściwości i wywołaniu zwrotnym walidacji wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-377">Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</span></span></summary>
        <returns><span data-ttu-id="0b54c-378">Identyfikator właściwości zależności, który powinien zostać użyty do ustawienia wartości <see langword="public static readonly" /> pola w klasie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-378">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="0b54c-379">Ten identyfikator jest następnie używany do odwoływania się do właściwości zależności później, w przypadku operacji, takich jak Ustawianie jej wartości programowo lub uzyskiwanie metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-379">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-380">Dołączona właściwość jest koncepcji właściwości zdefiniowanej przez [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0b54c-380">An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="0b54c-381">implementuje dołączone właściwości jako właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-381">implements attached properties as dependency properties.</span></span> <span data-ttu-id="0b54c-382">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Ponieważ dołączone właściwości są właściwościami zależności, mogą mieć zastosowane metadane, które mogą być używane przez system właściwości ogólnych dla operacji, takich jak charakterystyki układu raportowania.</span><span class="sxs-lookup"><span data-stu-id="0b54c-382">Because the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="0b54c-383">Aby uzyskać więcej informacji, zobacz [Omówienie dołączonej właściwości](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-383">For more information, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).</span></span>  
  
 <span data-ttu-id="0b54c-384">Aby uzyskać więcej informacji na temat rejestracji właściwości zależności <xref:System.Windows.DependencyProperty>, zobacz.</span><span class="sxs-lookup"><span data-stu-id="0b54c-384">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="0b54c-385">Użyj RegisterAttached dla właściwości zależności dziedziczenia wartości</span><span class="sxs-lookup"><span data-stu-id="0b54c-385">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="0b54c-386">Jednym z określonych scenariuszy rejestrowania właściwości zależności przy użyciu <xref:System.Windows.DependencyProperty.RegisterAttached%2A> polecenia INSTEAD <xref:System.Windows.DependencyProperty.Register%2A> of jest obsługa dziedziczenia wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-386">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="0b54c-387">Należy zarejestrować właściwości <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zależności wartości, nawet jeśli klasa definiuje metody dostępu otoki właściwości, które uwidaczniają właściwość zależności, a nawet jeśli nie zamierzasz uwidocznić funkcji get \* i Set \* static, aby zapewnić wartość true. metody dostępu do obsługi właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-387">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="0b54c-388">Chociaż dziedziczenie wartości właściwości może wydawać się niedołączone właściwości zależności, zachowanie dziedziczenia dla niedołączonej właściwości przy użyciu określonych granic elementów w drzewie środowiska uruchomieniowego jest niezdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="0b54c-388">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="0b54c-389">Zarejestrowanie właściwości jako dołączone efektywnie powoduje, że dołączona właściwość jest właściwością globalną do systemu właściwości i zapewnia, że dziedziczenie wartości właściwości działa dla wszystkich granic w drzewie elementów.</span><span class="sxs-lookup"><span data-stu-id="0b54c-389">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="0b54c-390">Zawsze używaj <xref:System.Windows.DependencyProperty.RegisterAttached%2A> do rejestrowania właściwości, które są <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> określone w metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-390">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="0b54c-391">Aby uzyskać więcej informacji, zobacz [dziedziczenie wartości właściwości](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-391">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b54c-392">Poniższy przykład rejestruje załączoną właściwość w klasie abstrakcyjnej przy użyciu tej <xref:System.Windows.DependencyProperty.RegisterAttached%2A> sygnatury.</span><span class="sxs-lookup"><span data-stu-id="0b54c-392">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span> <span data-ttu-id="0b54c-393">Ta dołączona właściwość jest właściwością typu wyliczenia, a rejestracja dodaje wywołanie zwrotne walidacji, aby sprawdzić, czy podana wartość jest wartością wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="0b54c-393">This attached property is an enumeration type property, and the registration adds a validation callback to verify that the provided value is a value of the enumeration.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttachedReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0b54c-394">Rejestruje dołączoną właściwość tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-394">Registers a read-only attached property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttachedReadOnly (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0b54c-395">Nazwa właściwości zależności do zarejestrowania.</span><span class="sxs-lookup"><span data-stu-id="0b54c-395">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="0b54c-396">Typ właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-396">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="0b54c-397">Typ właściciela, który rejestruje właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-397">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="0b54c-398">Metadane właściwości dla właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-398">Property metadata for the dependency property.</span></span></param>
        <summary><span data-ttu-id="0b54c-399">Rejestruje dołączoną właściwość tylko do odczytu, z określonym typem właściwości, typem właściciela i metadanymi właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-399">Registers a read-only attached property, with the specified property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="0b54c-400">Klucz właściwości zależności, który powinien zostać użyty do ustawienia wartości statycznego pola tylko do odczytu w klasie, która następnie jest używana do późniejszego odwoływania się do właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-400">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-401">Ta metoda zwraca typ <xref:System.Windows.DependencyPropertyKey>, podczas gdy <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zwraca typ. <xref:System.Windows.DependencyProperty></span><span class="sxs-lookup"><span data-stu-id="0b54c-401">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="0b54c-402">Zazwyczaj klucze reprezentujące właściwości tylko do odczytu nie są publiczne, ponieważ klucze mogą służyć do ustawiania wartości właściwości zależności przez wywołanie <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="0b54c-402">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="0b54c-403">Projekt klasy będzie miał wpływ na wymagania, ale zazwyczaj zaleca się ograniczenie dostępu i widoczności elementów <xref:System.Windows.DependencyPropertyKey> tylko do tych części kodu, które są niezbędne do ustawienia tej właściwości zależności jako części logiki klasy lub aplikacji.</span><span class="sxs-lookup"><span data-stu-id="0b54c-403">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="0b54c-404">Zaleca się również uwidocznienie identyfikatora właściwości zależności dla właściwości zależności tylko do odczytu przez udostępnienie wartości <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> `public static readonly` jako pola w klasie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-404">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="0b54c-405">Właściwości dołączone tylko do odczytu są rzadkim scenariuszem, ponieważ podstawowy scenariusz dla dołączonej właściwości jest używany w programie [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0b54c-405">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="0b54c-406">Bez publicznej metody ustawiającej nie można ustawić dołączonej właściwości w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] składni.</span><span class="sxs-lookup"><span data-stu-id="0b54c-406">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="0b54c-407">Aby uzyskać więcej informacji na temat rejestracji właściwości zależności <xref:System.Windows.DependencyProperty>, zobacz.</span><span class="sxs-lookup"><span data-stu-id="0b54c-407">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="0b54c-408">Użyj RegisterAttached dla właściwości zależności dziedziczenia wartości</span><span class="sxs-lookup"><span data-stu-id="0b54c-408">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="0b54c-409">Jednym z określonych scenariuszy rejestrowania właściwości zależności jako dołączonej jest obsługa dziedziczenia wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-409">One particular scenario for registering a dependency property as attached is to support property value inheritance.</span></span> <span data-ttu-id="0b54c-410">Należy zarejestrować właściwości <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zależności wartości, nawet jeśli klasa definiuje metody dostępu otoki właściwości, które uwidaczniają właściwość zależności, a nawet jeśli nie zamierzasz uwidocznić funkcji get \* i Set \* static, aby zapewnić wartość true. metody dostępu do obsługi właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-410">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="0b54c-411">Chociaż dziedziczenie wartości właściwości może wydawać się niedołączone właściwości zależności, zachowanie dziedziczenia dla niedołączonej właściwości przy użyciu określonych granic elementów w drzewie środowiska uruchomieniowego jest niezdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="0b54c-411">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="0b54c-412">Zarejestrowanie właściwości jako dołączone efektywnie powoduje, że dołączona właściwość jest właściwością globalną do systemu właściwości i zapewnia, że dziedziczenie wartości właściwości działa dla wszystkich granic w drzewie elementów.</span><span class="sxs-lookup"><span data-stu-id="0b54c-412">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="0b54c-413">Zawsze używaj <xref:System.Windows.DependencyProperty.RegisterAttached%2A> do rejestrowania właściwości, które są <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> określone w metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-413">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="0b54c-414">Aby uzyskać więcej informacji, zobacz [dziedziczenie wartości właściwości](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-414">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0b54c-415">Nazwa właściwości zależności do zarejestrowania.</span><span class="sxs-lookup"><span data-stu-id="0b54c-415">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="0b54c-416">Typ właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-416">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="0b54c-417">Typ właściciela, który rejestruje właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-417">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="0b54c-418">Metadane właściwości dla właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-418">Property metadata for the dependency property.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="0b54c-419">Odwołanie do wywołania zwrotnego utworzonego przez użytkownika, które powinno wykonać wszelkie niestandardowe sprawdzanie poprawności wartości właściwości zależności poza typowym sprawdzaniem poprawności typu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-419">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="0b54c-420">Rejestruje przyłączoną właściwość tylko do odczytu, z określonym typem właściwości, typem właściciela, metadanymi właściwości i wywołaniem zwrotnym walidacji.</span><span class="sxs-lookup"><span data-stu-id="0b54c-420">Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</span></span></summary>
        <returns><span data-ttu-id="0b54c-421">Klucz właściwości zależności, który powinien zostać użyty do ustawienia wartości statycznego pola tylko do odczytu w klasie, która jest następnie używana do odwoływania się do właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-421">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-422">Ta metoda zwraca typ <xref:System.Windows.DependencyPropertyKey>, podczas gdy <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zwraca typ. <xref:System.Windows.DependencyProperty></span><span class="sxs-lookup"><span data-stu-id="0b54c-422">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="0b54c-423">Zazwyczaj klucze reprezentujące typ <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="0b54c-423">Typically, the keys that represent the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="0b54c-424">Zazwyczaj klucze reprezentujące właściwości tylko do odczytu nie są publiczne, ponieważ klucze mogą służyć do ustawiania wartości właściwości zależności przez wywołanie <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="0b54c-424">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="0b54c-425">Projekt klasy będzie miał wpływ na wymagania, ale zazwyczaj zaleca się ograniczenie dostępu i widoczności elementów <xref:System.Windows.DependencyPropertyKey> tylko do tych części kodu, które są niezbędne do ustawienia tej właściwości zależności jako części logiki klasy lub aplikacji.</span><span class="sxs-lookup"><span data-stu-id="0b54c-425">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="0b54c-426">Zaleca się również uwidocznienie identyfikatora właściwości zależności dla właściwości zależności tylko do odczytu przez udostępnienie wartości <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> `public static readonly` jako pola w klasie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-426">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="0b54c-427">Właściwości dołączone tylko do odczytu są rzadkim scenariuszem, ponieważ podstawowy scenariusz dla dołączonej właściwości jest używany w programie [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span><span class="sxs-lookup"><span data-stu-id="0b54c-427">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span> <span data-ttu-id="0b54c-428">Bez publicznej metody ustawiającej nie można ustawić dołączonej właściwości w [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] składni.</span><span class="sxs-lookup"><span data-stu-id="0b54c-428">Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="0b54c-429">Aby uzyskać więcej informacji na temat rejestracji właściwości zależności <xref:System.Windows.DependencyProperty>, zobacz.</span><span class="sxs-lookup"><span data-stu-id="0b54c-429">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="0b54c-430">Użyj RegisterAttached dla właściwości zależności dziedziczenia wartości</span><span class="sxs-lookup"><span data-stu-id="0b54c-430">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="0b54c-431">Jednym z <xref:System.Windows.DependencyProperty.Register%2A> określonych scenariuszy rejestrowania właściwości zależności jako dołączone zamiast jest obsługa dziedziczenia wartości właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-431">One particular scenario for registering a dependency property as attached instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="0b54c-432">Należy zarejestrować właściwości <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zależności wartości, nawet jeśli klasa definiuje metody dostępu otoki właściwości, które uwidaczniają właściwość zależności, a nawet jeśli nie zamierzasz uwidocznić funkcji get \* i Set \* static, aby zapewnić wartość true. metody dostępu do obsługi właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-432">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="0b54c-433">Chociaż dziedziczenie wartości właściwości może wydawać się niedołączone właściwości zależności, zachowanie dziedziczenia dla niedołączonej właściwości przy użyciu określonych granic elementów w drzewie środowiska uruchomieniowego jest niezdefiniowane.</span><span class="sxs-lookup"><span data-stu-id="0b54c-433">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="0b54c-434">Zarejestrowanie właściwości jako dołączone efektywnie powoduje, że dołączona właściwość jest właściwością globalną do systemu właściwości i zapewnia, że dziedziczenie wartości właściwości działa dla wszystkich granic w drzewie elementów.</span><span class="sxs-lookup"><span data-stu-id="0b54c-434">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="0b54c-435">Zawsze używaj <xref:System.Windows.DependencyProperty.RegisterAttached%2A> do rejestrowania właściwości, które są <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> określone w metadanych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-435">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="0b54c-436">Aby uzyskać więcej informacji, zobacz [dziedziczenie wartości właściwości](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-436">For more information, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0b54c-437">Rejestruje właściwość zależności jako właściwość zależności tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-437">Registers a dependency property as a read-only dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterReadOnly (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0b54c-438">Nazwa właściwości zależności do zarejestrowania.</span><span class="sxs-lookup"><span data-stu-id="0b54c-438">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="0b54c-439">Typ właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-439">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="0b54c-440">Typ właściciela, który rejestruje właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-440">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="0b54c-441">Metadane właściwości dla właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-441">Property metadata for the dependency property.</span></span></param>
        <summary><span data-ttu-id="0b54c-442">Rejestruje właściwość zależności tylko do odczytu z określonym typem właściwości, typem właściciela i metadanymi właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-442">Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="0b54c-443">Klucz właściwości zależności, który powinien zostać użyty do ustawienia wartości statycznego pola tylko do odczytu w klasie, która jest następnie używana do odwoływania się do właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-443">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-444">Ta metoda zwraca typ <xref:System.Windows.DependencyPropertyKey>, podczas gdy <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zwraca typ. <xref:System.Windows.DependencyProperty></span><span class="sxs-lookup"><span data-stu-id="0b54c-444">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="0b54c-445">Zazwyczaj klucze reprezentujące właściwości tylko do odczytu nie są publiczne, ponieważ klucze mogą służyć do ustawiania wartości właściwości zależności przez wywołanie <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="0b54c-445">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="0b54c-446">Projekt klasy będzie miał wpływ na wymagania, ale zazwyczaj zaleca się ograniczenie dostępu i widoczności elementów <xref:System.Windows.DependencyPropertyKey> tylko do tych części kodu, które są niezbędne do ustawienia tej właściwości zależności jako części logiki klasy lub aplikacji.</span><span class="sxs-lookup"><span data-stu-id="0b54c-446">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="0b54c-447">Zaleca się również uwidocznienie identyfikatora właściwości zależności dla właściwości zależności tylko do odczytu przez udostępnienie wartości <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> `public static readonly` jako pola w klasie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-447">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="0b54c-448">Właściwości zależności tylko do odczytu są dość typowym scenariuszem zarówno w istniejącym [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] , jak i w scenariuszach dostosowywania, ponieważ inne [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] funkcje mogą wymagać właściwości zależności, nawet jeśli ta właściwość nie jest przeznaczona do użycia przez wywołujących.</span><span class="sxs-lookup"><span data-stu-id="0b54c-448">Read-only dependency properties are a fairly typical scenario both in the existing [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] and for customization scenarios, because other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features might require a dependency property even if that property is not intended to be settable by callers.</span></span> <span data-ttu-id="0b54c-449">Można użyć wartości właściwości zależności tylko do odczytu jako podstawy dla innych operacji systemu właściwości, które przyjmują właściwość zależności, takich jak bazowa a <xref:System.Windows.Trigger> na właściwości zależności w stylu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-449">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="0b54c-450">Aby uzyskać więcej informacji na temat rejestracji właściwości zależności <xref:System.Windows.DependencyProperty>, zobacz.</span><span class="sxs-lookup"><span data-stu-id="0b54c-450">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0b54c-451">Poniższy przykład rejestruje `AquariumSize` właściwość zależności jako tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-451">The following example registers an `AquariumSize` dependency property as read-only.</span></span> <span data-ttu-id="0b54c-452">Przykład definiuje `AquariumSizeKey` jako klucz wewnętrzny (tak, że inne klasy w zestawie mogą przesłonić metadane) i uwidacznia identyfikator właściwości zależności na podstawie tego klucza jako `AquariumSizeProperty`.</span><span class="sxs-lookup"><span data-stu-id="0b54c-452">The example defines `AquariumSizeKey` as an internal key (so that other classes in the assembly could override metadata) and exposes the dependency property identifier based on that key as `AquariumSizeProperty`.</span></span> <span data-ttu-id="0b54c-453">Ponadto otoka jest tworzona dla `AquariumSize`i ma tylko metodę dostępu get.</span><span class="sxs-lookup"><span data-stu-id="0b54c-453">Also, a wrapper is created for `AquariumSize`, with only a get accessor.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0b54c-454">Nazwa właściwości zależności do zarejestrowania.</span><span class="sxs-lookup"><span data-stu-id="0b54c-454">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="0b54c-455">Typ właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-455">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="0b54c-456">Typ właściciela, który rejestruje właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-456">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="0b54c-457">Metadane właściwości dla właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-457">Property metadata for the dependency property.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="0b54c-458">Odwołanie do wywołania zwrotnego utworzonego przez użytkownika, które powinno wykonać wszelkie niestandardowe sprawdzanie poprawności wartości właściwości zależności poza typowym sprawdzaniem poprawności typu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-458">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="0b54c-459">Rejestruje właściwość zależności tylko do odczytu z określonym typem właściwości, typem właściciela, metadanymi właściwości i wywołaniem zwrotnym walidacji.</span><span class="sxs-lookup"><span data-stu-id="0b54c-459">Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</span></span></summary>
        <returns><span data-ttu-id="0b54c-460">Klucz właściwości zależności, który powinien zostać użyty do ustawienia wartości statycznego pola tylko do odczytu w klasie, która następnie jest używana do późniejszego odwoływania się do właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-460">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-461">Ta metoda zwraca typ <xref:System.Windows.DependencyPropertyKey>, podczas gdy <xref:System.Windows.DependencyProperty.RegisterAttached%2A> zwraca typ. <xref:System.Windows.DependencyProperty></span><span class="sxs-lookup"><span data-stu-id="0b54c-461">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="0b54c-462">Zazwyczaj klucze reprezentujące właściwości tylko do odczytu nie są publiczne, ponieważ klucze mogą służyć do ustawiania wartości właściwości zależności przez wywołanie <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span><span class="sxs-lookup"><span data-stu-id="0b54c-462">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="0b54c-463">Projekt klasy będzie miał wpływ na wymagania, ale zazwyczaj zaleca się ograniczenie dostępu i widoczności elementów <xref:System.Windows.DependencyPropertyKey> tylko do tych części kodu, które są niezbędne do ustawienia tej właściwości zależności jako części logiki klasy lub aplikacji.</span><span class="sxs-lookup"><span data-stu-id="0b54c-463">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="0b54c-464">Zaleca się również uwidocznienie identyfikatora właściwości zależności dla właściwości zależności tylko do odczytu przez udostępnienie wartości <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> `public static readonly` jako pola w klasie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-464">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="0b54c-465">Właściwości zależności tylko do odczytu są dość typowym scenariuszem.</span><span class="sxs-lookup"><span data-stu-id="0b54c-465">Read-only dependency properties are a fairly typical scenario.</span></span> <span data-ttu-id="0b54c-466">Można użyć wartości właściwości zależności tylko do odczytu jako podstawy dla innych operacji systemu właściwości, które przyjmują właściwość zależności, takich jak bazowa a <xref:System.Windows.Trigger> na właściwości zależności w stylu.</span><span class="sxs-lookup"><span data-stu-id="0b54c-466">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="0b54c-467">Aby uzyskać więcej informacji na temat rejestracji właściwości zależności <xref:System.Windows.DependencyProperty>, zobacz.</span><span class="sxs-lookup"><span data-stu-id="0b54c-467">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 <span data-ttu-id="0b54c-468">Walidacja właściwości zależności tylko do odczytu może być mniej ważna.</span><span class="sxs-lookup"><span data-stu-id="0b54c-468">Validation on a read-only dependency property might be less important.</span></span> <span data-ttu-id="0b54c-469">Poziom dostępu niepublicznego określony dla klucza zmniejsza prawdopodobieństwo wystąpienia nieprawidłowych danych wejściowych.</span><span class="sxs-lookup"><span data-stu-id="0b54c-469">The nonpublic access level you specify for the key reduces the likelihood for arbitrary invalid input.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dependencyProperty.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0b54c-470">Zwraca ciąg reprezentujący właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-470">Returns the string representation of the dependency property.</span></span></summary>
        <returns><span data-ttu-id="0b54c-471">Ciąg reprezentujący właściwość zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-471">The string representation of the dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-472">Ta implementacja zwraca <xref:System.Windows.DependencyProperty.Name%2A> wartość właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-472">This implementation returns the <xref:System.Windows.DependencyProperty.Name%2A> property value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.DependencyProperty.Name" />
      </Docs>
    </Member>
    <Member MemberName="UnsetValue">
      <MemberSignature Language="C#" Value="public static readonly object UnsetValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object UnsetValue" />
      <MemberSignature Language="DocId" Value="F:System.Windows.DependencyProperty.UnsetValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnsetValue As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ UnsetValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnsetValue : obj" Usage="System.Windows.DependencyProperty.UnsetValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b54c-473">Określa wartość statyczną używaną przez [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] system właściwości, <see langword="null" /> a nie wskazuje, że właściwość istnieje, ale nie ma ustawionej wartości przez system właściwości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-473">Specifies a static value that is used by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system rather than <see langword="null" /> to indicate that the property exists, but does not have its value set by the property system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-474"><xref:System.Windows.DependencyProperty.UnsetValue>jest wartością wskaźnikową, która jest używana w scenariuszach, [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] w których system właściwości nie może określić żądanych <xref:System.Windows.DependencyProperty> wartości.</span><span class="sxs-lookup"><span data-stu-id="0b54c-474"><xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value that is used for scenarios where the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system is unable to determine a requested <xref:System.Windows.DependencyProperty> value.</span></span> <span data-ttu-id="0b54c-475"><xref:System.Windows.DependencyProperty.UnsetValue>jest używany zamiast `null`, ponieważ `null` może być prawidłową wartością właściwości, a także prawidłowym (i często używanym) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="0b54c-475"><xref:System.Windows.DependencyProperty.UnsetValue> is used rather than `null`, because `null` could be a valid property value, as well as a valid (and frequently used) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span></span>  
  
 <span data-ttu-id="0b54c-476"><xref:System.Windows.DependencyProperty.UnsetValue>nigdy nie jest zwracana z <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0b54c-476"><xref:System.Windows.DependencyProperty.UnsetValue> is never returned out of <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0b54c-477">Po wywołaniu <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> właściwości zależności <xref:System.Windows.DependencyObject> w wystąpieniu występuje jeden z następujących warunków:</span><span class="sxs-lookup"><span data-stu-id="0b54c-477">When you call <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> on a dependency property on a <xref:System.Windows.DependencyObject> instance, one of the following applies:</span></span>  
  
-   <span data-ttu-id="0b54c-478">Właściwość dependency ma wartość domyślną ustanowioną w metadanych i zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="0b54c-478">A dependency property has a default value established in metadata and that value is returned.</span></span> <span data-ttu-id="0b54c-479">Ta wartość może pochodzić z <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span><span class="sxs-lookup"><span data-stu-id="0b54c-479">This value might come from <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
-   <span data-ttu-id="0b54c-480">Inna wartość została ustanowiona przez system właściwości, a wartość domyślna nie jest już istotna.</span><span class="sxs-lookup"><span data-stu-id="0b54c-480">Some other value was established by the property system, and the default value is no longer relevant.</span></span> <span data-ttu-id="0b54c-481">Aby uzyskać szczegółowe informacje, zobacz [pierwszeństwo wartości właściwości zależności](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-481">For details, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="0b54c-482">Ustawienie a <xref:System.Windows.PropertyMetadata.DefaultValue%2A> <xref:System.Windows.DependencyProperty.UnsetValue> jest jawnie niedozwolone.</span><span class="sxs-lookup"><span data-stu-id="0b54c-482">Setting a <xref:System.Windows.PropertyMetadata.DefaultValue%2A> of <xref:System.Windows.DependencyProperty.UnsetValue> is specifically disallowed.</span></span>  
  
 <span data-ttu-id="0b54c-483"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType>zwraca <xref:System.Windows.DependencyProperty.UnsetValue> wartość, jeśli żądana właściwość nie została ustawiona lokalnie.</span><span class="sxs-lookup"><span data-stu-id="0b54c-483"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> returns <xref:System.Windows.DependencyProperty.UnsetValue> when the requested property has not been locally set.</span></span>  
  
 <span data-ttu-id="0b54c-484"><xref:System.Windows.DependencyProperty.UnsetValue>ma specjalne znaczenie, gdy jest używana jako wartość zwracana przez <xref:System.Windows.CoerceValueCallback>.</span><span class="sxs-lookup"><span data-stu-id="0b54c-484"><xref:System.Windows.DependencyProperty.UnsetValue> has a special meaning when used as the return value of a <xref:System.Windows.CoerceValueCallback>.</span></span> <span data-ttu-id="0b54c-485">Aby uzyskać szczegółowe informacje, zobacz [wywołania zwrotne właściwości zależności i walidacja](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-485">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 <span data-ttu-id="0b54c-486">Jeśli tworzysz powiązanie z bazą danych, pamiętaj, że <xref:System.Windows.DependencyProperty.UnsetValue> nie jest to <xref:System.DBNull.Value>odpowiednik, w podobny sposób, aby <xref:System.DBNull.Value> nie był odpowiednikiem prawdziwej wartości null.</span><span class="sxs-lookup"><span data-stu-id="0b54c-486">If you are binding to a database, note that <xref:System.Windows.DependencyProperty.UnsetValue> is not equivalent to <xref:System.DBNull.Value>, in a similar way to how <xref:System.DBNull.Value> is not equivalent to a true null.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.ValidateValueCallback ValidateValueCallback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ValidateValueCallback ValidateValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidateValueCallback As ValidateValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ValidateValueCallback ^ ValidateValueCallback { System::Windows::ValidateValueCallback ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidateValueCallback : System.Windows.ValidateValueCallback" Usage="System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ValidateValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0b54c-487">Pobiera wywołanie zwrotne walidacji wartości dla właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-487">Gets the value validation callback for the dependency property.</span></span></summary>
        <value><span data-ttu-id="0b54c-488">Wywołanie zwrotne walidacji wartości dla tej właściwości zależności, jak podano dla <paramref name="validateValueCallback" /> parametru w oryginalnej rejestracji właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-488">The value validation callback for this dependency property, as provided for the <paramref name="validateValueCallback" /> parameter in the original dependency property registration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0b54c-489">Ta właściwość będzie zawierać `null` dla każdej właściwości zależności bez zarejestrowanego wywołania zwrotnego walidacji.</span><span class="sxs-lookup"><span data-stu-id="0b54c-489">This property will contain `null` for any dependency property with no registered validation callback.</span></span>  
  
 <span data-ttu-id="0b54c-490">Sprawdzanie poprawności wartości wywołania zwrotne musi działać w sensie statycznym: Walidacja zastosowana za pomocą <xref:System.Windows.ValidateValueCallback> elementu nie może określić, czy podana wartość jest prawidłowa dla danego wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="0b54c-490">Validate value callbacks must act in a static sense: validation applied through the <xref:System.Windows.ValidateValueCallback> cannot determine whether the provided value is valid for any particular instance.</span></span> <span data-ttu-id="0b54c-491">Wywołanie zwrotne może określać, czy wszystkie obiekty, które mają właściwość dependency, powinny czy nie powinna akceptować podanej wartości jako prawidłowej.</span><span class="sxs-lookup"><span data-stu-id="0b54c-491">The callback can only determine whether all objects that possess the dependency property should or should not accept the provided value as valid.</span></span> <span data-ttu-id="0b54c-492">Jeśli musisz przeprowadzić walidację, która polega na Poznaniu wartości innych właściwości zależności w konkretnym wystąpieniu, użyj <xref:System.Windows.CoerceValueCallback> zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="0b54c-492">If you need to perform validation that relies on knowing the values of other dependency properties on a particular instance, use a <xref:System.Windows.CoerceValueCallback> instead.</span></span> <span data-ttu-id="0b54c-493">Program <xref:System.Windows.CoerceValueCallback> jest zarejestrowany jako część metadanych właściwości zależności, a nie bezpośrednio w ramach identyfikatora właściwości zależności.</span><span class="sxs-lookup"><span data-stu-id="0b54c-493">The <xref:System.Windows.CoerceValueCallback> is registered as part of dependency property metadata, rather than directly within the dependency property identifier.</span></span> <span data-ttu-id="0b54c-494">Aby uzyskać szczegółowe informacje, zobacz [wywołania zwrotne właściwości zależności i walidacja](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="0b54c-494">For details, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValidateValueCallback" />
      </Docs>
    </Member>
  </Members>
</Type>
