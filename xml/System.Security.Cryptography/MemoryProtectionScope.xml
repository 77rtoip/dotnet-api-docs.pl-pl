<Type Name="MemoryProtectionScope" FullName="System.Security.Cryptography.MemoryProtectionScope">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a90c7ed6f07deec3dde1ac3614ddac9e493502c2" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37630964" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum MemoryProtectionScope" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed MemoryProtectionScope extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.MemoryProtectionScope" />
  <TypeSignature Language="VB.NET" Value="Public Enum MemoryProtectionScope" />
  <TypeSignature Language="C++ CLI" Value="public enum class MemoryProtectionScope" />
  <TypeSignature Language="F#" Value="type MemoryProtectionScope = " />
  <AssemblyInfo>
    <AssemblyName>System.Security</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Określa zakres pamięci ochrony mają być stosowane przez <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" /> metody.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To wyliczenie jest używane z <xref:System.Security.Cryptography.ProtectedMemory.Protect%2A> i <xref:System.Security.Cryptography.ProtectedMemory.Unprotect%2A> metody ochrony danych w pamięci.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób korzystania z ochrony danych.  
  
 [!code-cpp[Cryptography.MemoryProtectionSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.MemoryProtectionSample/CPP/memoryprotectionsample.cpp#1)]
 [!code-csharp[Cryptography.MemoryProtectionSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.MemoryProtectionSample/CS/memoryprotectionsample.cs#1)]
 [!code-vb[Cryptography.MemoryProtectionSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.MemoryProtectionSample/vb/memoryprotectionsample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CrossProcess">
      <MemberSignature Language="C#" Value="CrossProcess" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.MemoryProtectionScope CrossProcess = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.MemoryProtectionScope.CrossProcess" />
      <MemberSignature Language="VB.NET" Value="CrossProcess" />
      <MemberSignature Language="C++ CLI" Value="CrossProcess" />
      <MemberSignature Language="F#" Value="CrossProcess = 1" Usage="System.Security.Cryptography.MemoryProtectionScope.CrossProcess" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.MemoryProtectionScope</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Cały kod w każdym procesie można zaniechać ochrony pamięci, która była chroniona za pomocą <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" /> metody.</summary>
      </Docs>
    </Member>
    <Member MemberName="SameLogon">
      <MemberSignature Language="C#" Value="SameLogon" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.MemoryProtectionScope SameLogon = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.MemoryProtectionScope.SameLogon" />
      <MemberSignature Language="VB.NET" Value="SameLogon" />
      <MemberSignature Language="C++ CLI" Value="SameLogon" />
      <MemberSignature Language="F#" Value="SameLogon = 2" Usage="System.Security.Cryptography.MemoryProtectionScope.SameLogon" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.MemoryProtectionScope</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Tylko kodu uruchomionego w tym samym kontekście użytkownika jako kodu, który wywołał <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" /> metoda można zaniechać ochrony pamięci.</summary>
      </Docs>
    </Member>
    <Member MemberName="SameProcess">
      <MemberSignature Language="C#" Value="SameProcess" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.MemoryProtectionScope SameProcess = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.MemoryProtectionScope.SameProcess" />
      <MemberSignature Language="VB.NET" Value="SameProcess" />
      <MemberSignature Language="C++ CLI" Value="SameProcess" />
      <MemberSignature Language="F#" Value="SameProcess = 0" Usage="System.Security.Cryptography.MemoryProtectionScope.SameProcess" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.MemoryProtectionScope</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Tylko kodu uruchomionego w tym samym procesie co kodu, który wywołał <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" /> metoda można zaniechać ochrony pamięci.</summary>
      </Docs>
    </Member>
  </Members>
</Type>