<Type Name="CipherMode" FullName="System.Security.Cryptography.CipherMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="80765b9b3e92734f50b4ed27947da791cff6c56a" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39733804" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum CipherMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed CipherMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.CipherMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum CipherMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class CipherMode" />
  <TypeSignature Language="F#" Value="type CipherMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Określa tryb szyfrowania bloku do użycia podczas szyfrowania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Algorytmy szyfrowania bloku szyfrować dane w jednostkach bloku, a nie jednego bajtu w danym momencie. Najbardziej typowe rozmiar bloku jest 8 bajtów. Ponieważ każdy blok intensywnie jest przetwarzany, blok zapewniają wyższy poziom zabezpieczeń niż szyfrów strumienia. Jednak algorytmy szyfrowania bloku zwykle do wykonania wolniej niż szyfrów strumienia.  
  
 Blok, szyfrowania, użyj tego samego algorytmu szyfrowania dla każdego bloku. W związku z tym blok tekstu zwykłego zawsze zwraca ten sam tekst szyfrowania, gdy zaszyfrowany za pomocą tego samego klucza i algorytm. Ponieważ to zachowanie może służyć do złamania określony szyfr, tryby szyfrowania zostały wprowadzone, które modyfikują proces szyfrowania, na podstawie opinii wcześniej szyfrowania bloku. Wynikowy szyfrowanie zapewnia wyższy poziom zabezpieczeń niż szyfrowania bloku proste.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CBC">
      <MemberSignature Language="C#" Value="CBC" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode CBC = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.CBC" />
      <MemberSignature Language="VB.NET" Value="CBC" />
      <MemberSignature Language="C++ CLI" Value="CBC" />
      <MemberSignature Language="F#" Value="CBC = 1" Usage="System.Security.Cryptography.CipherMode.CBC" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Tworzenie łańcuchów bloku szyfrowania (<see langword="CBC" />) tryb wprowadza opinii. Zanim każdy blok zwykły tekst jest szyfrowany, jest połączona z zaszyfrowanego tekstu poprzedniego bloku przez operację bitowe OR wyłączne. Daje to gwarancję, że nawet wtedy, gdy zwykły tekst zawiera wiele identycznych bloków, ich będzie każdego szyfrowania z innego mechanizmu szyfrowania bloku tekstu. Wektor inicjowania w połączeniu z pierwszego bloku zwykłego tekstu przez operację bitowe OR wyłączne przed bloku są szyfrowane. Jeśli pojedynczy bit szyfrowania bloku tekstu jest zniekształcone, będzie również zniekształcone odpowiedniego bloku zwykły tekst. Ponadto nieco w kolejnych bloku, w tym samym położeniu, co oryginalny bit zniekształcone, będzie można zniekształcone.</summary>
      </Docs>
    </Member>
    <Member MemberName="CFB">
      <MemberSignature Language="C#" Value="CFB" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode CFB = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.CFB" />
      <MemberSignature Language="VB.NET" Value="CFB" />
      <MemberSignature Language="C++ CLI" Value="CFB" />
      <MemberSignature Language="F#" Value="CFB = 4" Usage="System.Security.Cryptography.CipherMode.CFB" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Opinie szyfrowania (<see langword="CFB" />) tryb przetwarzania małych odstępach zwykłego tekstu do zaszyfrowanego tekstu, zamiast przetwarzania całego bloku naraz. W tym trybie używa rejestru shift, jest jeden blok długości, która jest podzielona na sekcje. Na przykład jeśli rozmiar bloku jest 8 bajtów przy użyciu jednego bajtu przetwarzane w czasie, zarejestruj shift jest podzielona na sekcje osiem. Jeśli coś w szyfr tekstu jest zniekształcone, zniekształcone jest jeden bit zwykły tekst i zarejestruj shift jest uszkodzony. Skutkuje to dalej kilka przyrostów zwykłego tekstu są zniekształcone, dopóki zły bitu zostanie przesunięty w poza rejestru shift. Domyślny rozmiar opinie mogą się różnić algorytmu, ale zazwyczaj jest 8 bitów lub liczbę bitów rozmiar bloku. Możesz zmienić liczbę bitów opinii za pomocą <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize" /> właściwości. Algorytmy, które obsługują CFB używać tej właściwości można ustawić informacji zwrotnych.</summary>
      </Docs>
    </Member>
    <Member MemberName="CTS">
      <MemberSignature Language="C#" Value="CTS" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode CTS = int32(5)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.CTS" />
      <MemberSignature Language="VB.NET" Value="CTS" />
      <MemberSignature Language="C++ CLI" Value="CTS" />
      <MemberSignature Language="F#" Value="CTS = 5" Usage="System.Security.Cryptography.CipherMode.CTS" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>Kradzież tekstu szyfrowania (<see langword="CTS" />) tryb obsługuje dowolnej długości zwykły tekst i generuje cipher tekst, którego długość pasuje do długości w postaci zwykłego tekstu. W tym trybie, który zachowuje się jak <see langword="CBC" /> trybie dla wszystkich, ale te ostatnie dwa bloki zwykły tekst.</summary>
      </Docs>
    </Member>
    <Member MemberName="ECB">
      <MemberSignature Language="C#" Value="ECB" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode ECB = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.ECB" />
      <MemberSignature Language="VB.NET" Value="ECB" />
      <MemberSignature Language="C++ CLI" Value="ECB" />
      <MemberSignature Language="F#" Value="ECB = 2" Usage="System.Security.Cryptography.CipherMode.ECB" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Elektronicznych Codebook (<see langword="ECB" />) tryb szyfruje indywidualnie każdy blok. Wszelkich bloków zwykłego tekstu, które są identyczne i w ten sam komunikat lub znajdują się w różnych wiadomości zaszyfrowane za pomocą tego samego klucza, zostanie przekształcony na bloki tekstu identyczne szyfrowania. **Ważne**: ten tryb nie jest zalecane, ponieważ spowoduje to otwarcie drzwi biblioteki dla wielu lukami w zabezpieczeniach. Jeśli zwykły tekst w celu zaszyfrowania zawiera istotne powtórzenia, jest możliwe dla zaszyfrowanego tekstu są podzielone jednego bloku naraz. Użytkownik może również określić klucz szyfrowania za pomocą bloku analizy. Również atakującej active można zastąpić i wymiany poszczególnych bloków bez wykrywanie, umożliwiający bloki na zapisywanie i włożenia do strumienia w innych punktach bez wykrycia.</summary>
      </Docs>
    </Member>
    <Member MemberName="OFB">
      <MemberSignature Language="C#" Value="OFB" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.CipherMode OFB = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.CipherMode.OFB" />
      <MemberSignature Language="VB.NET" Value="OFB" />
      <MemberSignature Language="C++ CLI" Value="OFB" />
      <MemberSignature Language="F#" Value="OFB = 3" Usage="System.Security.Cryptography.CipherMode.OFB" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CipherMode</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>Opinie danych wyjściowych (<see langword="OFB" />) tryb przetwarzania małych odstępach zwykłego tekstu do zaszyfrowanego tekstu zamiast przetwarzania całego bloku naraz. Ten tryb jest podobny do <see langword="CFB" />; tylko różnicę między dwoma trybami to sposób, który zarejestrował shift jest wypełnione. Jeśli coś w szyfr zniekształcone jest tekst, zostanie zniekształcone odpowiadający mu bit w postaci zwykłego tekstu. Jednak w przypadku dodatkowe lub brakujące bitów z zaszyfrowanego tekstu zwykłego tekstu będzie zniekształcone od tego momentu na.</summary>
      </Docs>
    </Member>
  </Members>
</Type>