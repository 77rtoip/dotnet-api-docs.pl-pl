<Type Name="Rfc2898DeriveBytes" FullName="System.Security.Cryptography.Rfc2898DeriveBytes">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b714b65f0dc803f761824594619f2ab81f07f62a" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69082324" /></Metadata><TypeSignature Language="C#" Value="public class Rfc2898DeriveBytes : System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Rfc2898DeriveBytes extends System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Rfc2898DeriveBytes" />
  <TypeSignature Language="VB.NET" Value="Public Class Rfc2898DeriveBytes&#xA;Inherits DeriveBytes" />
  <TypeSignature Language="C++ CLI" Value="public ref class Rfc2898DeriveBytes : System::Security::Cryptography::DeriveBytes" />
  <TypeSignature Language="F#" Value="type Rfc2898DeriveBytes = class&#xA;    inherit DeriveBytes" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.DeriveBytes</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implementuje funkcję wyprowadzania klucza opartego na hasłach, PBKDF2, przy użyciu generatora liczb pseudolosowych opartych na <see cref="T:System.Security.Cryptography.HMACSHA1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.Rfc2898DeriveBytes>przyjmuje hasło, sól i liczbę iteracji, a następnie generuje klucze za pomocą wywołań <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> metody.  
  
 W dokumencie RFC 2898 opisano metody tworzenia wektora klucza i inicjalizacji (IV) przy użyciu hasła i soli. Można użyć PBKDF2, funkcji wyprowadzania klucza opartego na hasłach, aby generować klucze przy użyciu funkcji pseudoklasy, która umożliwia generowanie kluczy praktycznie nieograniczonej długości. <xref:System.Security.Cryptography.Rfc2898DeriveBytes> Klasa może służyć do tworzenia klucza pochodnego z klucza podstawowego i innych parametrów. W funkcji wyprowadzania klucza opartego na hasłach klucz podstawowy jest hasłem, a inne parametry są wartością soli i liczbą iteracji.  
  
 Aby uzyskać więcej informacji na temat PBKDF2, zobacz RFC 2898, "PKCS #5: Specyfikacja kryptografii oparta na hasłach w wersji 2,0, dostępna w [witrynie Request for Comments w sieci Web](https://go.microsoft.com/fwlink/?LinkID=37119). Aby uzyskać szczegółowe informacje, zobacz sekcję 5,2, "PBKDF2".  
  
> [!IMPORTANT]
>  Nigdy nie należy nakodować hasła w kodzie źródłowym.  Stałe kodowane hasła można pobrać z zestawu przy użyciu [Ildasm. exe (Il dezasembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), używając edytora szesnastkowego lub po prostu otwierając zestaw w edytorze tekstu, takim jak Notepad. exe.  
  
   
  
## Examples  
 Poniższy przykład kodu używa <xref:System.Security.Cryptography.Rfc2898DeriveBytes> klasy do tworzenia dwóch identycznych kluczy <xref:System.Security.Cryptography.TripleDES> dla klasy.  Następnie szyfruje i odszyfrowuje niektóre dane przy użyciu kluczy.  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/security/cryptographic-services.md">Usługi kryptograficzne</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * byte[] -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="password">Hasło użyte do wygenerowania klucza.</param>
        <param name="salt">Sól klucza używana do wyprowadzania klucza.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> klasy przy użyciu hasła i soli do uzyskania klucza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rozmiar ziarna nie może być większy niż 8 bajtów.  
  
 W dokumencie RFC 2898 opisano metody tworzenia wektora klucza i inicjalizacji (IV) przy użyciu hasła i soli. Można użyć PBKDF2, funkcji wyprowadzania klucza opartego na hasłach, aby generować klucze przy użyciu funkcji pseudoklasy, która umożliwia generowanie kluczy praktycznie nieograniczonej długości. <xref:System.Security.Cryptography.Rfc2898DeriveBytes> Klasa może służyć do tworzenia klucza pochodnego z klucza podstawowego i innych parametrów. W funkcji wyprowadzania klucza opartego na hasłach klucz podstawowy jest hasłem, a inne parametry są wartością soli i liczbą iteracji.  
  
 Aby uzyskać więcej informacji na temat PBKDF2, zobacz RFC 2898, "PKCS #5: Specyfikacja kryptografii oparta na hasłach w wersji 2,0, dostępna w [witrynie Request for Comments w sieci Web](https://go.microsoft.com/fwlink/?LinkID=37119). Aby uzyskać szczegółowe informacje, zobacz sekcję 5,2, "PBKDF2".  
  
> [!IMPORTANT]
>  Nigdy nie należy nakodować hasła w kodzie źródłowym.  Stałe kodowane hasła można pobrać z zestawu przy użyciu [Ildasm. exe (Il dezasembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), używając edytora szesnastkowego lub po prostu otwierając zestaw w edytorze tekstu, takim jak Notepad. exe.  
  
   
  
## Examples  
 Poniższy przykład kodu używa <xref:System.Security.Cryptography.Rfc2898DeriveBytes> klasy do tworzenia dwóch identycznych kluczy <xref:System.Security.Cryptography.TripleDES> dla klasy.  Następnie szyfruje i odszyfrowuje niektóre dane przy użyciu kluczy.  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Określony rozmiar ziarna jest mniejszy niż 8 bajtów lub liczba iteracji jest mniejsza niż 1.</exception>
        <exception cref="T:System.ArgumentNullException">Hasło lub sól jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md">Usługi kryptograficzne</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * int -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, saltSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">Hasło użyte do wygenerowania klucza.</param>
        <param name="saltSize">Rozmiar losowej soli, która ma być generowana przez klasę.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> klasy przy użyciu hasła i rozmiaru ziarna w celu uzyskania klucza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rozmiar ziarna nie może być większy niż 8 bajtów.  
  
 W dokumencie RFC 2898 opisano metody tworzenia wektora klucza i inicjalizacji (IV) przy użyciu hasła i soli. Można użyć PBKDF2, funkcji wyprowadzania klucza opartego na hasłach, aby generować klucze przy użyciu funkcji pseudoklasy, która umożliwia generowanie kluczy praktycznie nieograniczonej długości. <xref:System.Security.Cryptography.Rfc2898DeriveBytes> Klasa może służyć do tworzenia klucza pochodnego z klucza podstawowego i innych parametrów. W funkcji wyprowadzania klucza opartego na hasłach klucz podstawowy jest hasłem, a inne parametry są wartością soli i liczbą iteracji.  
  
 Aby uzyskać więcej informacji na temat PBKDF2, zobacz RFC 2898, "PKCS #5: Specyfikacja kryptografii oparta na hasłach w wersji 2,0, dostępna w [witrynie Request for Comments w sieci Web](https://go.microsoft.com/fwlink/?LinkID=37119). Aby uzyskać szczegółowe informacje, zobacz sekcję 5,2, "PBKDF2".  
  
> [!IMPORTANT]
>  Nigdy nie należy nakodować hasła w kodzie źródłowym.  Stałe kodowane hasła można pobrać z zestawu przy użyciu [Ildasm. exe (Il dezasembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), używając edytora szesnastkowego lub po prostu otwierając zestaw w edytorze tekstu, takim jak Notepad. exe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Określony rozmiar ziarna jest mniejszy niż 8 bajtów.</exception>
        <exception cref="T:System.ArgumentNullException">Hasło lub sól jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md">Usługi kryptograficzne</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : byte[] * byte[] * int -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt, iterations)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">Hasło użyte do wygenerowania klucza.</param>
        <param name="salt">Sól klucza używana do wyprowadzania klucza.</param>
        <param name="iterations">Liczba iteracji dla operacji.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> klasy przy użyciu hasła, soli i liczby iteracji, aby utworzyć klucz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rozmiar ziarna nie może być większy niż 8 bajtów, a liczba iteracji musi być większa od zera. Minimalna zalecana liczba iteracji to 1000.  
  
 W dokumencie RFC 2898 opisano metody tworzenia wektora klucza i inicjalizacji (IV) przy użyciu hasła i soli. Można użyć PBKDF2, funkcji wyprowadzania klucza opartego na hasłach, aby generować klucze przy użyciu funkcji pseudoklasy, która umożliwia generowanie kluczy praktycznie nieograniczonej długości. <xref:System.Security.Cryptography.Rfc2898DeriveBytes> Klasa może służyć do tworzenia klucza pochodnego z klucza podstawowego i innych parametrów. W funkcji wyprowadzania klucza opartego na hasłach klucz podstawowy jest hasłem, a inne parametry są wartością soli i liczbą iteracji.  
  
 Aby uzyskać więcej informacji na temat PBKDF2, zobacz RFC 2898, "PKCS #5: Specyfikacja kryptografii oparta na hasłach w wersji 2,0, dostępna w [witrynie Request for Comments w sieci Web](https://go.microsoft.com/fwlink/?LinkID=37119). Aby uzyskać szczegółowe informacje, zobacz sekcję 5,2, "PBKDF2".  
  
> [!IMPORTANT]
>  Nigdy nie należy nakodować hasła w kodzie źródłowym.  Stałe kodowane hasła można pobrać z zestawu przy użyciu [Ildasm. exe (Il dezasembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), używając edytora szesnastkowego lub po prostu otwierając zestaw w edytorze tekstu, takim jak Notepad. exe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Określony rozmiar ziarna jest mniejszy niż 8 bajtów lub liczba iteracji jest mniejsza niż 1.</exception>
        <exception cref="T:System.ArgumentNullException">Hasło lub sól jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte(), iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * byte[] * int -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt, iterations)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">Hasło użyte do wygenerowania klucza.</param>
        <param name="salt">Sól klucza używana do wyprowadzania klucza.</param>
        <param name="iterations">Liczba iteracji dla operacji.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> klasy przy użyciu hasła, soli i liczby iteracji, aby utworzyć klucz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rozmiar ziarna nie może być większy niż 8 bajtów, a liczba iteracji musi być większa od zera. Minimalna zalecana liczba iteracji to 1000.  
  
 W dokumencie RFC 2898 opisano metody tworzenia wektora klucza i inicjalizacji (IV) przy użyciu hasła i soli. Można użyć PBKDF2, funkcji wyprowadzania klucza opartego na hasłach, aby generować klucze przy użyciu funkcji pseudoklasy, która umożliwia generowanie kluczy praktycznie nieograniczonej długości. <xref:System.Security.Cryptography.Rfc2898DeriveBytes> Klasa może służyć do tworzenia klucza pochodnego z klucza podstawowego i innych parametrów. W funkcji wyprowadzania klucza opartego na hasłach klucz podstawowy jest hasłem, a inne parametry są wartością soli i liczbą iteracji.  
  
 Aby uzyskać więcej informacji na temat PBKDF2, zobacz RFC 2898, "PKCS #5: Specyfikacja kryptografii oparta na hasłach w wersji 2,0, dostępna w [witrynie Request for Comments w sieci Web](https://go.microsoft.com/fwlink/?LinkID=37119). Aby uzyskać szczegółowe informacje, zobacz sekcję 5,2, "PBKDF2".  
  
> [!IMPORTANT]
>  Nigdy nie należy nakodować hasła w kodzie źródłowym.  Stałe kodowane hasła można pobrać z zestawu przy użyciu [Ildasm. exe (Il dezasembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), używając edytora szesnastkowego lub po prostu otwierając zestaw w edytorze tekstu, takim jak Notepad. exe.  
  
   
  
## Examples  
 Poniższy przykład kodu używa <xref:System.Security.Cryptography.Rfc2898DeriveBytes> klasy do tworzenia dwóch identycznych kluczy <xref:System.Security.Cryptography.TripleDES> dla klasy.  Następnie szyfruje i odszyfrowuje niektóre dane przy użyciu kluczy.  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Określony rozmiar ziarna jest mniejszy niż 8 bajtów lub liczba iteracji jest mniejsza niż 1.</exception>
        <exception cref="T:System.ArgumentNullException">Hasło lub sól jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md">Usługi kryptograficzne</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize, int iterations);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * int * int -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, saltSize, iterations)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">Hasło użyte do wygenerowania klucza.</param>
        <param name="saltSize">Rozmiar losowej soli, która ma być generowana przez klasę.</param>
        <param name="iterations">Liczba iteracji dla operacji.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> klasy przy użyciu hasła, rozmiaru ziarna i liczby iteracji, aby utworzyć klucz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rozmiar ziarna nie może być większy niż 8 bajtów, a liczba iteracji musi być większa od zera. Minimalna zalecana liczba iteracji to 1000.  
  
 W dokumencie RFC 2898 opisano metody tworzenia wektora klucza i inicjalizacji (IV) przy użyciu hasła i soli. Można użyć PBKDF2, funkcji wyprowadzania klucza opartego na hasłach, aby generować klucze przy użyciu funkcji pseudoklasy, która umożliwia generowanie kluczy praktycznie nieograniczonej długości. <xref:System.Security.Cryptography.Rfc2898DeriveBytes> Klasa może służyć do tworzenia klucza pochodnego z klucza podstawowego i innych parametrów. W funkcji wyprowadzania klucza opartego na hasłach klucz podstawowy jest hasłem, a inne parametry są wartością soli i liczbą iteracji.  
  
 Aby uzyskać więcej informacji na temat PBKDF2, zobacz RFC 2898, "PKCS #5: Specyfikacja kryptografii oparta na hasłach w wersji 2,0, dostępna w [witrynie Request for Comments w sieci Web](https://go.microsoft.com/fwlink/?LinkID=37119). Aby uzyskać szczegółowe informacje, zobacz sekcję 5,2, "PBKDF2".  
  
> [!IMPORTANT]
>  Nigdy nie należy nakodować hasła w kodzie źródłowym.  Stałe kodowane hasła można pobrać z zestawu przy użyciu [Ildasm. exe (Il dezasembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), używając edytora szesnastkowego lub po prostu otwierając zestaw w edytorze tekstu, takim jak Notepad. exe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Określony rozmiar ziarna jest mniejszy niż 8 bajtów lub liczba iteracji jest mniejsza niż 1.</exception>
        <exception cref="T:System.ArgumentNullException">Hasło lub sól jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="iterations" />jest poza zakresem. Ten parametr wymaga liczby nieujemnej.</exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md">Usługi kryptograficzne</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : byte[] * byte[] * int * System.Security.Cryptography.HashAlgorithmName -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt, iterations, hashAlgorithm)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="salt" Type="System.Byte[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="iterations" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="password">Hasło, które ma być używane do wyprowadzania klucza.</param>
        <param name="salt">Kluczowa sól używana do wyprowadzania klucza.</param>
        <param name="iterations">Liczba iteracji dla operacji.</param>
        <param name="hashAlgorithm">Algorytm wyznaczania wartości skrótu, który ma być używany do wyprowadzania klucza.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> klasy przy użyciu określonego hasła, soli, liczby iteracji i nazwy algorytmu wyznaczania wartości skrótu, aby utworzyć klucz.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="saltSize" />jest mniejsza od zera.</exception>
        <exception cref="T:System.ArgumentException">Właściwość ma wartość<see langword="null" /> lub .<see cref="F:System.String.Empty" /> <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> <paramref name="hashAlgorithm" /></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Nazwa algorytmu wyznaczania wartości skrótu jest nieprawidłowa.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte(), iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * byte[] * int * System.Security.Cryptography.HashAlgorithmName -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, salt, iterations, hashAlgorithm)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="salt" Type="System.Byte[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="iterations" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="password">Hasło, które ma być używane do wyprowadzania klucza.</param>
        <param name="salt">Kluczowa sól używana do wyprowadzania klucza.</param>
        <param name="iterations">Liczba iteracji dla operacji.</param>
        <param name="hashAlgorithm">Algorytm wyznaczania wartości skrótu, który ma być używany do wyprowadzania klucza.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> klasy przy użyciu określonego hasła, soli, liczby iteracji i nazwy algorytmu wyznaczania wartości skrótu, aby utworzyć klucz.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Właściwość ma wartość<see langword="null" /> lub .<see cref="F:System.String.Empty" /> <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> <paramref name="hashAlgorithm" /></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Nazwa algorytmu wyznaczania wartości skrótu jest nieprawidłowa.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer, iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.Rfc2898DeriveBytes : string * int * int * System.Security.Cryptography.HashAlgorithmName -&gt; System.Security.Cryptography.Rfc2898DeriveBytes" Usage="new System.Security.Cryptography.Rfc2898DeriveBytes (password, saltSize, iterations, hashAlgorithm)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="saltSize" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="iterations" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="password">Hasło, które ma być używane do wyprowadzania klucza.</param>
        <param name="saltSize">Rozmiar losowej soli, która ma być generowana przez klasę.</param>
        <param name="iterations">Liczba iteracji dla operacji.</param>
        <param name="hashAlgorithm">Algorytm wyznaczania wartości skrótu, który ma być używany do wyprowadzania klucza.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> klasy przy użyciu określonego hasła, rozmiaru ziarna, liczby iteracji i nazwy algorytmu wyznaczania wartości skrótu, aby utworzyć klucz.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="saltSize" />jest mniejsza od zera.</exception>
        <exception cref="T:System.ArgumentException">Właściwość ma wartość<see langword="null" /> lub .<see cref="F:System.String.Empty" /> <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> <paramref name="hashAlgorithm" /></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Nazwa algorytmu wyznaczania wartości skrótu jest nieprawidłowa.</exception>
      </Docs>
    </Member>
    <Member MemberName="CryptDeriveKey">
      <MemberSignature Language="C#" Value="public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CryptDeriveKey(string algname, string alghashname, int32 keySize, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CryptDeriveKey (algname As String, alghashname As String, keySize As Integer, rgbIV As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ CryptDeriveKey(System::String ^ algname, System::String ^ alghashname, int keySize, cli::array &lt;System::Byte&gt; ^ rgbIV);" />
      <MemberSignature Language="F#" Value="member this.CryptDeriveKey : string * string * int * byte[] -&gt; byte[]" Usage="rfc2898DeriveBytes.CryptDeriveKey (algname, alghashname, keySize, rgbIV)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algname" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="alghashname" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="keySize" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="rgbIV" Type="System.Byte[]" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="algname">Nazwa algorytmu, dla którego ma zostać pochodny klucz.</param>
        <param name="alghashname">Nazwa algorytmu wyznaczania wartości skrótu, który ma być używany do wyprowadzania klucza.</param>
        <param name="keySize">Rozmiar klucza w bitach, który ma być pochodny.</param>
        <param name="rgbIV">Wektor inicjalizacji (IV) do użycia w celu uzyskania klucza.</param>
        <summary>Dziedziczy klucz kryptograficzny z <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> obiektu.</summary>
        <returns>Klucz pochodny.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta funkcja jest otoką dla funkcji API kryptografii CryptDeriveKey () i jest przeznaczona do oferowania współdziałania z aplikacjami za pomocą interfejsu API kryptografii.  
  
 `keySize` Jeśli parametr ma wartość 0 bitów, zostanie użyty domyślny rozmiar klucza dla określonego algorytmu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="keySize" /> Parametr jest nieprawidłowy.  
  
—lub— 
Nie można uzyskać dostawcy usług kryptograficznych.  
  
—lub— 
<paramref name="algname" /> Parametr nie jest prawidłową nazwą algorytmu.  
  
—lub— 
<paramref name="alghashname" /> Parametr nie jest prawidłową nazwą algorytmu wyznaczania wartości skrótu.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="rfc2898DeriveBytes.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" />Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> do zwolnienia tylko zasobów niezarządzanych.</param>
        <summary>Zwalnia niezarządzane zasoby używane przez <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> klasę i opcjonalnie zwalnia zarządzane zasoby.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana przez metodę publiczną `Dispose()` `Finalize` i metodę. `Dispose()`wywołuje metodę chronioną `Dispose(Boolean)` `disposing` z parametrem ustawionym `true`na. `Finalize`wywołuje `Dispose` `false`z `disposing` ustawionym na.  
  
 Gdy parametr ma wartość `true`, ta metoda zwalnia wszystkie zasoby przechowywane przez wszystkie obiekty zarządzane, do <xref:System.Security.Cryptography.Rfc2898DeriveBytes> których odwołują się te odwołania. `disposing` Ta metoda wywołuje `Dispose()` metodę każdego przywoływanego obiektu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" />może być wywoływana wiele razy przez inne obiekty. Podczas zastępowania <see langword="Dispose(Boolean)" />należy zachować ostrożność, aby nie odwoływać się do obiektów, które zostały wcześniej <see langword="Dispose" />usunięte we wcześniejszej wywołaniu. Aby uzyskać więcej informacji na temat sposobu <see langword="Dispose(Boolean)" />implementacji, zobacz [implementowanie metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
Aby uzyskać więcej informacji <see langword="Dispose" /> na <see langword="Finalize" />temat i, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md).</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (cb As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(int cb);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : int -&gt; byte[]" Usage="rfc2898DeriveBytes.GetBytes cb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb">Liczba wygenerowanych losowo bajtów klucza do wygenerowania.</param>
        <summary>Zwraca pseudo-losowy klucz dla tego obiektu.</summary>
        <returns>Tablica bajtowa jest wypełniona pseudo-losowym bajtem klucza.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa implementuje funkcję PBKDF2 przy użyciu generatora numerów pseudolosowych opartych na <xref:System.Security.Cryptography.HMACSHA1>. <xref:System.Security.Cryptography.Rfc2898DeriveBytes> Klasa przyjmuje hasło, sól i liczbę iteracji, a następnie generuje klucze za pomocą wywołań <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> metody. <xref:System.Security.Cryptography.Rfc2898DeriveBytes> Powtórzone wywołania tej metody nie generują tego samego klucza; Zamiast tego, dołączane są dwa <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> wywołania metody `cb` z wartością parametru o `20` jest `cb` równoważne wywołaniem <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> metody raz z wartością `40`parametru.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak używać metody, <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> Aby uzyskać klucz dla <xref:System.Security.Cryptography.Rfc2898DeriveBytes>wystąpienia. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Security.Cryptography.Rfc2898DeriveBytes> klasy.  
  
 [!code-cpp[rfc28981#2](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#2)]
 [!code-csharp[rfc28981#2](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#2)]
 [!code-vb[rfc28981#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="cb" />jest poza zakresem. Ten parametr wymaga liczby nieujemnej.</exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md">Usługi kryptograficzne</related>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.HashAlgorithmName HashAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Cryptography.HashAlgorithmName HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HashAlgorithm As HashAlgorithmName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::HashAlgorithmName HashAlgorithm { System::Security::Cryptography::HashAlgorithmName get(); };" />
      <MemberSignature Language="F#" Value="member this.HashAlgorithm : System.Security.Cryptography.HashAlgorithmName" Usage="System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithmName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IterationCount">
      <MemberSignature Language="C#" Value="public int IterationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IterationCount" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property IterationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IterationCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IterationCount : int with get, set" Usage="System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia liczbę iteracji dla operacji.</summary>
        <value>Liczba iteracji dla operacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Liczba iteracji to Liczba wykonań operacji. W przypadku tej metody liczba powinna być większa od zera. Minimalna zalecana liczba iteracji to 1000.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, jak użyć właściwości, <xref:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount%2A> aby wyświetlić liczbę iteracji użytych w generowaniu klucza. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Security.Cryptography.Rfc2898DeriveBytes> klasy.  
  
 [!code-cpp[rfc28981#3](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#3)]
 [!code-csharp[rfc28981#3](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#3)]
 [!code-vb[rfc28981#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Liczba iteracji jest mniejsza niż 1.</exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md">Usługi kryptograficzne</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberSignature Language="F#" Value="override this.Reset : unit -&gt; unit" Usage="rfc2898DeriveBytes.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resetuje stan operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana automatycznie, jeśli liczba soli lub iteracji jest modyfikowana.  
  
   
  
## Examples  
 Poniższy przykład pokazuje, <xref:System.Security.Cryptography.Rfc2898DeriveBytes.Reset%2A> jak używać metody. Ten przykład kodu jest częścią większego przykładu dostarczonego dla <xref:System.Security.Cryptography.Rfc2898DeriveBytes> klasy.  
  
 [!code-cpp[rfc28981#5](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#5)]
 [!code-csharp[rfc28981#5](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#5)]
 [!code-vb[rfc28981#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md">Usługi kryptograficzne</related>
      </Docs>
    </Member>
    <Member MemberName="Salt">
      <MemberSignature Language="C#" Value="public byte[] Salt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Salt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt" />
      <MemberSignature Language="VB.NET" Value="Public Property Salt As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Salt { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Salt : byte[] with get, set" Usage="System.Security.Cryptography.Rfc2898DeriveBytes.Salt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość soli klucza dla operacji.</summary>
        <value>Wartość soli klucza dla operacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sól, losowy zestaw bajtów służy do nieautoryzowanego odszyfrowywania wiadomości. Atak słownikowy to atak polegający na tym, że osoba atakująca próbuje odszyfrować zaszyfrowany komunikat, porównując zaszyfrowaną wartość z wcześniej obliczonymi zaszyfrowanymi wartościami dla najbardziej możliwych kluczy. Ten atak jest znacznie trudniejszy przez wprowadzenie soli lub losowych bajtów na końcu hasła przed pochodnym kluczem.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Określony rozmiar ziarna jest mniejszy niż 8 bajtów.</exception>
        <exception cref="T:System.ArgumentNullException">Sól jest <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md">Usługi kryptograficzne</related>
      </Docs>
    </Member>
  </Members>
</Type>
