<Type Name="ECDiffieHellmanCng" FullName="System.Security.Cryptography.ECDiffieHellmanCng">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="286bf918255ea8d29ba319f459e569551d533740" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30570823" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ECDiffieHellmanCng : System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ECDiffieHellmanCng extends System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.ECDiffieHellmanCng" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ECDiffieHellmanCng&#xA;Inherits ECDiffieHellman" />
  <TypeSignature Language="C++ CLI" Value="public ref class ECDiffieHellmanCng sealed : System::Security::Cryptography::ECDiffieHellman" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.ECDiffieHellman</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="37a91-101">Udostępnia implementację kryptografii nowej generacji (CNG) algorytmu Diffie-Hellman krzywej eliptycznej (ECDH).</span>
      <span class="sxs-lookup">
        <span data-stu-id="37a91-101">Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span>
      </span>
      <span data-ttu-id="37a91-102">Ta klasa jest używana do wykonywania operacji kryptograficznych.</span>
      <span class="sxs-lookup">
        <span data-stu-id="37a91-102">This class is used to perform cryptographic operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-103"><xref:System.Security.Cryptography.ECDiffieHellmanCng> Klasa umożliwia obie strony do programu exchange materiału klucza prywatnego, nawet wtedy, gdy komunikują się za pośrednictwem publicznego kanału.</span><span class="sxs-lookup"><span data-stu-id="37a91-103">The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class enables two parties to exchange private key material even if they are communicating through a public channel.</span></span>  <span data-ttu-id="37a91-104">Obie strony można obliczyć tej samej wartość tajna nazywa się *tajnej umowy* zarządzanych klas Diffie-Hellman.</span><span class="sxs-lookup"><span data-stu-id="37a91-104">Both parties can calculate the same secret value, which is referred to as the *secret agreement* in the managed Diffie-Hellman classes.</span></span> <span data-ttu-id="37a91-105">Następnie można tajnej umowy do różnych celów, w tym jako klucza symetrycznego.</span><span class="sxs-lookup"><span data-stu-id="37a91-105">The secret agreement can then be used for a variety of purposes, including as a symmetric key.</span></span> <span data-ttu-id="37a91-106">Jednak zamiast bezpośrednio, udostępnianie tajnej umowy <xref:System.Security.Cryptography.ECDiffieHellmanCng> klasy jest niektórych przetwarzania końcowego na umowie przed podawania wartości.</span><span class="sxs-lookup"><span data-stu-id="37a91-106">However, instead of exposing the secret agreement directly, the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class does some post-processing on the agreement before providing the value.</span></span> <span data-ttu-id="37a91-107">To przetwarzanie post jest określany jako *klucza funkcja wyprowadzania (KDF)*; można wybrać KDF, którego chcesz użyć i ustaw jego parametrów za pomocą zestawu właściwości w wystąpieniu obiektu algorytmu Diffie-Hellmana.</span><span class="sxs-lookup"><span data-stu-id="37a91-107">This post processing is referred to as the *key derivation function (KDF)*; you can select which KDF you want to use and set its parameters through a set of properties on the instance of the Diffie-Hellman object.</span></span>  
  
|<span data-ttu-id="37a91-108">Funkcja wyprowadzania klucza</span><span class="sxs-lookup"><span data-stu-id="37a91-108">Key derivation function</span></span>|<span data-ttu-id="37a91-109">Właściwości</span><span class="sxs-lookup"><span data-stu-id="37a91-109">Properties</span></span>|  
|-----------------------------|----------------|  
|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash>|<span data-ttu-id="37a91-110"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> Algorytmu wyznaczania wartości skrótu, który służy do przetwarzania tajnej umowy.</span><span class="sxs-lookup"><span data-stu-id="37a91-110"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.</span></span><br /><br /> <span data-ttu-id="37a91-111"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> -Tablica opcjonalne bajtów do dołączana do tajnej umowy przed jej wyznaczania wartości skrótu.</span><span class="sxs-lookup"><span data-stu-id="37a91-111"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> - An optional byte array to prepend to the secret agreement before hashing it.</span></span><br /><br /> <span data-ttu-id="37a91-112"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> -Tablica bajtów opcjonalne, aby dołączyć do tajnej umowy przed jej wyznaczania wartości skrótu.</span><span class="sxs-lookup"><span data-stu-id="37a91-112"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.</span></span>|  
|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>|<span data-ttu-id="37a91-113"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> Algorytmu wyznaczania wartości skrótu, który służy do przetwarzania tajnej umowy.</span><span class="sxs-lookup"><span data-stu-id="37a91-113"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.</span></span><br /><br /> <span data-ttu-id="37a91-114"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>-Tablica opcjonalne bajtów do dołączana do tajnej umowy przed jej wyznaczania wartości skrótu.</span><span class="sxs-lookup"><span data-stu-id="37a91-114"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>- An optional byte array to prepend to the secret agreement before hashing it.</span></span><br /><br /> <span data-ttu-id="37a91-115"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> -Tablica bajtów opcjonalne, aby dołączyć do tajnej umowy przed jej wyznaczania wartości skrótu.</span><span class="sxs-lookup"><span data-stu-id="37a91-115"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.</span></span>|  
|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>|<span data-ttu-id="37a91-116"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A> — Etykieta klucza pochodnego.</span><span class="sxs-lookup"><span data-stu-id="37a91-116"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A> - The label for key derivation.</span></span><br /><br /> <span data-ttu-id="37a91-117"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> -Inicjatora dla klucza pochodnego.</span><span class="sxs-lookup"><span data-stu-id="37a91-117"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> - The seed for key derivation.</span></span>|  
  
 <span data-ttu-id="37a91-118">Wynik przekazywanie tajnej Umowy za pośrednictwem funkcja wyprowadzania klucza jest tablica bajtów, które mogą być używane jako materiału klucza dla aplikacji.</span><span class="sxs-lookup"><span data-stu-id="37a91-118">The result of passing the secret agreement through the key derivation function is a byte array that may be used as key material for your application.</span></span> <span data-ttu-id="37a91-119">Liczba bajtów materiał kluczy, generowane jest zależny od funkcji klucza pochodnego; na przykład algorytmu SHA-256 wygeneruje 256 bitów materiał kluczy, podczas gdy SHA-512 wygeneruje 512 bitów materiału klucza. Podstawowy przepływ ECDH wymiany kluczy jest następujący:</span><span class="sxs-lookup"><span data-stu-id="37a91-119">The number of bytes of key material generated is dependent on the key derivation function; for example, SHA-256 will generate 256 bits of key material, whereas SHA-512 will generate 512 bits of key material.The basic flow of an ECDH key exchange is as follows:</span></span>  
  
1.  <span data-ttu-id="37a91-120">Alicja i Robert utworzyć pary kluczy do użycia dla operacji wymiana kluczy Diffie-Hellman</span><span class="sxs-lookup"><span data-stu-id="37a91-120">Alice and Bob create a key pair to use for the Diffie-Hellman key exchange operation</span></span>  
  
2.  <span data-ttu-id="37a91-121">Alicja i Robert skonfiguruj KDF przy użyciu parametrów Zgadzam się na.</span><span class="sxs-lookup"><span data-stu-id="37a91-121">Alice and Bob configure the KDF using parameters the agree on.</span></span>  
  
3.  <span data-ttu-id="37a91-122">Alicja wysyła Bob swojego klucza publicznego.</span><span class="sxs-lookup"><span data-stu-id="37a91-122">Alice sends Bob her public key.</span></span>  
  
4.  <span data-ttu-id="37a91-123">Robert wysyła Alicja jego klucza publicznego.</span><span class="sxs-lookup"><span data-stu-id="37a91-123">Bob sends Alice his public key.</span></span>  
  
5.  <span data-ttu-id="37a91-124">Alicja Roberta, który umożliwia generowanie tajnej umowy siebie nawzajem kluczy publicznych i dotyczą KDF tajnej umowy do wygenerowania materiału klucza.</span><span class="sxs-lookup"><span data-stu-id="37a91-124">Alice and Bob use each other's public keys to generate the secret agreement, and apply the KDF to the secret agreement to generate key material.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="37a91-125">Poniższy przykład przedstawia użycie <xref:System.Security.Cryptography.ECDiffieHellmanCng> klasy ustanowienie wymiany kluczy i sposobu użycia tego klucza szyfrowania wiadomości, które mogą być wysłane za pośrednictwem kanału publicznego i odszyfrowywane przez odbiorcę.</span><span class="sxs-lookup"><span data-stu-id="37a91-125">The following example shows how to use the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class to establish a key exchange and how to use that key to encrypt a message that can be sent over a public channel and decrypted by the receiver.</span></span>  
  
 [!code-csharp[ECDiffieHellmanCng#1](~/samples/snippets/csharp/VS_Snippets_CLR/ecdiffiehellmancng/cs/program.cs#1)]
 [!code-vb[ECDiffieHellmanCng#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ecdiffiehellmancng/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="37a91-126">Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-126">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="37a91-127">Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> klasy przy użyciu losowego pary kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-127">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-128">Losowe pary kluczy ma domyślnego publicznego klucz o długości 521 bitów.</span><span class="sxs-lookup"><span data-stu-id="37a91-128">The random key pair has a default public key length of 521 bits.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng (int keySize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 keySize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keySize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng(int keySize);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keySize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="keySize">
          <span data-ttu-id="37a91-129">Rozmiar klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-129">The size of the key.</span>
          </span>
          <span data-ttu-id="37a91-130">Nieprawidłowy rozmiar klucza to 256, 384 i 521 usługi bits.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-130">Valid key sizes are 256, 384, and 521 bits.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37a91-131">Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> klasy z pary kluczy losowych, używając określonego rozmiaru klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-131">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair, using the specified key size.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-132">Losowe pary kluczy mają długość klucza publicznego, zdefiniowane przez `keySize` parametru.</span><span class="sxs-lookup"><span data-stu-id="37a91-132">The random key pair will have the public key length defined by the `keySize` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="37a91-133">
            <paramref name="keySize" /> Określa nieprawidłową długość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-133">
              <paramref name="keySize" /> specifies an invalid length.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="37a91-134">Klasy kryptografii nowej generacji (CNG) nie są obsługiwane w tym systemie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-134">Cryptography Next Generation (CNG) classes are not supported on this system.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng (System.Security.Cryptography.CngKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Cryptography.CngKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As CngKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng(System::Security::Cryptography::CngKey ^ key);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Security.Cryptography.CngKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="37a91-135">Klucz, który będzie używany jako dane wejściowe, aby operacje kryptograficzne wykonywane przez bieżący obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-135">The key that will be used as input to the cryptographic operations performed by the current object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37a91-136">Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> przy użyciu określonego <see cref="T:System.Security.Cryptography.CngKey" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-136">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="37a91-137">
            <paramref name="key" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-137">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="37a91-138">
            <paramref name="key" /> nie określono grupę algorytmu Diffie-Hellman krzywej eliptycznej (ECDH).</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-138">
              <paramref name="key" /> does not specify an Elliptic Curve Diffie-Hellman (ECDH) algorithm group.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="37a91-139">Klasy kryptografii nowej generacji (CNG) nie są obsługiwane w tym systemie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-139">Cryptography Next Generation (CNG) classes are not supported on this system.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng(System::Security::Cryptography::ECCurve curve);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve">
          <span data-ttu-id="37a91-140">Krzywej służący do generowania pary kluczy publiczny/prywatny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-140">The curve used to generate the public/private key pair.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37a91-141">Tworzy nowe wystąpienie klasy <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> którego pary kluczy publiczny/prywatny jest generowany krzywej określonej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-141">Creates a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class whose public/private key pair is generated over the specified curve.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-142">`curve` należy sprawdzić poprawność (czyli musi zwracać `true`) przekazany do <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> — metoda i musi być prime nazwanych lub jawnego.</span><span class="sxs-lookup"><span data-stu-id="37a91-142">`curve` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> method and must be either a named or explicit prime.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="37a91-143">
            <paramref name="curve" /> Nie można zweryfikować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-143">
              <paramref name="curve" /> does not validate.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyFromHash">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="37a91-144">Pochodzi bajtów, które mogą być używane jako klucz przy użyciu funkcji skrótu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-144">Derives bytes that can be used as a key using a hash function .</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyFromHash">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyFromHash(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyFromHash (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHash(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" />
        <Parameter Name="secretAppend" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="37a91-145">Klucz publiczny z drugiej strony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-145">The other party's public key.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="37a91-146">Algorytm wyznaczania wartości skrótu do użycia do uzyskania materiału klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-146">The hash algorithm  to use to derive the key material.</span>
          </span>
        </param>
        <param name="secretPrepend">
          <span data-ttu-id="37a91-147">Wartość dołączana do pochodnej klucz tajny przed wyznaczania wartości skrótu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-147">A value to prepend to the derived secret before hashing.</span>
          </span>
        </param>
        <param name="secretAppend">
          <span data-ttu-id="37a91-148">Wartość do dołączenia do pochodnej klucz tajny przed wyznaczania wartości skrótu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-148">A value to append to the derived secret before hashing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37a91-149">Pochodzi bajtów, które mogą być używane jako klucz przy użyciu funkcji skrótu danego klucza publicznego innej firmy, nazwę algorytmu wyznaczania wartości skrótu, wartość prepend i wartość dołączania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-149">Derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37a91-150">Materiał klucza z wymiany kluczy z użyciem klucza publicznego z drugiej strony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-150">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-151">Jeśli wartość `secretPrepend` lub `secretAppend` jest `null`, są traktowane jako puste tablice.</span><span class="sxs-lookup"><span data-stu-id="37a91-151">If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="37a91-152">
            <paramref name="otherPartyPublicKey" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-152">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="37a91-153">
            <paramref name="otherPartyPublicKey" /> nie jest kluczem ECDH lub nie jest odpowiedni rozmiar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-153">
              <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span>
          </span>
          <span data-ttu-id="37a91-154">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-154">-or-</span>
          </span>
          <span data-ttu-id="37a91-155">
            <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-155">
              <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          </span>
          <span data-ttu-id="37a91-156">jest <see langword="null" /> lub <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-156">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="37a91-157">Inne błędy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-157">All other errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyFromHmac">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="37a91-158">Pochodzi bajtów, które mogą być używane jako klucz przy użyciu skrótu na podstawie komunikatu kod uwierzytelniania (HMAC).</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-158">Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyFromHmac">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyFromHmac(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] hmacKey, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyFromHmac (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, hmacKey As Byte(), secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHmac(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ hmacKey, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="hmacKey" Type="System.Byte[]" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" />
        <Parameter Name="secretAppend" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="37a91-159">Klucz publiczny z drugiej strony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-159">The other party's public key.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="37a91-160">Algorytm wyznaczania wartości skrótu do użycia do uzyskania materiału klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-160">The hash algorithm to use to derive the key material.</span>
          </span>
        </param>
        <param name="hmacKey">
          <span data-ttu-id="37a91-161">Klucz dla HMAC.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-161">The key for the HMAC.</span>
          </span>
        </param>
        <param name="secretPrepend">
          <span data-ttu-id="37a91-162">Wartość dołączana do pochodnej klucz tajny przed wyznaczania wartości skrótu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-162">A value to prepend to the derived secret before hashing.</span>
          </span>
        </param>
        <param name="secretAppend">
          <span data-ttu-id="37a91-163">Wartość do dołączenia do pochodnej klucz tajny przed wyznaczania wartości skrótu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-163">A value to append to the derived secret before hashing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37a91-164">Pochodzi bajtów, które mogą być używane jako klucz przy użyciu skrótu na podstawie komunikatu kod uwierzytelniania (HMAC).</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-164">Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37a91-165">Materiał klucza z wymiany kluczy z użyciem klucza publicznego z drugiej strony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-165">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-166">Jeśli wartość `secretPrepend` lub `secretAppend` jest `null`, są traktowane jako puste tablice.</span><span class="sxs-lookup"><span data-stu-id="37a91-166">If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays.</span></span> <span data-ttu-id="37a91-167">Jeśli wartość `hmacKey` jest `null`, wyniki algorytmu Diffie-Hellman krzywej eliptycznej (ECDH) będzie używany jako klucz HMAC.</span><span class="sxs-lookup"><span data-stu-id="37a91-167">If the value of `hmacKey` is `null`, the result of the Elliptic Curve Diffie-Hellman (ECDH) algorithm will be used as the HMAC key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="37a91-168">
            <paramref name="otherPartyPublicKey" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-168">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="37a91-169">
            <paramref name="otherPartyPublicKey" /> nie jest kluczem ECDH lub nie jest odpowiedni rozmiar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-169">
              <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span>
          </span>
          <span data-ttu-id="37a91-170">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-170">-or-</span>
          </span>
          <span data-ttu-id="37a91-171">
            <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-171">
              <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          </span>
          <span data-ttu-id="37a91-172">jest <see langword="null" /> lub <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-172">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="37a91-173">Inne błędy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-173">All other errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyMaterial">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="37a91-174">Pochodzi materiał kluczy, które są generowane na podstawie tajnej Umowy między dwiema stronami.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-174">Derives the key material that is generated from the secret agreement between two parties.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-175">Algorytmu Diffie-Hellman krzywej eliptycznej (ECDH) akceptuje klucza prywatnego i innych firm klucza publicznego jako dane wejściowe i tworzy tajnej umowy jako dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="37a91-175">The Elliptic Curve Diffie-Hellman (ECDH) algorithm accepts the private key and the other party’s public key as input, and produces the secret agreement as output.</span></span> <span data-ttu-id="37a91-176">Funkcja wyprowadzania klucza (KDF) następnie przyjmuje tajnej umowy i tworzy materiału klucza jako dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="37a91-176">The key derivation function (KDF) then takes the secret agreement and produces the key material as output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyMaterial">
      <MemberSignature Language="C#" Value="public byte[] DeriveKeyMaterial (System.Security.Cryptography.CngKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DeriveKeyMaterial(class System.Security.Cryptography.CngKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveKeyMaterial (otherPartyPublicKey As CngKey) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DeriveKeyMaterial(System::Security::Cryptography::CngKey ^ otherPartyPublicKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.CngKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="37a91-177">Obiekt, który zawiera publiczne częścią klucza Diffie-Hellman krzywej eliptycznej (ECDH) od drugiej strony wymiany kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-177">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37a91-178">Pochodzi materiał kluczy, które są generowane na podstawie tajnej Umowy między dwiema stronami podane <see cref="T:System.Security.Cryptography.CngKey" /> obiekt, który zawiera klucz publiczny z drugiej strony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-178">Derives the key material that is generated from the secret agreement between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37a91-179">Tablica bajtów, który zawiera materiału klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-179">A byte array that contains the key material.</span>
          </span>
          <span data-ttu-id="37a91-180">Informacje te są generowane z tajnej umowy, która jest obliczana na podstawie bieżącego obiektu klucza prywatnego i określony klucz publiczny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-180">This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="37a91-181">
            <paramref name="otherPartyPublicKey" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-181">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="37a91-182">
            <paramref name="otherPartyPublicKey" /> jest nieprawidłowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-182">
              <paramref name="otherPartyPublicKey" /> is invalid.</span>
          </span>
          <span data-ttu-id="37a91-183">Albo jego <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> nie określa właściwości <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" /> lub jego rozmiar klucza jest niezgodna z rozmiar klucza dla tego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-183">Either its <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> property does not specify <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" /> or its key size does not match the key size of this instance.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="37a91-184">Ten obiekt <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> właściwość określa <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> funkcja wyprowadzania klucza, ale albo <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> lub <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-184">This object's <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> property specifies the <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> key derivation function, but either <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> or <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="37a91-185">Inne błędy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-185">All other errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyMaterial">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyMaterial(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyMaterial (otherPartyPublicKey As ECDiffieHellmanPublicKey) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyMaterial(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="37a91-186">Klucz publiczny z drugiej strony wymiany kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-186">The public key from the other party in the key exchange.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37a91-187">Pochodzi materiał kluczy, które są generowane na podstawie tajnej Umowy między dwiema stronami podane <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> obiekt, który zawiera klucz publiczny z drugiej strony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-187">Derives the key material that is generated from the secret agreement between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37a91-188">Tablica bajtów, który zawiera materiału klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-188">A byte array that contains the key material.</span>
          </span>
          <span data-ttu-id="37a91-189">Informacje te są generowane z tajnej umowy, która jest obliczana na podstawie bieżącego obiektu klucza prywatnego i określony klucz publiczny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-189">This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="37a91-190">
            <paramref name="otherPartyPublicKey" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-190">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="37a91-191">
            <paramref name="otherPartyPublicKey" /> nie jest <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-191">
              <paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> key.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyTls">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyTls(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, unsigned int8[] prfLabel, unsigned int8[] prfSeed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyTls (otherPartyPublicKey As ECDiffieHellmanPublicKey, prfLabel As Byte(), prfSeed As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyTls(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, cli::array &lt;System::Byte&gt; ^ prfLabel, cli::array &lt;System::Byte&gt; ^ prfSeed);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="prfLabel" Type="System.Byte[]" />
        <Parameter Name="prfSeed" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="37a91-192">Klucz publiczny z drugiej strony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-192">The other party's public key.</span>
          </span>
        </param>
        <param name="prfLabel">
          <span data-ttu-id="37a91-193">Etykieta PRF kodowany w formacie ASCII.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-193">The ASCII-encoded PRF label.</span>
          </span>
        </param>
        <param name="prfSeed">
          <span data-ttu-id="37a91-194">Seed PRF 64 bajtów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-194">The 64-byte PRF seed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37a91-195">Pochodzi bajtów, które mogą być używane jako klucz przy użyciu algorytmu wyliczającego funkcja Pseudo-Random zabezpieczeń TLS (Transport Layer) (PRF).</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-195">Derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37a91-196">Materiał klucza z wymiany kluczy z użyciem klucza publicznego z drugiej strony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-196">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="37a91-197">
            <paramref name="otherPartyPublicKey" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-197">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="37a91-198">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-198">-or-</span>
          </span>
          <span data-ttu-id="37a91-199">
            <paramref name="prfLabel" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-199">
              <paramref name="prfLabel" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="37a91-200">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-200">-or-</span>
          </span>
          <span data-ttu-id="37a91-201">
            <paramref name="prfSeed" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-201">
              <paramref name="prfSeed" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="37a91-202">
            <paramref name="otherPartyPublicKey" /> nie jest kluczem ECDH lub nie jest odpowiedni rozmiar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-202">
              <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="37a91-203">
            <paramref name="prfSeed" /> nie jest dokładnie 64 bajtów długości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-203">
              <paramref name="prfSeed" /> is not exactly 64 bytes in length.</span>
          </span>
          <span data-ttu-id="37a91-204">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-204">-or-</span>
          </span>
          <span data-ttu-id="37a91-205">Wszystkie inne błędy kryptograficznych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-205">All other cryptographic errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveSecretAgreementHandle">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="37a91-206">Pobiera dojścia do tajnej umowy wygenerowane między stronami.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-206">Gets a handle to the secret agreement generated between two parties.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-207"><xref:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle%2A> Przeciążenia metody są dla użytkowników zaawansowanych, którzy potrzebują dojścia do nieprzetworzonej tajnej umowy zamiast materiału klucza.</span><span class="sxs-lookup"><span data-stu-id="37a91-207">The <xref:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle%2A> method overloads are for advanced users who need a handle to the raw secret agreement instead of the key material.</span></span> <span data-ttu-id="37a91-208">Dojście tajnej umowy mogą być używane w platformie wywołania wywołania może wykonywać wszystkie zadania nie opatrzona <xref:System.Security.Cryptography.ECDiffieHellmanCng> klasy.</span><span class="sxs-lookup"><span data-stu-id="37a91-208">The secret agreement handle can be used in platform invoke calls to perform any work that is not wrapped by the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveSecretAgreementHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.CngKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle(class System.Security.Cryptography.CngKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveSecretAgreementHandle (otherPartyPublicKey As CngKey) As SafeNCryptSecretHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Win32::SafeHandles::SafeNCryptSecretHandle ^ DeriveSecretAgreementHandle(System::Security::Cryptography::CngKey ^ otherPartyPublicKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.CngKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="37a91-209">Obiekt, który zawiera publiczne częścią klucza Diffie-Hellman krzywej eliptycznej (ECDH) od drugiej strony wymiany kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-209">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37a91-210">Pobiera dojścia do tajnej umowy wygenerowane między stronami, podane <see cref="T:System.Security.Cryptography.CngKey" /> obiekt, który zawiera klucz publiczny z drugiej strony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-210">Gets a handle to the secret agreement generated between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37a91-211">Dojście do tajnej umowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-211">A handle to the secret agreement.</span>
          </span>
          <span data-ttu-id="37a91-212">Informacja ta jest obliczana na podstawie bieżącego obiektu klucza prywatnego i określony klucz publiczny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-212">This information is calculated from the current object's private key and the specified public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="37a91-213">
            <paramref name="otherPartyPublicKey" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-213">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="37a91-214">
            <paramref name="otherPartyPublicKey" /> nie jest kluczem ECDH lub nie jest odpowiedni rozmiar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-214">
              <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="37a91-215">Inne błędy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-215">All other errors.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="37a91-216">Aby uzyskać uprawnienia do wywoływania kodu niezarządzanego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-216">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="37a91-217">Żądanie wartość: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-217">Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="37a91-218">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-218">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="DeriveSecretAgreementHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveSecretAgreementHandle (otherPartyPublicKey As ECDiffieHellmanPublicKey) As SafeNCryptSecretHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Win32::SafeHandles::SafeNCryptSecretHandle ^ DeriveSecretAgreementHandle(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="37a91-219">Klucz publiczny z drugiej strony wymiany kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-219">The public key from the other party in the key exchange.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37a91-220">Pobiera dojścia do tajnej umowy wygenerowane między stronami, podane <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> obiekt, który zawiera klucz publiczny z drugiej strony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-220">Gets a handle to the secret agreement generated between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37a91-221">Dojście do tajnej umowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-221">A handle to the secret agreement.</span>
          </span>
          <span data-ttu-id="37a91-222">Informacja ta jest obliczana na podstawie bieżącego obiektu klucza prywatnego i określony klucz publiczny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-222">This information is calculated from the current object's private key and the specified public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="37a91-223">
            <paramref name="otherPartyPublicKey" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-223">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="37a91-224">
            <paramref name="otherPartyPublicKey" /> nie jest <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-224">
              <paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> key.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportExplicitParameters">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Security.Cryptography.ECParameters ExportExplicitParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ExportExplicitParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExportExplicitParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Cryptography::ECParameters ExportExplicitParameters(bool includePrivateParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">
          <span data-ttu-id="37a91-225">
            <see langword="true" /> Aby uwzględnić parametry prywatny; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-225">
              <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37a91-226">Eksportuje klucza i krzywej jawne parametry używane przez <see cref="T:System.Security.Cryptography.ECCurve" /> obiekt do <see cref="T:System.Security.Cryptography.ECParameters" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-226">Exports the key and explicit curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37a91-227">Klucza i jawne parametry używane przez krzywą <see cref="T:System.Security.Cryptography.ECCurve" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-227">The key and explicit curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="37a91-228">Metoda nie może uzyskać krzywej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-228">The method cannot obtain curve values.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="37a91-229">Jawne eksportowanie jest nieobsługiwane przez tę platformę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-229">Explicit export is not supported by this platform.</span>
          </span>
          <span data-ttu-id="37a91-230">Wymagany jest system Windows 10 lub nowszej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-230">Windows 10 or higher is required.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportParameters">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Security.Cryptography.ECParameters ExportParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ExportParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExportParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Cryptography::ECParameters ExportParameters(bool includePrivateParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">
          <span data-ttu-id="37a91-231">
            <see langword="true" /> Aby uwzględnić parametry prywatny; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-231">
              <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37a91-232">Eksportuje klucz używany przez <see cref="T:System.Security.Cryptography.ECCurve" /> obiekt do <see cref="T:System.Security.Cryptography.ECParameters" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-232">Exports the key used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37a91-233">Klucz i nazwane parametry używane przez krzywą <see cref="T:System.Security.Cryptography.ECCurve" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-233">The key and named curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-234">Jeśli klucz został utworzony jako krzywą nazwane <xref:System.Security.Cryptography.ECParameters.Curve?displayProperty=nameWithType> pole zawiera parametry nazwane krzywej;          w przeciwnym razie zawiera jawne parametry.</span><span class="sxs-lookup"><span data-stu-id="37a91-234">If the key was created as a named curve, the <xref:System.Security.Cryptography.ECParameters.Curve?displayProperty=nameWithType> field contains named curve parameters;          otherwise,  it contains explicit parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="37a91-235">Metoda nie może uzyskać krzywej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-235">The method cannot obtain curve values.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromXmlString">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="37a91-236">Deserializuje dane klucza z ciągu XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-236">Deserializes the key information from an XML string.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public override void FromXmlString (string xmlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXmlString(string xmlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub FromXmlString (xmlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXmlString(System::String ^ xmlString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlString">
          <span data-ttu-id="37a91-237">Informacje klucza opartych na języku XML do zdeserializowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-237">The XML-based key information to be deserialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37a91-238">Ta metoda nie jest zaimplementowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-238">This method is not implemented.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-239">Aby deserializować klucza XML, użyj <xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> zamiast tego przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="37a91-239">To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="37a91-240">Ta metoda nie została zastąpiona dla tego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-240">This method was not overridden for this instance.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public void FromXmlString (string xml, System.Security.Cryptography.ECKeyXmlFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FromXmlString(string xml, valuetype System.Security.Cryptography.ECKeyXmlFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXmlString (xml As String, format As ECKeyXmlFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FromXmlString(System::String ^ xml, System::Security::Cryptography::ECKeyXmlFormat format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xml" Type="System.String" />
        <Parameter Name="format" Type="System.Security.Cryptography.ECKeyXmlFormat" />
      </Parameters>
      <Docs>
        <param name="xml">
          <span data-ttu-id="37a91-241">Informacje klucza opartych na języku XML do zdeserializowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-241">The XML-based key information to be deserialized.</span>
          </span>
        </param>
        <param name="format">
          <span data-ttu-id="37a91-242">Jedna z wartości wyliczenia, które określa format ciągu XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-242">One of the enumeration values that specifies the format of the XML string.</span>
          </span>
          <span data-ttu-id="37a91-243">To jedyny obecnie akceptowane format jest <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-243">The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37a91-244">Deserializuje dane klucza z ciągu XML przy użyciu określonego formatu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-244">Deserializes the key information from an XML string by using the specified format.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="37a91-245">
            <paramref name="xml" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-245">
              <paramref name="xml" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="37a91-246">
            <paramref name="xml" /> jest nieprawidłowo sformułowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-246">
              <paramref name="xml" /> is malformed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="37a91-247">
            <paramref name="format" /> Określa nieprawidłowy format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-247">
              <paramref name="format" /> specifies an invalid format.</span>
          </span>
          <span data-ttu-id="37a91-248">Jest to jedyna wartość zaakceptowane <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-248">The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="37a91-249">Inne błędy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-249">All other errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public override void GenerateKey (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GenerateKey(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.GenerateKey(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GenerateKey (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GenerateKey(System::Security::Cryptography::ECCurve curve);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve">
          <span data-ttu-id="37a91-250">Krzywej służący do generowania tymczasowych pary kluczy publiczny/prywatny.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-250">The curve used to generate an ephemeral public/private key pair.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37a91-251">Generuje nowy tymczasowych publicznego i prywatnego pary kluczy dla określonej krzywej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-251">Generates a new ephemeral public/private key pair for the specified curve.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-252">`curve` należy zweryfikować (czyli musi zwrócić wartość true, gdy dane są przekazywane do <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> metody) i nie może być niejawna.</span><span class="sxs-lookup"><span data-stu-id="37a91-252">`curve` must validate (that is, it must return true when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> method) and must not be implicit.</span></span>  
  
 <span data-ttu-id="37a91-253">Krzywe cech-2 nie są obsługiwane w systemie Windows.</span><span class="sxs-lookup"><span data-stu-id="37a91-253">Characteristic-2 curves are not supported on Windows.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="37a91-254">
            <paramref name="curve" /> Nie można zweryfikować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-254">
              <paramref name="curve" /> does not validate.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.CngAlgorithm HashAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.CngAlgorithm HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property HashAlgorithm As CngAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::CngAlgorithm ^ HashAlgorithm { System::Security::Cryptography::CngAlgorithm ^ get(); void set(System::Security::Cryptography::CngAlgorithm ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CngAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="37a91-255">Pobiera lub ustawia algorytmu wyznaczania wartości skrótu do użycia podczas generowania materiału klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-255">Gets or sets the hash algorithm to use when generating key material.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="37a91-256">Obiekt, który określa algorytm wyznaczania wartości skrótu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-256">An object that specifies the hash algorithm.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-257">Ta właściwość jest używana przez obiekty kryptografii nowej generacji (CNG) tylko wtedy, gdy <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> lub <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> wartość jest ustawiana w <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="37a91-257">This property is used by Cryptography Next Generation (CNG) objects only if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property.</span></span>  
  
 <span data-ttu-id="37a91-258">Ta właściwość akceptuje następujących algorytmów: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, i <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.</span><span class="sxs-lookup"><span data-stu-id="37a91-258">This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.</span></span>  
  
 <span data-ttu-id="37a91-259">Inne algorytmy wyznaczania wartości skrótu niestandardowy może być również.</span><span class="sxs-lookup"><span data-stu-id="37a91-259">Other custom hash algorithms may also be used.</span></span>  
  
 <span data-ttu-id="37a91-260">Domyślnym algorytmem jest <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.</span><span class="sxs-lookup"><span data-stu-id="37a91-260">The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="37a91-261">Wartość jest <see langword="null." /></span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-261">The value is <see langword="null." /></span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="HmacKey">
      <MemberSignature Language="C#" Value="public byte[] HmacKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] HmacKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" />
      <MemberSignature Language="VB.NET" Value="Public Property HmacKey As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ HmacKey { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="37a91-262">Pobiera lub ustawia klucz Hash-based kodu (metoda HMAC Message Authentication) do użycia podczas wyprowadzania materiału klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-262">Gets or sets the Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="37a91-263">Klucz Hash-based kodu (metoda HMAC Message Authentication) do użycia podczas wyprowadzania materiału klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-263">The Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-264">Ta właściwość ma zastosowanie tylko wtedy, gdy <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> wartość jest ustawiana w <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> właściwości oraz <xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A> jest właściwość `false`.</span><span class="sxs-lookup"><span data-stu-id="37a91-264">This property applies only when the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property, and the <xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A> property is `false`.</span></span> <span data-ttu-id="37a91-265">Domyślna wartość to `null`.</span><span class="sxs-lookup"><span data-stu-id="37a91-265">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportParameters">
      <MemberSignature Language="C#" Value="public override void ImportParameters (System.Security.Cryptography.ECParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportParameters(valuetype System.Security.Cryptography.ECParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters(System.Security.Cryptography.ECParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportParameters (parameters As ECParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportParameters(System::Security::Cryptography::ECParameters parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.ECParameters" />
      </Parameters>
      <Docs>
        <param name="parameters">
          <span data-ttu-id="37a91-266">Parametry krzywej do zaimportowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-266">The curve's parameters to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37a91-267">Importuje określone parametry dla <see cref="T:System.Security.Cryptography.ECCurve" /> obiektu jako klucza do bieżącego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-267">Imports the specified parameters for an <see cref="T:System.Security.Cryptography.ECCurve" /> object as a key into the current instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-268"><xref:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters%2A> Metoda zastępuje istniejący klucz ten obiekt jest praca z przez utworzenie nowej <xref:System.Security.Cryptography.CngKey> obiektu.</span><span class="sxs-lookup"><span data-stu-id="37a91-268">The <xref:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters%2A> method replaces the existing key that this object is working with by creating a         new <xref:System.Security.Cryptography.CngKey> object.</span></span> <span data-ttu-id="37a91-269">Jeśli `parameters` zawiera tylko <xref:System.Security.Cryptography.ECParameters.Q> pola, a następnie jest importowany tylko klucz publiczny.</span><span class="sxs-lookup"><span data-stu-id="37a91-269">If `parameters` contains only the <xref:System.Security.Cryptography.ECParameters.Q> field, then only a public key is imported.</span></span>         <span data-ttu-id="37a91-270">Jeśli `parameters` zawiera także <xref:System.Security.Cryptography.ECParameters.D>, a następnie zaimportowaniu pary kluczy pełnej.</span><span class="sxs-lookup"><span data-stu-id="37a91-270">If `parameters` also contains <xref:System.Security.Cryptography.ECParameters.D>, then a full key pair is be imported.</span></span> <span data-ttu-id="37a91-271">`parameter` <xref:System.Security.Cryptography.ECParameters.Curve> Wartość określa typ krzywej do zaimportowania.</span><span class="sxs-lookup"><span data-stu-id="37a91-271">The `parameter` <xref:System.Security.Cryptography.ECParameters.Curve> value specifies the type of the curve to import.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="37a91-272">
            <paramref name="parameters" /> Nie można zweryfikować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-272">
              <paramref name="parameters" /> does not validate.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="37a91-273">
            <paramref name="parameters" /> odwołuje się do krzywej, którego nie można zaimportować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-273">
              <paramref name="parameters" /> references a curve that cannot be imported..</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="37a91-274">
            <paramref name="parameters" /> odwołuje się do krzywej, która nie jest obsługiwana przez tę platformę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-274">
              <paramref name="parameters" /> references a curve that is not supported by this platform.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.CngKey Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.CngKey Key" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As CngKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::CngKey ^ Key { System::Security::Cryptography::CngKey ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CngKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="37a91-275">Określa <see cref="T:System.Security.Cryptography.CngKey" /> używany przez bieżący obiekt dla operacji kryptograficznych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-275">Specifies the <see cref="T:System.Security.Cryptography.CngKey" /> that is used by the current object for cryptographic operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="37a91-276">Pary kluczy używanych przez ten obiekt do wykonywania operacji kryptograficznych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-276">The key pair used by this object to perform cryptographic operations.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDerivationFunction">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyDerivationFunction As ECDiffieHellmanKeyDerivationFunction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction { System::Security::Cryptography::ECDiffieHellmanKeyDerivationFunction get(); void set(System::Security::Cryptography::ECDiffieHellmanKeyDerivationFunction value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="37a91-277">Pobiera lub ustawia funkcję wyprowadzania klucza dla <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-277">Gets or sets the key derivation function for the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="37a91-278">Jeden z <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" /> wartości wyliczenia: <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />, <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />, lub <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-278">One of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" /> enumeration values: <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />, <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />, or <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />.</span>
          </span>
          <span data-ttu-id="37a91-279">Wartość domyślna to <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-279">The default value is <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-280">Ta właściwość określa funkcja wyprowadzania klucza, który jest używany do transformacji w materiału klucza tajnego umowy.</span><span class="sxs-lookup"><span data-stu-id="37a91-280">This property specifies the key derivation function that is used to transform the secret agreement into key material.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="37a91-281">Wartość wyliczenia jest poza zakresem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-281">The enumeration value is out of range.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public byte[] Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Label" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Label { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="37a91-282">Pobiera lub ustawia wartość etykiety, która jest używana dla klucza pochodnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-282">Gets or sets the label value that is used for key derivation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="37a91-283">Wartość etykiety.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-283">The label value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-284">Ta wartość jest używana dla klucza pochodnego, jeśli <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls> wartość jest ustawiana w <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="37a91-284">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property.</span></span> <span data-ttu-id="37a91-285">Domyślnie jest `null`.</span><span class="sxs-lookup"><span data-stu-id="37a91-285">By default, it is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublicKey">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.PublicKey" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PublicKey As ECDiffieHellmanPublicKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Cryptography::ECDiffieHellmanPublicKey ^ PublicKey { System::Security::Cryptography::ECDiffieHellmanPublicKey ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanPublicKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="37a91-286">Pobiera klucz publiczny używany przez inny <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> obiekt, aby wygenerować udostępnionego tajnej umowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-286">Gets the public key that can be used by another <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object to generate a shared secret agreement.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="37a91-287">Klucz publiczny, który jest skojarzony z tym wystąpieniem <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-287">The public key that is associated with this instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SecretAppend">
      <MemberSignature Language="C#" Value="public byte[] SecretAppend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SecretAppend" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend" />
      <MemberSignature Language="VB.NET" Value="Public Property SecretAppend As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SecretAppend { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="37a91-288">Pobiera lub ustawia wartość, która zostanie dołączona do tajnej umowy podczas generowania materiału klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-288">Gets or sets a value that will be appended to the secret agreement when generating key material.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="37a91-289">Wartość, która jest dołączona do tajnej umowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-289">The value that is appended to the secret agreement.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-290">Ta wartość jest używana dla klucza pochodnego, jeśli <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> lub <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> jest używana funkcja wyprowadzania klucza (KDF).</span><span class="sxs-lookup"><span data-stu-id="37a91-290">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> key derivation function (KDF) is used.</span></span> <span data-ttu-id="37a91-291">Wartość jest dołączona do tajnej umowy, a wartość łączna jest przekazywana do KDF do generowania materiału klucza.</span><span class="sxs-lookup"><span data-stu-id="37a91-291">The value is appended to the secret agreement, and the combined value is passed to the KDF to generate the key material.</span></span> <span data-ttu-id="37a91-292">Domyślna wartość to `null`.</span><span class="sxs-lookup"><span data-stu-id="37a91-292">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecretPrepend">
      <MemberSignature Language="C#" Value="public byte[] SecretPrepend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SecretPrepend" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend" />
      <MemberSignature Language="VB.NET" Value="Public Property SecretPrepend As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SecretPrepend { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="37a91-293">Pobiera lub ustawia wartość, która zostanie dodana do początku tajnej umowy podczas wyprowadzania materiału klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-293">Gets or sets a value that will be added to the beginning of the secret agreement when deriving key material.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="37a91-294">Wartość, która jest dołączany na początku tajnej umowy podczas wyprowadzania klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-294">The value that is appended to the beginning of the secret agreement during key derivation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-295">Ta wartość jest używana dla klucza pochodnego, jeśli <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> właściwość jest ustawiona na jeden z następujących wartości:</span><span class="sxs-lookup"><span data-stu-id="37a91-295">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to one of the following values:</span></span>  
  
-   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash>  
  
-   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>  
  
 <span data-ttu-id="37a91-296">Wartość jest dołączany na tajnej umowy początku, a wartość łączna jest przekazywany do funkcji klucza pochodnego (KDF) do generowania materiału klucza.</span><span class="sxs-lookup"><span data-stu-id="37a91-296">The value is prepended to the secret agreement, and the combined value is passed to the key derivation function (KDF) to generate the key material.</span></span> <span data-ttu-id="37a91-297">Domyślna wartość to `null`.</span><span class="sxs-lookup"><span data-stu-id="37a91-297">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seed">
      <MemberSignature Language="C#" Value="public byte[] Seed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Seed" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" />
      <MemberSignature Language="VB.NET" Value="Public Property Seed As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Seed { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="37a91-298">Pobiera lub ustawia wartość początkową, który będzie używany w przypadku tworzenia klasy pochodnej materiału klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-298">Gets or sets the seed value that will be used when deriving key material.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="37a91-299">Wartości początkowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-299">The seed value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-300">Ta wartość jest używana dla klucza pochodnego, jeśli <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> właściwość jest ustawiona na <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>.</span><span class="sxs-lookup"><span data-stu-id="37a91-300">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>.</span></span> <span data-ttu-id="37a91-301">Domyślna wartość to `null`.</span><span class="sxs-lookup"><span data-stu-id="37a91-301">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToXmlString">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="37a91-302">Serializuje dane klucza do ciągu XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-302">Serializes the key information to an XML string.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public override string ToXmlString (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToXmlString(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXmlString (includePrivateParameters As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToXmlString(bool includePrivateParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">
          <span data-ttu-id="37a91-303">
            <see langword="true" /> Aby uwzględnić parametry prywatny; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-303">
              <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37a91-304">Ta metoda nie jest zaimplementowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-304">This method is not implemented.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37a91-305">Nie dotyczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-305">Not applicable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="37a91-306">Aby przekonwertować bieżącego klucza reprezentację XML, użyj <xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> zamiast tego przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="37a91-306">To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="37a91-307">Ta metoda nie została zastąpiona dla tego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-307">This method was not overridden for this instance.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public string ToXmlString (System.Security.Cryptography.ECKeyXmlFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToXmlString(valuetype System.Security.Cryptography.ECKeyXmlFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXmlString (format As ECKeyXmlFormat) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToXmlString(System::Security::Cryptography::ECKeyXmlFormat format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Security.Cryptography.ECKeyXmlFormat" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="37a91-308">Jedna z wartości wyliczenia, które określa format ciągu XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-308">One of the enumeration values that specifies the format of the XML string.</span>
          </span>
          <span data-ttu-id="37a91-309">To jedyny obecnie akceptowane format jest <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-309">The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="37a91-310">Serializuje dane klucza do ciągu XML przy użyciu określonego formatu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-310">Serializes the key information to an XML string by using the specified format.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="37a91-311">Obiekt ciągu zawierający informacje o kluczu, uszeregować w ciągu XML zgodnie z żądany format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-311">A string object that contains the key information, serialized to an XML string, according to the requested format.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="37a91-312">
            <paramref name="format" /> Określa nieprawidłowy format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-312">
              <paramref name="format" /> specifies an invalid format.</span>
          </span>
          <span data-ttu-id="37a91-313">Jest to jedyna wartość zaakceptowane <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-313">The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UseSecretAgreementAsHmacKey">
      <MemberSignature Language="C#" Value="public bool UseSecretAgreementAsHmacKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSecretAgreementAsHmacKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseSecretAgreementAsHmacKey As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSecretAgreementAsHmacKey { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="37a91-314">Pobiera wartość wskazującą, czy tajnej umowy jest używany jako klawisz skrótu na podstawie kodu (metoda HMAC Message Authentication) do uzyskania materiału klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-314">Gets a value that indicates whether the secret agreement is used as a Hash-based Message Authentication Code (HMAC) key to derive key material.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="37a91-315">
            <see langword="true" /> Jeśli tajnej umowy jest używany jako klawisz HMAC do uzyskania materiału klucza; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="37a91-315">
              <see langword="true" /> if the secret agreement is used as an HMAC key to derive key material; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   <span data-ttu-id="37a91-316">Ta wartość jest używana dla klucza pochodnego, jeśli <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> właściwość jest ustawiona na <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>.</span><span class="sxs-lookup"><span data-stu-id="37a91-316">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>.</span></span> <span data-ttu-id="37a91-317">Domyślna wartość to `false`.</span><span class="sxs-lookup"><span data-stu-id="37a91-317">By default, the value is `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>