<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HMACSHA1.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53b671d8988b867c182c89d5f79c893f075020c72.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b671d8988b867c182c89d5f79c893f075020c72</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>Computes a Hash-based Message Authentication Code (HMAC) using the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.SHA1" /&gt;</ph> hash function.</source>
          <target state="translated">Hash-based oblicza kod uwierzytelniania wiadomości (HMAC) przy użyciu <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.SHA1" /&gt;</ph> funkcji generowania skrótów.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> jest typem algorytm skrótu z kluczem jest utworzone na podstawie funkcji skrótu SHA1, używane jako HMAC lub kod uwierzytelniania wiadomości oparty na wyznaczania wartości skrótu.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</source>
          <target state="translated">Proces HMAC łączy klucz tajny z danymi wiadomości, tworzy skrót wyniku przy użyciu funkcji skrótu, łączy skrót z kluczem tajnym ponownie, a następnie stosuje funkcję skrótu po raz drugi.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>The output hash is 160 bits in length.</source>
          <target state="translated">Wynikowy skrót ma długość 160 bitów.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.</source>
          <target state="translated">HMAC może służyć do określenia, czy została naruszona komunikatu wysłanego za pośrednictwem niezabezpieczonego kanału, pod warunkiem, że nadawca i odbiorca udostępnić klucz tajny.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>The sender computes the hash value for the original data and sends both the original data and hash value as a single message.</source>
          <target state="translated">Nadawca oblicza wartość skrótu dla oryginalnych danych i wysyła oryginalnych danych i wartości skrótu jako pojedynczej wiadomości.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</source>
          <target state="translated">Odbiornik ponownie oblicza wartość skrótu dla odebranego komunikatu i sprawdza, czy obliczona HMAC zgodny przesyłane HMAC.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.</source>
          <target state="translated">Każda zmiana danych lub wartość skrótu powoduje niezgodność, ponieważ wiedzy klucz tajny musi zmienić komunikat i Odtwórz wartość skrótu poprawne.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>Therefore, if the original and computed hash values match, the message is authenticated.</source>
          <target state="translated">W związku z tym jeśli wartości skrótu oryginalny i obliczona zgodne, wiadomość została uwierzytelniona.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>The SHA-1 (Secure Hash Algorithm, also called SHS, Secure Hash Standard) is a cryptographic hash algorithm published by the United States Government.</source>
          <target state="translated">SHA-1 (Secure Hash Algorithm, nazywany również SHS Secure Hash standardowe) jest algorytm skrótu kryptograficznego opublikowanych przez Rząd Stanów Zjednoczonych.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>It produces a 160-bit hash value from an arbitrary length string.</source>
          <target state="translated">Generuje wartość skrótu 160-bitowy z dowolnej długości ciągu.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> accepts keys of any size, and produces a hash sequence that is 160 bits in length.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> akceptuje klucze o dowolnej wielkości i tworzy sekwencję wyznaczania wartości skrótu, która jest 160 bitów długości.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>The following code example shows how to sign a file by using the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> object and then how to verify the file.</source>
          <target state="translated">Poniższy przykładowy kod przedstawia sposób podpisać plik za pomocą <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> obiektu, a następnie sprawdź, czy plik jak.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.HMACSHA1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> class.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> class with a randomly generated key.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> klasy z losowo wygenerowany klucz.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA1.#ctor">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> jest typem algorytm skrótu z kluczem jest utworzone na podstawie funkcji skrótu SHA1, używane jako HMAC lub kod uwierzytelniania wiadomości oparty na wyznaczania wartości skrótu.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA1.#ctor">
          <source>The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</source>
          <target state="translated">Proces HMAC łączy klucz tajny z danymi wiadomości, tworzy skrót wyniku przy użyciu funkcji skrótu, łączy skrót z kluczem tajnym ponownie, a następnie stosuje funkcję skrótu po raz drugi.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA1.#ctor">
          <source>The output hash is 160 bits (20 bytes) in length.</source>
          <target state="translated">Wynikowy skrót ma długość 160 bitów (20 bajtów).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA1.#ctor">
          <source>This constructor uses a 64-byte, randomly generated key.</source>
          <target state="translated">Ten konstruktor korzysta z 64-bajtowych, losowo wygenerowany klucz.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source>The secret key for <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> encryption.</source>
          <target state="translated">Klucz tajny dla <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> szyfrowania.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source>The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key.</source>
          <target state="translated">Klucz może być dowolną długość, ale jeśli jest więcej niż 64 bajtów jego skrót jest tworzony (przy użyciu algorytmu SHA-1) do uzyskania klucza 64 bajtów.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source>Therefore, the recommended size of the secret key is 64 bytes.</source>
          <target state="translated">W związku z tym zalecany rozmiar klucz tajny jest 64 bajtów.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> class with the specified key data.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> klasy z określonymi danymi klucza.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> jest typem algorytm skrótu z kluczem jest utworzone na podstawie funkcji skrótu SHA1, używane jako HMAC lub kod uwierzytelniania wiadomości oparty na wyznaczania wartości skrótu.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source>The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</source>
          <target state="translated">Proces HMAC łączy klucz tajny z danymi wiadomości, tworzy skrót wyniku przy użyciu funkcji skrótu, łączy skrót z kluczem tajnym ponownie, a następnie stosuje funkcję skrótu po raz drugi.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source>The output hash is 160 bits (20 bytes) in length.</source>
          <target state="translated">Wynikowy skrót ma długość 160 bitów (20 bajtów).</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source>This constructor creates an unmanaged instance of the algorithm by using the <ph id="ph1">&lt;xref:System.Security.Cryptography.SHA1CryptoServiceProvider&gt;</ph> class.</source>
          <target state="translated">Ten konstruktor tworzy wystąpienie niezarządzane algorytmu przy użyciu <ph id="ph1">&lt;xref:System.Security.Cryptography.SHA1CryptoServiceProvider&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source>For an example of how to use this constructor, see the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> class.</source>
          <target state="translated">Na przykład sposobu używania tego konstruktora zobacz <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> klasy.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
          <source>The <ph id="ph1">&lt;paramref name="key" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> Parametr jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)">
          <source>The secret key for <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> encryption.</source>
          <target state="translated">Klucz tajny dla <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> szyfrowania.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)">
          <source>The key can be any length, but if it is more than 64 bytes long, it is hashed (using SHA-1) to derive a 64-byte key.</source>
          <target state="translated">Klucz może być dowolną długość, ale jeśli jest więcej niż 64 bajtów, jego skrót jest tworzony (przy użyciu algorytmu SHA-1) do uzyskania klucza 64 bajtów.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)">
          <source>Therefore, the recommended size of the secret key is 64 bytes.</source>
          <target state="translated">W związku z tym zalecany rozmiar klucz tajny jest 64 bajtów.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to use the managed implementation of the SHA1 algorithm (the <ph id="ph2">&lt;see cref="T:System.Security.Cryptography.SHA1Managed" /&gt;</ph> class); <ph id="ph3">&lt;see langword="false" /&gt;</ph> to use the unmanaged implementation (the <ph id="ph4">&lt;see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /&gt;</ph> class).</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Aby użyć zarządzaną implementację algorytmu SHA1 ( <ph id="ph2">&lt;see cref="T:System.Security.Cryptography.SHA1Managed" /&gt;</ph> klasy); <ph id="ph3">&lt;see langword="false" /&gt;</ph> można użyć implementacji niezarządzane ( <ph id="ph4">&lt;see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /&gt;</ph> klasy).</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> class with the specified key data and a value that specifies whether to use the managed version of the SHA1 algorithm.</source>
          <target state="translated">Inicjuje nowe wystąpienie klasy <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA1" /&gt;</ph> z określonych danych klucza i wartość, która określa, czy użyć wersji zarządzanych algorytmu SHA1.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>