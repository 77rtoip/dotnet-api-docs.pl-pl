<Type Name="ECDiffieHellmanKeyDerivationFunction" FullName="System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bc7cc311fd27cecdc18b62858a620794b82aa52e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36624795" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum ECDiffieHellmanKeyDerivationFunction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ECDiffieHellmanKeyDerivationFunction extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" />
  <TypeSignature Language="VB.NET" Value="Public Enum ECDiffieHellmanKeyDerivationFunction" />
  <TypeSignature Language="C++ CLI" Value="public enum class ECDiffieHellmanKeyDerivationFunction" />
  <TypeSignature Language="F#" Value="type ECDiffieHellmanKeyDerivationFunction = " />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Określa funkcja wyprowadzania klucza, który <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> klasy użyje Aby przekonwertować materiału klucza tajnego umowy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction> Wyliczenie definiuje typ algorytmu, który będzie używany do transformacji raw tajnej umowy do materiału klucza. Tajnej umowy jest wartość, która jest generowana z kluczem prywatnym i klucz publiczny innych firm, w ramach wymiany kluczy. Jest to wartość inicjatora dla materiału klucza, który jest generowany przez <xref:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial%2A> metody.  
  
 <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> Właściwości używa tego wyliczenia w celu uzyskania funkcja wyprowadzania klucza dla <xref:System.Security.Cryptography.ECDiffieHellmanCng> klasy.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Hash">
      <MemberSignature Language="C#" Value="Hash" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction Hash = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />
      <MemberSignature Language="VB.NET" Value="Hash" />
      <MemberSignature Language="C++ CLI" Value="Hash" />
      <MemberSignature Language="F#" Value="Hash = 0" Usage="System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Algorytm wyznaczania wartości skrótu służy do generowania materiału klucza. <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" /> Właściwość określa nazwę algorytmu do użycia. Jeśli nie zostanie określona nazwa algorytmu, <see cref="T:System.Security.Cryptography.SHA256" /> jest używany jako domyślny algorytm.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można również określić <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> i <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> właściwości, ale nie są wymagane.  
  
 Ilość materiału klucza, który jest generowany jest odpowiednikiem rozmiar wartość określony algorytm wyznaczania wartości skrótu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hmac">
      <MemberSignature Language="C#" Value="Hmac" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction Hmac = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />
      <MemberSignature Language="VB.NET" Value="Hmac" />
      <MemberSignature Language="C++ CLI" Value="Hmac" />
      <MemberSignature Language="F#" Value="Hmac = 1" Usage="System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Algorytm wyznaczania wartości skrótu na podstawie kodu (metoda HMAC Message Authentication) służy do generowania materiału klucza. <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" /> Właściwość określa klucz do użycia. Albo ta właściwość musi być ustawiona lub <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" /> musi mieć ustawioną właściwość <see langword="true" />; w przeciwnym razie <see cref="T:System.Security.Cryptography.CryptographicException" /> jest generowany, gdy używasz <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />. Jeśli ustawiono obie właściwości, tajnej umowy jest używany jako klucz HMAC.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można również określić <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> i <xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> właściwości, ale nie są wymagane.  
  
 Ilość materiału klucza, który jest generowany jest odpowiednikiem rozmiar wartości HMAC.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tls">
      <MemberSignature Language="C#" Value="Tls" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction Tls = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />
      <MemberSignature Language="VB.NET" Value="Tls" />
      <MemberSignature Language="C++ CLI" Value="Tls" />
      <MemberSignature Language="F#" Value="Tls = 2" Usage="System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Protokół zabezpieczeń TLS (Transport Layer) jest używany do generowania materiału klucza. <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> i <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> właściwości muszą być ustawione; w przeciwnym razie <see cref="T:System.Security.Cryptography.CryptographicException" /> jest generowany, gdy używasz <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta wartość generuje 160 bitów materiału klucza.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>