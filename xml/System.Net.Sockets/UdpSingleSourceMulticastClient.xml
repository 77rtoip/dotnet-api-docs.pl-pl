<Type Name="UdpSingleSourceMulticastClient" FullName="System.Net.Sockets.UdpSingleSourceMulticastClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9eb81441e483a85c9c2256e50ce009ef6eb76c41" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69112039" /></Metadata><TypeSignature Language="C#" Value="public class UdpSingleSourceMulticastClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UdpSingleSourceMulticastClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />
  <TypeSignature Language="VB.NET" Value="Public Class UdpSingleSourceMulticastClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class UdpSingleSourceMulticastClient : IDisposable" />
  <TypeSignature Language="F#" Value="type UdpSingleSourceMulticastClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Odbiornik klienta dla ruchu multiemisji z jednego źródła, nazywany również multiemisją specyficzną dla źródła (program SSM).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Adres grupy multiemisji i adres źródłowy nadawcy muszą być znane.  
  
 Oprócz otrzymywania danych multiemisji od określonego nadawcy <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> klient może również wysyłać dane emisji pojedynczej do nadawcy.  
  
 Aby odebrać multiemisję z wielu źródeł lub kiedy źródła nie są znane z góry, zamiast tego <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> Użyj klasy.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpSingleSourceMulticastClient (System.Net.IPAddress sourceAddress, System.Net.IPAddress groupAddress, int localPort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress sourceAddress, class System.Net.IPAddress groupAddress, int32 localPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sourceAddress As IPAddress, groupAddress As IPAddress, localPort As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpSingleSourceMulticastClient(System::Net::IPAddress ^ sourceAddress, System::Net::IPAddress ^ groupAddress, int localPort);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpSingleSourceMulticastClient : System.Net.IPAddress * System.Net.IPAddress * int -&gt; System.Net.Sockets.UdpSingleSourceMulticastClient" Usage="new System.Net.Sockets.UdpSingleSourceMulticastClient (sourceAddress, groupAddress, localPort)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sourceAddress" Type="System.Net.IPAddress" />
        <Parameter Name="groupAddress" Type="System.Net.IPAddress" />
        <Parameter Name="localPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceAddress">Adres źródłowy nadawcy dla tego odbiorcy, który ma subskrybować.</param>
        <param name="groupAddress">Adres grupy multiemisji dla tego odbiorcy, który ma subskrybować.</param>
        <param name="localPort">Port lokalny dla tego odbiorcy, z którym ma zostać utworzone powiązanie.</param>
        <summary>Tworzy nowego <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> klienta UDP, który może subskrybować adres grupy i odbierać datagramy z jednego źródła.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A> Konstruktor kojarzy gniazdo multiemisji UDP z adresem i portem grupy, ale nie tworzy powiązania ani nie używa tego gniazda.  
  
 `groupAddress` Parametr może być adresem multiemisji IPv6 lub IPv4. Jednak rodzina `sourceAddress` adresów parametrów i `groupAddress` musi być taka sama.  
  
 `localPort` Parametr nie może określać portu mniejszego niż 1 024.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="sourceAddress" />i <paramref name="groupAddress" /> musi być tą samą rodziną adresów.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceAddress" />jest odwołaniem o wartości null (Nothing w Visual Basic).  
  
—lub— 
 <paramref name="groupAddress" />jest odwołaniem o wartości null (Nothing w Visual Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="localPort" />jest mniejsze niż 0 
—lub— 
 <paramref name="localPort" />jest większa niż 65 535.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="localPort" />jest mniejsza niż 1024</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginJoinGroup">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginJoinGroup (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginJoinGroup(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginJoinGroup (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginJoinGroup(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginJoinGroup : AsyncCallback * obj -&gt; IAsyncResult" Usage="udpSingleSourceMulticastClient.BeginJoinGroup (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">Metoda wywołania zwrotnego do wywołania po zakończeniu operacji.</param>
        <param name="state">Opcjonalne informacje o stanie przekazane do <paramref name="callback" /> metody dla tej operacji.</param>
        <summary>Tworzy powiązanie gniazda i rozpoczyna operację łączenia z grupą multiemisji, aby umożliwić odbieranie datagramów z jednego adresu źródłowego.</summary>
        <returns><see cref="T:System.IAsyncResult" /> , Który odwołuje się do tej operacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup%2A> Metoda wiąże gniazdo multiemisji UDP z portem lokalnym i łączy grupę multiemisji, aby umożliwić odbieranie datagramów z jednego adresu źródłowego. Adres grupy multiemisji, adres pojedynczego źródła i port lokalny do powiązania są określone w <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A> konstruktorze.  
  
 Metoda określona w `callback` parametrze jest wywoływana, gdy operacja dołączenia do grupy multiemisji została zakończona.  
  
 Jeśli jest to wymagane przez środowisko uruchomieniowe, <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup%2A> Metoda wykonuje także sprawdzanie zasad, aby sprawdzić, czy klient może uzyskać dostęp do grupy multiemisji. Jeśli klient nie ma zezwolenia na dostęp, <xref:System.Net.Sockets.SocketException> jest zgłaszany przy użyciu. <xref:System.Net.Sockets.SocketError.AccessDenied>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji została już przyłączona lub Operacja łączenia jest obecnie w toku.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> Został usunięty.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do gniazda.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveFromSource">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveFromSource (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveFromSource(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveFromSource (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveFromSource(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceiveFromSource : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpSingleSourceMulticastClient.BeginReceiveFromSource (buffer, offset, count, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Bufor do przechowywania odebranych danych.</param>
        <param name="offset">Przesunięcie w bajtach od początku <paramref name="buffer" /> lokalizacji, w której powinny być przechowywane dane.</param>
        <param name="count">Maksymalna liczba bajtów do odbierania i przechowywania w <paramref name="buffer" />.</param>
        <param name="callback">Metoda wywołania zwrotnego do wywołania po zakończeniu operacji.</param>
        <param name="state">Opcjonalne informacje o stanie przekazane do <paramref name="callback" /> metody dla tej operacji.</param>
        <summary>Rozpoczyna operację otrzymywania pakietu z dołączonej grupy multiemisji i wywołuje określone wywołanie zwrotne, gdy pakiet dotarł do grupy od określonego nadawcy.</summary>
        <returns><see cref="T:System.IAsyncResult" /> , Który odwołuje się do tej operacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> Metoda rozpoczyna operację otrzymywania pakietu UDP z dołączonej grupy multiemisji od pojedynczego nadawcy. Port lokalny, Grupa multiemisji i adres źródłowy nadawcy są określone w <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A> konstruktorze. Klient multiemisji również musiał zakończyć dołączanie do grupy multiemisji.  
  
 Metoda określona w `callback` parametrze jest wywoływana po odebraniu pakietu.  
  
 Jeśli operacja odbierania nie powiedzie się synchronicznie, może wystąpić awaria gniazda, chociaż jest to nietypowe w przypadku protokołu UDP. Jeśli wystąpi awaria gniazda, <xref:System.Net.Sockets.SocketException> jest zgłaszany. Otrzymany błąd jest określony jako element członkowski <xref:System.Net.Sockets.SocketError> wyliczenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" />jest odwołaniem o wartości null (Nothing w Visual Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />jest mniejsze niż 0 
—lub— 
 <paramref name="offset" />jest większa niż długość <paramref name="buffer" />.  
  
—lub— 
 <paramref name="count" />jest mniejsze niż 0 
—lub— 
 <paramref name="offset" />a liczba jest większa niż długość <paramref name="buffer" />.</exception>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji nie została jeszcze przyłączona.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> Został usunięty.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do gniazda w celu odebrania.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendToSource">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendToSource (byte[] buffer, int offset, int count, int remotePort, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendToSource(unsigned int8[] buffer, int32 offset, int32 count, int32 remotePort, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource(System.Byte[],System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendToSource (buffer As Byte(), offset As Integer, count As Integer, remotePort As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendToSource(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, int remotePort, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendToSource : byte[] * int * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpSingleSourceMulticastClient.BeginSendToSource (buffer, offset, count, remotePort, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="remotePort" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Bufor zawierający dane do wysłania.</param>
        <param name="offset">Przesunięcie, w bajtach, od początku <paramref name="buffer" /> do odczytu danych do wysłania.</param>
        <param name="count">Liczba bajtów do wysłania z <paramref name="buffer" />.</param>
        <param name="remotePort">Port zdalny, do którego ma zostać wysłany pakiet. Adres zdalny jest określany przez <see cref="M:System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)" /> konstruktora.</param>
        <param name="callback">Metoda wywołania zwrotnego do wywołania po zakończeniu operacji.</param>
        <param name="state">Opcjonalne informacje o stanie przekazane do <paramref name="callback" /> metody dla tej operacji.</param>
        <summary>Rozpoczyna operację wysłania pakietu emisji pojedynczej do źródła określonego wcześniej.</summary>
        <returns><see cref="T:System.IAsyncResult" /> , Który odwołuje się do tej operacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A> Metoda rozpoczyna operację wysyłania pakietu UDP do wcześniej określonego źródła.  
  
 Niektóre protokoły używają tych informacji do przekazywania sterowania przepływem, statystyk jakości usług lub komunikatów odzyskiwania.  
  
 Metoda określona w parametrze `callback` jest wywoływana, gdy pakiet został wysłany.  
  
 Klient musi zakończyć dołączanie do grupy multiemisji.  
  
 Jeśli port docelowy określony w `remotePort` parametrze jest mniejszy niż 1 024 <xref:System.Net.Sockets.SocketException> , zostanie zgłoszony przy użyciu <xref:System.Net.Sockets.SocketError.AccessDenied>.  
  
 Jeśli operacja wysyłania nie powiedzie się synchronicznie, może występować awaria gniazda, chociaż jest to nietypowe w przypadku protokołu UDP. Jeśli wystąpi awaria gniazda, <xref:System.Net.Sockets.SocketException> jest zgłaszany. Otrzymany błąd jest określony jako element członkowski <xref:System.Net.Sockets.SocketError> wyliczenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" />jest odwołaniem o wartości null (Nothing w Visual Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />jest mniejsze niż 0 
—lub— 
 <paramref name="offset" />jest większa niż długość <paramref name="buffer" />.  
  
—lub— 
 <paramref name="count" />jest mniejsze niż 0 
—lub— 
 <paramref name="offset" />a liczba jest większa niż długość <paramref name="buffer" />.  
  
—lub— 
 <paramref name="remotePort" />jest mniejsza niż 0 lub większa niż 65 535.</exception>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji nie została jeszcze przyłączona.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> Został usunięty.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do gniazda.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="udpSingleSourceMulticastClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pozostawia grupę multiemisji i zwalnia wszystkie zasoby używane przez bieżące wystąpienie <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> klasy i <see cref="T:System.Net.Sockets.Socket" />bazowe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A> po zakończeniu korzystania z <xref:System.Net.Sockets.UdpSingleSourceMulticastClient>. <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A> Metoda<xref:System.Net.Sockets.UdpSingleSourceMulticastClient> pozostawia w stanie niezdatnym do użytku. Po wywołaniu <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A>należy wydać wszystkie odwołania <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> do, aby moduł wyrzucania elementów bezużytecznych mógł odwoływać pamięć <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> , którą zajmował.  
  
 Zawsze wywołuj <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A> przed wydaniem ostatniego odwołania <xref:System.Net.Sockets.UdpSingleSourceMulticastClient>do. W przeciwnym razie używane zasoby nie zostaną zwolnione do momentu wywołania <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> <xref:System.Object.Finalize%2A> metody obiektu przez moduł zbierający elementy bezużyteczne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndJoinGroup">
      <MemberSignature Language="C#" Value="public void EndJoinGroup (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndJoinGroup(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndJoinGroup (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndJoinGroup(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndJoinGroup : IAsyncResult -&gt; unit" Usage="udpSingleSourceMulticastClient.EndJoinGroup result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Wynik asynchronicznej operacji dołączania.</param>
        <summary>Kończy operację dołączania asynchronicznej grupy do grupy multiemisji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup%2A> Metoda wykonuje asynchroniczne powiązanie z operacją Socket i Join z grupą multiemisji.  
  
 Jeśli jest to wymagane przez środowisko uruchomieniowe, <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup%2A> Metoda wykonuje także sprawdzanie zasad, aby sprawdzić, czy klient może uzyskać dostęp do grupy multiemisji. Jeśli klient nie ma zezwolenia na dostęp, <xref:System.Net.Sockets.SocketException> jest zgłaszany przy użyciu. <xref:System.Net.Sockets.SocketError.AccessDenied>  
  
 Jeśli wystąpi awaria gniazda podczas wykonywania operacji przyłączania do <xref:System.Net.Sockets.SocketException> grupy, jest zgłaszany. Otrzymany błąd jest określony jako element członkowski <xref:System.Net.Sockets.SocketError> wyliczenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="result" />jest odwołaniem o wartości null (Nothing w Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> Został usunięty.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do gniazda.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveFromSource">
      <MemberSignature Language="C#" Value="public int EndReceiveFromSource (IAsyncResult result, out int sourcePort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveFromSource(class System.IAsyncResult result, [out] int32&amp; sourcePort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource(System.IAsyncResult,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveFromSource (result As IAsyncResult, ByRef sourcePort As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveFromSource(IAsyncResult ^ result, [Runtime::InteropServices::Out] int % sourcePort);" />
      <MemberSignature Language="F#" Value="member this.EndReceiveFromSource : IAsyncResult *  -&gt; int" Usage="udpSingleSourceMulticastClient.EndReceiveFromSource (result, sourcePort)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="sourcePort" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">Wynik asynchronicznej operacji odbierania.</param>
        <param name="sourcePort">Źródłowy punkt końcowy, z którego został odebrany pakiet.</param>
        <summary>Kończy asynchroniczne operacje odbierania pakietu z dołączonej grupy multiemisji i udostępnia otrzymane informacje.</summary>
        <returns>Długość (w bajtach) komunikatu przechowywanego w <paramref name="buffer" /> parametrze przekazaną <see cref="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> do metody.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource%2A> Metoda wykonuje asynchroniczną operację, aby odebrać pakiet z jednego źródła w grupie multiemisji.  
  
 Jeśli wystąpi awaria gniazda podczas wykonywania operacji odbierania, <xref:System.Net.Sockets.SocketException> jest zgłaszany. Otrzymany błąd jest określony jako element członkowski <xref:System.Net.Sockets.SocketError> wyliczenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="result" />jest odwołaniem o wartości null (Nothing w Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji nie została jeszcze przyłączona.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> Został usunięty.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do gniazda.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndSendToSource">
      <MemberSignature Language="C#" Value="public void EndSendToSource (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSendToSource(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSendToSource (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSendToSource(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndSendToSource : IAsyncResult -&gt; unit" Usage="udpSingleSourceMulticastClient.EndSendToSource result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Wynik asynchronicznej operacji wysyłania.</param>
        <summary>Wykonuje operację wysyłania pakietu emisji pojedynczej do pojedynczego źródła.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource%2A> Metoda wykonuje operację asynchroniczną, aby wysłać pakiet do pojedynczego źródła określonego wcześniej.  
  
 Jeśli wystąpi awaria gniazda podczas wykonywania operacji odbierania, <xref:System.Net.Sockets.SocketException> jest zgłaszany. Otrzymany błąd jest określony jako element członkowski <xref:System.Net.Sockets.SocketError> wyliczenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="result" />jest odwołaniem o wartości null (Nothing w Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji nie została jeszcze przyłączona.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> Został usunięty.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do gniazda.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveBufferSize : int with get, set" Usage="System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia rozmiar w bajtach w buforze <see cref="T:System.Net.Sockets.Socket" /> odbioru używanym do odbierania operacji multiemisji w tym <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> wystąpieniu.</summary>
        <value>Zwraca <see cref="T:System.Int32" />wartość.  
  
Rozmiar buforu odbioru (w bajtach).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość pobiera lub ustawia rozmiar (w bajtach) bufora <xref:System.Net.Sockets.Socket> odbioru użytego dla operacji odbioru multiemisji w tym <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> wystąpieniu. `ReceiveBufferSize` Właściwość określa rozmiar buforu używany przez stos po nadejściu pakietu, ale aplikacja nie została jeszcze <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> wywołana. `ReceiveBufferSize` Jeśli ten bufor zostanie wypełniony i zachowane pakiety, zanim aplikacja wywoła <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> metody i <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource%2A> zostaną usunięte stare pakiety. Aplikacja nigdy nie będzie mogła odbierać starych pakietów, a zamiast tego odbiera nowsze pakiety, gdy wywoła <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> metodę.  
  
 Domyślny rozmiar buforu odbioru w systemie Windows to 8 192.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Określony rozmiar buforu jest mniejszy niż 0.</exception>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji nie została jeszcze przyłączona.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> Został usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendBufferSize">
      <MemberSignature Language="C#" Value="public int SendBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property SendBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendBufferSize : int with get, set" Usage="System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia rozmiar (w bajtach) bufora <see cref="T:System.Net.Sockets.Socket" /> wysyłania użytego do wysyłania operacji multiemisji w tym <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> wystąpieniu.</summary>
        <value>Zwraca <see cref="T:System.Int32" />wartość.  
  
Rozmiar buforu wysyłania w bajtach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość SendBufferSize Pobiera lub ustawia rozmiar (w bajtach) bufora <xref:System.Net.Sockets.Socket> wysyłania użytego dla operacji wysyłania multiemisji w tym <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> wystąpieniu.  
  
 Na Mac OS X <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize%2A> Właściwość kontroluje liczbę bajtów, które mogą znajdować się w buforze oczekiwanie na wysłanie stosu sieciowego, zanim dodatkowe wywołania <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A> metody nie powiodą się. W przypadku wysyłania dużej liczby pakietów UDP w krótkim przedziale czasu aplikacje na Mac OS X mogą być konieczne.  
  
 W systemie Windows wywołania <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A> metody potrwają dłużej wywołania zwrotne, w zależności od wartości <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize%2A> właściwości, jeśli bufor wysyłania jest pełny. <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize%2A> Właściwość kontroluje tylko, czy bufor użytkownika pozostaje zablokowany w pamięci fizycznej do momentu zakończenia wysyłania.  
  
 Domyślny rozmiar buforu wysyłania w systemie Windows to 8 192.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Określony rozmiar buforu jest mniejszy niż 0.</exception>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji nie została jeszcze przyłączona.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> Został usunięty.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
