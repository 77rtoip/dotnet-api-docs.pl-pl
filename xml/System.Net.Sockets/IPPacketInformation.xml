<Type Name="IPPacketInformation" FullName="System.Net.Sockets.IPPacketInformation">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bd31bc7fa7fd5f971c0aee93a580031b91b70e20" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69112574" /></Metadata><TypeSignature Language="C#" Value="public struct IPPacketInformation" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit IPPacketInformation extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.IPPacketInformation" />
  <TypeSignature Language="VB.NET" Value="Public Structure IPPacketInformation" />
  <TypeSignature Language="C++ CLI" Value="public value class IPPacketInformation" />
  <TypeSignature Language="F#" Value="type IPPacketInformation = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Przedstawia informacje o pakiecie z wywołania do <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> lub. <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IPAddress Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.IPPacketInformation.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IPAddress ^ Address { System::Net::IPAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Address : System.Net.IPAddress" Usage="System.Net.Sockets.IPPacketInformation.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje o źródle pakietu, który został odebrany w wyniku wywołania <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> metody lub <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> metody.</summary>
        <value>Wskazuje informacje o pochodzeniu pakietu, który został odebrany w wyniku <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> wywołania metody lub <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> metody. <see cref="T:System.Net.IPAddress" /> W przypadku pakietów, które zostały wysłane z adresu <see cref="P:System.Net.Sockets.IPPacketInformation.Address" /> emisji pojedynczej, właściwość <see cref="T:System.Net.IPAddress" /> zwróci nadawcę; w przypadku pakietów multiemisji <see cref="P:System.Net.Sockets.IPPacketInformation.Address" /> lub emisji właściwość zwróci wartość multiemisji lub emisji <see cref="T:System.Net.IPAddress" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.IPPacketInformation.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (comparand As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ comparand);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="iPPacketInformation.Equals comparand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparand" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="comparand">Obiekt, który ma zostać porównany z tym wystąpieniem.</param>
        <summary>Zwraca wartość wskazującą, czy to wystąpienie jest równe podanemu obiektowi.</summary>
        <returns><see langword="true" />Jeśli <paramref name="comparand" /> jest <see langword="false" />wystąpieniem i jest równa wartości wystąpienia; w przeciwnym razie. <see cref="T:System.Net.Sockets.IPPacketInformation" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.IPPacketInformation.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="iPPacketInformation.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca kod skrótu dla tego wystąpienia.</summary>
        <returns>Kod skrótu Int32.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kod skrótu jest konstruowany z wartości <xref:System.Net.Sockets.IPPacketInformation.Address%2A> właściwości i. <xref:System.Net.Sockets.IPPacketInformation.Interface%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interface">
      <MemberSignature Language="C#" Value="public int Interface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Interface" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.IPPacketInformation.Interface" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Interface As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Interface { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Interface : int" Usage="System.Net.Sockets.IPPacketInformation.Interface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera informacje o interfejsie sieciowym, które są skojarzone z <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> wywołaniem <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" />lub.</summary>
        <value><see cref="T:System.Int32" /> Wartość, która reprezentuje indeks interfejsu sieciowego. Za <see cref="M:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces" /> pomocą tego indeksu można uzyskać więcej informacji o odpowiednim interfejsie.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Net.Sockets.IPPacketInformation packetInformation1, System.Net.Sockets.IPPacketInformation packetInformation2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Net.Sockets.IPPacketInformation packetInformation1, valuetype System.Net.Sockets.IPPacketInformation packetInformation2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (packetInformation1 As IPPacketInformation, packetInformation2 As IPPacketInformation) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Net::Sockets::IPPacketInformation packetInformation1, System::Net::Sockets::IPPacketInformation packetInformation2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Net.Sockets.IPPacketInformation * System.Net.Sockets.IPPacketInformation -&gt; bool" Usage="packetInformation1 = packetInformation2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="packetInformation1" Type="System.Net.Sockets.IPPacketInformation" />
        <Parameter Name="packetInformation2" Type="System.Net.Sockets.IPPacketInformation" />
      </Parameters>
      <Docs>
        <param name="packetInformation1"><see cref="T:System.Net.Sockets.IPPacketInformation" /> Wystąpienie znajdujące się po lewej stronie operatora równości.</param>
        <param name="packetInformation2"><see cref="T:System.Net.Sockets.IPPacketInformation" /> Wystąpienie znajdujące się po prawej stronie operatora równości.</param>
        <summary>Testuje, czy <see cref="T:System.Net.Sockets.IPPacketInformation" /> dwa określone wystąpienia są równoważne.</summary>
        <returns><see langword="true" />Jeśli <paramref name="packetInformation1" /> i <paramref name="packetInformation2" /> sąrówne;<see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten operator testuje zarówno <xref:System.Net.Sockets.IPPacketInformation.Address%2A> wartości <xref:System.Net.Sockets.IPPacketInformation.Interface%2A> , jak i dla obu argumentów.  
  
 Równoważna Metoda dla tego operatora to <xref:System.Net.Sockets.IPPacketInformation.Equals(System.Object)>.]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Net.Sockets.IPPacketInformation packetInformation1, System.Net.Sockets.IPPacketInformation packetInformation2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Net.Sockets.IPPacketInformation packetInformation1, valuetype System.Net.Sockets.IPPacketInformation packetInformation2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (packetInformation1 As IPPacketInformation, packetInformation2 As IPPacketInformation) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Net::Sockets::IPPacketInformation packetInformation1, System::Net::Sockets::IPPacketInformation packetInformation2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Net.Sockets.IPPacketInformation * System.Net.Sockets.IPPacketInformation -&gt; bool" Usage="System.Net.Sockets.IPPacketInformation.op_Inequality (packetInformation1, packetInformation2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="packetInformation1" Type="System.Net.Sockets.IPPacketInformation" />
        <Parameter Name="packetInformation2" Type="System.Net.Sockets.IPPacketInformation" />
      </Parameters>
      <Docs>
        <param name="packetInformation1"><see cref="T:System.Net.Sockets.IPPacketInformation" /> Wystąpienie znajdujące się po lewej stronie operatora nierówności.</param>
        <param name="packetInformation2"><see cref="T:System.Net.Sockets.IPPacketInformation" /> Wystąpienie znajdujące się po prawej stronie operatora nierówności.</param>
        <summary>Testuje, czy <see cref="T:System.Net.Sockets.IPPacketInformation" /> dwa określone wystąpienia nie są równe.</summary>
        <returns><see langword="true" />Jeśli <paramref name="packetInformation1" /> <see langword="false" />i <paramref name="packetInformation2" /> są nierówne; w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten operator testuje zarówno <xref:System.Net.Sockets.IPPacketInformation.Address%2A> wartości <xref:System.Net.Sockets.IPPacketInformation.Interface%2A> , jak i dla obu argumentów.  
  
 Równoważna Metoda dla tego operatora to <xref:System.Net.Sockets.IPPacketInformation.Equals(System.Object)>.]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
