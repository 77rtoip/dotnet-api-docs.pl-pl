<Type Name="UdpAnySourceMulticastClient" FullName="System.Net.Sockets.UdpAnySourceMulticastClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="df4d6e72880f5980ef020aa9817101116c6c1cd8" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69112158" /></Metadata><TypeSignature Language="C#" Value="public class UdpAnySourceMulticastClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UdpAnySourceMulticastClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.UdpAnySourceMulticastClient" />
  <TypeSignature Language="VB.NET" Value="Public Class UdpAnySourceMulticastClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class UdpAnySourceMulticastClient : IDisposable" />
  <TypeSignature Language="F#" Value="type UdpAnySourceMulticastClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Odbiornik klienta dla ruchu multiemisji z dowolnego źródła, znanego również jako każda z multiemisji (ASM) lub Internet Standard multicast (ISM).</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpAnySourceMulticastClient (System.Net.IPAddress groupAddress, int localPort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress groupAddress, int32 localPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.#ctor(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (groupAddress As IPAddress, localPort As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpAnySourceMulticastClient(System::Net::IPAddress ^ groupAddress, int localPort);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpAnySourceMulticastClient : System.Net.IPAddress * int -&gt; System.Net.Sockets.UdpAnySourceMulticastClient" Usage="new System.Net.Sockets.UdpAnySourceMulticastClient (groupAddress, localPort)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="groupAddress" Type="System.Net.IPAddress" />
        <Parameter Name="localPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="groupAddress">Adres grupy multiemisji dla tego odbiorcy, który ma subskrybować.</param>
        <param name="localPort">Port lokalny dla tego odbiorcy, z którym ma zostać utworzone powiązanie.</param>
        <summary>Tworzy nowego <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> klienta UDP, który może subskrybować adres grupy i odbierać datagramy z dowolnego źródła.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.%23ctor%2A> Konstruktor kojarzy gniazdo multiemisji UDP z adresem i portem grupy, ale nie tworzy powiązania ani nie używa tego gniazda.  
  
 `groupAddress` Parametr może być adresem multiemisji IPv6 lub IPv4.  
  
 `localPort` Parametr nie może określać portu mniejszego niż 1 024.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="groupAddress" />jest <see langword="null" />. reference</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="localPort" />jest mniejsza niż 0-lub- <paramref name="localPort" /> jest większa niż 65 535.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginJoinGroup">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginJoinGroup (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginJoinGroup(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginJoinGroup(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginJoinGroup (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginJoinGroup(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginJoinGroup : AsyncCallback * obj -&gt; IAsyncResult" Usage="udpAnySourceMulticastClient.BeginJoinGroup (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">Metoda wywołania zwrotnego do wywołania po zakończeniu operacji.</param>
        <param name="state">Opcjonalne informacje o stanie przekazane do <paramref name="callback" /> metody dla tej operacji.</param>
        <summary>Wiąże gniazdo i rozpoczyna operację łączenia z grupą multiemisji, aby umożliwić odbieranie datagramów z dowolnego uczestnika grupy.</summary>
        <returns><see cref="T:System.IAsyncResult" /> , Który odwołuje się do tej operacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginJoinGroup%2A> Metoda wiąże gniazdo multiemisji UDP z portem lokalnym i łączy grupę multiemisji, aby umożliwić odbieranie datagramów z dowolnego uczestnika grupy multiemisji. Port lokalny i adres grupy multiemisji są określone w <xref:System.Net.Sockets.UdpAnySourceMulticastClient.%23ctor%2A> konstruktorze.  
  
 Metoda określona w `callback` parametrze jest wywoływana, gdy operacja dołączenia do grupy multiemisji została zakończona.  
  
 Jeśli jest to wymagane przez środowisko uruchomieniowe, <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginJoinGroup%2A> Metoda wykonuje także sprawdzanie zasad, aby sprawdzić, czy klient może uzyskać dostęp do grupy multiemisji. Jeśli klient nie ma zezwolenia na dostęp, <xref:System.Net.Sockets.SocketException> jest zgłaszany przy użyciu. <xref:System.Net.Sockets.SocketError.AccessDenied>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji została już przyłączona lub Operacja łączenia jest obecnie w toku.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> Został usunięty.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do gniazda.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveFromGroup">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveFromGroup (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveFromGroup(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveFromGroup (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveFromGroup(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceiveFromGroup : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpAnySourceMulticastClient.BeginReceiveFromGroup (buffer, offset, count, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Bufor do przechowywania odebranych danych.</param>
        <param name="offset">Przesunięcie w bajtach od początku <paramref name="buffer" /> lokalizacji, w której powinny być przechowywane dane.</param>
        <param name="count">Maksymalna liczba bajtów do odbierania i przechowywania w <paramref name="buffer" />.</param>
        <param name="callback">Metoda wywołania zwrotnego do wywołania po zakończeniu operacji.</param>
        <param name="state">Opcjonalne informacje o stanie przekazane do <paramref name="callback" /> metody dla tej operacji.</param>
        <summary>Rozpoczyna operację otrzymywania pakietu z dołączonej grupy multiemisji i wywołuje określone wywołanie zwrotne, gdy pakiet dotarł do grupy od dowolnego nadawcy.</summary>
        <returns><see cref="T:System.IAsyncResult" /> , Który odwołuje się do tej operacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup%2A> Metoda rozpoczyna operację otrzymywania pakietu UDP z dołączonej grupy multiemisji od dowolnego nadawcy. Port lokalny i adres grupy multiemisji są określone w <xref:System.Net.Sockets.UdpAnySourceMulticastClient.%23ctor%2A> konstruktorze. Klient multiemisji również musiał zakończyć dołączanie do grupy multiemisji.  
  
 Metoda określona w `callback` parametrze jest wywoływana po odebraniu pakietu.  
  
 Jeśli operacja odbierania nie powiedzie się synchronicznie, może wystąpić awaria gniazda, chociaż jest to nietypowe w przypadku protokołu UDP. Jeśli wystąpi awaria gniazda, <xref:System.Net.Sockets.SocketException> jest zgłaszany. Otrzymany błąd jest określony jako element członkowski <xref:System.Net.Sockets.SocketError> wyliczenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" />jest odwołaniem o wartości null (Nothing w Visual Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />jest mniejsze niż 0 
—lub— 
 <paramref name="offset" />jest większa niż długość <paramref name="buffer" />.  
  
—lub— 
 <paramref name="count" />jest mniejsze niż 0 
—lub— 
 <paramref name="offset" />a liczba jest większa niż długość <paramref name="buffer" />.</exception>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji nie została jeszcze przyłączona.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> Został usunięty.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do gniazda.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendTo">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendTo (byte[] buffer, int offset, int count, System.Net.IPEndPoint remoteEndPoint, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendTo(unsigned int8[] buffer, int32 offset, int32 count, class System.Net.IPEndPoint remoteEndPoint, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendTo (buffer As Byte(), offset As Integer, count As Integer, remoteEndPoint As IPEndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendTo(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Net::IPEndPoint ^ remoteEndPoint, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendTo : byte[] * int * int * System.Net.IPEndPoint * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpAnySourceMulticastClient.BeginSendTo (buffer, offset, count, remoteEndPoint, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="remoteEndPoint" Type="System.Net.IPEndPoint" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Bufor zawierający dane do wysłania.</param>
        <param name="offset">Przesunięcie, w bajtach, od początku <paramref name="buffer" /> do odczytu danych do wysłania.</param>
        <param name="count">Liczba bajtów do wysłania z <paramref name="buffer" />.</param>
        <param name="remoteEndPoint">Zdalny punkt końcowy, do którego ma zostać wysłany pakiet.</param>
        <param name="callback">Metoda wywołania zwrotnego do wywołania po zakończeniu operacji.</param>
        <param name="state">Opcjonalne informacje o stanie przekazane do <paramref name="callback" /> metody dla tej operacji.</param>
        <summary>Rozpoczyna operację wysyłania pakietu emisji pojedynczej do określonego miejsca docelowego.</summary>
        <returns><see cref="T:System.IAsyncResult" /> , Który odwołuje się do tej operacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo%2A> Metoda rozpoczyna operację wysyłania pakietu UDP do dołączonej grupy multiemisji.  
  
 Klient musi zakończyć dołączanie do grupy multiemisji. Adres docelowy określony w `remoteEndPoint` parametrze musi już wysłać pakiet multiemisji do tego odbiorcy. Niektóre protokoły używają tych informacji do przekazywania sterowania przepływem, statystyk jakości usług lub komunikatów odzyskiwania.  
  
 Metoda określona w `callback` parametrze jest wywoływana po odebraniu pakietu.  
  
 Transmisja jest dozwolona tylko wtedy, gdy adres określony w `remoteEndPoint` parametrze już wysłał pakiet multiemisji do tego odbiorcy. Jeśli klient nie ma zezwolenia na dostęp, <xref:System.Net.Sockets.SocketException> jest zgłaszany przy użyciu. <xref:System.Net.Sockets.SocketError.AccessDenied>  
  
 Jeśli port docelowy określony w `remoteEndPoint` parametrze jest mniejszy niż 1 024 <xref:System.Net.Sockets.SocketException> , zostanie zgłoszony przy użyciu <xref:System.Net.Sockets.SocketError.AccessDenied>.  
  
 Jeśli operacja odbierania nie powiedzie się synchronicznie, może wystąpić awaria gniazda, chociaż jest to nietypowe w przypadku protokołu UDP. Jeśli wystąpi awaria gniazda, <xref:System.Net.Sockets.SocketException> jest zgłaszany. Otrzymany błąd jest określony jako element członkowski <xref:System.Net.Sockets.SocketError> wyliczenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" />jest odwołaniem o wartości null (Nothing w Visual Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />jest mniejsze niż 0 
—lub— 
 <paramref name="offset" />jest większa niż długość <paramref name="buffer" />.  
  
—lub— 
 <paramref name="count" />jest mniejsze niż 0 
—lub— 
 <paramref name="offset" />a liczba jest większa niż długość <paramref name="buffer" />.</exception>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji nie została jeszcze przyłączona.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> Został usunięty.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do gniazda.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendToGroup">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendToGroup (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendToGroup(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendToGroup (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendToGroup(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendToGroup : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpAnySourceMulticastClient.BeginSendToGroup (buffer, offset, count, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Bufor zawierający dane do wysłania.</param>
        <param name="offset">Przesunięcie, w bajtach, od początku <paramref name="buffer" /> do odczytu danych do wysłania.</param>
        <param name="count">Liczba bajtów do wysłania z <paramref name="buffer" />.</param>
        <param name="callback">Metoda wywołania zwrotnego do wywołania po zakończeniu operacji.</param>
        <param name="state">Opcjonalne informacje o stanie przekazane do <paramref name="callback" /> metody dla tej operacji.</param>
        <summary>Rozpoczyna operację wysyłania pakietu do dołączonej grupy multiemisji i wywołuje określone wywołanie zwrotne, gdy pakiet został wysłany do grupy.</summary>
        <returns><see cref="T:System.IAsyncResult" /> , Który odwołuje się do tej operacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup%2A> Metoda rozpoczyna operację wysyłania pakietu UDP do dołączonej grupy multiemisji.  
  
 Klient musi zakończyć dołączanie do grupy multiemisji.  
  
 Metoda określona w `callback` parametrze jest wywoływana po odebraniu pakietu.  
  
 Jeśli operacja odbierania nie powiedzie się synchronicznie, może wystąpić awaria gniazda, chociaż jest to nietypowe w przypadku protokołu UDP. Jeśli wystąpi awaria gniazda, <xref:System.Net.Sockets.SocketException> jest zgłaszany. Otrzymany błąd jest określony jako element członkowski <xref:System.Net.Sockets.SocketError> wyliczenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" />jest odwołaniem o wartości null (Nothing w Visual Basic).</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />jest mniejsze niż 0 
—lub— 
 <paramref name="offset" />jest większa niż długość <paramref name="buffer" />.  
  
—lub— 
 <paramref name="count" />jest mniejsze niż 0 
—lub— 
 <paramref name="offset" />a liczba jest większa niż długość <paramref name="buffer" />.</exception>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji nie została jeszcze przyłączona.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> Został usunięty.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do gniazda.</exception>
      </Docs>
    </Member>
    <Member MemberName="BlockSource">
      <MemberSignature Language="C#" Value="public void BlockSource (System.Net.IPAddress sourceAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BlockSource(class System.Net.IPAddress sourceAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BlockSource (sourceAddress As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BlockSource(System::Net::IPAddress ^ sourceAddress);" />
      <MemberSignature Language="F#" Value="member this.BlockSource : System.Net.IPAddress -&gt; unit" Usage="udpAnySourceMulticastClient.BlockSource sourceAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceAddress" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="sourceAddress">Adres źródła do zablokowania.</param>
        <summary>Blokuje źródło, tak aby pakiety multiemisji pochodzące od niego nie były już odbierane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource%2A> Metoda blokuje odbieranie pakietów multiemisji pochodzących z określonego adresu źródłowego. Klient musi zakończyć dołączanie do grupy multiemisji.  
  
 Parametr może być adresem IPv6 lub IPv4, `sourceAddress` ale parametr musi być zgodny z rodziną adresów grupy multiemisji przyłączonej do klienta. `sourceAddress`  
  
 Metoda określona w `callback` parametrze jest wywoływana po odebraniu pakietu.  
  
 Jeśli wystąpi awaria gniazda podczas wykonywania operacji blokowania źródła, <xref:System.Net.Sockets.SocketException> jest zgłaszany. Otrzymany błąd jest określony jako element członkowski <xref:System.Net.Sockets.SocketError> wyliczenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji nie została jeszcze przyłączona.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> Został usunięty.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do gniazda.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="udpAnySourceMulticastClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pozostawia grupę multiemisji i zwalnia wszystkie zasoby używane przez bieżące wystąpienie <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> klasy i <see cref="T:System.Net.Sockets.Socket" />bazowe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.Net.Sockets.UdpAnySourceMulticastClient.Dispose%2A> po zakończeniu korzystania z <xref:System.Net.Sockets.UdpAnySourceMulticastClient>. Metoda Dispose Pozostawia <xref:System.Net.Sockets.UdpAnySourceMulticastClient> w stanie niezdatnym do użytku. Po wywołaniu <xref:System.Net.Sockets.UdpAnySourceMulticastClient.Dispose%2A>należy wydać wszystkie odwołania <xref:System.Net.Sockets.UdpAnySourceMulticastClient> do, aby moduł wyrzucania elementów bezużytecznych mógł odwoływać pamięć <xref:System.Net.Sockets.UdpAnySourceMulticastClient> , którą zajmował.  
  
 Zawsze wywołuj <xref:System.Net.Sockets.UdpAnySourceMulticastClient.Dispose%2A> przed wydaniem ostatniego odwołania <xref:System.Net.Sockets.UdpAnySourceMulticastClient>do. W przeciwnym razie używane zasoby nie zostaną zwolnione do momentu wywołania <xref:System.Net.Sockets.UdpAnySourceMulticastClient> <xref:System.Object.Finalize%2A> metody obiektu przez moduł zbierający elementy bezużyteczne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndJoinGroup">
      <MemberSignature Language="C#" Value="public void EndJoinGroup (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndJoinGroup(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.EndJoinGroup(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndJoinGroup (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndJoinGroup(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndJoinGroup : IAsyncResult -&gt; unit" Usage="udpAnySourceMulticastClient.EndJoinGroup result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Wynik asynchronicznej operacji dołączania.</param>
        <summary>Kończy operację dołączania asynchronicznej grupy do grupy multiemisji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndJoinGroup%2A> Metoda wykonuje asynchroniczne powiązanie z operacją Socket i Join z grupą multiemisji.  
  
 Jeśli jest to wymagane przez środowisko uruchomieniowe, <xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndJoinGroup%2A> Metoda wykonuje także sprawdzanie zasad, aby sprawdzić, czy klient może uzyskać dostęp do grupy multiemisji. Jeśli klient nie ma zezwolenia na dostęp, <xref:System.Net.Sockets.SocketException> jest zgłaszany przy użyciu. <xref:System.Net.Sockets.SocketError.AccessDenied>  
  
 Jeśli wystąpi awaria gniazda podczas wykonywania operacji przyłączania do <xref:System.Net.Sockets.SocketException> grupy, jest zgłaszany. Otrzymany błąd jest określony jako element członkowski <xref:System.Net.Sockets.SocketError> wyliczenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="result" />jest odwołaniem o wartości null (Nothing w Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> Został usunięty.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do gniazda.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveFromGroup">
      <MemberSignature Language="C#" Value="public int EndReceiveFromGroup (IAsyncResult result, out System.Net.IPEndPoint source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveFromGroup(class System.IAsyncResult result, [out] class System.Net.IPEndPoint&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup(System.IAsyncResult,System.Net.IPEndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveFromGroup (result As IAsyncResult, ByRef source As IPEndPoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveFromGroup(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::Net::IPEndPoint ^ % source);" />
      <MemberSignature Language="F#" Value="member this.EndReceiveFromGroup : IAsyncResult *  -&gt; int" Usage="udpAnySourceMulticastClient.EndReceiveFromGroup (result, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="source" Type="System.Net.IPEndPoint" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">Wynik asynchronicznej operacji odbierania.</param>
        <param name="source">Źródłowy punkt końcowy, z którego został odebrany pakiet.</param>
        <summary>Kończy asynchroniczne operacje odbierania pakietu z dołączonej grupy multiemisji i udostępnia otrzymane informacje.</summary>
        <returns>Długość (w bajtach) komunikatu przechowywanego w parametrze buforu przekazaną do <see cref="M:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> metody.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup%2A> Metoda wykonuje asynchroniczną operację, aby odebrać pakiet z grupy multiemisji.  
  
 Jeśli wystąpi awaria gniazda podczas wykonywania operacji odbierania, <xref:System.Net.Sockets.SocketException> jest zgłaszany. Otrzymany błąd jest określony jako element członkowski <xref:System.Net.Sockets.SocketError> wyliczenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="result" />jest odwołaniem o wartości null (Nothing w Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji nie została jeszcze przyłączona.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> Został usunięty.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do gniazda.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndSendTo">
      <MemberSignature Language="C#" Value="public void EndSendTo (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSendTo(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.EndSendTo(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSendTo (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSendTo(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndSendTo : IAsyncResult -&gt; unit" Usage="udpAnySourceMulticastClient.EndSendTo result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Wynik asynchronicznej operacji wysyłania.</param>
        <summary>Wykonuje operację wysyłania pakietu emisji pojedynczej do określonego miejsca docelowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndSendTo%2A> Metoda wykonuje operację asynchroniczną w celu wysłania pakietu do określonego adresu docelowego.  
  
 Jeśli wystąpi awaria gniazda podczas wykonywania operacji odbierania, <xref:System.Net.Sockets.SocketException> jest zgłaszany. Otrzymany błąd jest określony jako element członkowski <xref:System.Net.Sockets.SocketError> wyliczenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="result" />jest odwołaniem o wartości null (Nothing w Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji nie została jeszcze przyłączona.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> Został usunięty.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do gniazda.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndSendToGroup">
      <MemberSignature Language="C#" Value="public void EndSendToGroup (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSendToGroup(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.EndSendToGroup(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSendToGroup (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSendToGroup(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndSendToGroup : IAsyncResult -&gt; unit" Usage="udpAnySourceMulticastClient.EndSendToGroup result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Wynik asynchronicznej operacji wysyłania.</param>
        <summary>Wykonuje operację wysyłania pakietu do grupy multiemisji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndSendToGroup%2A> Metoda wykonuje operację asynchroniczną w celu wysłania pakietu do grupy multiemisji.  
  
 Jeśli wystąpi awaria gniazda podczas wykonywania operacji odbierania, <xref:System.Net.Sockets.SocketException> jest zgłaszany. Otrzymany błąd jest określony jako element członkowski <xref:System.Net.Sockets.SocketError> wyliczenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="result" />jest odwołaniem o wartości null (Nothing w Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji nie została jeszcze przyłączona.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> Został usunięty.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do gniazda.</exception>
      </Docs>
    </Member>
    <Member MemberName="MulticastLoopback">
      <MemberSignature Language="C#" Value="public bool MulticastLoopback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MulticastLoopback" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpAnySourceMulticastClient.MulticastLoopback" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastLoopback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MulticastLoopback { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MulticastLoopback : bool with get, set" Usage="System.Net.Sockets.UdpAnySourceMulticastClient.MulticastLoopback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy wychodzące pakiety multiemisji są dostarczane do aplikacji wysyłającej.</summary>
        <value>Zwraca <see cref="T:System.Boolean" />wartość.  
  
Wartość wskazująca, czy pakiety wychodzące do grupy multiemisji są dostarczane do aplikacji wysyłającej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ruch multiemisji to skalowalna Metoda komunikacji wiele-do-wielu w Internecie. Proces subskrybuje adres grupy multiemisji. Następnie wszystkie pakiety wysyłane przez subskrybowany proces do grupy multiemisji są odbierane przez każdy inny proces subskrybowany na adres multiemisji. Właściwość <xref:System.Net.Sockets.UdpAnySourceMulticastClient.MulticastLoopback%2A> określa, czy każdy proces na komputerze lokalnym odbiera pakiety multiemisji wysyłane przez tego klienta do grupy multiemisji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji nie została jeszcze przyłączona.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> Został usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveBufferSize : int with get, set" Usage="System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia rozmiar w bajtach w buforze <see cref="T:System.Net.Sockets.Socket" /> odbioru używanym do odbierania operacji multiemisji w tym <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> wystąpieniu.</summary>
        <value>Zwraca <see cref="T:System.Int32" />wartość.  
  
Rozmiar buforu odbioru (w bajtach).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość pobiera lub ustawia rozmiar (w bajtach) bufora <xref:System.Net.Sockets.Socket> odbioru użytego dla operacji odbioru multiemisji w tym <xref:System.Net.Sockets.UdpAnySourceMulticastClient> wystąpieniu. <xref:System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize%2A> Właściwość określa rozmiar buforu używany przez stos po nadejściu pakietu, ale aplikacja nie została jeszcze <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup%2A> wywołana. <xref:System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize%2A> Jeśli ten bufor zostanie wypełniony i zachowane pakiety, zanim aplikacja wywoła <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup%2A> metody i <xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup%2A> zostaną usunięte stare pakiety. Aplikacja nigdy nie będzie mogła odbierać starych pakietów, a zamiast tego odbiera nowsze pakiety, gdy wywoła <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup%2A> metodę.  
  
 Domyślny rozmiar buforu odbioru w systemie Windows to 8 192 bajtów.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Określony rozmiar buforu jest mniejszy niż 0.</exception>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji nie została jeszcze przyłączona.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> Został usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendBufferSize">
      <MemberSignature Language="C#" Value="public int SendBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property SendBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendBufferSize : int with get, set" Usage="System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia rozmiar (w bajtach) bufora <see cref="T:System.Net.Sockets.Socket" /> wysyłania użytego do wysyłania operacji multiemisji w tym <see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> wystąpieniu.</summary>
        <value>Zwraca <see cref="T:System.Int32" />wartość.  
  
Rozmiar buforu wysyłania w bajtach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość pobiera lub ustawia rozmiar (w bajtach) bufora wysyłania bazowego gniazda używanego na potrzeby operacji wysyłania multiemisji w tym <xref:System.Net.Sockets.UdpAnySourceMulticastClient> wystąpieniu. <xref:System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize%2A>  
  
 wywołania metod <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo%2A> <xref:System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize%2A> lub nie będą dłużej wywoływać wywołania zwrotnego w zależności od wartości właściwości, jeśli bufor wysyłania jest pełny. <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup%2A> <xref:System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize%2A> Właściwość kontroluje tylko, czy bufor użytkownika pozostaje zablokowany w pamięci fizycznej do momentu zakończenia wysyłania.  
  
 Domyślny rozmiar buforu wysyłania w systemie Windows to 8 192 bajtów.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Określony rozmiar buforu jest mniejszy niż 0.</exception>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji nie została jeszcze przyłączona.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> Został usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="UnblockSource">
      <MemberSignature Language="C#" Value="public void UnblockSource (System.Net.IPAddress sourceAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnblockSource(class System.Net.IPAddress sourceAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpAnySourceMulticastClient.UnblockSource(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnblockSource (sourceAddress As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnblockSource(System::Net::IPAddress ^ sourceAddress);" />
      <MemberSignature Language="F#" Value="member this.UnblockSource : System.Net.IPAddress -&gt; unit" Usage="udpAnySourceMulticastClient.UnblockSource sourceAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceAddress" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="sourceAddress">Adres źródła do odblokowania.</param>
        <summary>Odblokowuje źródło, które zostało wcześniej zablokowane przez wywołanie <see cref="M:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource(System.Net.IPAddress)" /> metody, aby można było odbierać pakiety multiemisji pochodzące z tego elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpAnySourceMulticastClient.UnblockSource%2A> Metoda odblokowuje pakiety multiemisji pochodzące z określonego adresu źródłowego, aby mogły zostać odebrane. Określony adres źródłowy musi być wcześniej zablokowany przez wywołanie <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource%2A> metody.  
  
 Klient musi zakończyć dołączanie do grupy multiemisji.  
  
 `sourceAddress` Parametr może być adresem multiemisji IPv6 lub IPv4.  
  
 Jeśli określony adres źródłowy `sourceAddress` w parametrze nie został poprzednio zablokowany przez wywołanie <xref:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource%2A> metody, <xref:System.Net.Sockets.SocketException> jest zgłaszany przy użyciu <xref:System.Net.Sockets.SocketError.AddressNotAvailable>.  
  
 Jeśli wystąpi awaria gniazda podczas wykonywania operacji odblokowywania źródła, <xref:System.Net.Sockets.SocketException> jest zgłaszany. Otrzymany błąd jest określony jako element członkowski <xref:System.Net.Sockets.SocketError> wyliczenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Grupa multiemisji nie została jeszcze przyłączona.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpAnySourceMulticastClient" /> Został usunięty.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do gniazda.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
