<Type Name="NetworkStream" FullName="System.Net.Sockets.NetworkStream">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e25b958e300505ecd63457b934194015395e6345" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69072529" /></Metadata><TypeSignature Language="C#" Value="public class NetworkStream : System.IO.Stream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NetworkStream extends System.IO.Stream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.NetworkStream" />
  <TypeSignature Language="VB.NET" Value="Public Class NetworkStream&#xA;Inherits Stream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NetworkStream : System::IO::Stream" />
  <TypeSignature Language="F#" Value="type NetworkStream = class&#xA;    inherit Stream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Docs>
    <summary>Zapewnia źródłowy strumień danych dla dostępu do sieci.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa zawiera metody wysyłania i otrzymywania danych za pośrednictwem <xref:System.Net.Sockets.SocketType.Stream> gniazd w trybie blokowania. <xref:System.Net.Sockets.NetworkStream> Aby uzyskać więcej informacji na temat blokowania i nieblokowania <xref:System.Net.Sockets.Socket>s, zobacz [Używanie asynchronicznego gniazda klienta](~/docs/framework/network-programming/using-an-asynchronous-client-socket.md). Można użyć <xref:System.Net.Sockets.NetworkStream> klasy zarówno synchronicznego, jak i asynchronicznego transferu danych. Aby uzyskać więcej informacji na temat komunikacji synchronicznej i [](~/docs/framework/network-programming/sockets.md)asynchronicznej, zobacz Sockets.  
  
 Aby utworzyć <xref:System.Net.Sockets.NetworkStream>, należy podać połączenie <xref:System.Net.Sockets.Socket>. Możesz również określić, <xref:System.IO.FileAccess> <xref:System.Net.Sockets.NetworkStream> jakie uprawnienie ma <xref:System.Net.Sockets.Socket>w danym. Domyślnie zamknięcie <xref:System.Net.Sockets.NetworkStream> nie zamyka podanej <xref:System.Net.Sockets.Socket>. Jeśli chcesz <xref:System.Net.Sockets.NetworkStream> mieć uprawnienia do zamykania podanego <xref:System.Net.Sockets.Socket>elementu `ownsSocket` , musisz określić `true` wartość parametru.  
  
 Użyj metod <xref:System.Net.Sockets.NetworkStream.Read%2A> i dla prostego blokowania operacji we/wy pojedynczego wątku synchronicznego. <xref:System.Net.Sockets.NetworkStream.Write%2A> Jeśli chcesz przetwarzać operacje we/wy przy użyciu oddzielnych wątków, rozważ użycie <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> <xref:System.Net.Sockets.NetworkStream.EndRead%2A> metod <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> i lub <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> metod komunikacji.  
  
 Program <xref:System.Net.Sockets.NetworkStream> nie obsługuje losowego dostępu do strumienia danych sieciowych. Wartość <xref:System.Net.Sockets.NetworkStream.CanSeek%2A> właściwości, która wskazuje, czy strumień obsługuje wyszukiwanie, jest zawsze `false`; odczytywanie <xref:System.Net.Sockets.NetworkStream.Position%2A> właściwości <xref:System.Net.Sockets.NetworkStream.Seek%2A> , odczytywanie <xref:System.Net.Sockets.NetworkStream.Length%2A> właściwości lub wywoływanie metody spowoduje zgłoszenie <xref:System.NotSupportedException>.  
  
 Operacje odczytu i zapisu mogą być wykonywane jednocześnie w wystąpieniu <xref:System.Net.Sockets.NetworkStream> klasy bez konieczności synchronizacji. O ile istnieje jeden unikatowy wątek dla operacji zapisu i jeden unikatowy wątek dla operacji odczytu, nie będzie żadnych zakłóceń między wątkami odczytu i zapisu, a synchronizacja nie jest wymagana.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje sposób tworzenia <xref:System.Net.Sockets.NetworkStream> z połączonego <xref:System.Net.Sockets.SocketType.Stream> <xref:System.Net.Sockets.Socket> i wykonywania podstawowych operacji we/wy blokowania synchronicznego.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy nowe wystąpienie <see cref="T:System.Net.Sockets.NetworkStream" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.NetworkStream : System.Net.Sockets.Socket -&gt; System.Net.Sockets.NetworkStream" Usage="new System.Net.Sockets.NetworkStream socket" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
      </Parameters>
      <Docs>
        <param name="socket"><see cref="T:System.Net.Sockets.Socket" /> ,<see cref="T:System.Net.Sockets.NetworkStream" /> Która będzie używana do wysyłania i odbierania danych.</param>
        <summary>Tworzy nowe wystąpienie <see cref="T:System.Net.Sockets.NetworkStream" /> klasy dla określonego <see cref="T:System.Net.Sockets.Socket" />elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest tworzony z dostępem do odczytu/zapisu do określonego <xref:System.Net.Sockets.Socket>. <xref:System.Net.Sockets.NetworkStream> Nie jest własnością źródłową <xref:System.Net.Sockets.Socket>, więc wywołanie <xref:System.Net.Sockets.NetworkStream.Close%2A> metody nie zamknie <xref:System.Net.Sockets.Socket>. <xref:System.Net.Sockets.NetworkStream>  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje sposób tworzenia <xref:System.Net.Sockets.NetworkStream> <xref:System.Net.Sockets.Socket>z.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="socket" /></exception>
        <exception cref="T:System.IO.IOException"><paramref name="socket" /> Parametr nie jest połączony.  
  
—lub— 
<see cref="P:System.Net.Sockets.Socket.SocketType" /> Właściwość parametru<paramref name="socket" /> nie<see cref="F:System.Net.Sockets.SocketType.Stream" />jest.  
  
—lub— 
<paramref name="socket" /> Parametr jest w stanie niezablokowanym.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
        <related type="Article" href="~/docs/framework/network-programming/using-streams-on-the-network.md">Stosowanie strumieni w sieci</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket, bool ownsSocket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket, bool ownsSocket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket, bool ownsSocket);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.NetworkStream : System.Net.Sockets.Socket * bool -&gt; System.Net.Sockets.NetworkStream" Usage="new System.Net.Sockets.NetworkStream (socket, ownsSocket)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
        <Parameter Name="ownsSocket" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="socket"><see cref="T:System.Net.Sockets.Socket" /> ,<see cref="T:System.Net.Sockets.NetworkStream" /> Która będzie używana do wysyłania i odbierania danych.</param>
        <param name="ownsSocket">Ustaw na <see cref="T:System.Net.Sockets.Socket" />, <see cref="T:System.Net.Sockets.NetworkStream" /> Abywskazać,żeprzejdzienawłasność;<see langword="false" />wprzeciwnymrazie. <see langword="true" /></param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Net.Sockets.NetworkStream" /> klasy dla określonego <see cref="T:System.Net.Sockets.Socket" /> z określonym <see cref="T:System.Net.Sockets.Socket" /> własnością.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest tworzony z dostępem do odczytu/zapisu do określonego <xref:System.Net.Sockets.Socket>. <xref:System.Net.Sockets.NetworkStream> Jeśli `ownsSocket` wartość <xref:System.Net.Sockets.Socket>parametru `true`jest, <xref:System.Net.Sockets.NetworkStream> przejmowanie <xref:System.Net.Sockets.Socket> na<xref:System.Net.Sockets.NetworkStream.Close%2A> własność bazowe i wywołanie metody również zamyka bazowe.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Net.Sockets.NetworkStream> z własnością. <xref:System.Net.Sockets.Socket>  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="socket" /></exception>
        <exception cref="T:System.IO.IOException"><paramref name="socket" /> Parametr nie jest połączony.  
  
—lub— 
wartość <see cref="P:System.Net.Sockets.Socket.SocketType" /> właściwości <paramref name="socket" /> parametru nie<see cref="F:System.Net.Sockets.SocketType.Stream" />jest.  
  
—lub— 
<paramref name="socket" /> parametr jest w stanie niezablokowanym.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket, System::IO::FileAccess access);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.NetworkStream : System.Net.Sockets.Socket * System.IO.FileAccess -&gt; System.Net.Sockets.NetworkStream" Usage="new System.Net.Sockets.NetworkStream (socket, access)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="access" Type="System.IO.FileAccess" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="socket"><see cref="T:System.Net.Sockets.Socket" /> ,<see cref="T:System.Net.Sockets.NetworkStream" /> Która będzie używana do wysyłania i odbierania danych.</param>
        <param name="access">Bitowa kombinacja <see cref="T:System.IO.FileAccess" /> wartości, które określają typ dostępu podanego <see cref="T:System.Net.Sockets.NetworkStream" /> w danym miejscu <see cref="T:System.Net.Sockets.Socket" />.</param>
        <summary>Tworzy nowe wystąpienie <see cref="T:System.Net.Sockets.NetworkStream" /> klasy dla określonego <see cref="T:System.Net.Sockets.Socket" /> z określonymi prawami dostępu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest tworzony z określonym dostępem do określonego <xref:System.Net.Sockets.Socket>. <xref:System.Net.Sockets.NetworkStream> Za pomocą tego konstruktora, <xref:System.Net.Sockets.NetworkStream> nie należy do podstawowego <xref:System.Net.Sockets.Socket>, dlatego wywołanie <xref:System.Net.Sockets.NetworkStream.Close%2A> metody nie zamyka bazowego <xref:System.Net.Sockets.Socket>.  
  
 Parametr ustawia właściwości<xref:System.Net.Sockets.NetworkStream.CanWrite%2A>i. <xref:System.Net.Sockets.NetworkStream.CanRead%2A> `access` <xref:System.Net.Sockets.NetworkStream> Jeśli określisz <xref:System.IO.FileAccess.Write>, <xref:System.Net.Sockets.NetworkStream> zezwala na wywołania <xref:System.Net.Sockets.NetworkStream.Write%2A> metody. Jeśli określisz <xref:System.IO.FileAccess.Read>, <xref:System.Net.Sockets.NetworkStream> zezwala na wywołania <xref:System.Net.Sockets.NetworkStream.Read%2A> metody. Jeśli określisz <xref:System.IO.FileAccess.ReadWrite>, oba wywołania metod są dozwolone.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Net.Sockets.NetworkStream> z możliwością odczytu i zapisu <xref:System.Net.Sockets.Socket>w.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#1)]
 [!code-vb[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="socket" /></exception>
        <exception cref="T:System.IO.IOException"><paramref name="socket" /> Parametr nie jest połączony.  
  
—lub— 
<see cref="P:System.Net.Sockets.Socket.SocketType" /> Właściwość parametru<paramref name="socket" /> nie<see cref="F:System.Net.Sockets.SocketType.Stream" />jest.  
  
—lub— 
<paramref name="socket" /> parametr jest w stanie niezablokowanym.</exception>
        <altmember cref="T:System.IO.FileAccess" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket, System.IO.FileAccess access, bool ownsSocket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket, valuetype System.IO.FileAccess access, bool ownsSocket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket, System::IO::FileAccess access, bool ownsSocket);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.NetworkStream : System.Net.Sockets.Socket * System.IO.FileAccess * bool -&gt; System.Net.Sockets.NetworkStream" Usage="new System.Net.Sockets.NetworkStream (socket, access, ownsSocket)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="access" Type="System.IO.FileAccess" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ownsSocket" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="socket"><see cref="T:System.Net.Sockets.Socket" /> ,<see cref="T:System.Net.Sockets.NetworkStream" /> Która będzie używana do wysyłania i odbierania danych.</param>
        <param name="access">Bitowa kombinacja <see cref="T:System.IO.FileAccess" /> wartości, które określają typ dostępu nadanego <see cref="T:System.Net.Sockets.NetworkStream" /> dla <see cref="T:System.Net.Sockets.Socket" />danego elementu.</param>
        <param name="ownsSocket">Ustaw na <see cref="T:System.Net.Sockets.Socket" />, <see cref="T:System.Net.Sockets.NetworkStream" /> Abywskazać,żeprzejdzienawłasność;<see langword="false" />wprzeciwnymrazie. <see langword="true" /></param>
        <summary>Tworzy nowe wystąpienie <see cref="T:System.Net.Sockets.NetworkStream" /> klasy dla określonego <see cref="T:System.Net.Sockets.Socket" /> z określonymi prawami dostępu i określonym <see cref="T:System.Net.Sockets.Socket" /> własnością.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest tworzony z dostępem do odczytu/zapisu do określonego <xref:System.Net.Sockets.Socket>. <xref:System.Net.Sockets.NetworkStream> Jeśli `ownsSocket` wartość <xref:System.Net.Sockets.Socket>parametru `true`to, <xref:System.Net.Sockets.NetworkStream> <xref:System.Net.Sockets.Socket> przejmuje<xref:System.Net.Sockets.NetworkStream.Close%2A> własność źródłową i wywołanie metody również zamyka bazowe.  
  
 Parametr ustawia właściwości<xref:System.Net.Sockets.NetworkStream.CanWrite%2A>i. <xref:System.Net.Sockets.NetworkStream.CanRead%2A> `access` <xref:System.Net.Sockets.NetworkStream> Jeśli określisz <xref:System.IO.FileAccess.Write>, <xref:System.Net.Sockets.NetworkStream> zezwala na wywołania <xref:System.Net.Sockets.NetworkStream.Write%2A> metody. Jeśli określisz <xref:System.IO.FileAccess.Read>, <xref:System.Net.Sockets.NetworkStream> zezwala na wywołania <xref:System.Net.Sockets.NetworkStream.Read%2A> metody. Jeśli określisz <xref:System.IO.FileAccess.ReadWrite>, oba wywołania metod są dozwolone.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Net.Sockets.NetworkStream> z możliwością odczytu i zapisu <xref:System.Net.Sockets.Socket>w. Własność elementu <xref:System.Net.Sockets.Socket> jest przyznany do tego <xref:System.Net.Sockets.NetworkStream> przez określenie `true` dla `ownsSocket` parametru.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#1)]
 [!code-vb[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="socket" /></exception>
        <exception cref="T:System.IO.IOException"><paramref name="socket" /> Parametr nie jest połączony.  
  
—lub— 
<see cref="P:System.Net.Sockets.Socket.SocketType" /> Właściwość parametru<paramref name="socket" /> nie<see cref="F:System.Net.Sockets.SocketType.Stream" />jest.  
  
—lub— 
<paramref name="socket" /> Parametr jest w stanie niezablokowanym.</exception>
        <altmember cref="T:System.IO.FileAccess" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int size, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 size, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginRead (buffer As Byte(), offset As Integer, size As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.BeginRead : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="networkStream.BeginRead (buffer, offset, size, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica typu <see cref="T:System.Byte" /> będąca lokalizacją w pamięci do przechowywania danych odczytanych <see cref="T:System.Net.Sockets.NetworkStream" />z.</param>
        <param name="offset">Lokalizacja w, <paramref name="buffer" /> w której rozpocznie się przechowywanie danych.</param>
        <param name="size">Liczba bajtów do odczytania z <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <param name="callback">Delegat, który jest wykonywany po <see cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> zakończeniu. <see cref="T:System.AsyncCallback" /></param>
        <param name="state">Obiekt, który zawiera dodatkowe dane zdefiniowane przez użytkownika.</param>
        <summary>Rozpoczyna odczyt asynchroniczny z <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <returns><see cref="T:System.IAsyncResult" /> Reprezentuje wywołanie asynchroniczne.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> Metoda uruchamia asynchroniczne odczytywanie danych z przychodzących buforów sieciowych. <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> Wywołanie metody daje możliwość odbierania danych w osobnym wątku wykonania.  
  
 Należy utworzyć metodę wywołania zwrotnego implementującą <xref:System.AsyncCallback> delegata i przekazać jej nazwę <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> do metody. Co najmniej minimalny `state` parametr musi <xref:System.Net.Sockets.NetworkStream>zawierać. Ponieważ chcesz uzyskać dane odebrane w ramach metody wywołania zwrotnego, należy utworzyć małą klasę lub strukturę do przechowywania buforu odczytu i innych przydatnych informacji. Przekaż strukturę lub wystąpienie klasy do <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> metody `state` za pomocą parametru.  
  
 Metoda wywołania zwrotnego powinna wywołać <xref:System.Net.Sockets.NetworkStream.EndRead%2A> metodę. Gdy aplikacja jest wywoływana <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>, system będzie czekać na odebranie danych lub wystąpi błąd, a następnie system użyje oddzielnego wątku do wykonania określonej metody wywołania zwrotnego i <xref:System.Net.Sockets.NetworkStream.EndRead%2A> zablokuje do momentu podania <xref:System.Net.Sockets.NetworkStream> podanych odczytów dane lub zgłasza wyjątek. Jeśli chcesz, aby oryginalny wątek blokował po wywołaniu <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> metody, <xref:System.Threading.WaitHandle.WaitOne%2A> Użyj metody. Wywołaj <xref:System.Threading.EventWaitHandle.Set%2A> metodę wywołania zwrotnego, gdy chcesz kontynuować wykonywanie oryginalnego wątku. Aby uzyskać dodatkowe informacje na temat pisania metod wywołania zwrotnego, zobacz [kierowanie delegata jako metody wywołania zwrotnego](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).  
  
 Metoda odczytuje tyle danych, ile jest dostępnych, do liczby bajtów określonej `size` przez parametr. <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>  
  
> [!NOTE]
>  Jeśli zostanie wyświetlony komunikat <xref:System.IO.IOException>, <xref:System.Exception.InnerException%2A> Sprawdź właściwość, aby określić, czy został <xref:System.Net.Sockets.SocketException>on spowodowany przez. Jeśli tak, użyj <xref:System.Net.Sockets.SocketException.ErrorCode%2A> właściwości, aby uzyskać określony kod błędu i zapoznaj się z dokumentacją [kodu błędu interfejsu API Windows Sockets w wersji 2](/windows/desktop/winsock/windows-sockets-error-codes-2) , aby uzyskać szczegółowy opis błędu.  
  
 Operacje odczytu i zapisu mogą być wykonywane jednocześnie w wystąpieniu <xref:System.Net.Sockets.NetworkStream> klasy bez konieczności synchronizacji. O ile istnieje jeden unikatowy wątek dla operacji zapisu i jeden unikatowy wątek dla operacji odczytu, nie będzie żadnych zakłóceń między wątkami odczytu i zapisu, a synchronizacja nie jest wymagana.  
  
   
  
## Examples  
 Poniższy przykład kodu używa <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> do odczytywania danych asynchronicznie ze strumienia sieciowego. Metoda implementuje delegata i jest wywoływana przez system po <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> powrocie. <xref:System.AsyncCallback> `myReadCallBack`  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#3)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#3)]
 [!code-vb[NetworkStream_Async_SendAndReceive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="buffer" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> Parametr jest mniejszy niż 0.  
  
—lub— 
Parametr jest większy niż długość <paramref name="buffer" /> parametr. <paramref name="offset" />  
  
—lub— 
Wartość <paramref name="size" /> jest mniejsza od 0.  
  
—lub— 
Jest większa niż <paramref name="buffer" /> Długość<paramref name="offset" />minuswartościparametru. <paramref name="size" /></exception>
        <exception cref="T:System.IO.IOException">Podstawowy <see cref="T:System.Net.Sockets.Socket" /> jest zamknięty.  
  
—lub— 
Wystąpił błąd podczas odczytu z sieci.  
  
—lub— 
Wystąpił błąd podczas uzyskiwania dostępu do gniazda.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.NetworkStream" /> Jest zamknięty.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int size, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 size, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginWrite (buffer As Byte(), offset As Integer, size As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.BeginWrite : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="networkStream.BeginWrite (buffer, offset, size, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica typu <see cref="T:System.Byte" /> , która zawiera dane do zapisu <see cref="T:System.Net.Sockets.NetworkStream" />w.</param>
        <param name="offset">Lokalizacja w <paramref name="buffer" /> , aby rozpocząć wysyłanie danych.</param>
        <param name="size">Liczba bajtów do zapisu <see cref="T:System.Net.Sockets.NetworkStream" />w.</param>
        <param name="callback">Delegat, który jest wykonywany po <see cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> zakończeniu. <see cref="T:System.AsyncCallback" /></param>
        <param name="state">Obiekt, który zawiera dodatkowe dane zdefiniowane przez użytkownika.</param>
        <summary>Rozpoczyna asynchroniczny zapis do strumienia.</summary>
        <returns><see cref="T:System.IAsyncResult" /> Reprezentuje wywołanie asynchroniczne.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> Metoda uruchamia asynchroniczną operację wysyłania do hosta zdalnego. <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> Wywołanie metody daje możliwość wysyłania danych w osobnym wątku wykonania.  
  
 Należy utworzyć metodę wywołania zwrotnego implementującą <xref:System.AsyncCallback> delegata i przekazać jej nazwę <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> do metody. Co najmniej minimalny `state` parametr musi <xref:System.Net.Sockets.NetworkStream>zawierać. Jeśli wywołanie zwrotne wymaga więcej informacji, można utworzyć małą klasę lub strukturę w celu przechowywania <xref:System.Net.Sockets.NetworkStream> i innych wymaganych informacji. Przekaż strukturę lub wystąpienie klasy do <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> metody `state` za pomocą parametru.  
  
 Metoda wywołania zwrotnego powinna implementować <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> metodę. Gdy aplikacja jest wywoływana <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>, system używa oddzielnego wątku do wykonywania określonej metody wywołania zwrotnego i <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> blokuje się do momentu <xref:System.Net.Sockets.NetworkStream> wysłania żądania lub odebrania wyjątku przez wysyłaną liczbę bajtów. Jeśli chcesz, aby oryginalny wątek blokował po wywołaniu <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> metody, <xref:System.Threading.WaitHandle.WaitOne%2A> Użyj metody. Wywołaj <xref:System.Threading.EventWaitHandle.Set%2A> metodę wywołania zwrotnego, gdy chcesz kontynuować wykonywanie oryginalnego wątku. Aby uzyskać dodatkowe informacje na temat pisania metod wywołania zwrotnego, zobacz [kierowanie delegata jako metody wywołania zwrotnego](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).  
  
> [!NOTE]
>  Jeśli zostanie wyświetlony komunikat <xref:System.IO.IOException>, <xref:System.Exception.InnerException%2A> Sprawdź właściwość, aby określić, czy został <xref:System.Net.Sockets.SocketException>on spowodowany przez. Jeśli tak, użyj <xref:System.Net.Sockets.SocketException.ErrorCode%2A> właściwości, aby uzyskać określony kod błędu i zapoznaj się z dokumentacją [kodu błędu interfejsu API Windows Sockets w wersji 2](/windows/desktop/winsock/windows-sockets-error-codes-2) , aby uzyskać szczegółowy opis błędu.  
  
 Operacje odczytu i zapisu mogą być wykonywane jednocześnie w wystąpieniu <xref:System.Net.Sockets.NetworkStream> klasy bez konieczności synchronizacji. O ile istnieje jeden unikatowy wątek dla operacji zapisu i jeden unikatowy wątek dla operacji odczytu, nie będzie żadnych zakłóceń między wątkami odczytu i zapisu, a synchronizacja nie jest wymagana.  
  
   
  
## Examples  
 Poniższy przykład kodu używa <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> do zapisywania danych asynchronicznie w strumieniu sieciowym. Metoda implementuje delegata i jest wywoływana przez system po <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> powrocie. <xref:System.AsyncCallback> `myWriteCallBack`  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Async_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="buffer" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> Parametr jest mniejszy niż 0.  
  
—lub— 
Parametr jest większy niż <paramref name="buffer" />długość. <paramref name="offset" />  
  
—lub— 
<paramref name="size" /> Parametr jest mniejszy niż 0.  
  
—lub— 
Wartość parametru jest większa niż <paramref name="buffer" /> długość <paramref name="offset" /> minus wartości parametru. <paramref name="size" /></exception>
        <exception cref="T:System.IO.IOException">Podstawowy <see cref="T:System.Net.Sockets.Socket" /> jest zamknięty.  
  
—lub— 
Wystąpił błąd podczas zapisywania w sieci.  
  
—lub— 
Wystąpił błąd podczas uzyskiwania dostępu do gniazda.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.NetworkStream" /> Jest zamknięty.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Net.Sockets.NetworkStream.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Net.Sockets.NetworkStream" /> obsługuje odczytywanie.</summary>
        <value><see langword="true" />Jeśli dane można odczytywać ze strumienia; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Net.Sockets.NetworkStream.CanRead%2A> jest `true` ,<xref:System.Net.Sockets.NetworkStream>umożliwia wywoływanie metody.<xref:System.Net.Sockets.NetworkStream.Read%2A> Podaj odpowiednią <xref:System.IO.FileAccess> wartość wyliczaną w konstruktorze, aby ustawić czytelność i writability <xref:System.Net.Sockets.NetworkStream>. Właściwość jest ustawiana <xref:System.Net.Sockets.NetworkStream> po zainicjowaniu. <xref:System.Net.Sockets.NetworkStream.CanRead%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu sprawdza <xref:System.Net.Sockets.NetworkStream.CanRead%2A> <xref:System.Net.Sockets.NetworkStream> , czy można odczytać. Następnie wykonuje operację odczytu na <xref:System.Net.Sockets.NetworkStream>.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.Readable" />
        <altmember cref="T:System.IO.FileAccess" />
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Net.Sockets.NetworkStream.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy strumień obsługuje wyszukiwanie. Ta właściwość nie jest obecnie obsługiwana. Ta właściwość zawsze zwraca <see langword="false" />wartość.</summary>
        <value><see langword="false" />we wszystkich przypadkach, aby wskazać <see cref="T:System.Net.Sockets.NetworkStream" /> , że nie można wyszukać określonej lokalizacji w strumieniu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanTimeout : bool" Usage="System.Net.Sockets.NetworkStream.CanTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, czy właściwości limitu czasu są <see cref="T:System.Net.Sockets.NetworkStream" />użyteczne dla.</summary>
        <value><see langword="true" />we wszystkich przypadkach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest obecna, ponieważ jest dziedziczona <xref:System.IO.Stream>po elemencie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Net.Sockets.NetworkStream.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Net.Sockets.NetworkStream" /> obsługuje pisać.</summary>
        <value><see langword="true" />Jeśli dane można zapisać <see cref="T:System.Net.Sockets.NetworkStream" />w; w przeciwnym razie,. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> jest `true` ,<xref:System.Net.Sockets.NetworkStream>umożliwia wywoływanie metody.<xref:System.Net.Sockets.NetworkStream.Write%2A> Podaj odpowiednią <xref:System.IO.FileAccess> wartość wyliczaną w konstruktorze, aby ustawić czytelność i writability <xref:System.Net.Sockets.NetworkStream>. Właściwość jest ustawiana <xref:System.Net.Sockets.NetworkStream> po zainicjowaniu. <xref:System.Net.Sockets.NetworkStream.CanWrite%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu sprawdza <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> , czy można go <xref:System.Net.Sockets.NetworkStream> zapisać. Następnie wykonuje operację zapisu na <xref:System.Net.Sockets.NetworkStream>.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#3)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#3)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.Writeable" />
        <altmember cref="T:System.IO.FileAccess" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="networkStream.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Net.Sockets.NetworkStream" />Zamyka.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Metoda zwalnia zasoby niezarządzane i zarządzane skojarzone <xref:System.Net.Sockets.NetworkStream>z. `Close` <xref:System.Net.Sockets.Socket>Jeśli jest <xref:System.Net.Sockets.NetworkStream> własnością źródłową, jest również zamknięty.

Jeśli skojarzono <xref:System.Net.Sockets.TcpClient>z, `Close` Metoda zamknie połączenie TCP, ale nie usunie skojarzonego <xref:System.Net.Sockets.TcpClient>elementu. <xref:System.Net.Sockets.NetworkStream>

## Examples  
Poniższy przykład kodu zamyka <xref:System.Net.Sockets.NetworkStream>.

```vb
' Example for closing the NetworkStream.
' Close the NetworkStream
myNetworkStream.Close()
```

```csharp
// Example for closing the NetworkStream.

// Close the NetworkStream
myNetworkStream.Close();
```

```cpp
// Example for closing the NetworkStream.
// Close the NetworkStream
myNetworkStream->Close();
```

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close(int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close (timeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close(int timeout);" />
      <MemberSignature Language="F#" Value="override this.Close : int -&gt; unit" Usage="networkStream.Close timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="timeout">32-bitowa liczba całkowita ze znakiem, która określa liczbę milisekund oczekiwania na wysłanie pozostałych danych przed zamknięciem.</param>
        <summary><see cref="T:System.Net.Sockets.NetworkStream" /> Zamyka po odczekaniu określonego czasu, aby zezwolić na wysyłanie danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda zwalnia zasoby niezarządzane i zarządzane skojarzone <xref:System.Net.Sockets.NetworkStream>z. <xref:System.Net.Sockets.NetworkStream.Close%2A> <xref:System.Net.Sockets.Socket>Jeśli jest <xref:System.Net.Sockets.NetworkStream> własnością źródłową, jest również zamknięty.  
  
 Jeśli skojarzono <xref:System.Net.Sockets.TcpClient>z, <xref:System.Net.Sockets.NetworkStream.Close%2A> Metoda zamknie połączenie TCP, ale nie usunie skojarzonego <xref:System.Net.Sockets.TcpClient>elementu. <xref:System.Net.Sockets.NetworkStream>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> Parametr jest mniejszy niż-1.</exception>
      </Docs>
    </Member>
    <Member MemberName="DataAvailable">
      <MemberSignature Language="C#" Value="public virtual bool DataAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DataAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.DataAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DataAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool DataAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.DataAvailable : bool" Usage="System.Net.Sockets.NetworkStream.DataAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy dane są dostępne <see cref="T:System.Net.Sockets.NetworkStream" /> do odczytu.</summary>
        <value><see langword="true" />Jeśli dane są dostępne w strumieniu, który ma zostać odczytany; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> , aby określić, czy dane są gotowe do odczytu. Jeśli <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> <xref:System.Net.Sockets.NetworkStream.Read%2A> jest `true`, wywołanie do zwraca natychmiast. Jeśli host zdalny zamknie lub zamknie połączenie, <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> może <xref:System.Net.Sockets.SocketException>zgłosić.  
  
   
  
## Examples  
 Poniższy przykład kodu odczytuje z <xref:System.Net.Sockets.NetworkStream> , tak długo, jak dane są dostępne.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.NetworkStream" /> Jest zamknięty.</exception>
        <exception cref="T:System.IO.IOException">Podstawowy <see cref="T:System.Net.Sockets.Socket" /> jest zamknięty.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Użyj właściwości, aby uzyskać określony kod błędu i zapoznaj się z dokumentacją dotyczącą <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">kodu błędu interfejsu API Windows Sockets w wersji 2</see> , aby uzyskać szczegółowy opis błędu. <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /></exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="networkStream.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" />Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> do zwolnienia tylko zasobów niezarządzanych.</param>
        <summary>Zwalnia niezarządzane zasoby używane przez <see cref="T:System.Net.Sockets.NetworkStream" /> program i opcjonalnie zwalnia zarządzane zasoby.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana przez metodę publiczną `Dispose` <xref:System.Object.Finalize%2A> i metodę. `Dispose`wywołuje metodę chronioną `Dispose(Boolean)` `disposing` z parametrem ustawionym `true`na. <xref:System.Object.Finalize%2A>wywołuje `Dispose` `false`z `disposing` ustawionym na.  
  
 Gdy parametr ma wartość `true`, ta metoda zwalnia wszystkie zasoby przechowywane przez wszystkie obiekty zarządzane, do <xref:System.Net.Sockets.NetworkStream> których odwołują się te odwołania. `disposing` Ta metoda wywołuje `Dispose` metodę każdego przywoływanego obiektu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" />może być wywoływana wiele razy przez inne obiekty. Podczas zastępowania <see langword="Dispose(Boolean)" />należy zachować ostrożność, aby nie odwoływać się do obiektów, które zostały wcześniej usunięte <see langword="Dispose" />w ramach wcześniejszego wywołania do. Aby uzyskać więcej informacji na temat sposobu <see langword="Dispose(Boolean)" />implementacji, zobacz [implementowanie metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
Aby uzyskać więcej informacji <see langword="Dispose" /> na <see cref="M:System.Object.Finalize" />temat i, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i [Zastępowanie metody Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</para></block>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndRead : IAsyncResult -&gt; int" Usage="networkStream.EndRead asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><see cref="T:System.IAsyncResult" /> Reprezentuje wywołanie asynchroniczne.</param>
        <summary>Obsługuje koniec odczytu asynchronicznego.</summary>
        <returns>Liczba bajtów odczytanych z <see cref="T:System.Net.Sockets.NetworkStream" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda kończy asynchroniczne operacje odczytu rozpoczęte <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> w metodzie. <xref:System.Net.Sockets.NetworkStream.EndRead%2A>  
  
 Przed wywołaniem <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>należy utworzyć metodę wywołania zwrotnego <xref:System.AsyncCallback> implementującą delegata. Ta metoda wywołania zwrotnego jest wykonywana w osobnym wątku i jest wywoływana przez system <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> po powrocie. Metoda wywołania zwrotnego musi akceptować <xref:System.IAsyncResult> zwracane <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> z metody jako parametr.  
  
 W ramach metody wywołania zwrotnego Wywołaj <xref:System.IAsyncResult.AsyncState%2A> Właściwość <xref:System.IAsyncResult> w celu uzyskania obiektu <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> stanu przekazaną do metody. Wyodrębnij odebranie <xref:System.Net.Sockets.NetworkStream> z tego obiektu stanu. Po uzyskaniu <xref:System.Net.Sockets.NetworkStream>należy <xref:System.Net.Sockets.NetworkStream.EndRead%2A> wywołać metodę, aby pomyślnie zakończyć operację odczytu i zwrócić liczbę odczytanych bajtów.  
  
 <xref:System.Net.Sockets.NetworkStream.EndRead%2A> Metoda blokuje dostęp do danych. Metoda odczytuje tyle danych, ile jest dostępnych do liczby bajtów określonych `size` w parametrze <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> metody. <xref:System.Net.Sockets.NetworkStream.EndRead%2A> Jeśli host zdalny zamknie <xref:System.Net.Sockets.Socket> połączenie, a wszystkie dostępne dane zostały odebrane, Metoda zostanie <xref:System.Net.Sockets.NetworkStream.EndRead%2A> natychmiast zakończona i zwróci zero bajtów.  
  
 Aby uzyskać odebrane dane, wywołaj <xref:System.IAsyncResult.AsyncState%2A> Właściwość <xref:System.IAsyncResult>i Wyodrębnij bufor zawarty w obiekcie stanu wyników.  
  
> [!NOTE]
>  Jeśli zostanie wyświetlony komunikat <xref:System.IO.IOException>, <xref:System.Exception.InnerException%2A> Sprawdź właściwość, aby określić, czy został <xref:System.Net.Sockets.SocketException>on spowodowany przez. Jeśli tak, użyj <xref:System.Net.Sockets.SocketException.ErrorCode%2A> właściwości, aby uzyskać określony kod błędu i zapoznaj się z dokumentacją [kodu błędu interfejsu API Windows Sockets w wersji 2](/windows/desktop/winsock/windows-sockets-error-codes-2) , aby uzyskać szczegółowy opis błędu.  
  
   
  
## Examples  
 W poniższym przykładzie `myReadCallback` kodu jest <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> dostarczany jako metoda wywołania zwrotnego. <xref:System.Net.Sockets.NetworkStream.EndRead%2A>jest zaimplementowany w `myReadCallback` programie, aby zakończyć asynchroniczne wywołanie odczytu uruchomione <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>przez.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#5)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#5)]
 [!code-vb[NetworkStream_Async_SendAndReceive#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Parametr ma wartość <see langword="null" />. <paramref name="asyncResult" /></exception>
        <exception cref="T:System.IO.IOException">Podstawowy <see cref="T:System.Net.Sockets.Socket" /> jest zamknięty.  
  
—lub— 
Wystąpił błąd podczas uzyskiwania dostępu do gniazda.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.NetworkStream" /> Jest zamknięty.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndWrite : IAsyncResult -&gt; unit" Usage="networkStream.EndWrite asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><see cref="T:System.IAsyncResult" /> Reprezentuje wywołanie asynchroniczne.</param>
        <summary>Obsługuje koniec zapisu asynchronicznego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.EndWrite%2A>kończy asynchroniczne operacje wysyłania rozpoczęte w <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>.  
  
 Przed wywołaniem <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>należy utworzyć metodę wywołania zwrotnego <xref:System.AsyncCallback> implementującą delegata. Ta metoda wywołania zwrotnego jest wykonywana w osobnym wątku i jest wywoływana przez system <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> po powrocie. Metoda wywołania zwrotnego musi akceptować <xref:System.IAsyncResult> zwracane <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> z metody jako parametr.  
  
 W metodzie wywołania zwrotnego Wywołaj <xref:System.IAsyncResult.AsyncState%2A> Właściwość `IAsyncResult` parametru, aby uzyskać <xref:System.Net.Sockets.NetworkStream>. Po uzyskaniu <xref:System.Net.Sockets.NetworkStream>można <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> wywołać metodę, aby pomyślnie zakończyć operację wysyłania i zwrócić liczbę wysłanych bajtów.  
  
 <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> Metoda blokuje do momentu wysłania żądanej liczby bajtów.  
  
> [!NOTE]
>  Jeśli zostanie wyświetlony komunikat <xref:System.IO.IOException>, <xref:System.Exception.InnerException%2A> Sprawdź właściwość, aby określić, czy został <xref:System.Net.Sockets.SocketException>on spowodowany przez. Jeśli tak, użyj <xref:System.Net.Sockets.SocketException.ErrorCode%2A> właściwości, aby uzyskać określony kod błędu i zapoznaj się z dokumentacją [kodu błędu interfejsu API Windows Sockets w wersji 2](/windows/desktop/winsock/windows-sockets-error-codes-2) , aby uzyskać szczegółowy opis błędu.  
  
   
  
## Examples  
 W poniższym przykładzie `myWriteCallback` kodu jest <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> dostarczany jako metoda wywołania zwrotnego. <xref:System.Net.Sockets.NetworkStream.EndWrite%2A>Program jest zaimplementowany `myWriteCallback` w programie, aby ukończyć asynchroniczne wywołanie zapisu <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>uruchomione przez.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Async_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="asyncResult" /></exception>
        <exception cref="T:System.IO.IOException">Podstawowy <see cref="T:System.Net.Sockets.Socket" /> jest zamknięty.  
  
—lub— 
Wystąpił błąd podczas zapisywania w sieci.  
  
—lub— 
Wystąpił błąd podczas uzyskiwania dostępu do gniazda.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.NetworkStream" /> Jest zamknięty.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NetworkStream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NetworkStream ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="networkStream.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie zasoby używane przez <see cref="T:System.Net.Sockets.NetworkStream" />program.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda przesłania <xref:System.Object.Finalize%2A?displayProperty=nameWithType>. Kod aplikacji nie powinien wywoływać tej metody; <xref:System.Object.Finalize%2A> metoda obiektu jest automatycznie wywoływana podczas wyrzucania elementów bezużytecznych, chyba że finalizacja przez moduł wyrzucania elementów bezużytecznych została wyłączona przez wywołanie <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> metody.  
  
 Aby uzyskać więcej informacji o korzystaniu z metody Finalize, zobacz [finalizowanie metod i destruktorów](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100)), Oczyszczanie zasobów niezarządzanych i zastępowanie [metody Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)). [](~/docs/standard/garbage-collection/unmanaged.md)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="networkStream.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Opróżnia dane ze strumienia. Ta metoda jest zarezerwowana do użytku w przyszłości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda implementuje metodę, jednak ponieważ <xref:System.Net.Sockets.NetworkStream> nie jest buforowana, nie ma wpływu na strumienie sieciowe. <xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType> <xref:System.Net.Sockets.NetworkStream.Flush%2A> <xref:System.Net.Sockets.NetworkStream.Flush%2A> Wywołanie metody nie zgłasza wyjątku.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="networkStream.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">Token anulowania służący do propagowania powiadomienia, że ta operacja powinna zostać anulowana.</param>
        <summary>Opróżnia dane ze strumienia jako operację asynchroniczną.</summary>
        <returns>Obiekt zadania reprezentujący operację asynchroniczną.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócony <xref:System.Threading.Tasks.Task> obiekt zostanie ukończony po opróżnieniu danych ze strumienia dla tego <xref:System.Net.Sockets.NetworkStream> wystąpienia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Net.Sockets.NetworkStream.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera długość danych dostępnych w strumieniu. Ta właściwość nie jest obecnie obsługiwana i zawsze zgłasza <see cref="T:System.NotSupportedException" />.</summary>
        <value>Długość danych dostępnych w strumieniu.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Użycie tej właściwości.</exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Net.Sockets.NetworkStream.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia bieżącą pozycję w strumieniu. Ta właściwość nie jest obecnie obsługiwana i zawsze zgłasza <see cref="T:System.NotSupportedException" />.</summary>
        <value>Bieżąca pozycja w strumieniu.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Użycie tej właściwości.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (Span&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(valuetype System.Span`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Read(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(Span&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="override this.Read : Span&lt;byte&gt; -&gt; int" Usage="networkStream.Read buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">Region pamięci służący do przechowywania danych odczytywanych z <see cref="T:System.Net.Sockets.NetworkStream" />programu.</param>
        <summary>Odczytuje dane z <see cref="T:System.Net.Sockets.NetworkStream" /> i zapisuje je do zakresu bajtów w pamięci.</summary>
        <returns>Liczba bajtów odczytanych z <see cref="T:System.Net.Sockets.NetworkStream" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda odczytuje tyle danych, ile jest dostępnych w `buffer` parametrze i zwraca liczbę pomyślnie odczytywanych bajtów.
  
> [!NOTE]
>  Sprawdź, czy <xref:System.Net.Sockets.NetworkStream> jest możliwy do odczytania przez <xref:System.Net.Sockets.NetworkStream.CanRead> wywołanie właściwości. W przypadku próby odczytu z programu <xref:System.Net.Sockets.NetworkStream> , który nie jest czytelny, zostanie wyświetlony komunikat. <xref:System.InvalidOperationException>  
  
> [!NOTE]
>  Jeśli zostanie wyświetlony komunikat <xref:System.IO.IOException>, <xref:System.Exception.InnerException> Sprawdź właściwość, aby określić, czy został <xref:System.Net.Sockets.SocketException>on spowodowany przez. Jeśli tak, użyj <xref:System.Net.Sockets.SocketException.ErrorCode> właściwości, aby uzyskać określony kod błędu i zapoznaj się z dokumentacją [kodu błędu interfejsu API Windows Sockets w wersji 2](/windows/desktop/winsock/windows-sockets-error-codes-2) , aby uzyskać szczegółowy opis błędu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> Program nie obsługuje odczytywania.</exception>
        <exception cref="T:System.IOException">Wystąpił błąd podczas uzyskiwania dostępu do gniazda.

—lub—

Wystąpił błąd podczas odczytywania z sieci.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.NetworkStream" /> Jest zamknięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read([out] unsigned int8[] buffer, int32 offset, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, size As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="networkStream.Read (buffer, offset, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica typu <see cref="T:System.Byte" /> będąca lokalizacją w pamięci do przechowywania danych odczytanych <see cref="T:System.Net.Sockets.NetworkStream" />z.</param>
        <param name="offset">Lokalizacja w, <paramref name="buffer" /> w której rozpocznie się przechowywanie danych.</param>
        <param name="size">Liczba bajtów do odczytania z <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <summary>Odczytuje dane z <see cref="T:System.Net.Sockets.NetworkStream" /> i zapisuje je w tablicy bajtów.</summary>
        <returns>Liczba bajtów odczytanych z <see cref="T:System.Net.Sockets.NetworkStream" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda odczytuje dane do `buffer` i zwraca liczbę pomyślnie odczytywanych bajtów. Operacja odczytuje tyle danych, ile jest dostępnych, do liczby bajtów określonej `size` przez parametr. `Read`
  
> [!NOTE]
>  Sprawdź, czy <xref:System.Net.Sockets.NetworkStream> jest możliwy do odczytania przez <xref:System.Net.Sockets.NetworkStream.CanRead> wywołanie właściwości. W przypadku próby odczytu z programu <xref:System.Net.Sockets.NetworkStream> , który nie jest czytelny, zostanie wyświetlony komunikat. <xref:System.InvalidOperationException>  
  
> [!NOTE]
>  Jeśli zostanie wyświetlony komunikat <xref:System.IO.IOException>, <xref:System.Exception.InnerException> Sprawdź właściwość, aby określić, czy został <xref:System.Net.Sockets.SocketException>on spowodowany przez. Jeśli tak, użyj <xref:System.Net.Sockets.SocketException.ErrorCode> właściwości, aby uzyskać określony kod błędu i zapoznaj się z dokumentacją [kodu błędu interfejsu API Windows Sockets w wersji 2](/windows/desktop/winsock/windows-sockets-error-codes-2) , aby uzyskać szczegółowy opis błędu.  
  
   
  
## Examples  
 Poniższy przykład kodu używa <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> do określenia, czy dane są dostępne do odczytu. Jeśli dane są dostępne, odczytuje z <xref:System.Net.Sockets.NetworkStream>.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />jest mniejsza niż 0.  
  
—lub— 
 <paramref name="offset" />jest większa niż długość <paramref name="buffer" />.  
  
—lub— 
 <paramref name="size" />jest mniejsza niż 0.  
  
—lub— 
 <paramref name="size" />jest większa niż długość <paramref name="buffer" /> znaku minus. <paramref name="offset" /></exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> Program nie obsługuje odczytywania.</exception>
        <exception cref="T:System.IOException">Wystąpił błąd podczas uzyskiwania dostępu do gniazda.

—lub—

Wystąpił błąd podczas odczytywania z sieci.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.NetworkStream" /> Jest zamknięty.</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.DataAvailable" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <related type="Article" href="~/docs/framework/network-programming/using-streams-on-the-network.md">Stosowanie strumieni w sieci</related>
      </Docs>
    </Member>
    <Member MemberName="Readable">
      <MemberSignature Language="C#" Value="protected bool Readable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Readable" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Readable" />
      <MemberSignature Language="VB.NET" Value="Protected Property Readable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Readable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Readable : bool with get, set" Usage="System.Net.Sockets.NetworkStream.Readable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy <see cref="T:System.Net.Sockets.NetworkStream" /> można odczytać.</summary>
        <value><see langword="true" />Aby wskazać, że <see cref="T:System.Net.Sockets.NetworkStream" /> może być odczytywany; <see langword="false" />w przeciwnym razie. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy utworzyć pochodną z <xref:System.Net.Sockets.NetworkStream> klasy, aby <xref:System.Net.Sockets.NetworkStream.Readable%2A> użyć właściwości. Jeśli <xref:System.Net.Sockets.NetworkStream.Readable%2A> jest `true` ,<xref:System.Net.Sockets.NetworkStream>umożliwia wywoływanie metody.<xref:System.Net.Sockets.NetworkStream.Read%2A> Można również określić, czy jest <xref:System.Net.Sockets.NetworkStream> możliwy do odczytania, sprawdzając Właściwość <xref:System.Net.Sockets.NetworkStream.CanRead%2A> dostępne publicznie.  
  
 Właściwość jest ustawiana <xref:System.Net.Sockets.NetworkStream> po zainicjowaniu. <xref:System.Net.Sockets.NetworkStream.Readable%2A>  
  
   
  
## Examples  
 W poniższym przykładzie kodu `CanCommunicate` Właściwość <xref:System.Net.Sockets.NetworkStream.Readable%2A> sprawdza właściwość, aby określić, <xref:System.Net.Sockets.NetworkStream> czy można odczytać.  
  
 [!code-cpp[NetworkStream_Protected_Members#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Protected_Members#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CS/source.cs#1)]
 [!code-vb[NetworkStream_Protected_Members#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Protected_Members/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.Writeable" />
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask&lt;int&gt; ReadAsync (Memory&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;int32&gt; ReadAsync(valuetype System.Memory`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.ReadAsync : Memory&lt;byte&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int&gt;" Usage="networkStream.ReadAsync (buffer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Memory&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">Bufor, w którym mają zostać zapisane dane.</param>
        <param name="cancellationToken">Token do monitorowania żądań anulowania.</param>
        <summary>Odczytuje dane z <see cref="T:System.Net.Sockets.NetworkStream" /> i zapisuje je w zakresie pamięci bajtowej jako operacja asynchroniczna.</summary>
        <returns><see cref="T:System.Threading.Tasks.ValueTask`1" /> Reprezentuje asynchroniczną operację odczytu. Wartość <see cref="P:System.Threading.Tasks.ValueTask`1.Result" /> właściwości zawiera łączną liczbę <paramref name="buffer" />odczytanych bajtów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
Ta metoda odczytuje tyle danych, ile jest dostępnych do `buffer` i zwraca liczbę pomyślnie odczytywanych bajtów.

> [!NOTE]
>  Sprawdź, czy <xref:System.Net.Sockets.NetworkStream> jest możliwy do odczytania przez <xref:System.Net.Sockets.NetworkStream.CanRead> wywołanie właściwości. W przypadku próby odczytu z programu <xref:System.Net.Sockets.NetworkStream> , który nie jest czytelny, zostanie wyświetlony komunikat. <xref:System.InvalidOperationException>  
  
> [!NOTE]
>  Jeśli zostanie wyświetlony komunikat <xref:System.IO.IOException>, <xref:System.Exception.InnerException> Sprawdź właściwość, aby określić, czy został <xref:System.Net.Sockets.SocketException>on spowodowany przez. Jeśli tak, użyj <xref:System.Net.Sockets.SocketException.ErrorCode> właściwości, aby uzyskać określony kod błędu i zapoznaj się z dokumentacją [kodu błędu interfejsu API Windows Sockets w wersji 2](/windows/desktop/winsock/windows-sockets-error-codes-2) , aby uzyskać szczegółowy opis błędu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> Program nie obsługuje odczytywania.</exception>
        <exception cref="T:System.IOException">Wystąpił błąd podczas uzyskiwania dostępu do gniazda.

—lub—

Wystąpił błąd podczas odczytywania z sieci.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.NetworkStream" /> Jest zamknięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int size, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;int&gt; ^ ReadAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ReadAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="networkStream.ReadAsync (buffer, offset, size, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer">Bufor, w którym mają zostać zapisane dane.</param>
        <param name="offset">Lokalizacja w, <paramref name="buffer" /> w której rozpocznie się przechowywanie danych.</param>
        <param name="size">Liczba bajtów do odczytania z <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <param name="cancellationToken">Token do monitorowania żądań anulowania.</param>
        <summary>Odczytuje dane z <see cref="T:System.Net.Sockets.NetworkStream" /> i zapisuje je do określonego zakresu tablicy bajtów jako operacji asynchronicznej.</summary>
        <returns>Zadanie, które reprezentuje asynchroniczną operację odczytu. Wartość <see cref="P:System.Threading.Tasks.Task`1.Result" /> właściwości zawiera łączną liczbę <paramref name="buffer" />odczytanych bajtów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda odczytuje dane do `buffer` i zwraca liczbę pomyślnie odczytywanych bajtów. Operacja odczytuje tyle danych, ile jest dostępnych, do liczby bajtów określonej `size` przez parametr. `ReadAsync`

> [!NOTE]
>  Sprawdź, czy <xref:System.Net.Sockets.NetworkStream> jest możliwy do odczytania przez <xref:System.Net.Sockets.NetworkStream.CanRead> wywołanie właściwości. W przypadku próby odczytu z programu <xref:System.Net.Sockets.NetworkStream> , który nie jest czytelny, zostanie wyświetlony komunikat. <xref:System.InvalidOperationException>  
  
> [!NOTE]
>  Jeśli zostanie wyświetlony komunikat <xref:System.IO.IOException>, <xref:System.Exception.InnerException> Sprawdź właściwość, aby określić, czy został <xref:System.Net.Sockets.SocketException>on spowodowany przez. Jeśli tak, użyj <xref:System.Net.Sockets.SocketException.ErrorCode> właściwości, aby uzyskać określony kod błędu i zapoznaj się z dokumentacją [kodu błędu interfejsu API Windows Sockets w wersji 2](/windows/desktop/winsock/windows-sockets-error-codes-2) , aby uzyskać szczegółowy opis błędu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> Program nie obsługuje odczytywania.</exception>
        <exception cref="T:System.IOException">Wystąpił błąd podczas uzyskiwania dostępu do gniazda.

—lub—

Wystąpił błąd podczas odczytywania z sieci.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.NetworkStream" /> Jest zamknięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public override int ReadByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.ReadByte" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadByte () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadByte();" />
      <MemberSignature Language="F#" Value="override this.ReadByte : unit -&gt; int" Usage="networkStream.ReadByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje bajt z <see cref="T:System.Net.Sockets.NetworkStream" /> i przesuwa pozycję w strumieniu o jeden bajt lub zwraca-1, jeśli na końcu strumienia.</summary>
        <returns>Bajty bez znaku rzutowanie <see langword="Int32" />na lub-1, jeśli na końcu strumienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

> [!NOTE]
>  Sprawdź, czy <xref:System.Net.Sockets.NetworkStream> jest możliwy do odczytania przez <xref:System.Net.Sockets.NetworkStream.CanRead> wywołanie właściwości. W przypadku próby odczytu z programu <xref:System.Net.Sockets.NetworkStream> , który nie jest czytelny, zostanie wyświetlony komunikat. <xref:System.InvalidOperationException>  
  
> [!NOTE]
>  Jeśli zostanie wyświetlony komunikat <xref:System.IO.IOException>, <xref:System.Exception.InnerException> Sprawdź właściwość, aby określić, czy został <xref:System.Net.Sockets.SocketException>on spowodowany przez. Jeśli tak, użyj <xref:System.Net.Sockets.SocketException.ErrorCode> właściwości, aby uzyskać określony kod błędu i zapoznaj się z dokumentacją [kodu błędu interfejsu API Windows Sockets w wersji 2](/windows/desktop/winsock/windows-sockets-error-codes-2) , aby uzyskać szczegółowy opis błędu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> Program nie obsługuje odczytywania.</exception>
        <exception cref="T:System.IOException">Wystąpił błąd podczas uzyskiwania dostępu do gniazda.

—lub—

Wystąpił błąd podczas odczytywania z sieci.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.NetworkStream" /> Jest zamknięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReadTimeout : int with get, set" Usage="System.Net.Sockets.NetworkStream.ReadTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ilość czasu, przez który bloki operacji odczytu oczekują na dane.</summary>
        <value>A <see cref="T:System.Int32" /> , który określa czas (w milisekundach), który upłynie przed zakończeniem operacji odczytu. Wartość <see cref="F:System.Threading.Timeout.Infinite" />domyślna, określa, że operacja odczytu nie przekroczy limitu czasu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli operacja odczytu nie zostanie zakończona w czasie określonym przez tę właściwość, operacja odczytu zgłasza <xref:System.IO.IOException>.  
  
> [!NOTE]
>  Ta właściwość ma wpływ tylko na odczyty synchroniczne wykonywane <xref:System.Net.Sockets.NetworkStream.Read%2A> przez wywołanie metody. Ta właściwość nie ma wpływu na odczyty asynchroniczne wykonywane przez <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> wywołanie metody.  
  
   
  
## Examples  
 Poniższy przykład kodu ustawia limit czasu odczytu dla strumienia sieciowego do 10 milisekund.  
  
 [!code-csharp[NCLTcpClientSync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLTcpClientSync/CS/tcpclient.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Określona wartość jest mniejsza lub równa zero i nie <see cref="F:System.Threading.Timeout.Infinite" />jest.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="networkStream.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">Ten parametr nie jest używany.</param>
        <param name="origin">Ten parametr nie jest używany.</param>
        <summary>Ustawia bieżącą pozycję strumienia na daną wartość. Ta metoda nie jest obecnie obsługiwana i zawsze zgłasza <see cref="T:System.NotSupportedException" />.</summary>
        <returns>Pozycja w strumieniu.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Użycie tej właściwości.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="networkStream.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Ten parametr nie jest używany.</param>
        <summary>Ustawia długość strumienia. Ta metoda zawsze zgłasza <see cref="T:System.NotSupportedException" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Użycie tej właściwości.</exception>
      </Docs>
    </Member>
    <Member MemberName="Socket">
      <MemberSignature Language="C#" Value="protected System.Net.Sockets.Socket Socket { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Socket" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Socket" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Socket As Socket" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Net::Sockets::Socket ^ Socket { System::Net::Sockets::Socket ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Socket : System.Net.Sockets.Socket" Usage="System.Net.Sockets.NetworkStream.Socket" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bazowe <see cref="T:System.Net.Sockets.Socket" />.</summary>
        <value><see cref="T:System.Net.Sockets.Socket" /> Reprezentuje bazowe połączenie sieciowe.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy pochodne z <xref:System.Net.Sockets.NetworkStream> mogą korzystać z tej właściwości w celu uzyskania podstawowej <xref:System.Net.Sockets.Socket>. Użyj bazowego <xref:System.Net.Sockets.Socket> zwróconego <xref:System.Net.Sockets.NetworkStream.Socket%2A> z właściwości, jeśli jest wymagany dostęp poza tym <xref:System.Net.Sockets.NetworkStream> , który zapewnia.  
  
> [!NOTE]
>  Ta właściwość jest dostępna tylko za pomocą tej klasy lub klasy pochodnej.  
  
   
  
## Examples  
 Poniższy przykład kodu pobiera źródłowy <xref:System.Net.Sockets.Socket> , aby zweryfikować aktywne połączenie.  
  
 [!code-cpp[NetworkStream_Protected_Members#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Protected_Members#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CS/source.cs#1)]
 [!code-vb[NetworkStream_Protected_Members#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Protected_Members/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie zasoby używane przez <see cref="T:System.Net.Sockets.NetworkStream" />program.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Wywołaj `Dispose` po zakończeniu korzystania z <xref:System.Net.Sockets.NetworkStream>. `Dispose` Metoda<xref:System.Net.Sockets.NetworkStream> pozostawia w stanie niezdatnym do użytku. Po wywołaniu `Dispose`należy wydać wszystkie odwołania <xref:System.Net.Sockets.NetworkStream> do, aby moduł wyrzucania elementów bezużytecznych mógł odwoływać pamięć <xref:System.Net.Sockets.NetworkStream> , którą zajmował. Aby uzyskać więcej informacji o korzystaniu z metody Dispose, zobacz [Oczyszczanie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i [implementowanie metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).

> [!NOTE]
> Zawsze wywołuj `Dispose` przed wydaniem ostatniego odwołania <xref:System.Net.Sockets.NetworkStream>do. W przeciwnym razie używane zasoby nie są zwalniane do momentu wywołania <xref:System.Net.Sockets.NetworkStream> metody Finalize obiektu przez moduł zbierający elementy bezużyteczne.

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (ReadOnlySpan&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Write(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(ReadOnlySpan&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="override this.Write : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="networkStream.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">Dane do zapisu <see cref="T:System.Net.Sockets.NetworkStream" />w.</param>
        <summary>Zapisuje dane <see cref="T:System.Net.Sockets.NetworkStream" /> w zakresie z zakresu bajtów tylko do odczytu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Ta metoda wysyła wszystkie bajty `buffer` w sieci. Metoda jest blokowana, dopóki żądana liczba bajtów nie zostanie wysłana <xref:System.Net.Sockets.SocketException> lub zostanie zgłoszony. `Write`

> [!NOTE]
> Sprawdź, czy <xref:System.Net.Sockets.NetworkStream> jest możliwy do zapisu przez <xref:System.Net.Sockets.NetworkStream.CanWrite> wywołanie właściwości. W przypadku próby zapisu do programu <xref:System.Net.Sockets.NetworkStream> , który nie jest zapisywalny, zostanie wyświetlony komunikat. <xref:System.InvalidOperationException>

> [!NOTE]
> Jeśli zostanie wyświetlony komunikat <xref:System.IO.IOException>, <xref:System.Exception.InnerException> Sprawdź właściwość, aby określić, czy został <xref:System.Net.Sockets.SocketException>on spowodowany przez. Jeśli tak, użyj <xref:System.Net.Sockets.SocketException.ErrorCode> właściwości, aby uzyskać określony kod błędu i zapoznaj się z dokumentacją kodu błędu interfejsu API Windows Sockets w wersji 2, aby uzyskać szczegółowy opis błędu.

]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> Program nie obsługuje zapisu.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas uzyskiwania dostępu do gniazda.

—lub—

Wystąpił błąd podczas zapisywania w sieci.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.NetworkStream" /> Jest zamknięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, size As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="networkStream.Write (buffer, offset, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica typu <see cref="T:System.Byte" /> , która zawiera dane do zapisu <see cref="T:System.Net.Sockets.NetworkStream" />w.</param>
        <param name="offset">Lokalizacja <paramref name="buffer" /> , z której ma zostać rozpoczęte zapisywanie danych.</param>
        <param name="size">Liczba bajtów do zapisu <see cref="T:System.Net.Sockets.NetworkStream" />w.</param>
        <summary>Zapisuje dane na <see cref="T:System.Net.Sockets.NetworkStream" /> podstawie określonego zakresu tablicy bajtów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
Ta metoda zaczyna się od określonego `offset` i wysyła `size` `buffer` bajty z zawartości do sieci. Metoda jest blokowana, dopóki żądana liczba bajtów nie zostanie wysłana <xref:System.Net.Sockets.SocketException> lub zostanie zgłoszony. `Write` 
  
> [!NOTE]
> Sprawdź, czy <xref:System.Net.Sockets.NetworkStream> jest możliwy do zapisu przez <xref:System.Net.Sockets.NetworkStream.CanWrite> wywołanie właściwości. W przypadku próby zapisu do programu <xref:System.Net.Sockets.NetworkStream> , który nie jest zapisywalny, zostanie wyświetlony komunikat. <xref:System.InvalidOperationException>

> [!NOTE]
> Jeśli zostanie wyświetlony komunikat <xref:System.IO.IOException>, <xref:System.Exception.InnerException> Sprawdź właściwość, aby określić, czy został <xref:System.Net.Sockets.SocketException>on spowodowany przez. Jeśli tak, użyj <xref:System.Net.Sockets.SocketException.ErrorCode> właściwości, aby uzyskać określony kod błędu i zapoznaj się z dokumentacją kodu błędu interfejsu API Windows Sockets w wersji 2, aby uzyskać szczegółowy opis błędu.

  
## Examples  
 Poniższy przykład kodu sprawdza, czy można go <xref:System.Net.Sockets.NetworkStream> zapisać. Jeśli jest, <xref:System.Net.Sockets.NetworkStream.Write%2A> jest używany do zapisywania małego komunikatu.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#3)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#3)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="buffer" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> Parametr jest mniejszy niż 0.  
  
—lub— 
Parametr jest większy niż <paramref name="buffer" />długość. <paramref name="offset" />  
  
—lub— 
<paramref name="size" /> Parametr jest mniejszy niż 0.  
  
—lub— 
Wartość parametru jest większa niż <paramref name="buffer" /> długość <paramref name="offset" /> minus wartości parametru. <paramref name="size" /></exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> Program nie obsługuje zapisu.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas uzyskiwania dostępu do gniazda.

—lub—

Wystąpił błąd podczas zapisywania w sieci.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.NetworkStream" /> Jest zamknięty.</exception>
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.Writeable" />
      </Docs>
    </Member>
    <Member MemberName="Writeable">
      <MemberSignature Language="C#" Value="protected bool Writeable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Writeable" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Writeable" />
      <MemberSignature Language="VB.NET" Value="Protected Property Writeable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Writeable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Writeable : bool with get, set" Usage="System.Net.Sockets.NetworkStream.Writeable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy jest możliwy <see cref="T:System.Net.Sockets.NetworkStream" /> do zapisu.</summary>
        <value><see langword="true" />Jeśli dane można zapisać w strumieniu; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy utworzyć pochodną z <xref:System.Net.Sockets.NetworkStream> klasy, aby <xref:System.Net.Sockets.NetworkStream.Writeable%2A> użyć właściwości. Jeśli <xref:System.Net.Sockets.NetworkStream.Writeable%2A> jest `true` ,<xref:System.Net.Sockets.NetworkStream>umożliwia wywoływanie metody.<xref:System.Net.Sockets.NetworkStream.Write%2A> Można również określić, czy <xref:System.Net.Sockets.NetworkStream> jest możliwy do zapisu, sprawdzając Właściwość dostępne <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> publicznie.  
  
 Właściwość jest ustawiana <xref:System.Net.Sockets.NetworkStream> po zainicjowaniu. <xref:System.Net.Sockets.NetworkStream.Writeable%2A>  
  
   
  
## Examples  
 W poniższym przykładzie kodu `CanCommunicate` Właściwość <xref:System.Net.Sockets.NetworkStream.Writeable%2A> sprawdza właściwość, aby określić, <xref:System.Net.Sockets.NetworkStream> czy jest możliwy do zapisu.  
  
 [!code-cpp[NetworkStream_Protected_Members#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Protected_Members#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CS/source.cs#1)]
 [!code-vb[NetworkStream_Protected_Members#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Protected_Members/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.Readable" />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask WriteAsync (ReadOnlyMemory&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask WriteAsync(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.WriteAsync : ReadOnlyMemory&lt;byte&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="networkStream.WriteAsync (buffer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">Region pamięci zawierający dane do zapisu <see cref="T:System.Net.Sockets.NetworkStream" />w.</param>
        <param name="cancellationToken">Token do monitorowania żądań anulowania.</param>
        <summary>Zapisuje dane <see cref="T:System.Net.Sockets.NetworkStream" /> w zakresie pamięci bajtowej tylko do odczytu w ramach operacji asynchronicznej.</summary>
        <returns>Zadanie, które reprezentuje asynchroniczny zapis operacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks 
Ta metoda wysyła wszystkie bajty `buffer` w sieci.

> [!NOTE]
> Sprawdź, czy <xref:System.Net.Sockets.NetworkStream> jest możliwy do zapisu przez <xref:System.Net.Sockets.NetworkStream.CanWrite> wywołanie właściwości. W przypadku próby zapisu do programu <xref:System.Net.Sockets.NetworkStream> , który nie jest zapisywalny, zostanie wyświetlony komunikat. <xref:System.InvalidOperationException>

> [!NOTE]
> Jeśli zostanie wyświetlony komunikat <xref:System.IO.IOException>, <xref:System.Exception.InnerException> Sprawdź właściwość, aby określić, czy został <xref:System.Net.Sockets.SocketException>on spowodowany przez. Jeśli tak, użyj <xref:System.Net.Sockets.SocketException.ErrorCode> właściwości, aby uzyskać określony kod błędu i zapoznaj się z dokumentacją kodu błędu interfejsu API Windows Sockets w wersji 2, aby uzyskać szczegółowy opis błędu.

]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> Program nie obsługuje zapisu.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas uzyskiwania dostępu do gniazda.

—lub—

Wystąpił błąd podczas zapisywania w sieci.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.NetworkStream" /> Jest zamknięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int size, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.WriteAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="networkStream.WriteAsync (buffer, offset, size, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer">Tablica bajtów, która zawiera dane do zapisu <see cref="T:System.Net.Sockets.NetworkStream" />w.</param>
        <param name="offset">Lokalizacja <paramref name="buffer" /> , z której ma zostać rozpoczęte zapisywanie danych.</param>
        <param name="size">Liczba bajtów do zapisu <see cref="T:System.Net.Sockets.NetworkStream" />w.</param>
        <param name="cancellationToken">Token do monitorowania żądań anulowania.</param>
        <summary>Zapisuje dane na <see cref="T:System.Net.Sockets.NetworkStream" /> podstawie określonego zakresu tablicy bajtów jako operacji asynchronicznej.</summary>
        <returns>Zadanie, które reprezentuje asynchroniczny zapis operacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks 
Ta metoda zaczyna się od określonego `offset` i wysyła `size` `buffer` bajty z zawartości do sieci.

> [!NOTE]
> Sprawdź, czy <xref:System.Net.Sockets.NetworkStream> jest możliwy do zapisu przez <xref:System.Net.Sockets.NetworkStream.CanWrite> wywołanie właściwości. W przypadku próby zapisu do programu <xref:System.Net.Sockets.NetworkStream> , który nie jest zapisywalny, zostanie wyświetlony komunikat. <xref:System.InvalidOperationException>

> [!NOTE]
> Jeśli zostanie wyświetlony komunikat <xref:System.IO.IOException>, <xref:System.Exception.InnerException> Sprawdź właściwość, aby określić, czy został <xref:System.Net.Sockets.SocketException>on spowodowany przez. Jeśli tak, użyj <xref:System.Net.Sockets.SocketException.ErrorCode> właściwości, aby uzyskać określony kod błędu i zapoznaj się z dokumentacją kodu błędu interfejsu API Windows Sockets w wersji 2, aby uzyskać szczegółowy opis błędu.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="buffer" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> Parametr jest mniejszy niż 0.  
  
—lub— 
Parametr jest większy niż <paramref name="buffer" />długość. <paramref name="offset" />  
  
—lub— 
<paramref name="size" /> Parametr jest mniejszy niż 0.  
  
—lub— 
Wartość parametru jest większa niż <paramref name="buffer" /> długość <paramref name="offset" /> minus wartości parametru. <paramref name="size" /></exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> Program nie obsługuje zapisu.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas zapisywania w sieci.  
  
 —lub—  
  
 Wystąpił błąd podczas uzyskiwania dostępu do gniazda.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.NetworkStream" /> Jest zamknięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public override void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.WriteByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteByte (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteByte(System::Byte value);" />
      <MemberSignature Language="F#" Value="override this.WriteByte : byte -&gt; unit" Usage="networkStream.WriteByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="value">Bajt do zapisu w strumieniu.</param>
        <summary>Zapisuje bajty w bieżącym położeniu w <see cref="T:System.Net.Sockets.NetworkStream" /> i przesuwa pozycję w strumieniu o jeden bajt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

> [!NOTE]
> Sprawdź, czy <xref:System.Net.Sockets.NetworkStream> jest możliwy do zapisu przez <xref:System.Net.Sockets.NetworkStream.CanWrite> wywołanie właściwości. W przypadku próby zapisu do programu <xref:System.Net.Sockets.NetworkStream> , który nie jest zapisywalny, zostanie wyświetlony komunikat. <xref:System.InvalidOperationException>

> [!NOTE]
> Jeśli zostanie wyświetlony komunikat <xref:System.IO.IOException>, <xref:System.Exception.InnerException> Sprawdź właściwość, aby określić, czy został <xref:System.Net.Sockets.SocketException>on spowodowany przez. Jeśli tak, użyj <xref:System.Net.Sockets.SocketException.ErrorCode> właściwości, aby uzyskać określony kod błędu i zapoznaj się z dokumentacją kodu błędu interfejsu API Windows Sockets w wersji 2, aby uzyskać szczegółowy opis błędu.

]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.NetworkStream" /> Program nie obsługuje zapisu.</exception>
        <exception cref="T:System.IO.IOException">Wystąpił błąd podczas uzyskiwania dostępu do gniazda.

—lub—

Wystąpił błąd podczas zapisywania w sieci.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.NetworkStream" /> Jest zamknięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WriteTimeout : int with get, set" Usage="System.Net.Sockets.NetworkStream.WriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ilość czasu, przez który blok operacji zapisu oczekuje na dane.</summary>
        <value>A <see cref="T:System.Int32" /> , który określa czas (w milisekundach), który upłynie przed zakończeniem operacji zapisu. Wartość <see cref="F:System.Threading.Timeout.Infinite" />domyślna, określa, że operacja zapisu nie przekroczy limitu czasu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli operacja zapisu nie zostanie zakończona w czasie określonym przez tę właściwość, operacja zapisu zgłasza <xref:System.IO.IOException>.  
  
> [!NOTE]
>  Ta właściwość ma wpływ tylko na operacje zapisu synchronicznego wykonywane <xref:System.Net.Sockets.NetworkStream.Write%2A> przez wywołanie metody. Ta właściwość nie ma wpływu na zapisy asynchroniczne wykonywane przez wywołanie <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu ustawia limit czasu zapisu dla strumienia sieciowego do 10 milisekund.  
  
 [!code-cpp[NCLTcpServerSync#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclTcpServerSync/cpp/tcplistener.cpp#0)]
 [!code-csharp[NCLTcpServerSync#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclTcpServerSync/CS/tcplistener.cs#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Określona wartość jest mniejsza lub równa zero i nie <see cref="F:System.Threading.Timeout.Infinite" />jest.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
