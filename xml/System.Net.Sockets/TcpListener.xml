<Type Name="TcpListener" FullName="System.Net.Sockets.TcpListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="14eb87b3d114dd0c716942f6728b14748d3032d6" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69112207" /></Metadata><TypeSignature Language="C#" Value="public class TcpListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpListener extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.TcpListener" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpListener" />
  <TypeSignature Language="F#" Value="type TcpListener = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Nasłuchuje połączeń od klientów sieci TCP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener> Klasa zawiera proste metody, które nasłuchują i akceptują przychodzące żądania połączeń w bloku trybu synchronicznego. Możesz użyć <xref:System.Net.Sockets.TcpClient> albo <xref:System.Net.Sockets.Socket> lub, aby połączyć się z <xref:System.Net.Sockets.TcpListener>. <xref:System.Net.Sockets.TcpListener> Utwórz<xref:System.Net.IPEndPoint>przy użyciu, lokalny adres IP i numer portu lub tylko numer portu. Określ <xref:System.Net.IPAddress.Any> wartość dla lokalnego adresu IP i wartość 0 dla lokalnego numeru portu, jeśli chcesz, aby Dostawca usługi był przypisany do tych wartości. Jeśli zdecydujesz się to zrobić, możesz użyć <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> właściwości, aby zidentyfikować przypisane informacje, po nawiązaniu połączenia z gniazdem.  
  
 Użyj metody <xref:System.Net.Sockets.TcpListener.Start%2A> , aby rozpocząć nasłuchiwanie żądań połączeń przychodzących. <xref:System.Net.Sockets.TcpListener.Start%2A>będzie kolejkować przychodzące połączenia do momentu wywołania <xref:System.Net.Sockets.TcpListener.Stop%2A> metody lub <xref:System.Net.Sockets.SocketOptionName.MaxConnections>do kolejki. <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Użyj lub <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> , aby ściągnąć połączenie z kolejki żądań połączeń przychodzących. Te dwie metody zostaną zablokowane. Jeśli chcesz uniknąć blokowania, możesz najpierw użyć metody, <xref:System.Net.Sockets.TcpListener.Pending%2A> aby określić, czy w kolejce są dostępne żądania połączenia.  
  
 Wywołaj <xref:System.Net.Sockets.TcpListener.Stop%2A> metodę, aby <xref:System.Net.Sockets.TcpListener>zamknąć.  
  
> [!NOTE]
>  <xref:System.Net.Sockets.TcpListener.Stop%2A> Metoda nie zamyka żadnych zaakceptowanych połączeń. Użytkownik jest odpowiedzialny za zamknięcie osobno.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Net.Sockets.TcpListener>.  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 Zapoznaj <xref:System.Net.Sockets.TcpClient> się z przykładem dla klienta.  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission">Aby nawiązać połączenie wychodzące lub zaakceptować żądanie przychodzące.</permission>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.Sockets.TcpListener" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : int -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener port" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use TcpListener (IPAddress address, int port) instead")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This method has been deprecated. Please use TcpListener(IPAddress localaddr, int port) instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use TcpListener(IPAddress localaddr, int port).")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This method has been deprecated. Please use TcpListener(IPAddress localaddr, int port) instead. https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="port">Port, na którym nasłuchuje prób połączenia przychodzącego.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Net.Sockets.TcpListener" /> klasy, która nasłuchuje na określonym porcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest przestarzały. Użyj konstruktorów <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType>lub. <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType>  
  
 Ten konstruktor pozwala określić numer portu, na którym mają być nasłuchiwane próby połączenia przychodzącego. W przypadku tego konstruktora Dostawca usługi bazowej przypisuje najbardziej odpowiedni adres sieciowy. Jeśli nie wiesz, który port lokalny jest używany, możesz określić wartość 0 jako numer portu. W takim przypadku Dostawca usługi przypisze dostępny numer portu tymczasowych. W przypadku korzystania z <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> tego podejścia można określić, jaki adres sieci lokalnej i numer portu zostały przypisane przy użyciu właściwości.  
  
 Wywołaj <xref:System.Net.Sockets.TcpListener.Start%2A> metodę, aby rozpocząć nasłuchiwanie prób połączenia przychodzącego.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Net.Sockets.TcpListener> przy użyciu numeru portu lokalnego.  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" />nie jest między <see cref="F:System.Net.IPEndPoint.MinPort" /> i <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPEndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : System.Net.IPEndPoint -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener localEP" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP">Reprezentuje lokalny punkt końcowy, do którego ma zostać powiązany odbiornik <see cref="T:System.Net.Sockets.Socket" />. <see cref="T:System.Net.IPEndPoint" /></param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Net.Sockets.TcpListener" /> klasy z określonym lokalnym punktem końcowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor umożliwia określenie lokalnego adresu IP i numeru portu, na którym mają być nasłuchiwane próby połączenia przychodzącego. Przed użyciem tego konstruktora należy utworzyć <xref:System.Net.IPEndPoint> przy użyciu żądanego lokalnego adresu IP i numeru portu. Przekaż ten <xref:System.Net.IPEndPoint> Konstruktor `localEP` jako parametr.  
  
 Jeśli nie wiesz, który adres lokalny jest przypisany, możesz utworzyć <xref:System.Net.IPEndPoint> parametr używany <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> jako adres, a usługodawca źródłowy przypisze najbardziej odpowiedni adres sieciowy. Może to pomóc uprościć aplikację, jeśli masz wiele interfejsów sieciowych. Jeśli nie wiesz, który port lokalny jest używany, możesz utworzyć <xref:System.Net.IPEndPoint> numer portu za pomocą wartości 0. W takim przypadku Dostawca usługi przypisze dostępny numer portu tymczasowych. W przypadku korzystania z <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> tego podejścia można określić, jaki adres sieci lokalnej i numer portu zostały przypisane przy użyciu właściwości.  
  
 Wywołaj <xref:System.Net.Sockets.TcpListener.Start%2A> metodę, aby rozpocząć nasłuchiwanie prób połączenia przychodzącego.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy wystąpienie <xref:System.Net.Sockets.TcpListener> klasy przy użyciu lokalnego punktu końcowego.  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="localEP" />jest <see langword="null" />.</exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPAddress localaddr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress localaddr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localaddr As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPAddress ^ localaddr, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : System.Net.IPAddress * int -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener (localaddr, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localaddr" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localaddr"><see cref="T:System.Net.IPAddress" /> Reprezentuje lokalny adres IP.</param>
        <param name="port">Port, na którym nasłuchuje prób połączenia przychodzącego.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Net.Sockets.TcpListener" /> klasy, które nasłuchuje dla prób połączenia przychodzącego na określonym lokalnym adresie IP i numer portu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor umożliwia określenie lokalnego adresu IP i numeru portu, na którym mają być nasłuchiwane próby połączenia przychodzącego. Przed wywołaniem tego konstruktora należy najpierw utworzyć <xref:System.Net.IPAddress> przy użyciu żądanego adresu lokalnego. Przekaż ten <xref:System.Net.IPAddress> Konstruktor `localaddr` jako parametr. Jeśli nie wiesz, który adres lokalny jest przypisany, określ <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> `localaddr` dla parametru, a Dostawca usługi bazowej przypisze najbardziej odpowiedni adres sieciowy. Może to pomóc uprościć aplikację, jeśli masz wiele interfejsów sieciowych. Jeśli nie wiesz, który port lokalny jest używany, możesz określić wartość 0 jako numer portu. W takim przypadku dostawca usług przypisze dostępny numer portu z zakresu od 1024 do 5000. W przypadku korzystania z <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> tego podejścia można określić, jaki adres sieci lokalnej i numer portu zostały przypisane przy użyciu właściwości.  
  
 Wywołaj <xref:System.Net.Sockets.TcpListener.Start%2A> metodę, aby rozpocząć nasłuchiwanie prób połączenia przychodzącego.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy wystąpienie <xref:System.Net.Sockets.TcpListener> klasy przy użyciu lokalnego adresu IP i numeru portu.  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="localaddr" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" />nie jest między <see cref="F:System.Net.IPEndPoint.MinPort" /> i <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        <altmember cref="T:System.Net.IPAddress" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket AcceptSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket AcceptSocket() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocket" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocket () As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ AcceptSocket();" />
      <MemberSignature Language="F#" Value="member this.AcceptSocket : unit -&gt; System.Net.Sockets.Socket" Usage="tcpListener.AcceptSocket " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Akceptuje oczekujące żądanie połączenia.</summary>
        <returns><see cref="T:System.Net.Sockets.Socket" /> Służy do wysyłania i odbierania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>to metoda blokująca zwracająca wartość <xref:System.Net.Sockets.Socket> , której można użyć do wysyłania i odbierania danych. Jeśli chcesz uniknąć blokowania, użyj <xref:System.Net.Sockets.TcpListener.Pending%2A> metody, aby określić, czy żądania połączeń są dostępne w kolejce połączeń przychodzących.  
  
 <xref:System.Net.Sockets.Socket> Zwrócona wartość jest inicjowana przy użyciu adresu IP i numeru portu hosta zdalnego. Do komunikacji z hostem zdalnym <xref:System.Net.Sockets.Socket.Send%2A> można <xref:System.Net.Sockets.Socket.Receive%2A> użyć dowolnej z metod <xref:System.Net.Sockets.Socket> dostępnych w klasie. Gdy skończysz korzystać z programu <xref:System.Net.Sockets.Socket>, pamiętaj, aby <xref:System.Net.Sockets.Socket.Close%2A> wywołać metodę. Jeśli aplikacja jest stosunkowo prosta, rozważ użycie <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> metody zamiast <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> metody. <xref:System.Net.Sockets.TcpClient>zapewnia proste metody wysyłania i otrzymywania danych za pośrednictwem sieci podczas blokowania trybu synchronicznego.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> kodu Metoda jest używana do <xref:System.Net.Sockets.Socket>zwrócenia. Jest <xref:System.Net.Sockets.Socket> on używany do komunikowania się z nowo połączonym klientem.  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Odbiornik nie został uruchomiony z wywołaniem metody <see cref="M:System.Net.Sockets.TcpListener.Start" />.</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt; AcceptSocketAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.Socket&gt; AcceptSocketAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocketAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocketAsync () As Task(Of Socket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::Socket ^&gt; ^ AcceptSocketAsync();" />
      <MemberSignature Language="F#" Value="member this.AcceptSocketAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;" Usage="tcpListener.AcceptSocketAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Akceptuje oczekujące żądanie połączenia jako operację asynchroniczną.</summary>
        <returns>Obiekt zadania reprezentujący operację asynchroniczną. Właściwość obiektu Task <see cref="T:System.Net.Sockets.Socket" /> zwraca wartość użytą do wysyłania i odbierania danych. <see cref="P:System.Threading.Tasks.Task`1.Result" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócony <xref:System.Threading.Tasks.Task%601> obiekt zostanie ukończony po zaakceptowaniu połączenia gniazda.  
  
 <xref:System.Net.Sockets.Socket> Zwracany w<xref:System.Threading.Tasks.Task%601> jest inicjowany przy użyciu adresu IP i numeru portu hosta zdalnego. Do komunikacji z hostem zdalnym <xref:System.Net.Sockets.Socket.Send%2A> można <xref:System.Net.Sockets.Socket.Receive%2A> użyć dowolnej z metod <xref:System.Net.Sockets.Socket> dostępnych w klasie. Gdy skończysz korzystać z programu <xref:System.Net.Sockets.Socket>, pamiętaj, aby <xref:System.Net.Sockets.Socket.Close%2A> wywołać metodę. Jeśli aplikacja jest stosunkowo prosta, rozważ użycie <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> metody zamiast <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A> metody. <xref:System.Net.Sockets.TcpClient>zapewnia proste metody wysyłania i otrzymywania danych za pośrednictwem sieci podczas blokowania trybu synchronicznego.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Odbiornik nie został uruchomiony z wywołaniem metody <see cref="M:System.Net.Sockets.TcpListener.Start" />.</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient AcceptTcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient AcceptTcpClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClient () As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ AcceptTcpClient();" />
      <MemberSignature Language="F#" Value="member this.AcceptTcpClient : unit -&gt; System.Net.Sockets.TcpClient" Usage="tcpListener.AcceptTcpClient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Akceptuje oczekujące żądanie połączenia.</summary>
        <returns><see cref="T:System.Net.Sockets.TcpClient" /> Służy do wysyłania i odbierania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>to metoda blokująca zwracająca wartość <xref:System.Net.Sockets.TcpClient> , której można użyć do wysyłania i odbierania danych. Użyj metody <xref:System.Net.Sockets.TcpListener.Pending%2A> , aby określić, czy żądania połączeń są dostępne w kolejce połączeń przychodzących, jeśli chcesz uniknąć blokowania.  
  
 Użyj metody, aby uzyskać podstawę <xref:System.Net.Sockets.NetworkStream> zwracanej <xref:System.Net.Sockets.TcpClient>wartości. <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> <xref:System.Net.Sockets.NetworkStream> Program udostępnia metody wysyłania i otrzymywania z hosta zdalnego. Gdy korzystasz z programu <xref:System.Net.Sockets.TcpClient>, pamiętaj, aby <xref:System.Net.Sockets.TcpClient.Close%2A> wywołać metodę. Jeśli potrzebujesz większej elastyczności niż <xref:System.Net.Sockets.TcpClient> oferty, rozważ użycie. <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> kodu Metoda jest używana do <xref:System.Net.Sockets.TcpClient>zwrócenia. Jest <xref:System.Net.Sockets.TcpClient> on używany do komunikowania się z nowo połączonym klientem.  
  
 [!code-cpp[Classic TcpListenerExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListenerExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListenerExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListenerExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListenerExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListenerExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Odbiornik nie został uruchomiony z wywołaniem metody <see cref="M:System.Net.Sockets.TcpListener.Start" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> Użyj właściwości, aby uzyskać określony kod błędu. Po uzyskaniu tego kodu można odwołać się do dokumentacji <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">kodu błędu interfejsu API Windows Sockets w wersji 2</see> , aby uzyskać szczegółowy opis błędu.</exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClientAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClientAsync () As Task(Of TcpClient)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::TcpClient ^&gt; ^ AcceptTcpClientAsync();" />
      <MemberSignature Language="F#" Value="member this.AcceptTcpClientAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;" Usage="tcpListener.AcceptTcpClientAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Akceptuje oczekujące żądanie połączenia jako operację asynchroniczną.</summary>
        <returns>Obiekt zadania reprezentujący operację asynchroniczną. Właściwość obiektu Task <see cref="T:System.Net.Sockets.TcpClient" /> zwraca wartość użytą do wysyłania i odbierania danych. <see cref="P:System.Threading.Tasks.Task`1.Result" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócony <xref:System.Threading.Tasks.Task%601> obiekt zostanie ukończony po zaakceptowaniu połączenia TCP.  
  
 Użyj metody, aby uzyskać podstawę <xref:System.Net.Sockets.NetworkStream> zwracanej <xref:System.Net.Sockets.TcpClient> w <xref:System.Threading.Tasks.Task%601>. <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> <xref:System.Net.Sockets.NetworkStream> Program udostępnia metody wysyłania i otrzymywania z hosta zdalnego. Gdy korzystasz z programu <xref:System.Net.Sockets.TcpClient>, pamiętaj, aby <xref:System.Net.Sockets.TcpClient.Close%2A> wywołać metodę. Jeśli potrzebujesz większej elastyczności niż <xref:System.Net.Sockets.TcpClient> oferty, rozważ użycie <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> lub <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Odbiornik nie został uruchomiony z wywołaniem metody <see cref="M:System.Net.Sockets.TcpListener.Start" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> Użyj właściwości, aby uzyskać określony kod błędu. Po uzyskaniu tego kodu można odwołać się do dokumentacji <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">kodu błędu interfejsu API Windows Sockets w wersji 2</see> , aby uzyskać szczegółowy opis błędu.</exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Active" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Active : bool" Usage="System.Net.Sockets.TcpListener.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Net.Sockets.TcpListener" /> aktywnie nasłuchuje połączeń klientów.</summary>
        <value><see langword="true" />Jeśli <see cref="T:System.Net.Sockets.TcpListener" /> program<see langword="false" />aktywnie nasłuchuje; w przeciwnym razie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy pochodne z <xref:System.Net.Sockets.TcpListener> mogą używać tej właściwości, aby określić, <xref:System.Net.Sockets.Socket> czy obecnie nasłuchuje w przypadku prób połączenia przychodzącego. Właściwość może służyć do uniknięcia nadmiarowych <xref:System.Net.Sockets.TcpListener.Start%2A> prób. <xref:System.Net.Sockets.TcpClient.Active%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllowNatTraversal (allowed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllowNatTraversal(bool allowed);" />
      <MemberSignature Language="F#" Value="member this.AllowNatTraversal : bool -&gt; unit" Usage="tcpListener.AllowNatTraversal allowed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="allowed">Wartość logiczna określająca, czy włączyć lub wyłączyć przechodzenie translatora adresów sieciowych.</param>
        <summary>Włącza lub wyłącza przechodzenie translacji adresów sieciowych (NAT) <see cref="T:System.Net.Sockets.TcpListener" /> na wystąpieniu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest używana do włączania lub wyłączania przechodzenia <xref:System.Net.Sockets.TcpListener> NAT dla wystąpienia. <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> Przechodzenie NAT może być zapewnione przy użyciu protokołu Teredo, 6to4 lub tunelu ISATAP.  
  
 Gdy parametr ma wartość false <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> , opcja w <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>skojarzonym gnieździe ma ustawioną wartość. `allowed` Spowoduje to jawne wyłączenie przechodzenia NAT <xref:System.Net.Sockets.TcpListener> dla wystąpienia.  
  
 Gdy parametr ma wartość true <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> , opcja w <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>skojarzonym gnieździe ma ustawioną wartość. `allowed` Może to umożliwić Przechodzenie <xref:System.Net.Sockets.TcpListener> translatora adresów sieciowych w zależności od reguł zapory w systemie.  
  
 Metoda musi zostać wywołana przed wywołaniem metody, <xref:System.Net.Sockets.TcpListener.Start%2A> aby rozpocząć nasłuchiwanie żądań połączeń przychodzących (przed powiązaniem gniazda). <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> Jeśli <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> Metoda jest wywoływana <xref:System.Net.Sockets.TcpListener.Start%2A> po metodzie, <xref:System.InvalidOperationException> zostanie zgłoszony.  
  
 Adres Teredo jest adresem IPv6 z prefiksem 2001::/32. Adresy Teredo mogą być zwracane przez normalne rozpoznawanie nazw DNS lub wyliczane jako adres IPv6 przypisany do interfejsu lokalnego.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Metoda została wywołana po <see cref="M:System.Net.Sockets.TcpListener.Start" /> wywołaniu metody <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /></exception>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptSocket">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptSocket(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptSocket (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptSocket(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAcceptSocket : AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpListener.BeginAcceptSocket (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback"><see cref="T:System.AsyncCallback" /> Delegat, który odwołuje się do metody do wywołania po zakończeniu operacji.</param>
        <param name="state">Zdefiniowany przez użytkownika obiekt zawierający informacje o operacji akceptacji. Ten obiekt jest przesyłany do <paramref name="callback" /> delegata po zakończeniu operacji.</param>
        <summary>Rozpoczyna operację asynchroniczną w celu zaakceptowania próby połączenia przychodzącego.</summary>
        <returns>, Który odwołuje się do asynchronicznego tworzenia <see cref="T:System.Net.Sockets.Socket" />. <see cref="T:System.IAsyncResult" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja asynchroniczna <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> musi być zakończona przez <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> wywołanie metody. Zazwyczaj Metoda jest wywoływana przez `callback` delegata.  
  
 Ta metoda nie jest blokowana do momentu zakończenia operacji. Aby zablokować do momentu zakończenia operacji, użyj <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> metody.  
  
 Aby uzyskać szczegółowe informacje na temat korzystania z modelu programowania asynchronicznego, zobacz [Asynchroniczne wywoływanie metod synchronicznych](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
> [!NOTE]
>  Można wywołać <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> Właściwość zwracaną <xref:System.Net.Sockets.Socket> , aby zidentyfikować adres sieciowy i numer portu hosta zdalnego.  
  
> [!NOTE]
>  Jeśli zostanie wyświetlony komunikat <xref:System.Net.Sockets.SocketException>, <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> Użyj właściwości w celu uzyskania określonego kodu błędu i zapoznaj się z dokumentacją dotyczącą [kodu błędu interfejsu API Windows Sockets w wersji 2](/windows/desktop/winsock/windows-sockets-error-codes-2) , aby uzyskać szczegółowy opis błędu.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> metody do tworzenia i łączenia gniazda. Delegat wywołania zwrotnego wywołuje <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> metodę, aby zakończyć żądanie asynchroniczne.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do gniazda.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.Socket" /> Został zamknięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptTcpClient">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptTcpClient(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptTcpClient (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptTcpClient(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAcceptTcpClient : AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpListener.BeginAcceptTcpClient (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback"><see cref="T:System.AsyncCallback" /> Delegat, który odwołuje się do metody do wywołania po zakończeniu operacji.</param>
        <param name="state">Zdefiniowany przez użytkownika obiekt zawierający informacje o operacji akceptacji. Ten obiekt jest przesyłany do <paramref name="callback" /> delegata po zakończeniu operacji.</param>
        <summary>Rozpoczyna operację asynchroniczną w celu zaakceptowania próby połączenia przychodzącego.</summary>
        <returns>, Który odwołuje się do asynchronicznego tworzenia <see cref="T:System.Net.Sockets.TcpClient" />. <see cref="T:System.IAsyncResult" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operacja asynchroniczna <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> musi być zakończona przez <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> wywołanie metody. Zazwyczaj Metoda jest wywoływana przez `callback` delegata.  
  
 Ta metoda nie jest blokowana do momentu zakończenia operacji. Aby zablokować do momentu zakończenia operacji, użyj <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> metody.  
  
 Aby uzyskać szczegółowe informacje na temat korzystania z modelu programowania asynchronicznego, zobacz [Asynchroniczne wywoływanie metod synchronicznych](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
> [!NOTE]
>  Jeśli zostanie wyświetlony komunikat <xref:System.Net.Sockets.SocketException>, <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> Użyj właściwości w celu uzyskania określonego kodu błędu i zapoznaj się z dokumentacją dotyczącą [kodu błędu interfejsu API Windows Sockets w wersji 2](/windows/desktop/winsock/windows-sockets-error-codes-2) , aby uzyskać szczegółowy opis błędu.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> metody do tworzenia i łączenia gniazda. Delegat wywołania zwrotnego wywołuje <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> metodę, aby zakończyć żądanie asynchroniczne.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do gniazda.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.Socket" /> Został zamknięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Net.Sockets.TcpListener Create (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Sockets.TcpListener Create(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Create(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (port As Integer) As TcpListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Sockets::TcpListener ^ Create(int port);" />
      <MemberSignature Language="F#" Value="static member Create : int -&gt; System.Net.Sockets.TcpListener" Usage="System.Net.Sockets.TcpListener.Create port" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="port">Port, na którym nasłuchuje prób połączenia przychodzącego.</param>
        <summary>Tworzy nowe <see cref="T:System.Net.Sockets.TcpListener" /> wystąpienie do nasłuchiwania na określonym porcie.</summary>
        <returns>Nowe <see cref="T:System.Net.Sockets.TcpListener" /> wystąpienie do nasłuchiwania na określonym porcie.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAcceptSocket (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAcceptSocket(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptSocket (asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAcceptSocket(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAcceptSocket : IAsyncResult -&gt; System.Net.Sockets.Socket" Usage="tcpListener.EndAcceptSocket asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Zwracany przez wywołanie <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />metody. <see cref="T:System.IAsyncResult" /></param>
        <summary>Asynchronicznie akceptuje próbę połączenia przychodzącego i tworzy <see cref="T:System.Net.Sockets.Socket" /> nową do obsługi komunikacji z hostem zdalnym.</summary>
        <returns>A <see cref="T:System.Net.Sockets.Socket" />.  
  
<see cref="T:System.Net.Sockets.Socket" /> Używane do wysyłania i odbierania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest blokowana do momentu ukończenia operacji. Aby wykonać tę operację synchronicznie, użyj <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> metody.  
  
> [!NOTE]
>  Można wywołać <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> Właściwość zwracaną <xref:System.Net.Sockets.Socket> , aby zidentyfikować adres sieciowy i numer portu hosta zdalnego.  
  
> [!NOTE]
>  Jeśli zostanie wyświetlony komunikat <xref:System.Net.Sockets.SocketException>, <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> Użyj właściwości w celu uzyskania określonego kodu błędu i zapoznaj się z dokumentacją dotyczącą [kodu błędu interfejsu API Windows Sockets w wersji 2](/windows/desktop/winsock/windows-sockets-error-codes-2) , aby uzyskać szczegółowy opis błędu.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> metody do tworzenia i łączenia gniazda. Delegat wywołania zwrotnego wywołuje <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> metodę, aby zakończyć żądanie asynchroniczne.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Bazowy <see cref="T:System.Net.Sockets.Socket" /> został zamknięty.</exception>
        <exception cref="T:System.ArgumentNullException">Parametr ma wartość <see langword="null" />. <paramref name="asyncResult" /></exception>
        <exception cref="T:System.ArgumentException">Parametr nie został utworzony przez wywołanie <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> metody. <paramref name="asyncResult" /></exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> Metoda została wcześniej wywołana.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu <see cref="T:System.Net.Sockets.Socket" />do elementu.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient EndAcceptTcpClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient EndAcceptTcpClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptTcpClient (asyncResult As IAsyncResult) As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ EndAcceptTcpClient(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAcceptTcpClient : IAsyncResult -&gt; System.Net.Sockets.TcpClient" Usage="tcpListener.EndAcceptTcpClient asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Zwracany przez wywołanie <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />metody. <see cref="T:System.IAsyncResult" /></param>
        <summary>Asynchronicznie akceptuje próbę połączenia przychodzącego i tworzy <see cref="T:System.Net.Sockets.TcpClient" /> nową do obsługi komunikacji z hostem zdalnym.</summary>
        <returns>A <see cref="T:System.Net.Sockets.TcpClient" />.  
  
<see cref="T:System.Net.Sockets.TcpClient" /> Używane do wysyłania i odbierania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest blokowana do momentu ukończenia operacji. Aby wykonać tę operację synchronicznie, użyj <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> metody.  
  
> [!NOTE]
>  Można wywołać <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> właściwość podstawowego gniazda (<xref:System.Net.Sockets.TcpClient.Client%2A>), aby zidentyfikować adres sieciowy i numer portu hosta zdalnego.  
  
> [!NOTE]
>  Jeśli zostanie wyświetlony komunikat <xref:System.Net.Sockets.SocketException>, <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> Użyj właściwości w celu uzyskania określonego kodu błędu i zapoznaj się z dokumentacją dotyczącą [kodu błędu interfejsu API Windows Sockets w wersji 2](/windows/desktop/winsock/windows-sockets-error-codes-2) , aby uzyskać szczegółowy opis błędu.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> metody do tworzenia i łączenia gniazda. Delegat wywołania zwrotnego wywołuje <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> metodę, aby zakończyć żądanie asynchroniczne.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Boolean" /> wartość określającą, <see cref="T:System.Net.Sockets.TcpListener" /> czy zezwala tylko jednemu podstawowemu gnieździi na nasłuchiwanie na określonym porcie.</summary>
        <value><see langword="true" />Jeśli zezwala na tylko jeden <see cref="T:System.Net.Sockets.TcpListener" /> do nasłuchiwania na konkretnym porcie; w przeciwnym razie, <see langword="false" />. <see cref="T:System.Net.Sockets.TcpListener" /> . Wartość domyślna to <see langword="true" /> Windows Server 2003 i Windows XP z dodatkiem Service Pack 2 lub nowszym <see langword="false" /> oraz dla wszystkich innych wersji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie wiele odbiorników może nasłuchiwać określonego portu. Jednak tylko jeden z odbiorników może wykonywać operacje na ruchu sieciowym wysyłanym do portu. Jeśli więcej niż jeden odbiornik próbuje powiązać z określonym portem, to ten z bardziej szczegółowym adresem IP obsługuje ruch sieciowy wysyłany do tego portu. Możesz użyć <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> właściwości, aby uniemożliwić wielu odbiornikom nasłuchiwanie na określonym porcie.  
  
 Ustaw tę właściwość przed wywołaniem <xref:System.Net.Sockets.TcpListener.Start%2A>lub <xref:System.Net.Sockets.TcpListener.Stop%2A> Wywołaj metodę, a następnie ustaw tę właściwość.  
  
   
  
## Examples  
 Poniższy przykład kodu pobiera i ustawia <xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A> właściwość.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#2)]
 [!code-csharp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#2)]
 [!code-vb[System.Net.Sockets.TcpListener1#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.TcpListener" /> Została uruchomiona. <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> Wywołaj <see cref="M:System.Net.Sockets.TcpListener.Stop" /> metodę, a następnie ustaw właściwość.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do podstawowego gniazda.</exception>
        <exception cref="T:System.ObjectDisposedException">Bazowy <see cref="T:System.Net.Sockets.Socket" /> został zamknięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TcpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TcpListener ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="tcpListener.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby używane przez <see cref="T:System.Net.Sockets.TcpListener" /> klasę.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Bezpłatnych zasobów <xref:System.Net.Sockets.TcpListener> klasy finalizator skojarzonych z wystąpieniem. <xref:System.Net.Sockets.TcpListener>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalEndpoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint LocalEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint LocalEndpoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalEndpoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ LocalEndpoint { System::Net::EndPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalEndpoint : System.Net.EndPoint" Usage="System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera podstawową <see cref="T:System.Net.EndPoint" /> bieżącą <see cref="T:System.Net.Sockets.TcpListener" />.</summary>
        <value><see cref="T:System.Net.EndPoint" /> Z<see cref="T:System.Net.Sockets.Socket" /> którym jest powiązany.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> właściwości, aby zidentyfikować lokalny interfejs sieciowy i numer portu używany do nasłuchiwania przychodzących żądań połączeń klienta po nawiązaniu połączenia z gniazdem. Najpierw należy rzutować ten <xref:System.Net.EndPoint> element <xref:System.Net.IPEndPoint>na. Następnie można wywołać <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> właściwość w celu pobrania lokalnego adresu IP <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> i właściwości, aby pobrać numer portu lokalnego.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla lokalny adres IP i numer portu, na którym <xref:System.Net.Sockets.TcpListener> nasłuchuje żądań połączeń przychodzących.  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.Net.EndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Pending">
      <MemberSignature Language="C#" Value="public bool Pending ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Pending() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Pending" />
      <MemberSignature Language="VB.NET" Value="Public Function Pending () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Pending();" />
      <MemberSignature Language="F#" Value="member this.Pending : unit -&gt; bool" Usage="tcpListener.Pending " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Określa, czy istnieją oczekujące żądania połączeń.</summary>
        <returns><see langword="true" />Jeśli istnieją oczekujące połączenia; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nieblokująca określa, czy istnieją oczekujące żądania połączeń. Ponieważ metody i <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> blokują wykonywanie do momentu, gdy <xref:System.Net.Sockets.TcpListener.Pending%2A> Metodanieustawiwkolejceżądaniapołączeniaprzychodzącego,możnaużyćmetody,abyokreślić,czypołączeniasądostępneprzedpodjęciempróbyichzaakceptowania.<xref:System.Net.Sockets.TcpListener.Start%2A> <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu sprawdza <xref:System.Net.Sockets.TcpListener.Pending%2A> metodę. Jeśli żądanie połączenia oczekuje na zaakceptowanie, zostanie wykonane wywołanie <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> metody.  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Odbiornik nie został uruchomiony z wywołaniem metody <see cref="M:System.Net.Sockets.TcpListener.Start" />.</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Server { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Server" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Server" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Server As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Server { System::Net::Sockets::Socket ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Server : System.Net.Sockets.Socket" Usage="System.Net.Sockets.TcpListener.Server" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera podstawową sieć <see cref="T:System.Net.Sockets.Socket" />.</summary>
        <value>Bazowe <see cref="T:System.Net.Sockets.Socket" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener><xref:System.Net.Sockets.Socket> tworzy do nasłuchiwania przychodzących żądań połączeń klienta. Klasy pochodne z mogą <xref:System.Net.Sockets.TcpListener> korzystać z tej właściwości w celu uzyskania <xref:System.Net.Sockets.Socket>tego. Użyj bazowego <xref:System.Net.Sockets.Socket> zwróconego <xref:System.Net.Sockets.TcpListener.Server%2A> przez właściwość, jeśli jest wymagany dostęp poza tym <xref:System.Net.Sockets.TcpListener> , który zapewnia.  
  
> [!NOTE]
>  <xref:System.Net.Sockets.TcpListener.Server%2A> Właściwość zwracatylkoużywanydonasłuchiwania<xref:System.Net.Sockets.Socket> przychodzących żądań połączeń klienta. Użyj metody, aby zaakceptować oczekujące żądanie połączenia i <xref:System.Net.Sockets.Socket> uzyskać do wysyłania i odbierania danych. <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Możesz również użyć metody, <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> aby zaakceptować oczekujące żądanie połączenia i <xref:System.Net.Sockets.TcpClient> uzyskać do wysyłania i odbierania danych.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Net.Sockets.TcpListener.Server%2A> właściwości. Źródłowy <xref:System.Net.Sockets.Socket> jest <xref:System.Net.Sockets.SocketOptionName.Linger> pobierany<xref:System.Net.Sockets.Socket> , a opcja jest skonfigurowana tak, aby przekroczyć limit czasu po upływie 10 sekund, jeśli dane nadal pozostają w buforze sieciowym po zamknięciu połączenia.  
  
 [!code-csharp[TcpListenerProtectedMembers1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListenerProtectedMembers1/CS/source.cs#1)]
 [!code-vb[TcpListenerProtectedMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListenerProtectedMembers1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zaczyna nasłuchiwanie żądań połączeń przychodzących.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="tcpListener.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zaczyna nasłuchiwanie żądań połączeń przychodzących.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda inicjuje obiekt źródłowy <xref:System.Net.Sockets.Socket>, wiąże go z lokalnym punktem końcowym i nasłuchuje prób połączenia przychodzącego. <xref:System.Net.Sockets.TcpListener.Start%2A> W <xref:System.Net.Sockets.TcpListener.Start%2A> przypadku odebrania żądania połączenia Metoda będzie kolejkować żądanie i kontynuuje nasłuchiwanie żądań dodatkowych do momentu <xref:System.Net.Sockets.TcpListener.Stop%2A> wywołania metody. Jeśli <xref:System.Net.Sockets.TcpListener> odbiera żądanie połączenia, gdy wcześniej umieściło w kolejce maksymalną liczbę połączeń, <xref:System.Net.Sockets.SocketException> wygeneruje on na kliencie.  
  
 Aby usunąć połączenie z kolejki połączeń przychodzących, użyj <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> metody <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> lub metody. Metoda usunie połączenie z kolejki i <xref:System.Net.Sockets.TcpClient> zwróci, że można go użyć do wysyłania i odbierania danych. <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Metoda zwróci metodę <xref:System.Net.Sockets.Socket> , która może być używana do wykonania tego samego. <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Jeśli aplikacja wymaga tylko synchronicznych operacji we/wy, <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>Użyj. Aby uzyskać bardziej szczegółową kontrolę behawioralną <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>, użyj. Obie te metody blokują do momentu, gdy w kolejce będzie dostępne żądanie połączenia.  
  
 Użyj metody, aby zamknąć i zatrzymać nasłuchiwanie. <xref:System.Net.Sockets.TcpListener> <xref:System.Net.Sockets.TcpListener.Stop%2A> Użytkownik jest odpowiedzialny za zamknięcie zaakceptowanych połączeń oddzielnie.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak <xref:System.Net.Sockets.TcpListener.Start%2A> używać do nasłuchiwania przychodzących prób połączeń klienta.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> Użyj właściwości, aby uzyskać określony kod błędu. Po uzyskaniu tego kodu można odwołać się do dokumentacji <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">kodu błędu interfejsu API Windows Sockets w wersji 2</see> , aby uzyskać szczegółowy opis błędu.</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (int backlog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(int32 backlog) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (backlog As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(int backlog);" />
      <MemberSignature Language="F#" Value="member this.Start : int -&gt; unit" Usage="tcpListener.Start backlog" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backlog" Type="System.Int32" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="backlog">Maksymalna długość kolejki oczekujących połączeń.</param>
        <summary>Rozpoczyna nasłuchiwanie żądań połączeń przychodzących z maksymalną liczbą oczekujących połączeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda inicjuje obiekt źródłowy <xref:System.Net.Sockets.Socket>, wiąże go z lokalnym punktem końcowym i nasłuchuje prób połączenia przychodzącego. <xref:System.Net.Sockets.TcpListener.Start%2A> W przypadku odebrania <xref:System.Net.Sockets.TcpListener.Start%2A> żądania połączenia program kolejkuje żądanie i kontynuuje nasłuchiwanie żądań dodatkowych do momentu <xref:System.Net.Sockets.TcpListener.Stop%2A> wywołania metody. Jeśli <xref:System.Net.Sockets.TcpListener> odbiera żądanie połączenia, gdy wcześniej umieściło w kolejce maksymalną liczbę połączeń, zostanie ona <xref:System.Net.Sockets.SocketException> wyrzucana na kliencie.  
  
 Aby usunąć połączenie z kolejki połączeń przychodzących, użyj <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> metody <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> lub metody. Metoda usunie połączenie z kolejki i <xref:System.Net.Sockets.TcpClient> zwróci, że można go użyć do wysyłania i odbierania danych. <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Metoda zwróci metodę <xref:System.Net.Sockets.Socket> , która może być używana do wykonania tego samego. <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Jeśli aplikacja wymaga tylko synchronicznych operacji we/wy, użyj <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>. Aby uzyskać bardziej szczegółową kontrolę behawioralną <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> , użyj metody. Obie te metody blokują do momentu, gdy w kolejce będzie dostępne żądanie połączenia.  
  
 Użyj metody, aby zamknąć i zatrzymać nasłuchiwanie. <xref:System.Net.Sockets.TcpListener> <xref:System.Net.Sockets.TcpListener.Stop%2A> Użytkownik jest odpowiedzialny za zamknięcie zaakceptowanych połączeń oddzielnie.  
  
> [!NOTE]
>  Użyj właściwości, aby uzyskać określony kod błędu i zapoznaj się z dokumentacją dotyczącą [kodu błędu interfejsu API Windows Sockets w wersji 2](/windows/desktop/winsock/windows-sockets-error-codes-2) , aby uzyskać szczegółowy opis błędu. <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak <xref:System.Net.Sockets.TcpListener.Start%2A> używać do nasłuchiwania przychodzących prób połączeń klienta.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas uzyskiwania dostępu do gniazda.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="backlog" /> Parametr jest mniejszy od zera lub przekracza maksymalną liczbę dozwolonych połączeń.</exception>
        <exception cref="T:System.InvalidOperationException">Bazowy <see cref="T:System.Net.Sockets.Socket" /> ma wartość null.</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="tcpListener.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka odbiornik.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.Stop%2A>zamyka odbiornik. Wszystkie nieakceptowane żądania połączenia w kolejce zostaną utracone. Hosty zdalne oczekujące na zaakceptowanie połączenia spowodują zgłoszenie <xref:System.Net.Sockets.SocketException>. Użytkownik jest odpowiedzialny za zamknięcie zaakceptowanych połączeń oddzielnie.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie metody, <xref:System.Net.Sockets.TcpListener.Stop%2A> aby zamknąć bazowe. <xref:System.Net.Sockets.Socket>  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> Użyj właściwości, aby uzyskać określony kod błędu. Po uzyskaniu tego kodu można odwołać się do dokumentacji <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">kodu błędu interfejsu API Windows Sockets w wersji 2</see> , aby uzyskać szczegółowy opis błędu.</exception>
        <block subset="none" type="usage"><para>Metoda również zamyka podstawową <see cref="T:System.Net.Sockets.Socket" /> <see cref="T:System.Net.Sockets.Socket" /> i<see cref="T:System.Net.Sockets.TcpListener" />tworzynowądla. <see cref="M:System.Net.Sockets.TcpListener.Stop" /> Jeśli <see cref="T:System.Net.Sockets.Socket" /> przed <see cref="T:System.Net.Sockets.Socket" />wywołaniem metody ustawisz właściwości, te właściwości nie będą przenoszone do nowego. <see cref="M:System.Net.Sockets.TcpListener.Stop" /></para></block>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
  </Members>
</Type>
